<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Swagger简介与使用</title>
    <link href="/2020/08/02/swagger/"/>
    <url>/2020/08/02/swagger/</url>
    
    <content type="html"><![CDATA[<p>背景：前后端分离时代的来临  Vue+Springboot</p><p>后端时代：前端至负责管理静态页面；html==&gt;后端。模板引擎jsp=&gt;后端是主力</p><p>前后端分离时代：<a id="more"></a></p><ul><li>后端：后端控制层，服务层，数据访问层</li><li>前端：前端控制层，视图层<ul><li>伪造后端数据，json。不需要后端，前端工程依然能够跑起来</li></ul></li><li>前后端交互：API</li><li>前后端相互独立，松耦合</li><li>前后端甚至可以分布在不同的服务器上</li></ul><p>产生的一个问题：</p><ul><li>前后端集成联调，前后端人员无法做到“及时协商，尽早解决”，最终导致问题爆发。</li></ul><p>解决方案：</p><ul><li>首先指定schema，实时更新最新的API，降低集成的风险</li><li>早些年：<ul><li>指定word计划文档；</li><li>前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息及改动</li></ul></li><li>Swagger产生 ！</li></ul><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><ul><li>号称世界上最流行的API框架</li><li>ReatFul API 文档在线自动生成工具=&gt;API文档与API自动更新</li><li>直接运行，可以在线测试API接口</li><li>支持多种语言</li></ul><h2 id="Springboot集成Swagger"><a href="#Springboot集成Swagger" class="headerlink" title="Springboot集成Swagger"></a>Springboot集成Swagger</h2><p>1、创建springboot项目并导入web依赖</p><p>2、导入相关依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>3、编写一个hellworld</p><p>4、编写Swagger配置类</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger</span>2  <span class="hljs-comment">// 开启Swagger2</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;&#125;</code></pre><p>5、测试访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br><img src="/2020/08/02/swagger/1.png" srcset="/img/loading.gif" alt></p><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><p>Swagger的bean实例 Docket</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger</span>2  <span class="hljs-comment">// 开启Swagger2</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;    <span class="hljs-comment">// 配置Swagger的Docket的bean实例</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket( <span class="hljs-keyword">new</span> DocumentationType(<span class="hljs-string">"swagger"</span>, <span class="hljs-string">"2.0"</span>))                .apiInfo(apiInfo());    &#125;    <span class="hljs-comment">// 配置Swagger的apiInfo</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span></span>&#123;        Contact contact = <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"sweetboyZhang"</span>, <span class="hljs-string">"https://sweetboyZhang.github.io"</span>, <span class="hljs-string">"2824199842@qq.com"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfo(                <span class="hljs-string">"My Swagger API 文档"</span>,                <span class="hljs-string">"这是一个Swagger测试"</span>,                <span class="hljs-string">"1.0"</span>,                <span class="hljs-string">"https://sweetboyZhang.github.io"</span>,                contact,                <span class="hljs-string">"Apache 2.0"</span>,                <span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,                <span class="hljs-keyword">new</span> ArrayList&lt;VendorExtension&gt;());    &#125;    &#125;</code></pre><h2 id="配置Swagger扫描路径"><a href="#配置Swagger扫描路径" class="headerlink" title="配置Swagger扫描路径"></a>配置Swagger扫描路径</h2><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket( <span class="hljs-keyword">new</span> DocumentationType(<span class="hljs-string">"swagger"</span>, <span class="hljs-string">"2.0"</span>))            .apiInfo(apiInfo())            .select()            <span class="hljs-comment">// RequestHandlerSelectors配置要扫描接口的方式</span>            <span class="hljs-comment">// basePackage 指定要扫描的包</span>            <span class="hljs-comment">// any() 扫描全部</span>            <span class="hljs-comment">// none() 不扫描</span>            <span class="hljs-comment">// withClassAnnotation(xxx.class)扫描类上的注解</span>            <span class="hljs-comment">// withMethodAnnotation(xxx.class)扫描方法上的注解</span>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"com.zyz.controller"</span>))            <span class="hljs-comment">// .paths 过滤路径</span>            .build();&#125;</code></pre><h2 id="根据环境是否开启Swagger"><a href="#根据环境是否开启Swagger" class="headerlink" title="根据环境是否开启Swagger"></a>根据环境是否开启Swagger</h2><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">(Environment environment)</span></span>&#123;    <span class="hljs-comment">// 设置要显示的Swagger环境</span>    Profiles profiles = Profiles.of(<span class="hljs-string">"dev"</span>);    <span class="hljs-comment">// 获取项目环境</span>    <span class="hljs-keyword">boolean</span> flag = environment.acceptsProfiles(profiles);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket( <span class="hljs-keyword">new</span> DocumentationType(<span class="hljs-string">"swagger"</span>, <span class="hljs-string">"2.0"</span>))            .apiInfo(apiInfo())            .enable(flag)<span class="hljs-comment">// 设置是否启动Swagger</span>            .select()            <span class="hljs-comment">// RequestHandlerSelectors配置要扫描接口的方式</span>            <span class="hljs-comment">// basePackage 指定要扫描的包</span>            <span class="hljs-comment">// any() 扫描全部</span>            <span class="hljs-comment">// none() 不扫描</span>            <span class="hljs-comment">// withClassAnnotation(xxx.class)扫描类上的注解</span>            <span class="hljs-comment">// withMethodAnnotation(xxx.class)扫描方法上的注解</span>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"com.zyz.controller"</span>))            <span class="hljs-comment">// .paths 过滤路径</span>            .build();&#125;</code></pre><p>application-dev.properties</p><pre><code class="hljs properties"><span class="hljs-comment"># 生产环境</span><span class="hljs-meta">server.port</span>=<span class="hljs-string">8080</span></code></pre><p>application-pro.properties</p><pre><code class="hljs properties"><span class="hljs-comment"># 上线环境</span><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span></code></pre><p>application.properties</p><pre><code class="hljs properties"><span class="hljs-comment"># 激活生产环境</span><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span></code></pre><h2 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h2><p>方便多人协同开发</p><pre><code class="hljs java">.groupName(<span class="hljs-string">"zyz"</span>)</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket1</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">"A"</span>);&#125;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">"B"</span>);&#125;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket3</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">"C"</span>);&#125;</code></pre><h2 id="配置实体类"><a href="#配置实体类" class="headerlink" title="配置实体类"></a>配置实体类</h2><pre><code class="hljs java"><span class="hljs-comment">// 只要接口中的返回值有实体类，Swagger就会扫描到</span><span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"user控制方法"</span>)<span class="hljs-comment">// 方法注释</span><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/user"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">(@ApiParam(<span class="hljs-string">"用户名"</span>)</span>String name,@<span class="hljs-title">ApiParam</span><span class="hljs-params">(<span class="hljs-string">"密码"</span>)</span> String password)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(name,password);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@ApiModel</span>(<span class="hljs-string">"用户实体类"</span>)<span class="hljs-comment">// 注释</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@ApiModelProperty</span>(<span class="hljs-string">"用户名"</span>)    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@ApiModelProperty</span>(<span class="hljs-string">"密码"</span>)    <span class="hljs-keyword">private</span> String password;&#125;</code></pre><p><img src="/2020/08/02/swagger/2.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM篇</title>
    <link href="/2020/08/01/interview-04/"/>
    <url>/2020/08/01/interview-04/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Spring的IOC和AOP机制"><a href="#1、Spring的IOC和AOP机制" class="headerlink" title="1、Spring的IOC和AOP机制?"></a>1、Spring的IOC和AOP机制?</h2><p>IOC，控制反转是Spring的核心，AOP，面向切面编程是Spring的组要组成部分。<br>IOC就是典型的工厂模式，通过sessionfactory去注入实例。<br>AOP就是典型的代理模式。<a id="more"></a></p><p>代理模式是常见的java设计模式，特征是代理类与委托类有相同的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及时候处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。</p><p><strong>IOC</strong><br>在传统的程序设计中，当调用者需要被调用者协助的时候，通常由调用者创建被调用者的实例对象。但在spring里创建被调用者的工作不在由调用者来完成，而是交给了spring容器，这就叫控制反转。spring容器创建对象后，注入调用者，因此也被称为依赖注入。控制反转与依赖注入是同一个概念。<br><strong>IOC初始化过程</strong><br>spring容器启动时，会初始化配置文件中的bean，然后在你需要调用的时候，将初始化的bean注入到指定的类（调用相应的setter方法），不需要你再new这些对象了<br><img src="/2020/08/01/interview-04/1.png" srcset="/img/loading.gif" alt></p><p><strong>AOP</strong></p><p>AOP是以另一个角度来考虑程序结构，通过分析程序的结构关注点来完善OOP。OOP将应用程序分解成各个层次的对象，而AOP将程序分解成多个切面。OOP引入继承，封装和多态等概念来建立一种对象层次结构，用来模拟公共行为的一个集合。当我们需要为分散的对象引入公共的行为时，OOP显得不合适了。也就是说OOP允许你定义从上到下的关系，而不适合从左到右的关系。<br>例如日志功能，日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系，在OOP的设计中，导致了大量的重复代码，而不利于各个模块之间的重用。<br>AOP则将程序中的交叉业务逻辑（如安全，事务，日志等），封装成一个切面，然后注入到目标对象中去。</p><h2 id="2、Spring中Autowired和Resource关键字的区别"><a href="#2、Spring中Autowired和Resource关键字的区别" class="headerlink" title="2、Spring中Autowired和Resource关键字的区别"></a>2、Spring中Autowired和Resource关键字的区别</h2><p>@Resource不是spring中的注解，但是spring提供了对它的支持。<br><strong>共同点</strong><br>都可以写在字段和setter方法上，写在字段上就不需要再写setter方法了</p><p><strong>不同点</strong><br>@Autowired<br>默认按照byType方式装配依赖对象。结合@Qualifier注解可以按照byName方式装配依赖对象</p><p>@Resource<br>默认按照byName方式自动注入(设置name属性值，不指定则按照反射机制使用byName注入)，通过指定type属性可按照byType方式注入。</p><h2 id="3、依赖注入的方式有哪几种？"><a href="#3、依赖注入的方式有哪几种？" class="headerlink" title="3、依赖注入的方式有哪几种？"></a>3、依赖注入的方式有哪几种？</h2><p><strong>1、构造器注入</strong></p><p><strong>2、setter方法注入</strong></p><p><strong>3、接口注入</strong></p><h2 id="4、讲一下什么是Spring"><a href="#4、讲一下什么是Spring" class="headerlink" title="4、讲一下什么是Spring"></a>4、讲一下什么是Spring</h2><p>Spring是一个轻量级的IOC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是用<br>于简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于XML的<br>配置、基于注解的配置、基于Java的配置(使用@Config注解创建配置类)。<br>主要由以下几个模块组成：<br>Spring Core：核心类库，提供IOC服务；<br>Spring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；<br>Spring AOP：AOP服务；<br>Spring DAO：对JDBC的抽象，简化了数据访问异常的处理；<br>Spring ORM：对现有的ORM框架的支持；<br>Spring Web：提供了基本的面向Web的综合特性，例如多方文件上传；<br>Spring MVC：提供面向Web应用的Model-View-Controller实现。</p><h2 id="5、SpringMVC流程"><a href="#5、SpringMVC流程" class="headerlink" title="5、SpringMVC流程"></a>5、SpringMVC流程</h2><p><img src="/2020/08/01/interview-04/2.png" srcset="/img/loading.gif" alt></p><h2 id="6、SpringMVC常用注解有哪些？"><a href="#6、SpringMVC常用注解有哪些？" class="headerlink" title="6、SpringMVC常用注解有哪些？"></a>6、SpringMVC常用注解有哪些？</h2><p>@RequestMapping：用于处理请求url映射的注解，可用于类或方法上。用在类上，表示类中所有响应请求的方法都是以该地址作为父路径。</p><p>@RequestBody：注解实现接收http请求的json数据，将json数据转换为java对象</p><p>@ResponseBody：注解实现将controller方法中返回的对象转换为json对象响应给客户端</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot整合shiro</title>
    <link href="/2020/07/30/shiro-02/"/>
    <url>/2020/07/30/shiro-02/</url>
    
    <content type="html"><![CDATA[<p>Shiro三大对象：</p><ul><li>Subject：当前对象</li><li>SecurityManager：管理所有对象</li><li>Realm：连接数据 <a id="more"></a></li></ul><h2 id="1、创建springboot项目"><a href="#1、创建springboot项目" class="headerlink" title="1、创建springboot项目"></a>1、创建springboot项目</h2><h2 id="2、导入依赖"><a href="#2、导入依赖" class="headerlink" title="2、导入依赖"></a>2、导入依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="3、编写Controller实现页面的跳转"><a href="#3、编写Controller实现页面的跳转" class="headerlink" title="3、编写Controller实现页面的跳转"></a>3、编写Controller实现页面的跳转</h2><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(&#123;<span class="hljs-string">"/"</span>, <span class="hljs-string">"/index"</span>&#125;)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toIndex</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"hello,shiro!"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user/add"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"/user/add"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user/update"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"/user/update"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/toLogin"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLogin</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"/login"</span>;    &#125;&#125;</code></pre><h2 id="4、创建config目录，并添加ShiroConfig类，UserRealm类"><a href="#4、创建config目录，并添加ShiroConfig类，UserRealm类" class="headerlink" title="4、创建config目录，并添加ShiroConfig类，UserRealm类"></a>4、创建config目录，并添加ShiroConfig类，UserRealm类</h2><p>UserRealm类作为自定义授权对象，需要继承AuthrozingRealm类</p><pre><code class="hljs java"><span class="hljs-comment">// 自定义授权对象  需要继承AuthorizingRealm</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;    <span class="hljs-comment">// 授权</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;        System.out.println(<span class="hljs-string">"授权doGetAuthorizationInfo"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-comment">// 认证</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;        System.out.println(<span class="hljs-string">"认证doGetAuthenticationInfo"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h2 id="5、在ShiroConfig类中实现登录拦截"><a href="#5、在ShiroConfig类中实现登录拦截" class="headerlink" title="5、在ShiroConfig类中实现登录拦截"></a>5、在ShiroConfig类中实现登录拦截</h2><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;    <span class="hljs-comment">// ShiroFilterFactoryBean</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">getShiroFilterFactoryBean</span><span class="hljs-params">(@Qualifier(<span class="hljs-string">"securityManager"</span>)</span> DefaultWebSecurityManager securityManager)</span>&#123;        ShiroFilterFactoryBean bean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();        <span class="hljs-comment">// 关联 securityManager,设置安全管理器</span>        bean.setSecurityManager(securityManager);        <span class="hljs-comment">// 添加shrio的内置过滤器</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        anon  无需认证</span><span class="hljs-comment">        authc  必须认证才能访问</span><span class="hljs-comment">        user   必须拥有记住我功能才能用</span><span class="hljs-comment">        perms  拥有对某个资源的访问权限才能访问</span><span class="hljs-comment">        role   拥有某个角色权限才能访问</span><span class="hljs-comment">         */</span>        Map&lt;String, String&gt; filterMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<span class="hljs-comment">// 过滤器链使用有序的LinkedHashMap比较合适</span>       <span class="hljs-comment">/* filterMap.put("/user/add","authc");</span><span class="hljs-comment">        filterMap.put("/user/update","authc");*/</span>        filterMap.put(<span class="hljs-string">"/user/*"</span>,<span class="hljs-string">"authc"</span>);        bean.setFilterChainDefinitionMap(filterMap);        <span class="hljs-comment">// 权限不够自动跳转到登录页面</span>        bean.setLoginUrl(<span class="hljs-string">"/toLogin"</span>);        <span class="hljs-keyword">return</span> bean;    &#125;    <span class="hljs-comment">// DefaultWebSecurityManager</span>    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"securityManager"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title">getDefaultwebSecurityManager</span><span class="hljs-params">(@Qualifier(<span class="hljs-string">"userRealm"</span>)</span> UserRealm userRealm)</span>&#123;<span class="hljs-comment">// @Qualifier通过byName注入name默认为方法名</span>        DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();        <span class="hljs-comment">// 关联UserRealm</span>        securityManager.setRealm(userRealm);        <span class="hljs-keyword">return</span> securityManager;    &#125;    <span class="hljs-comment">// 创建 realm 对象</span>    <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">// @Bean将对象交给Spring管理</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserRealm <span class="hljs-title">userRealm</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserRealm();    &#125;&#125;</code></pre><h2 id="6、登录认证"><a href="#6、登录认证" class="headerlink" title="6、登录认证"></a>6、登录认证</h2><p>在MyController中添加login方法</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username,String password,Model model)</span></span>&#123;    <span class="hljs-comment">// 获取当前用户</span>    Subject subject = SecurityUtils.getSubject();    <span class="hljs-comment">// 封装用户登录信息</span>    UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(username, password);    <span class="hljs-keyword">try</span> &#123;        subject.login(token);<span class="hljs-comment">// 执行登录方法</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<span class="hljs-comment">// 登录成功，返回首页</span>    &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<span class="hljs-comment">// 用户名不存在</span>       model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名不存在"</span>);       <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e)&#123;        model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"密码错误"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    &#125;&#125;</code></pre><p>在UserRealm类中的认证方法中验证用户名和密码</p><pre><code class="hljs java"><span class="hljs-comment">// 认证</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;    System.out.println(<span class="hljs-string">"认证doGetAuthenticationInfo"</span>);    <span class="hljs-comment">// 验证用户名 密码 （实际应该从数据库中获取）</span>    String name = <span class="hljs-string">"zyz"</span>;    String password = <span class="hljs-string">"123456"</span>;    UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;    <span class="hljs-comment">// 用户名验证</span>    <span class="hljs-keyword">if</span>(!token.getUsername().equals(name))&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 自动抛出UnknownAccountException</span>    &#125;    <span class="hljs-comment">// 密码认证，shiro内部实现</span>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(<span class="hljs-string">""</span>,password,<span class="hljs-string">""</span>);&#125;</code></pre><h2 id="7、整合Mybatis实现认证和授权"><a href="#7、整合Mybatis实现认证和授权" class="headerlink" title="7、整合Mybatis实现认证和授权"></a>7、整合Mybatis实现认证和授权</h2><p>前提：<br>将springboot整合mybatis的环境搭建好，创建User实体类；创建UserMapper接口，并添加<br>queryUserByName(String name)方法，添加sql映射；创建UserService接口及其实现类UserServiceImpl。</p><p>ShiroConfig.java</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">getShiroFilterFactoryBean</span><span class="hljs-params">(@Qualifier(<span class="hljs-string">"securityManager"</span>)</span> DefaultWebSecurityManager securityManager)</span>&#123;        ShiroFilterFactoryBean bean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();        <span class="hljs-comment">// 关联 securityManager,设置安全管理器</span>        bean.setSecurityManager(securityManager);        <span class="hljs-comment">// 拦截</span>        Map&lt;String, String&gt; filterMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();        <span class="hljs-comment">// 授权</span>        filterMap.put(<span class="hljs-string">"/user/add"</span>,<span class="hljs-string">"perms[user:add]"</span>);        filterMap.put(<span class="hljs-string">"/user/update"</span>,<span class="hljs-string">"perms[user:update]"</span>);        filterMap.put(<span class="hljs-string">"/user/*"</span>,<span class="hljs-string">"authc"</span>);        bean.setFilterChainDefinitionMap(filterMap);        <span class="hljs-comment">// 权限不够自动跳转到登录页面</span>        bean.setLoginUrl(<span class="hljs-string">"/toLogin"</span>);        <span class="hljs-comment">// 未授权页面</span>        bean.setUnauthorizedUrl(<span class="hljs-string">"/noauth"</span>);        <span class="hljs-keyword">return</span> bean;    &#125;    <span class="hljs-comment">// DefaultWebSecurityManager</span>    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"securityManager"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title">getDefaultwebSecurityManager</span><span class="hljs-params">(@Qualifier(<span class="hljs-string">"userRealm"</span>)</span> UserRealm userRealm)</span>&#123;<span class="hljs-comment">// @Qualifier通过byName注入name默认为方法名</span>        DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();        <span class="hljs-comment">// 关联UserRealm</span>        securityManager.setRealm(userRealm);        <span class="hljs-keyword">return</span> securityManager;    &#125;    <span class="hljs-comment">// 创建 realm 对象</span>    <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">// @Bean将对象交给Spring管理</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserRealm <span class="hljs-title">userRealm</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserRealm();    &#125;&#125;</code></pre><p>UserRealm.java</p><pre><code class="hljs java"><span class="hljs-comment">// 自定义授权对象  需要继承AuthorizingRealm</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-comment">// 授权</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;        System.out.println(<span class="hljs-string">"授权doGetAuthorizationInfo"</span>);        SimpleAuthorizationInfo info = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();        <span class="hljs-comment">// 获取当前对象</span>        Subject subject = SecurityUtils.getSubject();        User currentUser = (User) subject.getPrincipal();        <span class="hljs-comment">// 从数据库中获取权限，设置权限</span>        info.addStringPermission(currentUser.getPerms());        <span class="hljs-keyword">return</span> info;    &#125;    <span class="hljs-comment">// 认证</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;        System.out.println(<span class="hljs-string">"认证doGetAuthenticationInfo"</span>);        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;        User user = userService.queryUserByName(token.getUsername());        <span class="hljs-comment">// 用户名验证</span>        <span class="hljs-keyword">if</span>(user==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 自动抛出UnknownAccountException</span>        &#125;          <span class="hljs-comment">// 可将user对象存放至session域中</span>        <span class="hljs-comment">/*Subject subject = SecurityUtils.getSubject();</span><span class="hljs-comment">        Session session = subject.getSession();</span><span class="hljs-comment">        session.setAttribute("user",user);</span><span class="hljs-comment">        System.out.println(user);*/</span>        <span class="hljs-comment">// 密码认证，shiro内部实现</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="hljs-string">""</span>);    &#125;&#125;</code></pre><p>MyController.java</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/noauth"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">unauthorized</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"未授权"</span>;&#125;<span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user/logout"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">()</span></span>&#123;    Subject subject = SecurityUtils.getSubject();    subject.logout();    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;&#125;</code></pre><h2 id="8、整合thymeleaf根据权限显示组件"><a href="#8、整合thymeleaf根据权限显示组件" class="headerlink" title="8、整合thymeleaf根据权限显示组件"></a>8、整合thymeleaf根据权限显示组件</h2><p>1、导入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>2、在ShiroConfig.java中添加配置</p><pre><code class="hljs java"><span class="hljs-comment">// 整合ShiroDialect:用来整合shiro和thymeleaf</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ShiroDialect <span class="hljs-title">getShiroDialect</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ShiroDialect();&#125;</code></pre><p>3、在页面中添加名称空间</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:shiro</span>=<span class="hljs-string">"http://www.thymeleaf.org/thymeleaf-extras-shiro"</span>&gt;</span></code></pre><p>4、修改页面</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:shiro</span>=<span class="hljs-string">"http://www.thymeleaf.org/thymeleaf-extras-shiro"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">shiro:notAuthenticated</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;toLogin&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"登录"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">shiro:principal</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">shiro:authenticated</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;user/logout&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"注销"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;msg&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">"user:add"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;user/add&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"添加"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">"user:update"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;user/update&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"修改"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro快速开始</title>
    <link href="/2020/07/30/shiro-01/"/>
    <url>/2020/07/30/shiro-01/</url>
    
    <content type="html"><![CDATA[<p>Apach Shiro 是一个java安全框架，能够实现身份认证，授权，加密和会话管理等功能。<a id="more"></a></p><h2 id="1、先创建一个maven工程"><a href="#1、先创建一个maven工程" class="headerlink" title="1、先创建一个maven工程"></a>1、先创建一个maven工程</h2><h2 id="2、导入依赖"><a href="#2、导入依赖" class="headerlink" title="2、导入依赖"></a>2、导入依赖</h2><pre><code class="hljs xml-dtd">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;shiro-core&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.4.1&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;        &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;jcl-over-slf4j&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.7.21&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.7.21&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.2.17&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;</code></pre><h2 id="3、添加配置文件"><a href="#3、添加配置文件" class="headerlink" title="3、添加配置文件"></a>3、添加配置文件</h2><p>log4j.properties</p><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">INFO, stdout</span><span class="hljs-meta">log4j.appender.stdout</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.stdout.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] - %m %n</span><span class="hljs-comment"># General Apache libraries</span><span class="hljs-meta">log4j.logger.org.apache</span>=<span class="hljs-string">WARN</span><span class="hljs-comment"># Spring</span><span class="hljs-meta">log4j.logger.org.springframework</span>=<span class="hljs-string">WARN</span><span class="hljs-comment"># Default Shiro logging</span><span class="hljs-meta">log4j.logger.org.apache.shiro</span>=<span class="hljs-string">INFO</span><span class="hljs-comment"># Disable verbose logging</span><span class="hljs-meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="hljs-string">WARN</span><span class="hljs-meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="hljs-string">WARN</span></code></pre><p>shiro.ini</p><pre><code class="hljs ini"><span class="hljs-section">[users]</span><span class="hljs-attr">root</span> = secret, admin<span class="hljs-attr">guest</span> = guest, guest<span class="hljs-attr">presidentskroob</span> = <span class="hljs-number">12345</span>, president<span class="hljs-attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz<span class="hljs-attr">lonestarr</span> = vespa, goodguy, schwartz<span class="hljs-comment"># -----------------------------------------------------------------------------</span><span class="hljs-comment"># Roles with assigned permissions</span><span class="hljs-comment"># roleName = perm1, perm2, ..., permN</span><span class="hljs-comment"># -----------------------------------------------------------------------------</span><span class="hljs-section">[roles]</span><span class="hljs-attr">admin</span> = *<span class="hljs-attr">schwartz</span> = lightsaber:*<span class="hljs-attr">goodguy</span> = winnebago:drive:eagle5</code></pre><h2 id="4、编写QuickStart-java"><a href="#4、编写QuickStart-java" class="headerlink" title="4、编写QuickStart.java"></a>4、编写QuickStart.java</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickStart</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> Logger log = LoggerFactory.getLogger(QuickStart<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        log.info(<span class="hljs-string">"My First Apache Shiro Application"</span>);        Factory&lt;SecurityManager&gt; factory = <span class="hljs-keyword">new</span> IniSecurityManagerFactory(<span class="hljs-string">"classpath:shiro.ini"</span>);        SecurityManager securityManager = factory.getInstance();        SecurityUtils.setSecurityManager(securityManager);        <span class="hljs-comment">// 获取当前的用户对象</span>        Subject currentUser = SecurityUtils.getSubject();        <span class="hljs-comment">// 通过当前用户获取session</span>        Session session = currentUser.getSession();        session.setAttribute(<span class="hljs-string">"someKey"</span>, <span class="hljs-string">"aValue"</span>);        String value = (String) session.getAttribute(<span class="hljs-string">"someKey"</span>);        <span class="hljs-keyword">if</span> (value.equals(<span class="hljs-string">"aValue"</span>)) &#123;            log.info(<span class="hljs-string">"Retrieved the correct value! ["</span> + value + <span class="hljs-string">"]"</span>);        &#125;        <span class="hljs-comment">// 判断当前用户是否被认证</span>        <span class="hljs-keyword">if</span> (!currentUser.isAuthenticated()) &#123;            <span class="hljs-comment">// 通过用户名和密码生成token令牌</span>            UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">"lonestarr"</span>, <span class="hljs-string">"vespa"</span>);            token.setRememberMe(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 设置记住我</span>            <span class="hljs-keyword">try</span> &#123;                currentUser.login(token);<span class="hljs-comment">// 执行了登录操作</span>            &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException uae) &#123;<span class="hljs-comment">// 用户名错误</span>                log.info(<span class="hljs-string">"There is no user with username of "</span> + token.getPrincipal());            &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException ice) &#123;<span class="hljs-comment">// 密码错误</span>                log.info(<span class="hljs-string">"Password for account "</span> + token.getPrincipal() + <span class="hljs-string">" was incorrect!"</span>);            &#125; <span class="hljs-keyword">catch</span> (LockedAccountException lae) &#123;<span class="hljs-comment">// 用户被锁定</span>                log.info(<span class="hljs-string">"The account for username "</span> + token.getPrincipal() + <span class="hljs-string">" is locked.  "</span> +                        <span class="hljs-string">"Please contact your administrator to unlock it."</span>);            &#125;            <span class="hljs-keyword">catch</span> (AuthenticationException ae) &#123;<span class="hljs-comment">// 认证异常</span>                <span class="hljs-comment">//unexpected condition?  error?</span>            &#125;        &#125;        <span class="hljs-comment">// 获取当前认证用户的信息 currentUser.getPrincipal()</span>        log.info(<span class="hljs-string">"User ["</span> + currentUser.getPrincipal() + <span class="hljs-string">"] logged in successfully."</span>);        <span class="hljs-comment">// 判断当前用户的角色（权限大小），从小到大判断</span>        <span class="hljs-keyword">if</span> (currentUser.hasRole(<span class="hljs-string">"schwartz"</span>)) &#123;            log.info(<span class="hljs-string">"May the Schwartz be with you!"</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            log.info(<span class="hljs-string">"Hello, mere mortal."</span>);        &#125;        <span class="hljs-comment">//test a typed permission (not instance-level)</span>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">"lightsaber:wield"</span>)) &#123;            log.info(<span class="hljs-string">"You may use a lightsaber ring.  Use it wisely."</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            log.info(<span class="hljs-string">"Sorry, lightsaber rings are for schwartz masters only."</span>);        &#125;        <span class="hljs-comment">//a (very powerful) Instance Level permission:</span>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">"winnebago:drive:eagle5"</span>)) &#123;            log.info(<span class="hljs-string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span> +                    <span class="hljs-string">"Here are the keys - have fun!"</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            log.info(<span class="hljs-string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span>);        &#125;        <span class="hljs-comment">//注销</span>        currentUser.logout();        <span class="hljs-comment">// 结束</span>        System.exit(<span class="hljs-number">0</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2020/07/28/springboot-06/"/>
    <url>/2020/07/28/springboot-06/</url>
    
    <content type="html"><![CDATA[<p>SpringSecurity是一个针对于Spring项目的安全框架，侧重于为Spring项目提供身份验证和授权。<a id="more"></a></p><p>将我们之前使用拦截器，过滤器进行权限检查，和身份验证的操作进行了简化，并提供了一套 Web 应用安全性的完整解决方案。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1、创建springboot工程，并导入相应的依赖"><a href="#1、创建springboot工程，并导入相应的依赖" class="headerlink" title="1、创建springboot工程，并导入相应的依赖"></a>1、创建springboot工程，并导入相应的依赖</h3><p><img src="/2020/07/28/springboot-06/1.png" srcset="/img/loading.gif" alt></p><h3 id="2、导入静态工程"><a href="#2、导入静态工程" class="headerlink" title="2、导入静态工程"></a>2、导入静态工程</h3><p><img src="/2020/07/28/springboot-06/2.png" srcset="/img/loading.gif" alt></p><p>关闭thymeleaf缓存：</p><pre><code class="hljs properties"><span class="hljs-comment"># 关闭thymeleaf缓存</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span></code></pre><h3 id="3、编写RouterController实现页面跳转"><a href="#3、编写RouterController实现页面跳转" class="headerlink" title="3、编写RouterController实现页面跳转"></a>3、编写RouterController实现页面跳转</h3><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RouterController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(&#123;<span class="hljs-string">"/"</span>,<span class="hljs-string">"/index"</span>&#125;)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toIndex</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/toLogin"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLogin</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"views/login"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/level1/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLevel1</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span><span class="hljs-keyword">int</span> id)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"views/level1/"</span>+id;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/level2/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLevel2</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span><span class="hljs-keyword">int</span> id)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"views/level2/"</span>+id;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/level3/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLevel3</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span><span class="hljs-keyword">int</span> id)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"views/level3/"</span>+id;    &#125;&#125;</code></pre><h2 id="SpringSecurity使用"><a href="#SpringSecurity使用" class="headerlink" title="SpringSecurity使用"></a>SpringSecurity使用</h2><p>仅需引入spring-boot-starter-security模块，进行少量的配置，便可以实现强大的安全管理。</p><ul><li>WebSecurityConfigureAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>SpringScurity的两个主要目标就是<strong>认证</strong>和<strong>授权</strong>。</p><h3 id="1、引入SpringSecurity模块"><a href="#1、引入SpringSecurity模块" class="headerlink" title="1、引入SpringSecurity模块"></a>1、引入SpringSecurity模块</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、创建config目录，添加SecurityConfig类"><a href="#2、创建config目录，添加SecurityConfig类" class="headerlink" title="2、创建config目录，添加SecurityConfig类"></a>2、创建config目录，添加SecurityConfig类</h3><pre><code class="hljs java"><span class="hljs-comment">// 基于AOP</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-comment">// 请求授权的规则</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 首页所有人都可以访问 功能页需要权限</span>        <span class="hljs-comment">// 链式编程</span>        http.authorizeRequests()                .antMatchers(<span class="hljs-string">"/"</span>).permitAll()                .antMatchers(<span class="hljs-string">"/level1/**"</span>).hasRole(<span class="hljs-string">"vip1"</span>)                .antMatchers(<span class="hljs-string">"/level2/**"</span>).hasRole(<span class="hljs-string">"vip2"</span>)                .antMatchers(<span class="hljs-string">"/level3/**"</span>).hasRole(<span class="hljs-string">"vip3"</span>);        <span class="hljs-comment">// 没有权限默认跳转到登录页面  默认登录页面是框架提供的</span>        http.formLogin().loginPage(<span class="hljs-string">"/toLogin"</span>).usernameParameter(<span class="hljs-string">"username"</span>).passwordParameter(<span class="hljs-string">"password"</span>);        http.csrf().disable();<span class="hljs-comment">// 关闭防跨站脚本攻击，允许get方式跳转</span>        <span class="hljs-comment">// 注销  开启注销功能  注销成功后跳转到首页</span>        http.logout().logoutSuccessUrl(<span class="hljs-string">"/"</span>);        <span class="hljs-comment">// 开启记住我功能 保存登录信息到cookie 默认有效期14天</span>        http.rememberMe().rememberMeParameter(<span class="hljs-string">"remember"</span>);    &#125;    <span class="hljs-comment">// 认证</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 实际开发中从数据库中读取数据</span>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> BCryptPasswordEncoder())                .withUser(<span class="hljs-string">"zyz"</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">"123456"</span>)).roles(<span class="hljs-string">"vip1"</span>,<span class="hljs-string">"vip2"</span>)                .and()                .withUser(<span class="hljs-string">"root"</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">"123456"</span>)).roles(<span class="hljs-string">"vip1"</span>,<span class="hljs-string">"vip2"</span>,<span class="hljs-string">"vip3"</span>)                .and()                .withUser(<span class="hljs-string">"guest"</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">"123456"</span>)).roles(<span class="hljs-string">"vip1"</span>);    &#125;&#125;</code></pre><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注销--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/logout&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sign-out icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>thymeleaf与springsecurity整合，使页面仅仅显示当前用户权限能够访问的页面，当前用户没有权限访问的页面则不显示。<br>需要导入thymeleaf与springsecurity的整合包</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>高版本的springboot不支持，需要降低版本</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre><p>在html页面添加命名空间</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span></code></pre><p>thymeleaf整合SpringSecurity</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--未登录--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"!isAuthenticated()"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/toLogin&#125;"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"address card icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--已登录--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"isAuthenticated()"</span>&gt;</span>    <span class="hljs-comment">&lt;!--显示用户名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"isAuthenticated()"</span>&gt;</span>    <span class="hljs-comment">&lt;!--注销--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/logout&#125;"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sign-out icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>注销    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>根据权限显示组件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"hasRole('vip1')"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>定制登录页面</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@&#123;/toLogin&#125;"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>添加”记住我“组件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"remember"</span>&gt;</span>记住我</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合MyBatis</title>
    <link href="/2020/07/26/springboot-05/"/>
    <url>/2020/07/26/springboot-05/</url>
    
    <content type="html"><![CDATA[<p>首先创建一个sprinboot项目，并引入web,jbdc,mysql驱动依赖。<a id="more"></a></p><h2 id="1、添加springboot整合myBatis的依赖"><a href="#1、添加springboot整合myBatis的依赖" class="headerlink" title="1、添加springboot整合myBatis的依赖"></a>1、添加springboot整合myBatis的依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="2、配置数据库连接信息"><a href="#2、配置数据库连接信息" class="headerlink" title="2、配置数据库连接信息"></a>2、配置数据库连接信息</h2><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">2824199842</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></code></pre><h2 id="3、测试是否能连接成功"><a href="#3、测试是否能连接成功" class="headerlink" title="3、测试是否能连接成功"></a>3、测试是否能连接成功</h2><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Springboot05MybatisApplicationTests</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    DataSource dataSource;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        Connection connection = dataSource.getConnection();        System.out.println(connection);    &#125;&#125;</code></pre><h2 id="4、创建实体类，导入lombok"><a href="#4、创建实体类，导入lombok" class="headerlink" title="4、创建实体类，导入lombok"></a>4、创建实体类，导入lombok</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>User.java</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zyz.bean;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;&#125;</code></pre><h2 id="5、创建mapper目录，以及对应的mapper接口"><a href="#5、创建mapper目录，以及对应的mapper接口" class="headerlink" title="5、创建mapper目录，以及对应的mapper接口"></a>5、创建mapper目录，以及对应的mapper接口</h2><p>UserMapper.java</p><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><span class="hljs-comment">// 表示这是一个mybatis的mapper类</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;     <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">listAllUser</span><span class="hljs-params">()</span></span>;     <span class="hljs-function">User <span class="hljs-title">queryUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;&#125;</code></pre><p>6、创建对应的sql映射文件UserMapper.xml<br><img src="/2020/07/26/springboot-05/1.png" srcset="/img/loading.gif" alt></p><p>在项目配置文件中添加mybatis配置</p><pre><code class="hljs yml"><span class="hljs-comment"># 整合mybatis</span><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.zyz.bean</span> <span class="hljs-comment"># 设置别名 默认为类名</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span> <span class="hljs-comment"># mapper文件位置</span></code></pre><p>UserMapper.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zyz.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listAllUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>        select * from user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryUserById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span>&gt;</span>        select * from user where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"User"</span>&gt;</span>        insert into user(name,pwd)values(#&#123;name&#125;,#&#123;password&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span>        delete from user where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"User"</span>&gt;</span>        update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h2 id="6、创建controller目录，添加UserController类"><a href="#6、创建controller目录，添加UserController类" class="headerlink" title="6、创建controller目录，添加UserController类"></a>6、创建controller目录，添加UserController类</h2><p>UserController.java</p><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/listAllUser"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> userMapper.listAllUser();    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/queryUserById/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">query</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>&#123;        <span class="hljs-keyword">return</span> userMapper.queryUserById(id);    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/addUser"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;        userMapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,<span class="hljs-string">"马老师"</span>,<span class="hljs-string">"123456"</span>));        <span class="hljs-keyword">return</span> <span class="hljs-string">"add success"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/deleteUser/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>&#123;        userMapper.deleteUser(id);        <span class="hljs-keyword">return</span> <span class="hljs-string">"delete success"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/updateUser"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;        userMapper. updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>,<span class="hljs-string">"qwer"</span>,<span class="hljs-string">"123456"</span>));        <span class="hljs-keyword">return</span> <span class="hljs-string">"update success"</span>;    &#125;&#125;</code></pre><p>到此为止，MyBatis整合完毕。</p>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合jdbc，Druid</title>
    <link href="/2020/07/25/springboot-04/"/>
    <url>/2020/07/25/springboot-04/</url>
    
    <content type="html"><![CDATA[<p>对于数据访问层，无论是SQL还是NOSQL，Springboot底层都是采用Spring Data的方式进行统一处理。<a id="more"></a></p><h2 id="整合jdbc"><a href="#整合jdbc" class="headerlink" title="整合jdbc"></a>整合jdbc</h2><h3 id="1、新建项目引入web模块和连接mysql必须的模块，JDBC-API，MySQL-Driver"><a href="#1、新建项目引入web模块和连接mysql必须的模块，JDBC-API，MySQL-Driver" class="headerlink" title="1、新建项目引入web模块和连接mysql必须的模块，JDBC API，MySQL Driver"></a>1、新建项目引入web模块和连接mysql必须的模块，JDBC API，MySQL Driver</h3><p><img src="/2020/07/25/springboot-04/1.png" srcset="/img/loading.gif" alt></p><h3 id="2、项目建立完成后，发现已经替我们导入响应的启动器"><a href="#2、项目建立完成后，发现已经替我们导入响应的启动器" class="headerlink" title="2、项目建立完成后，发现已经替我们导入响应的启动器"></a>2、项目建立完成后，发现已经替我们导入响应的启动器</h3><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--web--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--jdbc--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--mysql--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="3、编写yaml配置文件连接数据库"><a href="#3、编写yaml配置文件连接数据库" class="headerlink" title="3、编写yaml配置文件连接数据库"></a>3、编写yaml配置文件连接数据库</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">2824199842</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></code></pre><h3 id="在测试类中测试连接是否成功"><a href="#在测试类中测试连接是否成功" class="headerlink" title="在测试类中测试连接是否成功"></a>在测试类中测试连接是否成功</h3><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置</p><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Springboot04DataApplicationTests</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    DataSource dataSource;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        <span class="hljs-comment">// 查看默认数据源 据说是最快的数据库连接池 HikariDataSource</span>        System.out.println(dataSource.getClass());        <span class="hljs-comment">// 获取数据库连接</span>        Connection connection = dataSource.getConnection();        System.out.println(connection);        <span class="hljs-comment">// 关闭连接</span>        connection.close();    &#125;&#125;</code></pre><h3 id="5、编写一个Controller，注入-jdbcTemplate，编写测试方法进行访问测试；"><a href="#5、编写一个Controller，注入-jdbcTemplate，编写测试方法进行访问测试；" class="headerlink" title="5、编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；"></a>5、编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</h3><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <span class="hljs-comment">// 返回json对象给浏览器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCController</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * springboot对原生jdbc做了轻量级的封装</span><span class="hljs-comment">     * 并且通过JdbcTemplate类提供了对数据库的crud操作</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</span><span class="hljs-comment">     * update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；</span><span class="hljs-comment">     * batchUpdate方法用于执行批处理相关语句；</span><span class="hljs-comment">     * query方法及queryForXXX方法：用于执行查询相关语句；</span><span class="hljs-comment">     * call方法：用于执行存储过程、函数相关语句</span><span class="hljs-comment">      */</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;    <span class="hljs-comment">// 查询数据库中员工表的所有记录</span>    <span class="hljs-comment">// 没有实体类，从数据库查询到的数据怎么封装？ 使用万能的Map!</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"listAllUser"</span>)    <span class="hljs-keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; listAllUser()&#123;        <span class="hljs-comment">// 原生jdbc操作</span>        String sql = <span class="hljs-string">"select * from user"</span>;        List&lt;Map&lt;String, Object&gt;&gt; allUser = jdbcTemplate.queryForList(sql);        <span class="hljs-keyword">return</span> allUser;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/addUser"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>&#123;        String sql = <span class="hljs-string">"insert into user(name,pwd)value('wd1','123456')"</span>;        jdbcTemplate.update(sql);        <span class="hljs-keyword">return</span> <span class="hljs-string">"addOK"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/deleteUser/&#123;id&#125;"</span>) <span class="hljs-comment">//@PathVariable接收路径中占位符的值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUser</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>&#123;        String sql = <span class="hljs-string">"delete from user where id=?"</span>;        jdbcTemplate.update(sql,id);        <span class="hljs-keyword">return</span> <span class="hljs-string">"deleteOK"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/updateUser/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateUser</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>&#123;        String sql = <span class="hljs-string">"update user set name=?,pwd=? where id="</span>+id;        <span class="hljs-comment">// 封装</span>        Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">2</span>];        objects[<span class="hljs-number">0</span>]=<span class="hljs-string">"张伟"</span>;        objects[<span class="hljs-number">1</span>]=<span class="hljs-string">"666666"</span>;        jdbcTemplate.update(sql,objects);        <span class="hljs-keyword">return</span> <span class="hljs-string">"updateOK"</span>;    &#125;&#125;</code></pre><p>至此，使用原生的jdbc完成了基本的crud操作，因为springboot对jdbc进行了轻量级的封装，在使用上也并不是很繁琐。</p><h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><h3 id="1、添加Druid依赖"><a href="#1、添加Druid依赖" class="headerlink" title="1、添加Druid依赖"></a>1、添加Druid依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--druid--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、在配置文件中指定数据源"><a href="#2、在配置文件中指定数据源" class="headerlink" title="2、在配置文件中指定数据源"></a>2、在配置文件中指定数据源</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">2824199842</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment"># 自定义数据源</span></code></pre><h3 id="3、测试并查看数据源"><a href="#3、测试并查看数据源" class="headerlink" title="3、测试并查看数据源"></a>3、测试并查看数据源</h3><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Springboot04DataApplicationTests</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    DataSource dataSource;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;        System.out.println(dataSource.getClass());<span class="hljs-comment">//class com.alibaba.druid.pool.DruidDataSource</span>        <span class="hljs-comment">// 获取数据库连接</span>        Connection connection = dataSource.getConnection();        System.out.println(connection);        <span class="hljs-comment">// 关闭连接</span>        connection.close();    &#125;&#125;</code></pre><h3 id="4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项"><a href="#4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项" class="headerlink" title="4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项"></a>4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">2824199842</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment"># 自定义数据源</span>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span>    <span class="hljs-comment">#druid 数据源专有配置</span>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span>    <span class="hljs-comment">#需要导入 log4j 依赖</span>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></code></pre><h3 id="5、导入log4j依赖"><a href="#5、导入log4j依赖" class="headerlink" title="5、导入log4j依赖"></a>5、导入log4j依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="6、创建DruidConfig类，用于拓展配置druid"><a href="#6、创建DruidConfig类，用于拓展配置druid" class="headerlink" title="6、创建DruidConfig类，用于拓展配置druid"></a>6、创建DruidConfig类，用于拓展配置druid</h3><p>将数据源的配置文件绑定到容器中，无需springboot再创建容器</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *将自定义的Druid数据源添加到容器中，不再让Spring Boot自动创建</span><span class="hljs-comment">     *绑定全局配置文件中的druid数据源属性到DruidDataSource从而让它们生效</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.datasource"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();    &#125;&#125;</code></pre><p>配置后台监控功能：<br>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装路由器 时，人家也提供了一个默认的 web 页面。</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 注入到容器中，就相当于web.xml文件</span><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">statViewServlet</span><span class="hljs-params">()</span></span>&#123;    ServletRegistrationBean&lt;StatViewServlet&gt; bean =         <span class="hljs-keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">"/druid/*"</span>);    <span class="hljs-comment">// 配置后台登录名和密码</span>    Map&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();    <span class="hljs-comment">// 增加配置</span>    initParameters.put(<span class="hljs-string">"loginUsername"</span>,<span class="hljs-string">"admin"</span>);<span class="hljs-comment">// loginUsername loginPassword是固定的</span>    initParameters.put(<span class="hljs-string">"loginPassword"</span>,<span class="hljs-string">"123456"</span>);    <span class="hljs-comment">// 访问权限</span>    initParameters.put(<span class="hljs-string">"allow"</span>,<span class="hljs-string">""</span>);    <span class="hljs-comment">// 设置初始化参数</span>    bean.setInitParameters(initParameters);    <span class="hljs-keyword">return</span> bean;&#125;</code></pre><p>访问<a href="http://localhost:8080/druid/" target="_blank" rel="noopener">http://localhost:8080/druid/</a><br><img src="/2020/07/25/springboot-04/2.png" srcset="/img/loading.gif" alt></p><p>登录成功后<br><img src="/2020/07/25/springboot-04/3.png" srcset="/img/loading.gif" alt></p><p>配置过滤器</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">webStatFilter</span><span class="hljs-params">()</span></span>&#123;    FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean();    bean.setFilter(<span class="hljs-keyword">new</span> WebStatFilter());    <span class="hljs-comment">// 设置过滤请求</span>    HashMap&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    initParameters.put(<span class="hljs-string">"exclusion"</span>,<span class="hljs-string">"*.js,*.css,/druid/*"</span>);<span class="hljs-comment">// 设置不进行过滤的资源</span>    bean.setInitParameters(initParameters);    <span class="hljs-keyword">return</span> bean;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL篇</title>
    <link href="/2020/07/25/interview-03/"/>
    <url>/2020/07/25/interview-03/</url>
    
    <content type="html"><![CDATA[<h2 id="1、数据库的三范式是什么"><a href="#1、数据库的三范式是什么" class="headerlink" title="1、数据库的三范式是什么"></a>1、数据库的三范式是什么</h2><p>第一范式：数据表必须是一个二维数据表，<strong>列不可再分</strong>，强调列的原子性，即表中的某一属性不能有几个值。<a id="more"></a></p><p>第二范式：必须建立在第一范式的基础之上，即满足第二范式必须满足第一范式。第二范式要求<strong>每一行必须被唯一标识</strong>，即表中必须要有一个主键，没有包含主键的列必须完全依赖主键。</p><p>第三范式：建立在第二范式的基础之上，要求每一个<strong>非主属性不能传递依赖候选键</strong>。<br>举例来说：Employee(emp_id,emp_name,emp_age,dept_id,dept_name,dept_info)，当员工表中emp_id能够唯一确定员工员工信息，但是dept_name可由dept_id唯一确定，此时，该表不符合第三范式，此时可以删除除了dept_id之外的其他部门信息，把所有部门信息单独建立一张部门表。</p><h2 id="2、数据库的事务"><a href="#2、数据库的事务" class="headerlink" title="2、数据库的事务"></a>2、数据库的事务</h2><p><strong>什么是事务？</strong></p><p>多条sql语句组成的一个执行单元，要么全部执行，要么都不执行。</p><p><strong>事务的特性：</strong>原子性、一致性、隔离性、持久性</p><ul><li>原子性：组成事务的多个数据库操作是一个不可分割的原子单元，只有所有操作都成功，事务才会被提交，任何一个操作失败，已经执行的都必须撤销，让数据库恢复原来的状态。</li><li>一致性：事务提交成功后，数据库所处的状态和它的业务规则是一致的，即数据不会被破坏。</li><li>隔离性：不同事务拥有各自的数据空间，它们的操作不会对各自产生影响。</li><li>持久性：一旦事务提交成功，事务中的所有操作必须持久化到数据库中。</li></ul><h2 id="3、数据库的索引"><a href="#3、数据库的索引" class="headerlink" title="3、数据库的索引"></a>3、数据库的索引</h2><p>索引就是加快检索数据的方法。</p><p>mysql有四种不同的索引：主键索引(primary)、唯一索引(unique)、普通索引、全文索引</p><p>索引并非越多越好，创建索引页需要消耗资源，一是增加了数据库的存储空间，二是在插入和删除时需要花费较多的时间去维护。</p><h2 id="4、drop、delete与truncate的区别"><a href="#4、drop、delete与truncate的区别" class="headerlink" title="4、drop、delete与truncate的区别"></a>4、drop、delete与truncate的区别</h2><p>delete和truncate只能删除数据，不能删除表的结构</p><p>速度：drop&gt;truncate&gt;delete</p><p>truncate不可回滚</p><h2 id="5、什么是视图"><a href="#5、什么是视图" class="headerlink" title="5、什么是视图"></a>5、什么是视图</h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增、删改、查操作，视图通常是一个表或多个表的行或列的子集。对视图的修改不影响基本表。</p><h2 id="6、什么是内连接、左外连接、右外连接"><a href="#6、什么是内连接、左外连接、右外连接" class="headerlink" title="6、什么是内连接、左外连接、右外连接"></a>6、什么是内连接、左外连接、右外连接</h2><p>内连接：用来匹配两张表中相关联的记录。</p><p>左外连接：除了匹配两张表中相关联的记录外，还会匹配左表剩余的记录，右表中未匹配的字段用NULL表示。</p><p>右外连接：除了匹配两张表中相关联的记录外，还会匹配右表剩余的记录，左表中未匹配的字段用NULL表示。</p><h2 id="7、并发事务带来哪些问题？"><a href="#7、并发事务带来哪些问题？" class="headerlink" title="7、并发事务带来哪些问题？"></a>7、并发事务带来哪些问题？</h2><p><strong>脏读：</strong>对于两个事务t1,t2，t1读取了已经被t2更新但还没提交的数据，若t2回滚，t1读取的数据就是临时且失效的。</p><p><strong>不可重复读：</strong>对于两个事务t1,t2，t1读取了一个字段，然后t2更新了该字段。之后，t1再次读取同一个字段，值就不同了。</p><p><strong>幻读：</strong>对于两个事务t1、t2，t1从一个表中读取了一个字段，然后t2在该表中插入了一些新的行。之后，若t1再次读取同一个表，就会多出几行。</p><h2 id="8、事务的隔离级别"><a href="#8、事务的隔离级别" class="headerlink" title="8、事务的隔离级别"></a>8、事务的隔离级别</h2><p><img src="/2020/07/25/interview-03/1.png" srcset="/img/loading.gif" alt></p><p>mysq默认支持的隔离级别是 可重复读。</p><h2 id="9、mysql数据类型"><a href="#9、mysql数据类型" class="headerlink" title="9、mysql数据类型"></a>9、mysql数据类型</h2><p>1、整数类型<br>Tinyint：1个字节，有符号：-128到127 ，无符号(unsigned)：0到255<br>Smallint：2个字节，有符号：-32768到32767，无符号数：0到65535<br>Mediumint：3个字节<br>int/Integer：4个字节<br>Bigint：8个字节</p><p>2、实数类型<br>float、double、decimal(效率高，精度高)</p><p>3、字符串类型<br>varchar(变长字符串)、char(定长字符串)、text、blob</p><p>4、日期和时间类型<br>timestamp(效率高)、datetime</p><h2 id="10、创建索引的三种方式"><a href="#10、创建索引的三种方式" class="headerlink" title="10、创建索引的三种方式"></a>10、创建索引的三种方式</h2><p>方式一：创建表的时候</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> atuo_increment PRIMARY <span class="hljs-keyword">KEY</span>,    <span class="hljs-keyword">name</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),    age <span class="hljs-built_in">TINYINT</span>)</code></pre><p>方式二：使用alter table命令，创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> index_name (column_list);</code></pre><p>方式三：使用create index命令，增加普通索引或unique索引</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> table_name (column_list);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程&amp;并发篇</title>
    <link href="/2020/07/18/interview-02/"/>
    <url>/2020/07/18/interview-02/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Java中实现多线程的几种方法"><a href="#1、Java中实现多线程的几种方法" class="headerlink" title="1、Java中实现多线程的几种方法"></a>1、Java中实现多线程的几种方法</h2><p>1、继承Thread类；<br>2、实现Runnable接口，将Runable接口实现类作为形参传递给Thread构造器；<br>3、实现Callable接口，通过FutureTask包装器后传给Thread构造器；<br>4、从线程池中获取线程  <a id="more"></a></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest4</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 创建线程池 提供指定线程数量</span>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);        <span class="hljs-comment">// 创建线程并开始线程</span>        service.submit(<span class="hljs-keyword">new</span> MyThread4());        service.execute(<span class="hljs-keyword">new</span> MyThread4());        <span class="hljs-comment">// 关闭连接池</span>        service.shutdown();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">":"</span>+i);        &#125;    &#125;&#125;</code></pre><h2 id="2、如何停止一个正在运行的线程"><a href="#2、如何停止一个正在运行的线程" class="headerlink" title="2、如何停止一个正在运行的线程"></a>2、如何停止一个正在运行的线程</h2><p>1、使用退出标志，使线程正常退出，也就是当run方法执行完成后线程终止。<br>2、使用stop方法强行终止，但不推荐使用，已被废弃<br>3、使用interrupt方法抛出中断异常</p><h2 id="3、notify-与notifyAll-的区别"><a href="#3、notify-与notifyAll-的区别" class="headerlink" title="3、notify()与notifyAll()的区别"></a>3、notify()与notifyAll()的区别</h2><p>任何时候只能有一个线程获得锁，调用notify时只能唤醒等待队列中的某一个线程，这个线程是不固定的，取决于线程调度器；而notifyAll能唤醒等待队列中的所有线程，所有被唤醒的线程争夺锁。</p><h2 id="4、sleep-与wait-的区别"><a href="#4、sleep-与wait-的区别" class="headerlink" title="4、sleep()与wait()的区别"></a>4、sleep()与wait()的区别</h2><p>1、sleep()是声明在Thread类中的方法；而wait()是声明在Object类中的方法；<br>2、wait()只能在同步代码块和同步方法中使用；<br>3、sleep()会使当前线程在指定时间内阻塞，时间到了自动恢复运行的状态；<br>        wait()会释放锁，让其他线程争夺到锁后开始执行。</p><h2 id="5、volatile是什么？可以保证有序性吗？"><a href="#5、volatile是什么？可以保证有序性吗？" class="headerlink" title="5、volatile是什么？可以保证有序性吗？"></a>5、volatile是什么？可以保证有序性吗？</h2><p>一旦共享变量(类的成员变量、类的静态成员变量)被volatile修饰后，那么就有了两层语义：</p><p>1、保证了不同线程对这个变量的可见性，即一个线程修改了某个变量的值，这个新值对其他线程来说是立即可见的，volatile关键字会强制将修改的值写入主存。<br>2、禁止进行指令重排序</p><h2 id="6、Thread类中的start-和run-方法的区别"><a href="#6、Thread类中的start-和run-方法的区别" class="headerlink" title="6、Thread类中的start()和run()方法的区别"></a>6、Thread类中的start()和run()方法的区别</h2><p>start()方法被用来启动新创建的线程，内部会调用run()方法，这和直接调用run()方法的效果不一样。当直接调用run()方法时，只会是在原来的线程中调用，没有新的线程启动，只有start()方法才会启动新的线程。</p><h2 id="7、为什么wait，notify和notifyAll这些方法不在thread类里面？"><a href="#7、为什么wait，notify和notifyAll这些方法不在thread类里面？" class="headerlink" title="7、为什么wait，notify和notifyAll这些方法不在thread类里面？"></a>7、为什么wait，notify和notifyAll这些方法不在thread类里面？</h2><p>Java中提供的锁机制是对象级别的而不是线程级别的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁，那么调用对象中的wait()方法就有意义了。如果wait()定义在Thread类中，线程正在等待的哪个锁就不明显了。简单来说，wait,notify和notifyAll都是锁级别的操作，所以把他们定义在Object中，因为锁属于对象。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图书Crud项目</title>
    <link href="/2020/07/15/ssm/"/>
    <url>/2020/07/15/ssm/</url>
    
    <content type="html"><![CDATA[<p>​       此项目用于回顾ssm整合的过程，加深自己对ssm三大框架的理解以及提高使用框架的能力，同时也是对前端，web，mysql等知识的复习。<a id="more"></a></p><h2 id="一、设计数据库"><a href="#一、设计数据库" class="headerlink" title="一、设计数据库"></a>一、设计数据库</h2><p>创建一个名为ssm的数据库，由于只是一个图书的crud项目，这里只创建一个books表</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> ssm;<span class="hljs-keyword">USE</span> ssm;<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> books ;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> books(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span> auto_increment,<span class="hljs-keyword">name</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NUll</span>,counts <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,details <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> books(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>,counts,details)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'JavaSE'</span>,<span class="hljs-number">10</span>,<span class="hljs-string">'java从入门到精通'</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">'MySQL'</span>,<span class="hljs-number">23</span>,<span class="hljs-string">'MySQL入门'</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">'JavaWeb'</span>,<span class="hljs-number">40</span>,<span class="hljs-string">'使用java编写网站'</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">'JavaEE'</span>,<span class="hljs-number">40</span>,<span class="hljs-string">'JavaWev企业级开发解决方案'</span>);</code></pre><h2 id="二、项目基本环境搭建"><a href="#二、项目基本环境搭建" class="headerlink" title="二、项目基本环境搭建"></a>二、项目基本环境搭建</h2><p>1、使用Maven创建项目 SMM。(注意：这里并没有使用模板创建）<br>2、导入项目需要的依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖 junit,数据库连接驱动,数据库连接池,servlet,jsp,springmvc,spring-jdbc,mybatis,mybatis-spring--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--Junit--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Servlet - JSP --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Mybatis--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>3、Maven资源过滤设置</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态资源导出--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><p>4、建立项目包结构和配置框架<br><img src="/2020/07/15/ssm/1.png" srcset="/img/loading.gif" alt></p><p>mybatis-config.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>application.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>jdbc.properties</p><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=Asia/Shanghai</span><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">2824199842</span><span class="hljs-meta">jdbc.maxActive</span>=<span class="hljs-string">20</span></code></pre><h2 id="三、MyBatis层编写"><a href="#三、MyBatis层编写" class="headerlink" title="三、MyBatis层编写"></a>三、MyBatis层编写</h2><p>1、创建实体类Book<br>这里使用Lombok（偷懒~），需要导入依赖：（注意：IDEA首次使用时需要安装插件 setting-&gt;plugins-&gt;lombok）</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Lombok--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <span class="hljs-comment">// 隐式导入所有get set toString 无参构造等方法</span><span class="hljs-meta">@AllArgsConstructor</span> <span class="hljs-comment">// 有参构造，此时无参构造没了，需要加上NoArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span> <span class="hljs-comment">// 无参构造</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer counts;    <span class="hljs-keyword">private</span> String details;&#125;</code></pre><p>2、编写BookMapper接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(@Param(<span class="hljs-string">"bookId"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">Book <span class="hljs-title">queryBookById</span><span class="hljs-params">(@Param(<span class="hljs-string">"bookId"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询所有图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>3、编写BookMapper接口的sql映射文件BookMapper.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zyz.dao.BookMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addBook"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zyz.bean.Book"</span>&gt;</span>        insert into books(name,counts,details) values(#&#123;name&#125;,#&#123;counts&#125;,#&#123;details&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteBookById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span>        delete from books where id=#&#123;bookId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateBook"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zyz.bean.Book"</span>&gt;</span>        update books set name=#&#123;name&#125;,counts=#&#123;counts&#125;,details=#&#123;details&#125;        where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBookById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zyz.bean.Book"</span>&gt;</span>        select * from books where id=#&#123;bookId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryAllBook"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zyz.bean.Book"</span>&gt;</span>        select * from books    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>4、在mybtis配置文件中注册sql映射文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>     <span class="hljs-comment">&lt;!--  打印日志--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span>    <span class="hljs-comment">&lt;!--  注册映射文件  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>至此，Dao层编写完成，下一步编写Service层</p><p>5、编写Service层的接口和实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">Book <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询所有图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span></span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BookMapper bookMapper;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.addBook(book);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.updateBook(book);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.queryAllBook();    &#125;&#125;</code></pre><h2 id="四、Spring层整合Dao-Service层"><a href="#四、Spring层整合Dao-Service层" class="headerlink" title="四、Spring层整合Dao,Service层"></a>四、Spring层整合Dao,Service层</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--  关联数据库配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--声明数据源  用于连接数据库--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myDataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span></span><span class="hljs-tag">          <span class="hljs-attr">init-method</span>=<span class="hljs-string">"init"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.maxActive&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- mybatis主配置文件的位置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 声明Dao类</span><span class="hljs-comment">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span><span class="hljs-comment">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>        <span class="hljs-comment">&lt;!--注入sqlSessionFactory--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--要扫描的dao包--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--  声明service的注解@Service所在的包名位置  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.service"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 声明事务管理器   --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="hljs-comment">&lt;!--  连接的数据库，指定数据源 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启事务注解驱动 告诉spring使用注解管理事务，创建代理对象</span><span class="hljs-comment">         在需要使用事务的方法上添加Transactional注解--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>然后，需要在Service实现类上添加@Service注解</p><h2 id="五、SpringMVC层的整合"><a href="#五、SpringMVC层的整合" class="headerlink" title="五、SpringMVC层的整合"></a>五、SpringMVC层的整合</h2><p>1、添加web支持<br>右键项目<br><img src="/2020/07/15/ssm/2.png" srcset="/img/loading.gif" alt></p><p>勾选Web Application<br><img src="/2020/07/15/ssm/3.png" srcset="/img/loading.gif" alt></p><p>配置web.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatchServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 注册监听器  用于创建Spring容器   --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码过滤--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--Session 有效时间--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><p>创建springmvc.xml并进行配置</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--注解驱动--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-comment">&lt;!--  处理静态资源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--扫描controller--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.controller"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--声明springmvc框架中的视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!--前缀  视图文件的路径--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/view/"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--后缀  视图文件的拓展名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>到此为止，整个ssm项目的配置文件基本上配置完成了，ssm项目与springboot项目相比，最大的不同就是这种繁杂的配置，但是学习ssm是必不可少的，只有这样才能了解到整个Javaweb工程的核心。<br>下一步是编写controller层以及与前端页面的交互。</p><h2 id="六、Controller层与页面之间的交互"><a href="#六、Controller层与页面之间的交互" class="headerlink" title="六、Controller层与页面之间的交互"></a>六、Controller层与页面之间的交互</h2><p>编写BookController类,添加crud方法</p><h3 id="方法一：查询所有图书"><a href="#方法一：查询所有图书" class="headerlink" title="方法一：查询所有图书"></a>方法一：查询所有图书</h3><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/book"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;    <span class="hljs-comment">// Controller层就是调用service层的一些方法，完成需要的业务</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BookService bookService;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询所有图书</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/allBooks"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span></span>&#123;        List&lt;Book&gt; books = bookService.queryAllBook();        model.addAttribute(<span class="hljs-string">"books"</span>,books);        <span class="hljs-keyword">return</span> <span class="hljs-string">"allBooks"</span>;    &#125;&#125;</code></pre><p>编写首页：index.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;首页&lt;/title&gt;    &lt;style&gt;        h3&#123;            border: <span class="hljs-number">2</span>px blueviolet solid;            text-align: center;            width: <span class="hljs-number">200</span>px;            height: <span class="hljs-number">50</span>px;            background-color: aqua;            padding: <span class="hljs-number">20</span>px;            border-radius: <span class="hljs-number">10</span>px;            margin: <span class="hljs-number">200</span>px auto;<span class="hljs-comment">/*外边距*/</span>            line-height: <span class="hljs-number">50</span>px;<span class="hljs-comment">/*行高与高度一致则居中*/</span>        &#125;        a&#123;            text-decoration: none;<span class="hljs-comment">/*去掉链接的下划线*/</span>            color: blue;            font-size: <span class="hljs-number">30</span>px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;    &lt;a href="$&#123;pageContext.request.contextPath&#125;/book/allBooks"&gt;查询所有图书&lt;/a&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>编写展示所有图书的页面allBook.jsp</p><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;书籍展示页面&lt;/title&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"row clearfix"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"col-md-12 column"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"page-header"</span>&gt;                &lt;h1&gt;&lt;small&gt;书籍列表——显示所有图书&lt;/small&gt;&lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"row clearfix"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"col-md-12 column"</span>&gt;            &lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"table table-hover table-striped"</span>&gt;                &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;书籍编号&lt;/th&gt;                    &lt;th&gt;书籍名称&lt;/th&gt;                    &lt;th&gt;书籍数量&lt;/th&gt;                    &lt;th&gt;书籍详情&lt;/th&gt;                &lt;/tr&gt;                &lt;/thead&gt;                &lt;tbody&gt;                &lt;%--遍历从数据库中查到的全部图书--%&gt;                &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">"book"</span> items=<span class="hljs-string">"$&#123;books&#125;"</span>&gt;                    &lt;tr&gt;                        &lt;td&gt;$&#123;book.id&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.counts&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.details&#125;&lt;/td&gt;                    &lt;/tr&gt;                &lt;/c:forEach&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>启动Tomcat测试：<br>由于我使用maven直接创建的项目，没有使用maven中的模板，所以需要手动将项目目录下的包打包至WEB-INF目录下，Tomcat才能正常启动：<br><img src="/2020/07/15/ssm/4.png" srcset="/img/loading.gif" alt></p><h3 id="方法二：添加图书"><a href="#方法二：添加图书" class="headerlink" title="方法二：添加图书"></a>方法二：添加图书</h3><p>1、首先在展示所有图书的页面allBooks.jsp添加一个发起请求的链接</p><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"col-md-12 column"</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">" pull-right"</span> &gt;        &lt;%--跳到新增图书页面--%&gt;        &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-success"</span>           href="$&#123;pageContext.request.contextPath&#125;/book/toAddBook"&gt;添加书籍&lt;/a&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><p>然后在BookConntroller添加一个跳转到添加页面的方法</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 跳转到添加图书页面</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/toAddBook"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAddBook</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"addBook"</span>;&#125;</code></pre><p>编写添加图书的页面addBook.jsp，也就是一个表单</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;添加图书页面&lt;/title&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"row clearfix"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"col-md-12 column"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"page-header"</span>&gt;                &lt;h1&gt;&lt;small&gt;添加图书&lt;/small&gt;&lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;form action=<span class="hljs-string">"$&#123;pageContext.request.contextPath&#125;/book/addBook"</span> method=<span class="hljs-string">"post"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkName"&gt;书籍名称&lt;/label&gt;                &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkName"</span> name=<span class="hljs-string">"name"</span> required&gt;            &lt;/div&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkCounts"&gt;书籍数量&lt;/label&gt;                &lt;input type=<span class="hljs-string">"number"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkCounts"</span> name=<span class="hljs-string">"counts"</span> required&gt;            &lt;/div&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkDetails"&gt;书籍详情&lt;/label&gt;                &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkDetails"</span> name=<span class="hljs-string">"details"</span> required&gt;            &lt;/div&gt;            &lt;button type="submit" class="btn btn-primary"&gt;添加&lt;/button&gt;        &lt;/form&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>最后在BookController中编写添加图书的方法</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 添加图书</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/addBook"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span></span>&#123;    <span class="hljs-comment">// System.out.println(book);</span>    bookService.addBook(book);    <span class="hljs-comment">// 重定向到查询所有图书的Controller</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBooks"</span>;&#125;</code></pre><h3 id="方法三：修改图书"><a href="#方法三：修改图书" class="headerlink" title="方法三：修改图书"></a>方法三：修改图书</h3><p>在展示所有图书的页面添加发起请求的链接：</p><pre><code class="hljs jsp">&lt;td&gt;    &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span>       href="$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.id&#125;"&gt;修改&lt;/a&gt;    &amp;nbsp;&amp;nbsp;    &lt;a class="btn btn-danger" href=""&gt;删除&lt;/a&gt;&lt;/td&gt;</code></pre><p>在BookController中添加跳转到修改页面的方法</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 跳转到修改页面</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/toUpdateBook"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdateBook</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,Model model)</span></span>&#123;    Book book = bookService.queryBookById(id);    model.addAttribute(<span class="hljs-string">"book"</span>,book);    <span class="hljs-keyword">return</span> <span class="hljs-string">"updateBook"</span>;&#125;</code></pre><p>编写修改图书的页面updateBook.jsp，又是一个表单</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;修改图书页面&lt;/title&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"row clearfix"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"col-md-12 column"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"page-header"</span>&gt;                &lt;h1&gt;&lt;small&gt;修改图书&lt;/small&gt;&lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;form action=<span class="hljs-string">"$&#123;pageContext.request.contextPath&#125;/book/updateBook"</span> method=<span class="hljs-string">"post"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkName"&gt;书籍名称&lt;/label&gt;                &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkName"</span> name=<span class="hljs-string">"name"</span> value=<span class="hljs-string">"$&#123;book.name&#125;"</span> required&gt;            &lt;/div&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkCounts"&gt;书籍数量&lt;/label&gt;                &lt;input type=<span class="hljs-string">"number"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkCounts"</span> name=<span class="hljs-string">"counts"</span> value=<span class="hljs-string">"$&#123;book.counts&#125;"</span> required&gt;            &lt;/div&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-group"</span>&gt;                &lt;label for="bkDetails"&gt;书籍详情&lt;/label&gt;                &lt;input type=<span class="hljs-string">"text"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkDetails"</span> name=<span class="hljs-string">"details"</span> value=<span class="hljs-string">"$&#123;book.details&#125;"</span> required&gt;            &lt;/div&gt;            &lt;button type="submit" class="btn btn-primary"&gt;修改&lt;/button&gt;        &lt;/form&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>最后在BookController中编写修改图书的方法</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 修改图书</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/updateBook"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span></span>&#123;    <span class="hljs-comment">// System.out.println(book);</span>    bookService.updateBook(book);    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBooks"</span>;&#125;</code></pre><p>这里更新不了的原因是因为updateBook中的book对象的id值为空，而更新图书时需要id作为参数去查找哪一本图书要更新。解决方案是在修改图书页面的表单中添加一组隐藏域，将id值传给updateBook()方法即可</p><pre><code class="hljs jsp">&lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"id"</span> value=<span class="hljs-string">"$&#123;book.id&#125;"</span>&gt;</code></pre><h3 id="方法四：删除图书"><a href="#方法四：删除图书" class="headerlink" title="方法四：删除图书"></a>方法四：删除图书</h3><p>在展示所有图书的页面添加发起请求的链接</p><pre><code class="hljs jsp">&lt;td&gt;    &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span>       href="$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.id&#125;"&gt;修改&lt;/a&gt;    &amp;nbsp;&amp;nbsp;    &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-danger"</span>       href="$&#123;pageContext.request.contextPath&#125;/book/deleteBook?id=$&#123;book.id&#125;"&gt;删除&lt;/a&gt;&lt;/td&gt;</code></pre><p>在BookController中添加删除图书的方法</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除图书</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/deleteBook"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;    bookService.deleteBookById(id);    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBooks"</span>;&#125;</code></pre><h2 id="项目总体结构"><a href="#项目总体结构" class="headerlink" title="项目总体结构"></a>项目总体结构</h2><img src="/2020/07/15/ssm/5.png" srcset="/img/loading.gif" style="zoom:80%;"><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2020/07/15/ssm/6.png" srcset="/img/loading.gif" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、ssm整合的总体思路：使用spring容器去管理Dao,Service对象，springmvc容器管理Controller对象，springmvc容器是spring的子容器，springmvc容器中的controller对象能访问到spring容器中的service对象。</p><p>2、对css的一些属性的运用还不是很熟练</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot Web开发</title>
    <link href="/2020/07/11/springboot-03/"/>
    <url>/2020/07/11/springboot-03/</url>
    
    <content type="html"><![CDATA[<h2 id="静态资源的导入"><a href="#静态资源的导入" class="headerlink" title="静态资源的导入"></a>静态资源的导入</h2><p>resources目录下存放静态资源。<a id="more"></a><br><img src="/2020/07/11/springboot-03/1.png" srcset="/img/loading.gif" alt></p><h2 id="模板引擎Thymeleaf"><a href="#模板引擎Thymeleaf" class="headerlink" title="模板引擎Thymeleaf"></a>模板引擎Thymeleaf</h2><p>就是将后端的数据渲染到前端的页面上去显示，例如 jsp 就是一个模板引擎。<br><img src="/2020/07/11/springboot-03/2.png" srcset="/img/loading.gif" alt></p><p><strong>thymeleaf 的使用</strong></p><p>首先导入它的依赖，在springboot中要添加其他组件，没有什么是一个starter解决不了的！</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>将测试页面放在templates目录下，编写conntroller跳转页面</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/test1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"test1"</span>;    &#125;&#125;</code></pre><p><strong>thmeleaf 语法</strong></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有的html元素都可以被thymeleaf替换接管  th:元素名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;msg&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span>    <span class="hljs-comment">&lt;!--循环--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"val:$&#123;arr&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;val&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--传递参数--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/toUpdate/&#125;+$&#123;emp.getId()&#125;"</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/delete/&#125;+$&#123;emp.getId()&#125;"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-comment">&lt;!--引入公共组件--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">"~&#123;common/common::topbar&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--日期格式化--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(emp.getBirth(),'yyyy-MM-dd')&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="接管SpringMVC"><a href="#接管SpringMVC" class="headerlink" title="接管SpringMVC"></a>接管SpringMVC</h2><p>创建config目录，在config目录下编写类，用来接管、扩展SpringMVC</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 配置页面映射关系</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"/index"</span>);        registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"/index"</span>);    registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"/dashboard"</span>);    &#125;    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 配置拦截器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="hljs-string">"/*"</span>)            .excludePathPatterns(<span class="hljs-string">"/index.html"</span>,<span class="hljs-string">"/"</span>,<span class="hljs-string">"/user/login"</span>,<span class="hljs-string">"/static/**"</span>);    &#125;&#125;</code></pre><p>编写拦截器的实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 登录成功后有user的session</span>        Object loginUser = request.getSession().getAttribute(<span class="hljs-string">"loginUser"</span>);        <span class="hljs-keyword">if</span>(loginUser==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-comment">// 没有登录</span>            request.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"没有权限，请登录！"</span>);            request.getRequestDispatcher(<span class="hljs-string">"/index.html"</span>).forward(request,response);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><h2 id="处理器接收页面传参"><a href="#处理器接收页面传参" class="headerlink" title="处理器接收页面传参"></a>处理器接收页面传参</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/delete/&#125;+$&#123;emp.getId()&#125;"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/delete/&#123;id&#125;"</span>)<span class="hljs-comment">// @PathVarable 接收路径中占位符的值</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span>Integer id)</span>&#123;&#125;</code></pre><h2 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h2><pre><code class="hljs properties"><span class="hljs-comment"># 关闭thymeleaf 缓存</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-comment"># 项目路径  localhost:8080/zyz</span><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/springboot_web</span><span class="hljs-comment"># 国际化</span><span class="hljs-comment"># spring.messages.basename=i18n.login</span><span class="hljs-comment"># 时间日期格式化</span><span class="hljs-meta">spring.mvc.format.date</span>=<span class="hljs-string">yyyy-MM-dd</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot配置</title>
    <link href="/2020/07/10/springboot-02/"/>
    <url>/2020/07/10/springboot-02/</url>
    
    <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot使用一个全局配置文件，用于修改默认配置，文件名固定。</p><ul><li>application.properties：语法结构：key=value</li><li>application.yml，springboot推荐使用：语法结构：key: &nbsp;value <a id="more"></a></li></ul><h2 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h2><p>1、空格不能省略，key:空格value</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><h2 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h2><p><img src="/2020/07/10/springboot-02/6.png" srcset="/img/loading.gif" alt></p><p>测试：</p><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Springboot02ConfigApplicationTests</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Person person;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(cat);        System.out.println(person);    &#125;&#125;</code></pre><p>结果：</p><pre><code class="hljs routeros">Cat&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">'小白'</span>, <span class="hljs-attribute">age</span>=3&#125;Person&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">'zyz'</span>, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">happy</span>=<span class="hljs-literal">true</span>, <span class="hljs-attribute">birth</span>=Fri Jul 10 00:00:00 CST 2020, maps=&#123;<span class="hljs-attribute">k1</span>=v1, <span class="hljs-attribute">k2</span>=v2&#125;, lists=[1, 2, 3], <span class="hljs-attribute">cat</span>=Cat&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">'小花'</span>, <span class="hljs-attribute">age</span>=2&#125;&#125;</code></pre><p>指定随机uuid:</p><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">zyz$&#123;random.uuid&#125;</span> <span class="hljs-comment"># 随机uuid</span></code></pre><h2 id="properties注入"><a href="#properties注入" class="headerlink" title="properties注入"></a>properties注入</h2><p><img src="/2020/07/10/springboot-02/7.png" srcset="/img/loading.gif" alt></p><h2 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h2><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p><p>引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<span class="hljs-meta">@Validated</span>  <span class="hljs-comment">// 数据校验</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-meta">@Email</span>(message=<span class="hljs-string">"邮箱格式不合法"</span>)<span class="hljs-comment">// 使name只能支持Email格式</span>    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><p>运行结果：<br><img src="/2020/07/10/springboot-02/8.png" srcset="/img/loading.gif" alt></p><p> <strong>常见参数</strong></p><p>空检查<br>@Null       验证对象是否为null<br>@NotNull    验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</p><p>Booelan检查<br>@AssertTrue     验证 Boolean 对象是否为 true<br>@AssertFalse    验证 Boolean 对象是否为 false </p><p>长度检查<br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  @Length(min=, max=) string is between min and max included</p><p>日期检查<br>@Past       验证 Date 和 Calendar 对象是否在当前时间之前<br>@Future     验证 Date 和 Calendar 对象是否在当前时间之后<br>@Pattern    验证 String 对象是否符合正则表达式的规则</p><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><pre><code class="hljs yaml"><span class="hljs-comment"># Springboot多环境配置</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span> <span class="hljs-comment"># 默认环境</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 指定环境</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot简介、自动装配原理</title>
    <link href="/2020/07/09/springboot-01/"/>
    <url>/2020/07/09/springboot-01/</url>
    
    <content type="html"><![CDATA[<p>springboot是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处：简化开发，约定大于配置，能迅速的开发web应用，几行代码开发一个http接口。<a id="more"></a></p><h2 id="springboot-helloworld"><a href="#springboot-helloworld" class="headerlink" title="springboot-helloworld"></a>springboot-helloworld</h2><p>1、使用IDEA创建一个springboot 项目<br><img src="/2020/07/09/springboot-01/1.png" srcset="/img/loading.gif" alt></p><p>2、修改项目名称后添加web依赖<br><img src="/2020/07/09/springboot-01/2.png" srcset="/img/loading.gif" alt></p><p>3、整理项目结构<br><img src="/2020/07/09/springboot-01/3.png" srcset="/img/loading.gif" alt></p><p>4、在controller包下添加处理请求的程序</p><pre><code class="hljs java"><span class="hljs-comment">// 原理：自动装配</span><span class="hljs-meta">@RestController</span>  <span class="hljs-comment">// 无法返回视图 相当于@Controller + @ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">// 接口  http://localhost:8080/hello</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doHello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello,world!"</span>;<span class="hljs-comment">// 在当前页面打印字符串</span>    &#125;&#125;</code></pre><p>整个过程非常的简单，无需像SpringMVC那样进行过多的配置，只需编写处理业务逻辑的代码，即向前端提供接口。</p><p>当然，这都源自springboot的自动装配原理。我们所编写的一个个controller不过是一个个组件，springboot已经帮我们装配好了。</p><p><strong>在application.properties中可以修改项目的端口号</strong></p><pre><code class="hljs properties"><span class="hljs-comment"># 更改项目端口号</span><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span></code></pre><p>修改banner，在resource中添加banner.txt添加ASCII艺术字，重新启动项目即可！</p><p>康康我的○( ＾皿＾)っHiahiahia…<br><img src="/2020/07/09/springboot-01/4.png" srcset="/img/loading.gif" alt></p><h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><strong>父项目依赖，管理项目的资源过滤及插件</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre><p><strong>web模块正常运行所依赖的组件</strong>：tomcat，springmvc等等</p><pre><code class="hljs java">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h3><pre><code class="hljs java"><span class="hljs-comment">// 标注这是一个springboot的应用</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloworldApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(HelloworldApplication<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre><p>SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><p>Springboot的所有自动配置都是在启动的时候扫描并加载：<br><img src="/2020/07/09/springboot-01/5.png" srcset="/img/loading.gif" alt></p><p>spring.factories：所有的配置文件都在里面，但是不一定生效，要判断条件成立，只要导入了对应的启动器，自动装配才会成功。</p><ol><li><p>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</p></li><li><p>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</p></li><li><p>整个JavaEE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</p></li><li><p>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</p></li><li><p>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</p><p><code>SpringApplication.run(HelloworldApplication.class, args);</code></p></li></ol><p>1、推断应用的类型是普通的项目还是Web项目<br>2、查找并加载所有可用初始化器 ， 设置到initializers属性中<br>3、找出所有的应用程序监听器，设置到listeners属性中<br>4、推断并设置main方法的定义类，找到运行的主类</p><p><strong>总结：</strong></p><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-elementUI</title>
    <link href="/2020/07/08/vue-05/"/>
    <url>/2020/07/08/vue-05/</url>
    
    <content type="html"><![CDATA[<h2 id="vue结合element组件库"><a href="#vue结合element组件库" class="headerlink" title="vue结合element组件库"></a>vue结合element组件库</h2><h3 id="1、创建工程"><a href="#1、创建工程" class="headerlink" title="1、创建工程"></a>1、创建工程</h3><p>在当前目录创建一个名为vue_hello的工程<a id="more"></a></p><pre><code class="hljs shell">vue init webpack vue_hello</code></pre><p>进入创建好的工程目录</p><pre><code class="hljs shell">cd vue_hello</code></pre><p>安装element-ui</p><pre><code class="hljs shell">npm i element-ui -S</code></pre><p>安装项目依赖</p><pre><code class="hljs shell">npm install</code></pre><p>安装SASS加载器</p><pre><code class="hljs shell">cnpm install sass-loader node-sass --save-dev</code></pre><p>启动测试</p><pre><code class="hljs shell">npm run dev</code></pre><h3 id="2、整理自动生成的项目"><a href="#2、整理自动生成的项目" class="headerlink" title="2、整理自动生成的项目"></a>2、整理自动生成的项目</h3><p>项目结构：<br><img src="/2020/07/08/vue-05/1.png" srcset="/img/loading.gif" alt></p><ul><li>assets：用于存放资源文件</li><li>components：用于存放Vue功能组件</li><li>views：用于存放Vue视图组件</li><li>router：用于存放vue-router配置</li></ul><h3 id="3、编写各组件代码"><a href="#3、编写各组件代码" class="headerlink" title="3、编写各组件代码"></a>3、编写各组件代码</h3><p>Login.vue  根据element官网代码修改</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"loginForm"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">"80px"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"login-box"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"login-title"</span>&gt;</span>欢迎登录<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"账号"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"username"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入账号"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"form.username"</span>/&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"密码"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"password"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"form.password"</span>/&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"onSubmit('loginForm')"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"温馨提示"</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">"dialogVisible"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"30%"</span> &gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>请输入账号和密码<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dialog-footer"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"dialogVisible = false"</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">    name: <span class="hljs-string">"Login"</span>,</span>    data()&#123;<span class="actionscript">      <span class="hljs-keyword">return</span>&#123;</span>        form:&#123;<span class="actionscript">          username:<span class="hljs-string">''</span>,</span><span class="actionscript">          password:<span class="hljs-string">''</span></span>        &#125;,<span class="actionscript">        <span class="hljs-comment">//表单验证，需要在 el-form-item 元素中增加prop属性</span></span>        rules:&#123;          username:[<span class="actionscript">            &#123;required:<span class="hljs-literal">true</span>,message:<span class="hljs-string">"账号不可为空"</span>,trigger:<span class="hljs-string">"blur"</span>&#125;</span>          ],          password:[<span class="actionscript">            &#123;required:<span class="hljs-literal">true</span>,message:<span class="hljs-string">"密码不可为空"</span>,trigger:<span class="hljs-string">"blur"</span>&#125;</span>          ]        &#125;,<span class="actionscript">        <span class="hljs-comment">//对话框显示和隐藏</span></span><span class="actionscript">        dialogVisible:<span class="hljs-literal">false</span></span>      &#125;    &#125;,    methods:&#123;      onSubmit(formName)&#123;<span class="actionscript">        <span class="hljs-comment">//为表单绑定验证功能</span></span><span class="javascript">        <span class="hljs-keyword">this</span>.$refs[formName].validate(<span class="hljs-function">(<span class="hljs-params">valid</span>)=&gt;</span>&#123;</span>          if(valid)&#123;<span class="actionscript">            <span class="hljs-comment">//使用vue-router路由到指定界面，该方式称为编程式导航</span></span><span class="actionscript">            <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/main'</span>);</span><span class="actionscript">          &#125;<span class="hljs-keyword">else</span>&#123;</span><span class="actionscript">            <span class="hljs-keyword">this</span>.dialogVisible=<span class="hljs-literal">true</span>;</span><span class="actionscript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span>          &#125;        &#125;);      &#125;    &#125;  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">  <span class="hljs-selector-class">.login-box</span>&#123;</span><span class="css">    <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#DCDFE6</span>;</span>    width: 350px;<span class="css">    <span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:180px</span> <span class="hljs-selector-tag">auto</span>;</span>    padding: 35px 35px 15px 35px;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;<span class="css">    <span class="hljs-selector-tag">box-shadow</span>: 0 0 25<span class="hljs-selector-tag">px</span> <span class="hljs-selector-id">#909399</span>;</span>  &#125;<span class="css">  <span class="hljs-selector-class">.login-title</span>&#123;</span><span class="css">    <span class="hljs-selector-tag">text-align</span><span class="hljs-selector-pseudo">:center</span>;</span>    margin: 0 auto 40px auto;<span class="css">    <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#303133</span>;</span>  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>main.vue</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">        name: <span class="hljs-string">"Main"</span></span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>路由配置index.js</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;<span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>;<span class="hljs-keyword">import</span> Main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span>;<span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span>;Vue.use(Router);<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;  routes: [&#123;    path: <span class="hljs-string">'/login'</span>,    component: Login  &#125;, &#123;    path: <span class="hljs-string">'/main'</span>,    component: Main  &#125;]&#125;);</code></pre><p>在main.js中引入element-ui和router</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>;<span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span>;<span class="hljs-keyword">import</span> Element <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span>;Vue.config.productionTip = <span class="hljs-literal">false</span>Vue.use(router);Vue.use(Element);<span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">'#app'</span>,  router,  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)&#125;)</code></pre><p>默认组件App.vue</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/login"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">  name: <span class="hljs-string">'App'</span>,</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>在package.json中修改sass-loader版本后，重新<code>npm install</code>，然后启动项目</p><pre><code class="hljs json">"sass-loader": "^7.3.1",</code></pre><h3 id="4、最终效果："><a href="#4、最终效果：" class="headerlink" title="4、最终效果："></a>4、最终效果：</h3><img src="/2020/07/08/vue-05/1.gif" srcset="/img/loading.gif" style="zoom:70%;"><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>main.vue</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"height: 500px; border: 1px solid #eee"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span>  &gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">"['1', '3']"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>用户管理          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-1"</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/profile"</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-2"</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/list"</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-menu"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>内容管理          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-1"</span>&gt;</span>分类管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-2"</span>&gt;</span>内容列表<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: right; font-size: 12px"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-setting"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 15px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"dropdown"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">      name: <span class="hljs-string">'Main'</span></span>  &#125;;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">  <span class="hljs-selector-class">.el-header</span> &#123;</span><span class="css">    <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#5cecef</span>;</span>    line-height: 60px;  &#125;<span class="css">  <span class="hljs-selector-class">.el-aside</span> &#123;</span><span class="css">    <span class="hljs-selector-tag">width</span><span class="hljs-selector-pseudo">:200px</span>;</span><span class="css">    <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#5cecef</span>;</span>  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>添加两个组件：<br><img src="/2020/07/08/vue-05/2.png" srcset="/img/loading.gif" alt></p><p>index.js</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;<span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>;<span class="hljs-keyword">import</span> Main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span>;<span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span>;<span class="hljs-keyword">import</span> Profile <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/Profile"</span>;<span class="hljs-keyword">import</span> List <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/List"</span>;Vue.use(Router);<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;  routes: [&#123;    path: <span class="hljs-string">'/login'</span>, <span class="hljs-attr">component</span>: Login  &#125;, &#123;    path: <span class="hljs-string">'/main'</span>, <span class="hljs-attr">component</span>: Main,    children:[<span class="hljs-comment">// 嵌套路由</span>      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/profile'</span>,<span class="hljs-attr">component</span>: Profile&#125;,      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/list'</span>,<span class="hljs-attr">component</span>: List&#125;    ]  &#125;]&#125;);</code></pre><p>效果：<br><img src="/2020/07/08/vue-05/2.gif" srcset="/img/loading.gif" style="zoom:80%;"></p><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>方式一：使用route</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- name:组件名/组件地址  params:传递参数 需要对象 v-bind--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"&#123;name:Profile,params:&#123;id: 1&#125;&#125;"</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></code></pre><p>接收参数：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--所有元素不能在根节点下--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    &#123;&#123;$route.params.id&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>方式二：使用props</p><p>配置路由时，设置props为true</p><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;  routes: [&#123;    path: <span class="hljs-string">'/login'</span>, <span class="hljs-attr">component</span>: Login  &#125;, &#123;    path: <span class="hljs-string">'/main'</span>, <span class="hljs-attr">component</span>: Main,    children:[<span class="hljs-comment">// 嵌套路由</span>      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">"/user/profile/:id"</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"Profile"</span>, <span class="hljs-attr">component</span>: Profile&#125;,      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">"/user/list/:id"</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">"List"</span>,<span class="hljs-attr">component</span>: List,<span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>&#125;    ]  &#125;]&#125;);</code></pre><p>接收数据</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    &#123;&#123;id&#125;&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h2 id="路由模式与404"><a href="#路由模式与404" class="headerlink" title="路由模式与404"></a>路由模式与404</h2><p>路由模式有两种：</p><ul><li>hash：路径带#符号（默认）</li><li>history：路径不带#符号</li></ul><p>在配置路由时设置路由模式：<code>mode: &quot;history&quot;；</code></p><p><strong>404</strong></p><p>在路由配置文件中引入404的组件后，添加一个路由：<br><code>{path: &quot;*&quot;,component: NotFound}]</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-Cli、webpack、vue-Router</title>
    <link href="/2020/07/08/vue-04/"/>
    <url>/2020/07/08/vue-04/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>vue-cli 就是官方提供的一个脚手架，用于快速生成一个vue的项目模板。<a id="more"></a></p><p><strong>vue-cli安装</strong></p><p>1、安装node.js</p><p>2、安装node.js淘宝镜像加速器cnpm</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -g全局安装</span>npm install cnpm -g</code></pre><p>3、安装vue-cli</p><pre><code class="hljs shell">cnpm install vue-cli -g</code></pre><p>4、查看可以基于哪些模板创建vue程序</p><pre><code class="hljs shell">vue list</code></pre><h2 id="创建一个vue项目"><a href="#创建一个vue项目" class="headerlink" title="创建一个vue项目"></a>创建一个vue项目</h2><p>1、在当前目录创建一个名为myvue的vue项目</p><pre><code class="hljs ebnf"><span class="hljs-attribute">vue init webpack myvue</span></code></pre><p>2、将自动安装的选项都选择no，之后进行手动安装</p><p><img src="/2020/07/08/vue-04/1.png" srcset="/img/loading.gif" alt></p><p>3、进入项目文件夹安装依赖环境</p><pre><code class="hljs shell">cd myvue<span class="hljs-meta">#</span><span class="bash"> 根据package.json自动安装所需要的包</span>npm install</code></pre><p>若出现warning，则按照提示去修复<br><img src="/2020/07/08/vue-04/2.png" srcset="/img/loading.gif" alt></p><p>4、修复成功后一个最基础的vue项目就构建完成了</p><p>5、项目打包运行</p><pre><code class="hljs shell">npm run dev</code></pre><p>运行成功后可在浏览器端通过 <code>http://localhost:8080</code>进行访问</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是一个js应用程序的静态模块打包器。它会递归地构建一个关系依赖图，其中包含应用程序所需要的各个模块，然后将每个模块打包成一个或多个bundle。将ES6规范的代码打包降级为所有浏览器兼容的ES5。</p><p>安装webpack及其客户端</p><pre><code class="hljs shell">npm install webpack -gnpm install webpack-cli -g</code></pre><p>查看其版本号</p><pre><code class="hljs shell">webpack -vwebpack-cli -v</code></pre><p><strong>webpack简单使用</strong></p><p>创建hello.js</p><pre><code class="hljs js"><span class="hljs-comment">// 暴露一个方法</span>exports.sayHi=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"&lt;h1&gt;Hi&lt;/h1&gt;"</span>)&#125;</code></pre><p>main.js</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> hello = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./hello"</span>);<span class="hljs-comment">// 引入hello.js</span>hello.sayHi();<span class="hljs-comment">// 调用hello.js中的方法</span></code></pre><p>创建webpack打包配置文件webpack.config.js</p><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;    entry: <span class="hljs-string">"./modules/main.js"</span>,<span class="hljs-comment">// 入口</span>    output: &#123;        filename: <span class="hljs-string">"./js/bundle.js"</span><span class="hljs-comment">//输出文件</span>    &#125;&#125;</code></pre><p>创建index.html，引入打包输出的文件，在浏览器查看是否正确</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"dist/js/bundle.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p><img src="/2020/07/08/vue-04/3.png" srcset="/img/loading.gif" alt><br>1、在当前项目文件夹中安装vue-router</p><pre><code class="hljs shell">npm install vue-router --save-dev</code></pre><p>2、在当前项目的src文件夹下创建component文件夹用来存放组件</p><p>编写所需要的组件<br>Content.vue</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Content.vue<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">        name: <span class="hljs-string">"Content"</span></span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--scoped  样式仅在当前组件生效--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>Main.vue</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Main.vue<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">        name: <span class="hljs-string">"Main"</span></span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>3、在当前项目的src文件夹下创建router文件夹用来存放路由的配置信息</p><p>router/index.js</p><pre><code class="hljs js"><span class="hljs-comment">// 导入插件</span><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span><span class="hljs-comment">// 导入组件</span><span class="hljs-keyword">import</span> Content <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Content"</span><span class="hljs-keyword">import</span> Main <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Main"</span><span class="hljs-comment">// 安装路由</span>Vue.use(VueRouter);<span class="hljs-comment">// 配置导出路由</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[&#123;    <span class="hljs-comment">// 路由路径</span>    path: <span class="hljs-string">'/content'</span>,    name: <span class="hljs-string">'content'</span>,    <span class="hljs-comment">// 跳转的组件</span>    component:Content  &#125;,    &#123;      path: <span class="hljs-string">'/main'</span>,      name: <span class="hljs-string">'main'</span>,      component: Main    &#125;  ]&#125;);</code></pre><p>4、在main.js引用配置的路由</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span>Vue.config.productionTip = <span class="hljs-literal">false</span><span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">'#app'</span>,  <span class="hljs-comment">// 配置路由</span>  router,  components: &#123; App &#125;,  template: <span class="hljs-string">'&lt;App/&gt;'</span>&#125;)</code></pre><p>5、在App.vue中创建路由的跳转链接</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App.vue<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/main"</span>&gt;</span>跳转到Main<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/content"</span>&gt;</span>跳转到Content<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="actionscript">  name: <span class="hljs-string">'App'</span></span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><span class="hljs-selector-id">#app</span> &#123;</span>  text-align: center;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>运行项目</p><pre><code class="hljs shell">npm run dev</code></pre><p>在浏览器点击查看效果：<br><img src="/2020/07/08/vue-04/1.gif" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算属性、内容分发、自定义事件</title>
    <link href="/2020/07/07/vue-03/"/>
    <url>/2020/07/07/vue-03/</url>
    
    <content type="html"><![CDATA[<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>能够将计算结果缓存起来的属性，将行为转换为了属性。<a id="more"></a></p><pre><code class="hljs js">&lt;body&gt;    &lt;div id=<span class="hljs-string">"vue"</span>&gt;        &lt;p&gt;当前时间：&#123;&#123;currentTime1()&#125;&#125;&lt;<span class="hljs-regexp">/p&gt;&lt;!-- 通过函数调用--&gt;</span><span class="hljs-regexp">        &lt;p&gt;当前时间：&#123;&#123;currentTime2&#125;&#125;&lt;/</span>p&gt;&lt;!--通过属性调用--&gt;    &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>body&gt;&lt;script&gt;    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;        el:vue,        methods:&#123;<span class="hljs-comment">// 函数</span>            currentTime1:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();            &#125;        &#125;,        computed:&#123;<span class="hljs-comment">// 计算属性  </span>            currentTime2:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();            &#125;        &#125;    &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>调用方法时，每次都需要计算，如果这个结果不是经常变化的，此时就可以将这个值缓存起来，采用计算属性就可以方便的做到这一点，计算属性的值就是为了不经常变化的计算结果缓存起来，以节约系统开销。<br><img src="/2020/07/07/vue-03/4.png" srcset="/img/loading.gif" alt></p><p>可以看见计算属性currentTime2并没有更新。</p><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>在Vue.js中我们使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，即插槽，可以应用在组合组件的场景中。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vue"</span>&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    &lt;div&gt;</span><span class="hljs-comment">        &lt;p&gt;&lt;/p&gt;</span><span class="hljs-comment">        &lt;ul&gt;</span><span class="hljs-comment">            &lt;li&gt;&lt;/li&gt;</span><span class="hljs-comment">            &lt;li&gt;&lt;/li&gt;</span><span class="hljs-comment">            &lt;li&gt;&lt;/li&gt;</span><span class="hljs-comment">        &lt;/ul&gt;</span><span class="hljs-comment">    &lt;/div&gt;</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">demo</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">demo_01</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"demo_01"</span> <span class="hljs-attr">v-bind:p_value</span>=<span class="hljs-string">"p_value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo_01</span>&gt;</span>  <span class="hljs-comment">&lt;!-- slot属性用于连接--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">demo_02</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"demo_02"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">" li in li_value"</span> <span class="hljs-attr">v-bind:li_value</span>=<span class="hljs-string">"li"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo_02</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">demo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 组件1  相当于一个插排</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo"</span>, &#123;</span><span class="actionscript">        template: <span class="hljs-string">'&lt;div&gt;'</span> +</span><span class="handlebars"><span class="xml">                       '<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"demo_01"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>'+  // 代替上面的<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> name属性用于连接</span></span><span class="actionscript">                        <span class="hljs-string">'&lt;ul&gt;'</span>+</span><span class="handlebars"><span class="xml">                              '<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"demo_02"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>'+  // 代替上面的<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span></span><span class="actionscript">                        <span class="hljs-string">'&lt;/ul&gt;'</span>+</span><span class="actionscript">                  <span class="hljs-string">'&lt;/div&gt;'</span></span>    &#125;)<span class="actionscript">    <span class="hljs-comment">// 组件2  相当于一个插头  记为插头1  对应插排中的第一个插槽</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo_01"</span>,&#123;</span><span class="actionscript">        props: [<span class="hljs-string">"p_value"</span>],  <span class="hljs-comment">// 接收vue实体对象中的数据</span></span><span class="handlebars"><span class="xml">        template: '<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;p_value&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>'</span></span>    &#125;)<span class="actionscript">    <span class="hljs-comment">// 组件3  相当于一个插头  记为插头2  对应插排中的第二个插槽</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo_02"</span>,&#123;</span><span class="actionscript">        props: [<span class="hljs-string">"li_value"</span>],</span><span class="handlebars"><span class="xml">        template: '<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;li_value&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>'</span></span>    &#125;)<span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span>        el: vue,        data: &#123;<span class="actionscript">            p_value: <span class="hljs-string">"这是一个列表"</span>,</span><span class="actionscript">            li_value:[<span class="hljs-string">"列表数据1"</span>,<span class="hljs-string">"列表数据2"</span>,<span class="hljs-string">"列表数据3"</span>]</span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>自定义事件分发：<br><img src="/2020/07/07/vue-03/1.png" srcset="/img/loading.gif" alt></p><p>​                 </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vue"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">demo</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">demo_01</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"demo_01"</span> <span class="hljs-attr">v-bind:p_value</span>=<span class="hljs-string">"p_value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo_01</span>&gt;</span>  <span class="hljs-comment">&lt;!-- slot属性用于连接--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">demo_02</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"demo_02"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">" (li,index) in li_value"</span></span><span class="hljs-tag">                 <span class="hljs-attr">v-bind:li_value</span>=<span class="hljs-string">"li"</span> <span class="hljs-attr">v-bind:index</span>=<span class="hljs-string">"index"</span></span><span class="hljs-tag">                 <span class="hljs-attr">v-on:remove</span>=<span class="hljs-string">"removeItem(index)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo_02</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">demo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 组件1  相当于一个插排</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo"</span>, &#123;</span><span class="actionscript">        template: <span class="hljs-string">'&lt;div&gt;'</span> +</span><span class="handlebars"><span class="xml">                       '<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"demo_01"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>'+  // 代替上面的<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> name属性用于连接</span></span><span class="actionscript">                        <span class="hljs-string">'&lt;ul&gt;'</span>+</span><span class="handlebars"><span class="xml">                              '<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"demo_02"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>'+  // 代替上面的<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span></span><span class="actionscript">                        <span class="hljs-string">'&lt;/ul&gt;'</span>+</span><span class="actionscript">                  <span class="hljs-string">'&lt;/div&gt;'</span></span>    &#125;)<span class="actionscript">    <span class="hljs-comment">// 组件2  相当于一个插头  记为插头1  对应插排中的第一个插槽</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo_01"</span>,&#123;</span><span class="actionscript">        props: [<span class="hljs-string">"p_value"</span>],  <span class="hljs-comment">// 接收vue实体对象中的数据</span></span><span class="handlebars"><span class="xml">        template: '<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;p_value&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>'</span></span>    &#125;)<span class="actionscript">    <span class="hljs-comment">// 组件3  相当于一个插头  记为插头2  对应插排中的第二个插槽</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo_02"</span>,&#123;</span><span class="actionscript">        props: [<span class="hljs-string">"li_value"</span>,<span class="hljs-string">"index"</span>],</span><span class="handlebars"><span class="xml">        template: '<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;li_value&#125;&#125;</span><span class="xml"><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"remove"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>',</span></span>        methods:&#123;<span class="actionscript">            remove:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(index)</span> </span>&#123;</span><span class="actionscript">                <span class="hljs-comment">// alert("删除！！!");</span></span><span class="actionscript">                <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">"remove"</span>,index);</span>            &#125;        &#125;    &#125;)    <span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span>        el: vue,        data: &#123;<span class="actionscript">            p_value: <span class="hljs-string">"这是一个列表"</span>,</span><span class="actionscript">            li_value:[<span class="hljs-string">"列表数据1"</span>,<span class="hljs-string">"列表数据2"</span>,<span class="hljs-string">"列表数据3"</span>]</span>        &#125;,        methods: &#123;<span class="actionscript">            removeItem:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(index)</span> </span>&#123;</span><span class="actionscript">                alert(<span class="hljs-string">"删除了"</span> + <span class="hljs-keyword">this</span>.li_value[index]);</span><span class="actionscript">                <span class="hljs-keyword">this</span>.li_value.splice(index,<span class="hljs-number">1</span>);<span class="hljs-comment">// 从index开始删除一个元素</span></span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向数据绑定与传输</title>
    <link href="/2020/07/07/vue-02/"/>
    <url>/2020/07/07/vue-02/</url>
    
    <content type="html"><![CDATA[<h2 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h2><p>vue.js是ViewModel层的实现者，数据的双向绑定，即当数据发生变化时，视图也就发生变化，当视图发生变化时，数据也会跟着同步变化。<a id="more"></a></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入点内容"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>输入的内容：&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span> &gt;</span>男         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span>&gt;</span>女    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>选择的是&#123;&#123;gender&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    学科：<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"major"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> <span class="hljs-attr">disabled</span>&gt;</span>--请选择--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"java"</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"python"</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"c++"</span>&gt;</span>c++<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已选择：&#123;&#123;major&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            message:<span class="hljs-string">"Hello,vue!"</span>,</span>            gender: 0,<span class="actionscript">            major: <span class="hljs-string">""</span></span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结果：<br><img src="/2020/07/07/vue-02/1.png" srcset="/img/loading.gif" alt></p><p><strong>注意：v-model会忽略所有表单元素的value，checked，selected 特性的初始值而总是将Vue实例中的数据作为数据来源。应该通过js在组件的data选项中声明初始值。</strong></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件是vue可复用实例，就是一组模板。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 传递给组件中的props   --&gt;</span>    <span class="hljs-comment">&lt;!-- v-for="item in items" 遍历Vue实例中定义名为items的数组，并创建同等数量的组件 --&gt;</span>    <span class="hljs-comment">&lt;!-- v-bind:item="item" 将遍历到的value绑定到组件中prop定义的名为item的属性上</span><span class="hljs-comment">         --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">demo</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"value in items"</span> <span class="hljs-attr">v-bind:item</span>=<span class="hljs-string">"value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 定义一个Vue组件component</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">"demo"</span>,&#123;</span><span class="actionscript">        props: [<span class="hljs-string">'item'</span>],<span class="hljs-comment">// 接收组件传来的参数</span></span><span class="handlebars"><span class="xml">        template: "<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>"</span></span>    &#125;)<span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            items:[<span class="hljs-string">"java"</span>,<span class="hljs-string">"python"</span>,<span class="hljs-string">"linux"</span>]</span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h2><p>Axios是一个可以用在浏览器端和node.js的异步通信框架，主要作用就是实现ajax异步通信。</p><p>引入axios.js</p><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>创建一个data.json文件作为数据</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"zyz"</span>,  <span class="hljs-attr">"age"</span>: <span class="hljs-number">21</span>,  <span class="hljs-attr">"address"</span>: &#123;    <span class="hljs-attr">"city"</span>: <span class="hljs-string">"天门"</span>,    <span class="hljs-attr">"province"</span>: <span class="hljs-string">"湖北"</span>,    <span class="hljs-attr">"country"</span>: <span class="hljs-string">"中国"</span>  &#125;,  <span class="hljs-attr">"links"</span>: [    &#123;      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"bilibili"</span>,      <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://www.bilibili.com"</span>    &#125;,    &#123;      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"淘宝"</span>,      <span class="hljs-attr">"url"</span>: <span class="hljs-string">"http://www.taobao.com"</span>    &#125;,    &#123;      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"谷歌"</span>,      <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://www.google.com"</span>    &#125;  ]&#125;</code></pre><p><img src="/2020/07/07/vue-02/3.png" srcset="/img/loading.gif" alt></p><p>解析data.json</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vue"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;info.links&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">"info.links[0].url"</span>&gt;</span>点击访问bilibili<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">"#vue"</span>,</span><span class="actionscript">        <span class="hljs-comment">// data() 接收数据</span></span>        data()&#123;<span class="actionscript">            <span class="hljs-keyword">return</span>&#123;</span><span class="actionscript">                <span class="hljs-comment">// 请求的返回参数必须和json字符串一样</span></span>                info:&#123;<span class="actionscript">                    name: <span class="hljs-literal">null</span>,</span><span class="actionscript">                    age: <span class="hljs-literal">null</span>,</span>                    address: &#123;<span class="actionscript">                        city: <span class="hljs-literal">null</span>,</span><span class="actionscript">                        province: <span class="hljs-literal">null</span>,</span><span class="actionscript">                        country: <span class="hljs-literal">null</span></span>                    &#125;,                    links: [                        &#123;<span class="actionscript">                            name: <span class="hljs-literal">null</span>,</span><span class="actionscript">                            url: <span class="hljs-literal">null</span></span>                        &#125;,                        &#123;<span class="actionscript">                            name: <span class="hljs-literal">null</span>,</span><span class="actionscript">                            url: <span class="hljs-literal">null</span></span>                        &#125;,                        &#123;<span class="actionscript">                            name: <span class="hljs-literal">null</span>,</span><span class="actionscript">                            url: <span class="hljs-literal">null</span></span>                        &#125;                    ]                &#125;            &#125;        &#125;,        mounted()&#123;<span class="javascript">            axios.get(<span class="hljs-string">'../data.json'</span>).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>(<span class="hljs-keyword">this</span>.info=response.data));</span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>结果：<br><img src="/2020/07/07/vue-02/2.png" srcset="/img/loading.gif" alt></p><p>添加v-cloak，并将其display属性置为none，可以减少页面闪烁</p><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"vue"</span> v-cloak&gt;&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">style</span>&gt;<span class="hljs-selector-attr">[v-cloak]</span>&#123;    <span class="hljs-attribute">display</span>: none;&#125;&lt;/style&gt;</code></pre><p>但是，我貌似没看见效果，，，</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础语法</title>
    <link href="/2020/07/06/vue-01/"/>
    <url>/2020/07/06/vue-01/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vue 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注<strong>视图层</strong>，不仅易于上手，还便于与第三方库或既有项目整合。(如vue_router：跳转，vue_resource：通信，vuex：管理)<a id="more"></a></p><h2 id="MVVM模式的实现者"><a href="#MVVM模式的实现者" class="headerlink" title="MVVM模式的实现者"></a>MVVM模式的实现者</h2><p><strong>Model：</strong>模型层，在这里表示javascript<br><strong>View：</strong>视图层，在这里表示DOM（html操作的元素）<br><strong>VIewModel：</strong>连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者</p><p>在MVVM架构中，是不允许数据和视图进行直接通信的，只能通过ModelView来通信，而ModelView就是定义了一个Observer观察者。</p><p>ViewModel能够观察到数据发生变化，并对视图对应的内容进行更新，同时，也能够监听到视图的变化，通知数据进行改变。</p><p>所以，Vue.js就是MVVM的实现者，它的核心就是实现了<strong>DOM监听</strong>和<strong>数据绑定</strong>。</p><p><img src="/2020/07/06/vue-01/1.png" srcset="/img/loading.gif" alt></p><h2 id="第一个vue程序"><a href="#第一个vue程序" class="headerlink" title="第一个vue程序"></a>第一个vue程序</h2><p>引入vue.js</p><p>1、使用cdn</p><pre><code class="hljs js">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>or</p><pre><code class="hljs js">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>2、下载vue.js后，引入本地的vue.js</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            message:<span class="hljs-string">"Hello,vue!"</span></span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="使用v-bind绑定元素特性"><a href="#使用v-bind绑定元素特性" class="headerlink" title="使用v-bind绑定元素特性"></a>使用v-bind绑定元素特性</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">"message"</span>&gt;</span>鼠标悬停查看信息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            message:<span class="hljs-string">"Hello,vue!"</span></span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>指令带有前缀v-，表示它们是vue提供的特殊特性，它们会在渲染的DOM上应用特殊的响应式行为。</p><h2 id="条件渲染——判断"><a href="#条件渲染——判断" class="headerlink" title="条件渲染——判断"></a>条件渲染——判断</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"flag"</span>&gt;</span>flag为true<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>flag为false<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"type==='A'"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"type==='B'"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>不是A也不是B<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            flag: <span class="hljs-literal">true</span>,</span><span class="actionscript">            type: <span class="hljs-string">'C'</span></span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="列表渲染——循环"><a href="#列表渲染——循环" class="headerlink" title="列表渲染——循环"></a>列表渲染——循环</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in items"</span>&gt;</span>&#123;&#123;item.message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"value in arr1"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">"#app"</span>,</span>        data: &#123;            items: [<span class="actionscript">                &#123;message: <span class="hljs-string">'javaSE'</span>&#125;, &#123;message: <span class="hljs-string">'javaWEB'</span>&#125;, &#123;message: <span class="hljs-string">'javaEE'</span>&#125;</span>            ],<span class="actionscript">            arr1: [<span class="hljs-string">"起床"</span>, <span class="hljs-string">"学习"</span>, <span class="hljs-string">"吃饭"</span>, <span class="hljs-string">"睡觉"</span>]</span>        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>打印索引：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in items"</span>&gt;</span>&#123;&#123;item.message&#125;&#125;---&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"fun1"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span>        data:&#123;<span class="actionscript">            message: <span class="hljs-string">"这是一个响应函数"</span></span>        &#125;,<span class="actionscript">        methods:&#123;<span class="hljs-comment">// 方法定义在Vue的method对象中  v-on:函数名   绑定事件</span></span><span class="actionscript">            fun1:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">                alert(<span class="hljs-keyword">this</span>.message);</span>            &#125;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC核心技术</title>
    <link href="/2020/07/05/SpringMVC-04/"/>
    <url>/2020/07/05/SpringMVC-04/</url>
    
    <content type="html"><![CDATA[<h2 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h2><p>SpringMVC 框架把原来Servlet 中的请求转发和重定向操作进行了封装。<br>现在可以使用简单的方式实现转发和重定向。<a id="more"></a><br>forward:表示转发，实现request.getRequestDispatcher(“xx.jsp”).forward()<br>redirect:表示重定向，实现response.sendRedirect(“xxx.jsp”)</p><h3 id="1、请求转发"><a href="#1、请求转发" class="headerlink" title="1、请求转发"></a>1、请求转发</h3><p>在框架中，使用forward，redirect，与视图解析器无关。</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 框架的 forward请求转发</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/doForward"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doForward</span><span class="hljs-params">(String name,Integer age)</span> </span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"Controller请求转发跳转成功~"</span>);        modelAndView.addObject(<span class="hljs-string">"name"</span>,name);        modelAndView.addObject(<span class="hljs-string">"age"</span>,age);        <span class="hljs-comment">// 使用forward显式转发</span>        <span class="hljs-comment">// 一般用于跳转到视图解析器中没有指定的路径</span>        modelAndView.setViewName(<span class="hljs-string">"forward:/WEB-INF/view/show.jsp"</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre><p>请求页面：</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;% String basePath = request.getContextPath()+<span class="hljs-string">"/"</span>;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;index.jsp&lt;/title&gt;    &lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>/&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=<span class="hljs-string">"doForward"</span> method=<span class="hljs-string">"post"</span>&gt;        姓名: &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"name"</span>&gt;&lt;br/&gt;        年龄: &lt;input type=<span class="hljs-string">"number"</span> name=<span class="hljs-string">"age"</span>&gt;&lt;br/&gt;        &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"请求转发"</span>&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>转发页面：</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;show.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;msg数据：$&#123;msg&#125;&lt;/p&gt;    &lt;p&gt;name：$&#123;name&#125;&lt;/p&gt;    &lt;p&gt;age：$&#123;age&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="2、重定向"><a href="#2、重定向" class="headerlink" title="2、重定向"></a>2、重定向</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 框架的 redirect 重定向</span><span class="hljs-comment"> * 1、框架会把 Model中的简单数据类型的数据，转换为String使用，作为hello.jsp的get请求参数</span><span class="hljs-comment"> * 目的是在 doRedirect 和 hello.jsp 两次请求之间传递数据</span><span class="hljs-comment"> * 2、在目标 hello.jsp中使用参数集合对象$&#123;param&#125;获取请求参数值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> age</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/doRedirect"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doRedirect</span><span class="hljs-params">(String name,Integer age)</span> </span>&#123;    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();    modelAndView.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"Controller重定向跳转成功~"</span>);    modelAndView.addObject(<span class="hljs-string">"name"</span>,name);    modelAndView.addObject(<span class="hljs-string">"age"</span>,age);    <span class="hljs-comment">// 使用redirect重定向</span>    modelAndView.setViewName(<span class="hljs-string">"redirect:/hello.jsp"</span>);    <span class="hljs-keyword">return</span> modelAndView;&#125;</code></pre><p>请求页面：</p><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;% String basePath = request.getContextPath()+<span class="hljs-string">"/"</span>;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;index.jsp&lt;/title&gt;    &lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>/&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=<span class="hljs-string">"doRedirect"</span> method=<span class="hljs-string">"post"</span>&gt;        姓名: &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"name"</span>&gt;&lt;br/&gt;        年龄: &lt;input type=<span class="hljs-string">"number"</span> name=<span class="hljs-string">"age"</span>&gt;&lt;br/&gt;        &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"重定向"</span>&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>重定向页面：</p><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;hello.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;msg数据：$&#123;param.msg&#125;&lt;/p&gt;    &lt;p&gt;name：$&#123;param.name&#125;&lt;/p&gt;    &lt;p&gt;age：$&#123;param.age&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>springmvc采用全局异常处理，把controller中的异常处理集中到一个地方。采用aop的思想，将业务处理与异常处理分开，解耦合。</p><p>1、为了方便演示，自定义了几个异常类</p><p>自定义用户异常类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyUserException</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyUserException</span><span class="hljs-params">(String message)</span> </span>&#123;        <span class="hljs-keyword">super</span>(message);    &#125;&#125;</code></pre><p>再定义两个子类继承用户异常类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyUserException</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeException</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AgeException</span><span class="hljs-params">(String message)</span> </span>&#123;        <span class="hljs-keyword">super</span>(message);    &#125;&#125;</code></pre><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyUserException</span> </span>&#123;    public <span class="hljs-type">NameException</span>() &#123;        <span class="hljs-keyword">super</span>();    &#125;    public <span class="hljs-type">NameException</span>(<span class="hljs-type">String</span> message) &#123;        <span class="hljs-keyword">super</span>(message);    &#125;&#125;</code></pre><p>2、编写专门处理异常的controller类</p><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><span class="hljs-comment">// 控制器增强，增加异常处理功能 需要配置组件扫描器，声明此类所在的包名</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;    <span class="hljs-comment">// 定义方法处理异常</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理 name 异常的方法</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e controller抛出的异常对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@ExceptionHandler</span>(value = NameException<span class="hljs-class">.<span class="hljs-keyword">class</span>)// 要处理的异常类型</span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">ModelAndView</span> <span class="hljs-title">doNameException</span>(<span class="hljs-title">Exception</span> <span class="hljs-title">e</span>) </span>&#123;        <span class="hljs-comment">// 1、记录异常，记录到数据库，日志文件，记录日志发生的时间，哪个方法发生的异常，异常错误内容</span>        <span class="hljs-comment">// 2、发送通知，把异常信息发送给相关人员</span>        <span class="hljs-comment">// 3、用户友好的提示</span>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"姓名必须是zyz！"</span>);        modelAndView.addObject(<span class="hljs-string">"ex"</span>, e);        modelAndView.setViewName(<span class="hljs-string">"nameError"</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;    <span class="hljs-meta">@ExceptionHandler</span>(value = AgeException<span class="hljs-class">.<span class="hljs-keyword">class</span>)// 要处理的异常类型</span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">ModelAndView</span> <span class="hljs-title">doAgeException</span>(<span class="hljs-title">Exception</span> <span class="hljs-title">e</span>) </span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"年龄必须小于80！"</span>);        modelAndView.addObject(<span class="hljs-string">"ex"</span>, e);        modelAndView.setViewName(<span class="hljs-string">"ageError"</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;    <span class="hljs-comment">// 处理未知异常  在开发过程中一般像这样使用，编写一个方法就能处理所有的异常了</span>    <span class="hljs-meta">@ExceptionHandler</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOtherException</span><span class="hljs-params">(Exception e)</span> </span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"其他异常"</span>);        modelAndView.addObject(<span class="hljs-string">"ex"</span>, e);        modelAndView.setViewName(<span class="hljs-string">"defaultError"</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre><p>3、添加组件扫描器，声明处理异常的方法所在的包</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注解驱动--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-comment">&lt;!-- 处理异常--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.handler"</span>/&gt;</span></code></pre><p>4、编写异常跳转的页面</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>1、拦截器是springmvc中的一种，需要实现HandlerInterceptor接口<br>2、拦截器与过滤器类似，功能方向的侧重点不同。<br>过滤器是用来过滤请求参数，设置编码字符集等工作。<br>拦截器是拦截用户请求，做请求判断。<br>3、拦截器是全局的，可以对多个Controller做拦截<br>一个项目可以有多个拦截器，一起拦截用户请求。<br>用处：用户登录，权限检查，记录日志</p><p><strong>拦截器的执行时间：</strong></p><p>1、在请求处理之前，也就是controller类中的方法执行之前先被拦截。<br>2、在控制器方法执行之后也会执行拦截器。<br>3、在请求处理完成后也会执行拦截器。</p><p><strong>拦截器类</strong></p><pre><code class="hljs java"><span class="hljs-comment">// 拦截器类，拦截用户请求</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 预处理方法</span><span class="hljs-comment">     * 1、在控制器方法之前执行</span><span class="hljs-comment">     * 2、获取请求信息，验证请求是否符合要求</span><span class="hljs-comment">     *   可以验证用户是否登录，是否有权限访问某个链接地址 url</span><span class="hljs-comment">     *   验证失败，可以截断请求，请求不能被处理。</span><span class="hljs-comment">     *   验证成功，可以放行请求，执行控制器方法</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler  被拦截的控制器对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  true 表示验证成功，可以执行处理器中方法</span><span class="hljs-comment">     *          false 表示验证失败，请求到达拦截器就截止了，请求没有被处理</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">"拦截器MyInterceptor的preHandle()"</span>);        <span class="hljs-comment">// 给浏览器一个返回结果</span>        request.getRequestDispatcher(<span class="hljs-string">"/tips.jsp"</span>).forward(request,response);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 后处理方法</span><span class="hljs-comment">     * 1、在处理器方法之后执行</span><span class="hljs-comment">     * 2、能够获取到处理器方法中的返回值ModelAndView，并且可以修改</span><span class="hljs-comment">     * 3、主要对原来的执行结果做修正</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 被拦截的控制器对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modelAndView 处理器方法的返回值</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">"拦截器MyInterceptor的postHandle()"</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 最后执行的方法</span><span class="hljs-comment">     * 1、请求处理完成后执行，即对视图进行了forward</span><span class="hljs-comment">     * 2、一般是做资源回收，释放内存</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">"拦截器MyInterceptor的afterCompletion()"</span>);    &#125;&#125;</code></pre><p><strong>声明拦截器</strong></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明拦截器  可以有多个--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 指定拦截器的url--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--声明拦截器对象--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.handler.MyInterceptor"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre><p>preHandle()返回true时：<br><img src="/2020/07/05/SpringMVC-04/1.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/05/SpringMVC-04/2.png" srcset="/img/loading.gif" alt><br>返回false，跳转到提示页面，请求被终止，不会执行preHandle()以后的方法</p><p>当有多个拦截器时<br><img src="/2020/07/05/SpringMVC-04/3.png" srcset="/img/loading.gif" alt></p><p><strong>拦截器与过滤器的区别</strong></p><p>1、过滤器是Servlet中的对象，拦截器是框架中的对象；<br>2、过滤器是实现Filter接口的对象，拦截器是实现HandlerInterceptor接口的对象；<br>3、过滤器是用来设置request，response的 参数，属性的，侧重对数据的过滤<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拦截器是用来验证请求的，能截断请求<br>4、过滤器是在拦截器之前执行的<br>5、过滤器可以处理jsp，js，html等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拦截器是侧重拦截Controller的对象</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2020/07/04/algorithm-02/"/>
    <url>/2020/07/04/algorithm-02/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序（Bubble-Sorting）"><a href="#冒泡排序（Bubble-Sorting）" class="headerlink" title="冒泡排序（Bubble Sorting）"></a>冒泡排序（Bubble Sorting）</h2><p><strong>基本思想：</strong></p><p>将排序序列从前向后，依次比较相邻元素的值，若发生逆序则交换，使值较大的元素逐渐从前部移向后部。<a id="more"></a><br><img src="/2020/07/04/algorithm-02/1.png" srcset="/img/loading.gif" alt></p><p><strong>小结：</strong></p><p>1、总共要进行数组长度 -1 趟。<br>2、每趟过后，就会将值最大的元素放在最后面，因此，每趟比较的次数都在逐渐减少。<br>3、如果发现在某趟排序中没有发生过一次交换，说明排序已经完成了，可以提前结束，这就是优化。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;                    flag = <span class="hljs-keyword">false</span>;                    temp = arr[j];                    arr[j] = arr[j + <span class="hljs-number">1</span>];                    arr[j + <span class="hljs-number">1</span>] = temp;                &#125;            &#125;            System.out.println(<span class="hljs-string">"第"</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">"趟："</span> + Arrays.toString(arr));            <span class="hljs-keyword">if</span> (flag) &#123;<span class="hljs-comment">// 一次交换都没有发生，直接跳出循环</span>                <span class="hljs-keyword">break</span>;            &#125;        &#125;        System.out.println(Arrays.toString(arr));    &#125;</code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-keyword">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;    <span class="hljs-keyword">int</span>[] arr2 = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;    bubbleSort(arr1);    bubbleSort(arr2);&#125;</code></pre><p><strong>运行结果：</strong><br><img src="/2020/07/04/algorithm-02/2.png" srcset="/img/loading.gif" alt></p><p>时间复杂度为：O(n²)</p><h2 id="选择排序（SelectSort）"><a href="#选择排序（SelectSort）" class="headerlink" title="选择排序（SelectSort）"></a>选择排序（SelectSort）</h2><p><strong>基本思想：</strong></p><p>第一次从arr[0]到arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]到arr[n-1]中选最小值，与arr[1]交换，……，第i次从arr[i-1]到arr[n-1]中选取最小值，与arr[i-1]交换，……，第n-1次从arr[n-2]到arr[n-1]中选取最小值与arr[n-2]交换，总共通过n-1次，得到一个从小到大排列的有序序列。<br><img src="/2020/07/04/algorithm-02/3.png" srcset="/img/loading.gif" alt></p><p><strong>小结</strong></p><p>1、总共要进行数组长度 - 1轮排序<br>2、每一轮排序，又是一个小循环，<br>      循环的规则：&lt;1&gt; 假定当前的数是最小数；<br>                             &lt;2&gt; 然后和后面的每一个数比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下                                   标；<br>                            &lt;3&gt; 当遍历到数组的最后时，就得到本轮的最小数，然后交换</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;            <span class="hljs-keyword">int</span> minIndex = i;            <span class="hljs-keyword">int</span> min = arr[i];            <span class="hljs-comment">// 找到最小值</span>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>;j &lt; arr.length;j++)&#123;                <span class="hljs-keyword">if</span>(min&gt;arr[j])&#123;                    min = arr[j];                    minIndex = j;                &#125;            &#125;            <span class="hljs-comment">// 交换</span>            <span class="hljs-keyword">if</span>(minIndex!=i)&#123;                arr[minIndex] = arr[i];<span class="hljs-comment">// 将当前数的值赋给最小数所在的位置</span>                arr[i] = min; <span class="hljs-comment">// 将最小数的值赋给当前数</span>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 当前数的索引==最小数的索引则不需要交换，直接跳出循环</span>                <span class="hljs-keyword">break</span>;            &#125;            System.out.println(<span class="hljs-string">"第"</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">"轮："</span>+ Arrays.toString(arr));        &#125;        System.out.println(Arrays.toString(arr));    &#125;</code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-keyword">int</span>[] arr1 = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;    <span class="hljs-keyword">int</span>[] arr2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;    selectSort(arr2);    selectSort(arr1);&#125;</code></pre><p><strong>运行结果：</strong><br><img src="/2020/07/04/algorithm-02/4.png" srcset="/img/loading.gif" alt></p><h2 id="插入排序（Insertion-Sorting）"><a href="#插入排序（Insertion-Sorting）" class="headerlink" title="插入排序（Insertion Sorting）"></a>插入排序（Insertion Sorting）</h2><p><strong>基本思想：</strong></p><p>把n个待排序的元素看成一个有序表和一个无序表，<strong>开始时有序表只包含1个元素无序表包含n-1个元素</strong>，在排序过程中每次从无序表中取出一个元素，把它的排列码依次与有序表元素的排列码比较，将它插入到有序表的适当位置，使之成为新的有序表。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;        insertSort(arr);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;        <span class="hljs-keyword">int</span> insertVal = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> insertIndex = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;            <span class="hljs-comment">// 定义待插入数</span>            insertVal = arr[i];            <span class="hljs-comment">// 与待插入数比较的元素的索引  也就是待插入数的前一个元素</span>            insertIndex = i - <span class="hljs-number">1</span>;            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;                arr[insertIndex+<span class="hljs-number">1</span>] = arr[insertIndex];                insertIndex--;<span class="hljs-comment">// 前移</span>            &#125;            <span class="hljs-keyword">if</span>(insertIndex != i - <span class="hljs-number">1</span>)&#123;                arr[insertIndex+<span class="hljs-number">1</span>] = insertVal;            &#125;            System.out.println(<span class="hljs-string">"第"</span>+i +<span class="hljs-string">"轮："</span>+Arrays.toString(arr));        &#125;    &#125;&#125;</code></pre><p><strong>运行结果 ：</strong><br><img src="/2020/07/04/algorithm-02/5.png" srcset="/img/loading.gif" alt></p><h2 id="希尔排序（Shell-Sorting）"><a href="#希尔排序（Shell-Sorting）" class="headerlink" title="希尔排序（Shell Sorting）"></a>希尔排序（Shell Sorting）</h2><p>是简单插入排序经过改进之后的一个<strong>更高效的版本</strong></p><p><strong>实现思路：</strong></p><p>原始数据：<br><img src="/2020/07/04/algorithm-02/6.png" srcset="/img/loading.gif" alt></p><p>初始增量 gap=length/2=5，意味着整个数组分为5组：[8,3]，[9,5]，[1,4]，[7,6]，[2,0]<br><img src="/2020/07/04/algorithm-02/7.png" srcset="/img/loading.gif" alt></p><p>对这5组分别进行直接插入排序，然后缩小增量gap=5/2=2，分成两组，[3,1,0,9,7]，[5,6,8,4,2]<br><img src="/2020/07/04/algorithm-02/8.png" srcset="/img/loading.gif" alt></p><p>分别对以上两组进行直接插入排序<br><img src="/2020/07/04/algorithm-02/10.png" srcset="/img/loading.gif" alt></p><p>此时，仅仅需要 对以上数列简单微调，无需大量移动操作就可以完成排序要求。<br><img src="/2020/07/04/algorithm-02/9.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM整合开发</title>
    <link href="/2020/07/04/SpringMVC-03/"/>
    <url>/2020/07/04/SpringMVC-03/</url>
    
    <content type="html"><![CDATA[<p>SSM：SpringMVC + Spring +MyBatis</p><p>SpringMVC：视图层，用于接收页面请求，显示处理结果<br>Spring：业务层，管理service，dao，工具类对象<br>Mybatis：持久层，访问数据库<a id="more"></a></p><p>用户发起请求—&gt;SpringMVC接收—&gt;Spring中调用的Service对象处理事务—&gt;MyBatis处理数据</p><h2 id="1、整合的思路"><a href="#1、整合的思路" class="headerlink" title="1、整合的思路"></a>1、整合的思路</h2><p>在进行整合时，有两个容器对象<br>1、SpringMVC容器，管理Controller控制器对象<br>2、Spring容器，管理Service，Dao，工具类对象<br>我们要把使用的对象交给合适的容器去创建，管理。<br>把Controller还有web开发相关对象交给SpringMVC容器，将这些web使用的对象写在springmvc配置文件中。<br>把Service，Dao对象定义在Spring的配置文件中，让Spring管理这些对象。</p><p> <strong>两个容器之间的关系：</strong><br>SpringMVC容器是Spring的子容器，类似于Java中的子父类关系——子类可以访问父类的数据。<br>即在子容器SpringMVC中的Controller可以访问父容器Spring中的Service对象，就可以实现Controller使用Service对象。</p><h2 id="2、整合的步骤"><a href="#2、整合的步骤" class="headerlink" title="2、整合的步骤"></a>2、整合的步骤</h2><p>使用之前创建好的mybatis数据库，使用student表</p><h3 id="1、创建maven-web项目"><a href="#1、创建maven-web项目" class="headerlink" title="1、创建maven web项目"></a>1、创建maven web项目</h3><h3 id="2、加入依赖"><a href="#2、加入依赖" class="headerlink" title="2、加入依赖"></a>2、加入依赖</h3><p>springmvc，spring，mybatis三个框架的依赖，jackson依赖，mysql驱动，druid连接池，jsp,servlet依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- servlet依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jsp依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--springmvc依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--jackson--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--mysql--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--druid--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h3 id="3、写web-xml"><a href="#3、写web-xml" class="headerlink" title="3、写web.xml"></a>3、写web.xml</h3><p>1、注册中央处理器DispatcherServlet，<br>目的：1、创建springmvc容器对象，才能创建Controller对象；2、创建的是Servlet，才能接收用户的请求。</p><p>2、注册监听器ContextLoaderListener，<br>目的：创建spring容器对象，才能创建service，dao等对象</p><p>3、注册字符集过滤器CharacterEncodingFilter，<br>目的：解决post请求乱码</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><span class="hljs-comment">&lt;!--  注册中央调度器  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myweb<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myweb<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-comment">&lt;!-- 注册监听器  用于创建Spring容器   --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/application.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><span class="hljs-comment">&lt;!--注册字符集过滤器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><h3 id="4、创建包"><a href="#4、创建包" class="headerlink" title="4、创建包"></a>4、创建包</h3><p>创建controller、service、dao、bean包<br><img src="/2020/07/04/SpringMVC-03/1.png" srcset="/img/loading.gif" alt></p><h3 id="5、写springmvc，spring，mybatis的配置文件"><a href="#5、写springmvc，spring，mybatis的配置文件" class="headerlink" title="5、写springmvc，spring，mybatis的配置文件"></a>5、写springmvc，spring，mybatis的配置文件</h3><p>1、springmvc.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--springmvc配置文件，声明 controller和它相关的对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.controller"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--注解驱动--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>2、applicationContext.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--  将数据库配置文件写入单独的文件中        --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:conf/jdbc.properties"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--声明数据源  用于连接数据库--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myDataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span></span><span class="hljs-tag">          <span class="hljs-attr">init-method</span>=<span class="hljs-string">"init"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.maxActive&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- mybatis主配置文件的位置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:conf/mybatisConfig.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 声明Dao类</span><span class="hljs-comment">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span><span class="hljs-comment">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--  声明service的注解@Service所在的包名位置  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.service"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--  事务配置：注解的配置或aspectj的配置  --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>3、mybatisConfig.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--  注册映射文件  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>4、jdbc.properties</p><pre><code class="hljs ini"><span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/mybatis?serverTimezone=Asia/Shanghai<span class="hljs-attr">jdbc.username</span>=root<span class="hljs-attr">jdbc.password</span>=<span class="hljs-number">2824199842</span><span class="hljs-attr">jdbc.maxActive</span>=<span class="hljs-number">20</span></code></pre><h3 id="6、编写各个包的代码"><a href="#6、编写各个包的代码" class="headerlink" title="6、编写各个包的代码"></a>6、编写各个包的代码</h3><p>bean实体类</p><p>dao接口和mapper文件</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zyz.dao;<span class="hljs-keyword">import</span> com.zyz.bean.Employee;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeDao</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmp</span><span class="hljs-params">(Employee employee)</span></span>;    <span class="hljs-function">List&lt;Employee&gt; <span class="hljs-title">listAllEmps</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zyz.dao.EmployeeDao"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listAllEmps"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zyz.bean.Employee"</span>&gt;</span>        select name,gender,email,dept_id deptId from employee order by id asc    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertEmp"</span>&gt;</span>        insert into employee(name,gender,email,dept_id) values (#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>service及其实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span></span>;    <span class="hljs-function">List&lt;Employee&gt; <span class="hljs-title">listAllEmps</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmployeeService</span> </span>&#123;    <span class="hljs-comment">// 引用类型自动注入@Autowired,@Resource    dao对象就在Spring容器中</span>    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> EmployeeDao employeeDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span> </span>&#123;        <span class="hljs-keyword">return</span> employeeDao.insertEmp(employee);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">listAllEmps</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> employeeDao.listAllEmps();    &#125;&#125;</code></pre><p>controller</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/employee"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> EmployeeService employeeService;    <span class="hljs-comment">// 员工注册</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/addEmployee.do"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">addStudent</span><span class="hljs-params">(Employee employee)</span></span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        String tips = <span class="hljs-string">"注册失败"</span>;        <span class="hljs-comment">// 调用service</span>        <span class="hljs-keyword">int</span> num = employeeService.addEmp(employee);        <span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">// 注册成功</span>            tips=<span class="hljs-string">"注册成功！"</span>;        &#125;        <span class="hljs-comment">// 添加数据</span>        modelAndView.addObject(<span class="hljs-string">"tips"</span>,tips);        <span class="hljs-comment">// 指定结果页面</span>        modelAndView.setViewName(<span class="hljs-string">"result"</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;    <span class="hljs-comment">// 员工查询</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/listAllEmps.do"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">listAllEmp</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> employeeService.listAllEmps();    &#125;&#125;</code></pre><h3 id="7、编写页面"><a href="#7、编写页面" class="headerlink" title="7、编写页面"></a>7、编写页面</h3><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;%String basePath = request.getContextPath()+<span class="hljs-string">"/"</span>;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;首页&lt;/title&gt;    &lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>/&gt;&lt;/head&gt;&lt;body&gt;    &lt;div align=<span class="hljs-string">"center"</span>&gt;        &lt;img src=<span class="hljs-string">"images/yy.jpg"</span> style=<span class="hljs-string">"width: 200px;height: 200px"</span>&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;&lt;a href="addEmployee.jsp"&gt;注册员工&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;a href="listAllEmployee.jsp"&gt;浏览员工&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;%String basePath = request.getContextPath() + <span class="hljs-string">"/"</span>;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;注册员工&lt;/title&gt;    &lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>/&gt;&lt;/head&gt;&lt;body&gt;&lt;div align=<span class="hljs-string">"center"</span>&gt;    &lt;form action=<span class="hljs-string">"employee/addEmployee.do"</span> method=<span class="hljs-string">"post"</span>&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;姓名：&lt;/td&gt;                &lt;td&gt;&lt;input type="text" name="name"/&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;性别：&lt;/td&gt;                &lt;td&gt;&lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"1"</span>/&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;                    &lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"0"</span>/&gt;女                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;电子邮箱：&lt;/td&gt;                &lt;td&gt;&lt;input type="text" name="email"/&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;部门编号：&lt;/td&gt;                &lt;td&gt;&lt;input type="number" name="deptId"/&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;                &lt;td&gt;&lt;input type="submit" value="注册"/&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;%String basePath = request.getContextPath() + <span class="hljs-string">"/"</span>;%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;查询所有员工&lt;/title&gt;    &lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>/&gt;    &lt;script type="text/javascript" src="js/jquery-3.4.1.js"&gt;&lt;/script&gt;    &lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;        $(function () &#123;            <span class="hljs-comment">// 当前页面dom对象加载后，立即执行</span>            loadEmpData();        &#125;)        <span class="hljs-function">function <span class="hljs-title">loadEmpData</span><span class="hljs-params">()</span> </span>&#123;            $.ajax(&#123;                url: <span class="hljs-string">"employee/listAllEmps.do"</span>,                type: <span class="hljs-string">"get"</span>,                dataType: <span class="hljs-string">"json"</span>,                success: function (data) &#123;                    <span class="hljs-comment">// alert(data);</span>                    <span class="hljs-comment">// 清除旧数据</span>                    $(<span class="hljs-string">"#info"</span>).html(<span class="hljs-string">""</span>);                    $.each(data, function (k, v) &#123;                        $(<span class="hljs-string">"#info"</span>).append(<span class="hljs-string">"&lt;tr&gt;"</span>)                            .append(<span class="hljs-string">"&lt;td&gt;"</span> + v.name + <span class="hljs-string">"&lt;/td&gt;"</span>)                            .append(<span class="hljs-string">"&lt;td&gt;"</span> + v.gender + <span class="hljs-string">"&lt;/td&gt;"</span>)                            .append(<span class="hljs-string">"&lt;td&gt;"</span> + v.email + <span class="hljs-string">"&lt;/td&gt;"</span>)                            .append(<span class="hljs-string">"&lt;td&gt;"</span> + v.deptId + <span class="hljs-string">"&lt;/td&gt;"</span>)                    &#125;)                &#125;            &#125;)        &#125;    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div align=<span class="hljs-string">"center"</span>&gt;    &lt;table border=<span class="hljs-string">"1"</span> cellspacing=<span class="hljs-string">"0"</span>&gt;        &lt;tr&gt;            &lt;th&gt;姓名&lt;/th&gt;            &lt;th&gt;性别&lt;/th&gt;            &lt;th&gt;电子邮箱&lt;/th&gt;            &lt;th&gt;部门编号&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;tbody id="info"&gt;&lt;/tbody&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>项目整体结构：</strong><br><img src="/2020/07/04/SpringMVC-03/2.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法的分类以及时间复杂度的介绍</title>
    <link href="/2020/07/03/algorithm-01/"/>
    <url>/2020/07/03/algorithm-01/</url>
    
    <content type="html"><![CDATA[<h2 id="排序算法的分类"><a href="#排序算法的分类" class="headerlink" title="排序算法的分类"></a>排序算法的分类</h2><p>内部排序：指将需要排序的所有数据都加载到内存中进行排序。</p><p>外部排序：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。<a id="more"></a><br><img src="/2020/07/03/algorithm-01/1.png" srcset="/img/loading.gif" alt></p><h2 id="度量算法执行时间的两种方法"><a href="#度量算法执行时间的两种方法" class="headerlink" title="度量算法执行时间的两种方法"></a>度量算法执行时间的两种方法</h2><p>1、事后统计的方法<br>这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素。这种方式，<strong>要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。</strong></p><p>2、事前估计的方法<br>通过分析某个算法的<strong>时间复杂度</strong>来衡量哪个算法更优。</p><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p><strong>时间频度</strong></p><p>一个算法中的语句执行的次数，记为T(n)</p><p>例如：</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> end = <span class="hljs-number">100</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=end;<span class="hljs-number">1</span>++)&#123;    total++;&#125;</code></pre><p>循环执行n次，最后再进行一次i&lt;=n的判断，故 T(n) = n+1   </p><p>直接计算：<code>total = (1+end)*end/2</code>  ， T(n) = 1</p><p><strong>时间复杂度</strong></p><p>例如：T(n)=3n²+7n+6<br>用常数1代替运行时间中所有加法常数；T(n)=3n²+7n+1<br>修改后的运行次数函数中，只保留最高次项；  T(n)=3n²<br>去除最高阶项的系数； T(n)=n²  =&gt; O(n²)</p><p><strong>常见的时间复杂度</strong><br><img src="/2020/07/03/algorithm-01/2.png" srcset="/img/loading.gif" alt></p><p>随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p><p><strong>常数阶O(1)</strong></p><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;i++;j++;</code></pre><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)。<br>上述代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p><p><strong>对数阶<img src="/2020/07/03/algorithm-01/3.png" srcset="/img/loading.gif" alt></strong></p><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(i&lt;n)&#123;    i=i*<span class="hljs-number">2</span>;&#125;</code></pre><p>在while循环中，每次都将i乘以2，假设循环了x次后就退出循环了，则2的x次方等于n，即x=<img src="/2020/07/03/algorithm-01/4.png" srcset="/img/loading.gif" alt></p><p>i=i*3则是<img src="/2020/07/03/algorithm-01/5.png" srcset="/img/loading.gif" alt></p><p><strong>线性阶O(n)</strong></p><pre><code class="hljs java"><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;    <span class="hljs-keyword">int</span> j=i;    sum+=j;&#125;</code></pre><p>for循环里面的代码会执行n次，它消耗的时间是随n的变化而变化的，因此时间复杂度为O(n)</p><p><strong>线性对数阶<img src="/2020/07/03/algorithm-01/6.png" srcset="/img/loading.gif" alt></strong></p><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(i&lt;n)&#123;    i=i*<span class="hljs-number">2</span>;&#125;&#125;</code></pre><p>将时间复杂度为<img src="/2020/07/03/algorithm-01/4.png" srcset="/img/loading.gif" alt>的代码循环n次</p><p><strong>平方阶<img src="/2020/07/03/algorithm-01/7.png" srcset="/img/loading.gif" alt></strong></p><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;        <span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;        m++;    &#125;&#125;</code></pre><p>将时间复杂度为O(n)的代码循环n次</p><h2 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h2><p>1、一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p><p>2、在做算法分析时，<strong>主要讨论的是时间复杂度</strong>。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2020/07/03/dataStructure-05/"/>
    <url>/2020/07/03/dataStructure-05/</url>
    
    <content type="html"><![CDATA[<p>递归就是方法自己调用自己，每次调用时传入不同的变量。</p><p>递归调用规则：<br>1、当程序执行到一个方法时，就会开辟一个独立的空间(栈)<br>2、每个空间的数据(局部变量)，是独立的。<a id="more"></a><br>3、如果方法中使用的是引用数据类型的变量，就会共享该变量。<br>4、递归必须向退出递归的条件逼近<br>5、当一个方法执行完毕，或者遇到return，就会返回到调用它的那个方法中，继续执行该方法。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        test(<span class="hljs-number">4</span>);        <span class="hljs-comment">// System.out.println(factorial(3));</span>    &#125;    <span class="hljs-comment">// 打印</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) &#123;            test(n - <span class="hljs-number">1</span>);        &#125;        System.out.println(<span class="hljs-string">"n="</span> + n);    &#125;    <span class="hljs-comment">// 阶乘</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> factorial(n-<span class="hljs-number">1</span>)*n;        &#125;    &#125;&#125;</code></pre><p><img src="/2020/07/03/dataStructure-05/1.png" srcset="/img/loading.gif" alt></p><p>输出结果：</p><pre><code class="hljs ini"><span class="hljs-attr">n</span>=<span class="hljs-number">2</span><span class="hljs-attr">n</span>=<span class="hljs-number">3</span><span class="hljs-attr">n</span>=<span class="hljs-number">4</span></code></pre><p>加入else后输出n=2</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2020/07/01/dataStructure-04/"/>
    <url>/2020/07/01/dataStructure-04/</url>
    
    <content type="html"><![CDATA[<p>栈是一个<strong>先进后出</strong>的有序列表，是限制表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。<a id="more"></a></p><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><p>数组模拟栈思路分析图：<br><img src="/2020/07/01/dataStructure-04/1.png" srcset="/img/loading.gif" alt></p><p>1、定义一个top表示栈顶，初始化top=-1;<br>2、入栈，top++;stack[top]=data;<br>3、出栈，int value=stack[top];top–;return value;</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStackDemo</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ArrayStack arrayStack = <span class="hljs-keyword">new</span> ArrayStack(<span class="hljs-number">4</span>);        String key = <span class="hljs-string">""</span>;<span class="hljs-comment">// 输入内容</span>        Boolean loop = <span class="hljs-keyword">true</span>;<span class="hljs-comment">// 控制是否退出菜单</span>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);        <span class="hljs-keyword">while</span> (loop) &#123;            System.out.println(<span class="hljs-string">"遍历栈：show  入栈：push   出栈：pop  退出：exit"</span>);            System.out.println(<span class="hljs-string">"请输入："</span>);            key = scanner.next();            <span class="hljs-keyword">switch</span> (key) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">"show"</span>:                    arrayStack.list();                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">"push"</span>:                    System.out.println(<span class="hljs-string">"请输入一个数："</span>);                    <span class="hljs-keyword">int</span> num = scanner.nextInt();                    arrayStack.push(num);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">"pop"</span>:                    <span class="hljs-keyword">try</span> &#123;                        <span class="hljs-keyword">int</span> value = arrayStack.pop();                        System.out.println(<span class="hljs-string">"出栈元素："</span> + value);                        <span class="hljs-keyword">break</span>;                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                        e.printStackTrace();                    &#125;                <span class="hljs-keyword">case</span> <span class="hljs-string">"exit"</span>:                    scanner.close();                    loop = <span class="hljs-keyword">false</span>;                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">default</span>:                    <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<span class="hljs-comment">// 栈的大小</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;<span class="hljs-comment">// 数组，用于存放栈中的数据</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;    <span class="hljs-comment">// 构造器 初始化栈</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;        <span class="hljs-keyword">this</span>.maxSize = maxSize;        <span class="hljs-keyword">this</span>.stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];    &#125;    <span class="hljs-comment">// 栈满</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">// 栈空</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">// 入栈</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;        <span class="hljs-comment">// 栈满？</span>        <span class="hljs-keyword">if</span> (isFull()) &#123;            System.out.println(<span class="hljs-string">"栈满！"</span>);            <span class="hljs-keyword">return</span>;        &#125;        top++;        stack[top] = value;    &#125;    <span class="hljs-comment">// 出栈</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 栈空？</span>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;            <span class="hljs-comment">// 抛出异常</span>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"栈空！"</span>);        &#125;        <span class="hljs-keyword">int</span> value = stack[top];        top--;        <span class="hljs-keyword">return</span> value;    &#125;    <span class="hljs-comment">// 遍历栈</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 从栈顶开始</span>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;            System.out.println(<span class="hljs-string">"栈空"</span>);        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;            System.out.println(stack[i]);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础篇</title>
    <link href="/2020/07/01/interview-01/"/>
    <url>/2020/07/01/interview-01/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Java语言特点"><a href="#1、Java语言特点" class="headerlink" title="1、Java语言特点"></a>1、Java语言特点</h2><p>1、简单易学，有丰富的类库<br>2、面向对象（java最重要的特性，让程序高类聚，低耦合）<br>3、与平台无关性（jvm是java跨平台使用的根本）<br>4、安全可靠<br>5、支持多线程<a id="more"></a></p><h2 id="2、面向对象与面向过程的区别"><a href="#2、面向对象与面向过程的区别" class="headerlink" title="2、面向对象与面向过程的区别"></a>2、面向对象与面向过程的区别</h2><p><strong>面向过程：</strong>是分析解决问题的步骤，通过函数将这些步骤一步一步实现，然后调用则可。性能较高，单片机，嵌入式开发等一般采用面向过程开发。</p><p><strong>面向对象：</strong>是把构成问题的事物分解成各个对象，建立对象的目的也不是为了完成各个步骤，而是为了<strong>描述某个事物在解决问题的整个过程中所发生的行为</strong>。面向对象有  <strong>继承、封装、多态</strong>的特性，因此设计出的系统易维护、易复用、易拓展。但性能上与面向过程相比较低。</p><h2 id="3、八种基本数据类型"><a href="#3、八种基本数据类型" class="headerlink" title="3、八种基本数据类型"></a>3、八种基本数据类型</h2><p><img src="/2020/07/01/interview-01/1.jpg" srcset="/img/loading.gif" alt></p><p><strong>基本数据类型(primitive type)</strong><br>整型  byte(1字节)  , short (2字节), int(4字节) , long(8字节) l或L结尾<br>浮点型  float(4字节) 定义时要以f或F结尾 , double(8字节)<br>字符型  char(2字节)<br>布尔型  boolean 只能取两个值之一 ：true , false<br><em>7种基本数据类型之间的计算（不包括布尔类型）:</em><br>1.自动类型提升：<br> 容量小的数据类型变量与容量大的数据类型做运算时，运算结果自动装换为容量大的。<br> byte , char , short –&gt; int –&gt; long –&gt; float –&gt; double<br>2.强制类型转换：<br>使用强转符 () ，可能造成精度损失        </p><p><strong>引用数据类型(reference type)</strong></p><p>默认值：null<br>类 class<br>String类型：  声明时使用一对””，可以与8种基本数据类型做运算，+ 只能表示连接<br>接口 interfere<br>数组 [ ]</p><p>基本数据类型在声明时系统会自动给它分配空间，而引用数据类型声明时只分配了引用空间，必须通过实例化开辟数据空间才可以赋值使用。<br>数组对象也是一个引用对象，将一个数组<strong>赋值（“=”）</strong>给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看的见；而数组的<strong>复制</strong>必须通过循环逐个元素赋值，对复制后的数组进行修改与与另一个数组无关。</p><h2 id="4、标识符的命名规则"><a href="#4、标识符的命名规则" class="headerlink" title="4、标识符的命名规则"></a>4、标识符的命名规则</h2><p><strong>标识符的含义：</strong>程序中我们自己定义的内容，类名，变量名，方法名等等。</p><p><strong>命名规则：</strong><br>标识符可以包含英文字母、0-9的数字、_下划线、$美元符号<br>标识符不能以数字开头<br>标识符不能是关键字</p><p><strong>命名规范：</strong><br>类名：首字母大写，后面的每一个单词的首字母大写。（大驼峰式）<br>变量名、方法名：首字母小写，后面的每一个单词的首字母大写。（小驼峰式）</p><h2 id="5、instanceof关键字的作用"><a href="#5、instanceof关键字的作用" class="headerlink" title="5、instanceof关键字的作用"></a>5、instanceof关键字的作用</h2><p>instanceo严格来说是java中的一个双目运算符,用来测试一个对象是否是一个类的实例。用法为：</p><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> result = obj <span class="hljs-keyword">instanceof</span> Class;</code></pre><p>obj为一个对象，Class是一个类或者是一个接口，当obj为Class的对象，或者是其直接或间接子类，或者是其接口实现类，结果result都返回true，否则返回false。</p><p>注意：编译器会检查 obj 是否能转换为右边的Class，如果不能则直接报错，如果不能确定其类型，则通过编译，具体看运行时定。</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;System.out.println(i <span class="hljs-keyword">instanceof</span> Integer);<span class="hljs-comment">// 编译不通过  i必须是引用类型，不能是基本数据类型</span>System.out.println(i <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">// 编译不通过</span></code></pre><pre><code class="hljs java">Integer i = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);System.out.println(i <span class="hljs-keyword">instanceof</span> Integer);<span class="hljs-comment">// true</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">// obj为null  返回false</span>System.out.println(<span class="hljs-keyword">null</span> <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">// false</span></code></pre><h2 id="6、Java自动装箱与拆箱"><a href="#6、Java自动装箱与拆箱" class="headerlink" title="6、Java自动装箱与拆箱"></a>6、Java自动装箱与拆箱</h2><p><strong>装箱：</strong>就是将基本数据类型转换成对应的包装类（int—&gt;Integer）  调用方法：Integer.valueOf(int)</p><p><strong>拆箱：</strong>将包装类转换为对应的基本数据类型（Integer—&gt;int） 调用方法：Integer.intValue()</p><p>java SE5之前，生成一个数值为1的包装类对象必须这样进行：</p><pre><code class="hljs java">Integer i = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);</code></pre><p>java SE5开始就提供了自动装箱和拆箱的特性</p><pre><code class="hljs java">Integer i =<span class="hljs-number">1</span>;<span class="hljs-comment">// 自动装箱</span><span class="hljs-keyword">int</span> num = i;<span class="hljs-comment">// 自动拆箱</span></code></pre><p><strong><em>面试题1：以下代码会输出什么？</em></strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Integer i1 = <span class="hljs-number">100</span>;Integer i2 = <span class="hljs-number">100</span>;Integer i3 = <span class="hljs-number">200</span>;Integer i4 = <span class="hljs-number">200</span>;System.out.println(i1==i2);System.out.println(i3==i4);&#125;&#125;</code></pre><p>运行结果：</p><pre><code class="hljs yaml"><span class="hljs-literal">true</span><span class="hljs-literal">false</span></code></pre><p>运行结果说明：</p><p>i1和i2是指向同一个对象的，而i3和i4指向的不是同一个对象。<br>jvm自动装箱，通过valueOf方法创建Integer对象，如果数值在[-128,127]之间，则返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。</p><p>上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是同一<br>个对象，而i3和i4则是分别指向不同的对象。</p><p><strong><em>面试题2：以下代码会输出什么？</em></strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Double i1 = <span class="hljs-number">100.0</span>;Double i2 = <span class="hljs-number">100.0</span>;Double i3 = <span class="hljs-number">200.0</span>;Double i4 = <span class="hljs-number">200.0</span>;System.out.println(i1==i2);System.out.println(i3==i4);&#125;&#125;</code></pre><p>运行结果：</p><pre><code class="hljs yaml"><span class="hljs-literal">false</span><span class="hljs-literal">false</span></code></pre><p>原因：在某个范围内的整型数值的个数是有限的，而浮点数却不是。</p><h2 id="7、重载和重写的区别"><a href="#7、重载和重写的区别" class="headerlink" title="7、重载和重写的区别"></a>7、重载和重写的区别</h2><p><strong>重写（Override）</strong><br>就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型（除过子类方法的返回值是父类方法返回值的子类时）都相同的情况下，对方法进行修改和重写。并且子类函数的权限修饰符不能小于父类的。</p><p>应用：重写之后，通过子类对象调用父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。<br>​要求：<br>​1.子类中重写的方法名和形参列表必须与父类中被重写的方法的方法名和形参列表相同。<br>​2.子类中重写的方法的权限修饰符不小于父类中被重写的权限修饰符。(父类中声明为private的方法不能被重        写)<br>​3.返回值类型：</p><ul><li><p>父类中被重写的方法的返回类型为void或基本数据类型时，子类中的重写方法的返回类型也必须为void或基本数据类型。</p></li><li><p>父类中被重写的方法的返回类型为A类型，子类中重写的方法的返回值类型可以是A类或A的子类。</p></li></ul><p>4.子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Son s = <span class="hljs-keyword">new</span> Son();s.sayHello();<span class="hljs-comment">// hello by Son</span>&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"hello by Father"</span>);&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"hello by Son"</span>);&#125;&#125;</code></pre><p><strong>重写  总结：</strong><br>1、发生在父类与子类之间<br>2、方法名，参数列表，返回值类型（除过子类中方法的返回类型是父类中方法返回类型的子类）都必须相同<br>3、访问修饰符的限制一定要大于被重写方法的访问修饰符<br>    (public&gt;protected&gt;default&gt;private 父类中声明为private的方法不能被写)<br>4、重写方法抛出的异常必须小于被重写方法抛出的异常。</p><p><strong>重载（Overload）</strong><br>在一个类中，同名的方法如果有不同的参数列表（<strong>参数类型不同、参数个数不同甚至参数顺序不同</strong>）则视为重载。同时，重载<strong>对返回类型没有要求</strong>，可以相同也可以不同，不能通过返回类型判断是否重载。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Father s = <span class="hljs-keyword">new</span> Father();s.sayHello();<span class="hljs-comment">// Hello</span>s.sayHello(<span class="hljs-string">"zyz"</span>);<span class="hljs-comment">// Hello zyz</span>&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"Hello"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>&#123;System.out.println(<span class="hljs-string">"Hello"</span> + <span class="hljs-string">" "</span> + name);&#125;&#125;</code></pre><p><strong>重载 总结：</strong><br>1、重载Overload是一个类中多态性的一种表现<br>2、重载要求同名方法的参数列表不同（参数类型，参数个数，参数顺序）<br>3、重载的时候，返回类型可以相同也可以不同。无法以返回类型判断是否重载</p><h2 id="8、equals与-的区别"><a href="#8、equals与-的区别" class="headerlink" title="8、equals与==的区别"></a>8、equals与==的区别</h2><p><strong>==：运算符</strong></p><p>1.可以使用在基本数据类型变量和引用数据类型之间(除了boolean类型);<br>2.如果比较的是基本数据类型的变量，比较两个变量保存的值是否相等(不一定要类型相等)；<br>例如：2 == 2.0；’2’ == 2；’A’ ==65<br>3.如果比较的是引用数据类型的变量，比较两个变量存储的<strong>地址值</strong>是否相等，即是否指向同一个对象。</p><p><strong>equals()：方法</strong></p><p>由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行重写的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是==的判断。<br>1.通过对象来调用，只能适用于引用数据类型的变量；<br>2.Object类中定义的equals()与 == 相同:    </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>&#123;     rerturn (<span class="hljs-keyword">this</span> == obj);&#125;</code></pre><p>3.String , Date , File , 包装类等都<strong>重写了Object类中的equal()方法</strong>。比较的不是两个引用的地址，而是比较两个对象的<strong>“实体内容”</strong>是否相等；<br><font color="red">toString():</font><br>1.输出一个对象的引用时，自动调用；<br>2.在Object类中的定义：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">"@"</span> + Integer.toHexString(hashCode());    &#125;<span class="hljs-comment">// 返回类名和内存地址</span></code></pre><p>3.String， Date , File , 包装类等都重写了Object类中的toString()方法。调用对象时返回的时对象的实体内容。</p><p><strong>总结：</strong><br>所有比较是否相等时，都是用equals，并且在对常量相比较时，把常量写在前面，因为使用object.equals()   object可能为null，则空指针。</p><h2 id="9、Hashcode的作用"><a href="#9、Hashcode的作用" class="headerlink" title="9、Hashcode的作用"></a>9、Hashcode的作用</h2><p>java集合的Collection接口有两个继承接口，一个是List，一个是Set.。List有序可重复，Set无序不可重复。<br>当我们向set中添加元素时，就需要对元素进行判断，如果元素太多，就会频繁调用equals()方法，效率不高。</p><p>于是有人发明了Hash算法来提高集合中查找元素的效率。向Set中添加数据一定要重写hashCode()和equals()方法。这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希值，可以将哈希值分组，每组分别对应某个存储区域，根据一个对象的哈希值就可以确定该对象应该存储的那个区域。</p><p>hashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p><h2 id="10、String、StringBuffer与StringBuilder的区别"><a href="#10、String、StringBuffer与StringBuilder的区别" class="headerlink" title="10、String、StringBuffer与StringBuilder的区别"></a>10、String、StringBuffer与StringBuilder的区别</h2><p><strong>String</strong></p><p>是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码上看，它就是一个final类型的字符数组。意味着，String所引用的字符串不能被改变，一经定义，无法再增删改，每次对String操作都会生成一个新的String对象。</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> fianl <span class="hljs-keyword">char</span> value[];</code></pre><p>每次 “+” 操作：隐式地在堆上new了一个跟原字符串相同的StringBuilder对象，在调用append()对 ”+“ 后面的字符串进行拼接。<br><strong>注意：</strong></p><p>通过字面量对String类型的变量进行赋值的时候，字面量的值会存放在字符串常量池中的某个区域，并且字符串常量池中不允许存在相同的字符串。<br><img src="/2020/07/01/interview-01/2.png" srcset="/img/loading.gif" alt></p><p><strong><em>面试题：判断输出结果</em></strong></p><p><img src="/2020/07/01/interview-01/3.png" srcset="/img/loading.gif" alt></p><p><strong>StringBuffer与StringBuilder</strong></p><p>都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder源码可以看到</p><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] value;</code></pre><p>他们的底层都是可变的字符数组，所以在进行频繁发字符串操作时，使用StringBuffer和StringBuilder效率较高。<br>另外，StringBuffer是线程安全的，StringBuilder是线程不安全的，因此其效率比StringBuffer更高。</p><h2 id="11、ArrayList与LinkedList的区别"><a href="#11、ArrayList与LinkedList的区别" class="headerlink" title="11、ArrayList与LinkedList的区别"></a>11、ArrayList与LinkedList的区别</h2><p>先谈一下数组<br><strong>Array是基于索引的数据结构，因此它使用索引来搜索和读取数据的效率较高。</strong><br>Array获取数据的时间复杂度是O(1)，但是要删除数据的开销却很大，因为需要重排数组，删除数据后需要把后面的所有数据前移。<br>另外，数组初始化必须指定其初始化长度，否则报错。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span> [] nums;<span class="hljs-comment">// 声明</span><span class="hljs-comment">// 静态初始化:数组的初始化和数组元素的初始化同时进行</span>nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;        <span class="hljs-comment">// 动态初始化:数组的初始化和数组元素的初始化分开进行</span>String [] names = <span class="hljs-keyword">new</span> String [<span class="hljs-number">6</span>];<span class="hljs-comment">// 通过角标的方式调用指定位置的元素</span>names[<span class="hljs-number">0</span>] = <span class="hljs-string">"Tom"</span>;names[<span class="hljs-number">1</span>] = <span class="hljs-string">"Justin"</span>;<span class="hljs-comment">// 获取数组长度： length</span>System.out.println(names.length);<span class="hljs-comment">// 遍历数组</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.length;i++) &#123;System.out.println(nums[i]);&#125;&#125;&#125;</code></pre><p>List接口继承于Collection接口，表示有序集合，可以包含重复元素，提供了按索引访问的方式。<br><strong>ArrayList</strong></p><p>可以看作是能够自动增长容量的数组，作为List接口的主要实现类；<br>线程不安全，效率高；<br>底层使用Object[] elementData存储<br>ArrayList的toArray方法返回一个数组<br>ArrayList的asList方法返回一个列表</p><p><strong>LinkedList</strong></p><p>线程不安全，对于频繁插入，删除效率较高，但在get与set方面弱于ArrayList；<br>底层使用双向链表储存</p><p>Vector，作为List接口的古老实现类；线程安全，效率低；底层使用Object[] elementData存储</p><h2 id="12、HashMap与HashTable的区别"><a href="#12、HashMap与HashTable的区别" class="headerlink" title="12、HashMap与HashTable的区别"></a>12、HashMap与HashTable的区别</h2><p><strong>1、两者的父类不同</strong></p><p>HashMap是继承自AbstractMap类，而HashTable继承自Dictionary类。不过 ，他们同时实现了Map&lt;k,v&gt;、Cloneable（可复制）、Serializable（可序列化）三个接口。</p><p><strong>2、对外提供的接口不同</strong></p><p>Hashtable比HashMap多提供了elments() 和contains() 两个方法。<br>elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。<br>contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上containsValue() 就只是调用了一下contains() 方法。</p><p><strong>3、对null的支持不同</strong></p><p>Hashtable：key和value都不能为null<br>HashMap：key值可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个value为null。</p><p><strong>4、安全性不同</strong></p><p>HashTable是线程安全的，每个方法都有synchronized关键字，因此可直接用于多线程。<br>HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题。</p><p>当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。<br>ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。<br>因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。</p><blockquote><p>ConcurrentHashMap使用Segment（分段锁）技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。所以说，ConcurrentHashMap在并发情况下，不仅保证了线程安全，而且提高了性能。</p></blockquote><p><strong>5、初始容量大小和每次扩充容量大小不同</strong></p><p><strong>6、计算hash值的方法不同</strong></p><h2 id="13、Collection与Collections的区别"><a href="#13、Collection与Collections的区别" class="headerlink" title="13、Collection与Collections的区别"></a>13、Collection与Collections的区别</h2><p><strong>Collection</strong></p><p>java.util.Collection是集合类的上级接口，子接口有List、Set等。</p><p><strong>Collections</strong></p><p>java.util.Collections是集合工具类，继承于Object，包含有各种有关集合操作的静态方法 反转reverse(List)、排序sort()等。</p><h2 id="14、泛型常用特点"><a href="#14、泛型常用特点" class="headerlink" title="14、泛型常用特点"></a>14、泛型常用特点</h2><p>泛型是Java SE1.5之后的新特性。<br>“泛型” 意味着编写的代码可以被不同类型的对象所重用。<br>“泛型”，顾名思义，“泛指的类型”。我们提供泛指的概念，但具体执行的时候却可以具体的规则来约束。<br>例如ArrayList就是一个泛型类，ArrayList作为集合可以用来存放各种类型的元素，如Integer、String、自定义的各种类型等，但是我们在使用的时候通过具体的的规则来约束，如我们可以约束集合中只存放Integer类型的元素，如</p><pre><code class="hljs java">List&lt;Integer&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;;</code></pre><p>使用泛型的好处？</p><p>以集合来举例，使用泛型的好处是，我们不必因为添加元素的类型的不同而定义不同类型的集合类，如整型集合类，字符串集合类，我们可以定义一个集合 用来存放所有类型的数据，只需要把底层存储设置成Object即可，添加的所有数据都可以向上转型为Object，更重要的是我们可以通过规则按照自己的需求控制存储的数据类型。</p><h2 id="15、Java创建对象有几种方式"><a href="#15、Java创建对象有几种方式" class="headerlink" title="15、Java创建对象有几种方式"></a>15、Java创建对象有几种方式</h2><p>1、new创建新对象<br>2、通过反射机制<br>3、采用clone机制<br>4、通过序列化机制</p><h2 id="16、深拷贝与浅拷贝的区别"><a href="#16、深拷贝与浅拷贝的区别" class="headerlink" title="16、深拷贝与浅拷贝的区别"></a>16、深拷贝与浅拷贝的区别</h2><ul><li><p><strong>浅拷贝：</strong>基本数据类型的数据直接拷贝过来，引用数据类型的数据拷贝引用值，拷贝对象与被拷贝对象的引用数据类型的数据指向的是同一个对象。</p></li><li><p><strong>深拷贝：</strong>基本数据类型的数据直接拷贝过来，引用数据类型的数据按照原来的值重新new一个新的对象进行存放，拷贝对象与被拷贝对象的引用数据类型的数据指向的是不同对象。</p></li></ul><h2 id="17、final有哪些用法"><a href="#17、final有哪些用法" class="headerlink" title="17、final有哪些用法"></a>17、final有哪些用法</h2><ul><li>被final修饰的类不可被继承； 例如 String类，System类，StringBuffer类等</li><li>被final修饰的方法不可被重写</li><li>被final修饰的变量不可以被改变。如果修饰引用数据类型时，那么表示引用不可变，引用指向的内容可变</li><li>被final修饰的方法，JVM会将其内联，以提高运行效率</li><li>被final修饰的常量，在编译阶段会存入常量池中</li></ul><h2 id="18、static都用哪些用法"><a href="#18、static都用哪些用法" class="headerlink" title="18、static都用哪些用法"></a>18、static都用哪些用法</h2><p>static修饰变量，方法，即静态变量，静态方法，都属于类的静态资源，被类实例所共享。</p><p>此外，static还可以修饰代码块，即静态代码块，多用于初始化操作：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">static</span>&#123;            &#125;&#125;</code></pre><p>static也多用于修饰内部类,此时称之为静态内部类</p><p><font color="red">注意</font>：<br>&lt;1&gt;.静态变量随着类的加载而加载，可以通过”类名.静态变量”的方式进行调用。<br>&lt;2&gt;.静态变量的加载早于对象的创建。<br>&lt;3&gt;.由于类只会加载一次，则静态变量在内存中也只会存在一份(存在方法区的静态域中)。<br>&lt;4&gt;.类能调用静态变量，但不能调用实例变量；对象既能调用静态变量，又能调用实例变量</p><h2 id="19、3-0-1-0-3的返回值是什么"><a href="#19、3-0-1-0-3的返回值是什么" class="headerlink" title="19、3*0.1==0.3的返回值是什么"></a>19、3*0.1==0.3的返回值是什么</h2><p>false,因为有些浮点数不能完全精确的表示出来.</p><h2 id="20、a-a-b与a-b有什么区别"><a href="#20、a-a-b与a-b有什么区别" class="headerlink" title="20、a=a+b与a+=b有什么区别?"></a>20、a=a+b与a+=b有什么区别?</h2><p>+=操作会进行<strong>隐式自动类型转换</strong>，此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,<br>而a=a+b则不会自动进行类型转换</p><pre><code class="hljs java"><span class="hljs-keyword">byte</span> a = <span class="hljs-number">127</span>;<span class="hljs-keyword">byte</span> b = <span class="hljs-number">127</span>;b = a + b; <span class="hljs-comment">// 报编译错误:cannot convert from int to byte</span>b += a;</code></pre><p>以下代码是否有错误，有的话怎么改？</p><pre><code class="hljs java"><span class="hljs-keyword">short</span> a = <span class="hljs-number">1</span>;a = a + <span class="hljs-number">1</span>;</code></pre><p>有错误，short类型的a赋值为int类型的1时会自动提升为int类型，那么a+1的运算结果就是int类型，而a是short类型，此时编译器会报错。<br>正确写法：</p><pre><code class="hljs java"><span class="hljs-keyword">short</span> a = <span class="hljs-number">1</span>;a += <span class="hljs-number">1</span>;</code></pre><p>+=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错。</p><h2 id="21、try-catch-finally-，try里有return，finally还执行吗？"><a href="#21、try-catch-finally-，try里有return，finally还执行吗？" class="headerlink" title="21、try{}catch{}finally{}，try里有return，finally还执行吗？"></a>21、try{}catch{}finally{}，try里有return，finally还执行吗？</h2><p>执行，并且finally的执行早于try里面的return</p><p><strong>结论：</strong></p><p>1、不管有没有出现异常，finally中的代码都会执行；<br>2、当try和catch中有return时，finally仍然会执行；<br>3、finally是在return后面的表达式运算完成后执行的（此时并没有返回运算后的值，而是先把值保存起来，不管finally中的代码怎么样，都不会影响return的值，仍然是之前保存的值），所以函数返回值是在finally执行前就确定了。<br>4、finally最好不要含有return ,否则程序就会提前退出，返回值就不是try或catch中保存的返回值了。</p><h2 id="22、Exception与Error包结构"><a href="#22、Exception与Error包结构" class="headerlink" title="22、Exception与Error包结构"></a>22、Exception与Error包结构</h2><p>Java中可抛出的异常(Throwable)的结构分为三大类型：<br>被检查的异常(CheckException)、运行时异常(RuntimeException)、错误(Error)</p><p><strong>1、运行时异常：</strong></p><p>定义：RunTimeException及其子类都被称为运行时异常。</p><p>特点：编译器不会检查它，是在程序运行时抛出的异常。</p><p>常见的五种运行时异常：<br>ClassCastException（类转换异常）<br>IndexOutOfBoundException（数组越界）<br>NullPointerException（空指针异常）<br>ArrayStoreException（数据存储异常，操作数组的类型不一样）<br>BufferOverflowException（缓冲区溢出）</p><p><strong>2、被检查异常</strong></p><p>定义:Exception类本身，以及Exception的子类中除了”运行时异常”之外的其它子类都属于被检查异常。</p><p>特点: Java编译器会检查它。此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处<br>理，否则不能通过编译。如：<br>IOException、FileNotFoundException、SQLException</p><p><strong>3、错误</strong></p><p>定义：Error类及其子类。</p><p>特点: 和运行时异常一样，编译器也不会对错误进行检查。<br>当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这<br>些错误的。出现这种错误会导致程序终止运行。如OutOfMemoryError、ThreadDeath</p><h2 id="23、简述程序、线程、进程的基本概念以及他们之间的关系"><a href="#23、简述程序、线程、进程的基本概念以及他们之间的关系" class="headerlink" title="23、简述程序、线程、进程的基本概念以及他们之间的关系"></a>23、简述程序、线程、进程的基本概念以及他们之间的关系</h2><p><strong>程序：</strong>为了完成某种需求而编写的一组指令的集合。是静态的。<br><strong>线程：</strong>与进程相似，是一个比进程更小的执行单位，一个进程中的多个线程共享相同发内存单元和资源，进程之间切换的开销小，因此被称为轻量级的进程。<br><strong>进程：</strong>是程序的一次执行过程，是系统运行程序的基本单位 ，是一个动态的过程。系统运行一个程序就是进程从创建，运行到消亡的过程。线程和进程最大的不同在于各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h2 id="24、线程有哪些基本状态"><a href="#24、线程有哪些基本状态" class="headerlink" title="24、线程有哪些基本状态?"></a>24、线程有哪些基本状态?</h2><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面6种不同状态的其中一个状态<img src="/2020/07/01/interview-01/1.png" srcset="/img/loading.gif" alt></p><p>当线程执行wait() 方法之后，线程进入<strong>等待</strong>状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而<strong>超时等待</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过sleep(long millis)方法或wait(long millis)方法可以将Java 线程置于超时等待状态。当超时时间到达后Java 线程将会返回到<strong>运行</strong> 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到<strong>阻塞</strong>状态。线程在执行Runnable的run()方法之后将会进入到<strong>终止</strong>状态。</p><h2 id="25、Java中的IO流"><a href="#25、Java中的IO流" class="headerlink" title="25、Java中的IO流"></a>25、Java中的IO流</h2><ul><li>按照流向分，可以分为输入流和输出流；</li><li>按照操作单元分，可以分为字节流和字符流；</li><li>按照流的角色分，可以分为节点流和处理流。</li></ul><p>InputStream/Reader：所有输入流的基类，前者是字节输入，后者是字符输入；<br>OutputStream/Writer：所有输出流的基类，前者是字节输出，后者是字符输出。<br><img src="/2020/07/01/interview-01/4.png" srcset="/img/loading.gif" alt></p><h2 id="26、Java中的IO与NIO的区别"><a href="#26、Java中的IO与NIO的区别" class="headerlink" title="26、Java中的IO与NIO的区别"></a>26、Java中的IO与NIO的区别</h2><ol><li>NIO是以<strong>块</strong>的方式处理数据，但是IO是以最基础的字节流的形式去写入和读出的。所以在效率上的话，肯定是NIO效率比IO效率会高出很多。</li><li>NIO不再是和IO一样用OutputStream和InputStream 输入流的形式来进行处理数据的，但是又是基于这种流的形式，而是采用了<strong>通道</strong>和<strong>缓冲区</strong>的形式来进行处理数据的。</li><li>还有一点就是NIO的通道是可以<strong>双向</strong>的，但是IO中的流只能是<strong>单向</strong>的。</li><li>还有就是NIO的缓冲区（其实也就是一个字节数组）还可以进行分片，可以建立只读缓冲区、直接缓冲区和间接缓冲区，只读缓冲区很明显就是字面意思，直接缓冲区是为加快 I/O 速度，而以一种特殊的方式分配其内存的缓冲区。</li><li>补充一点：NIO比传统的BIO核心区别就是，NIO采用的是<strong>多路复用</strong>的IO模型，普通的IO用的是<strong>阻塞</strong>的IO模型，两个之间的效率肯定是多路复用效率更高</li></ol><h2 id="27、Java中反射的作用原理"><a href="#27、Java中反射的作用原理" class="headerlink" title="27、Java中反射的作用原理"></a>27、Java中反射的作用原理</h2><p><strong>1、定义：</strong></p><p>反射机制允许程序在<strong>执行期</strong>借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。在java中，只要给定类的名字，就可以通过反射机制来获取类的所有信息。即动态获取运行时类。</p><p><strong>2、哪里会用到反射机制？</strong></p><p>加载jdbc数据库驱动就是典型的例子：</p><pre><code class="hljs java">Class&lt;?&gt; driver = Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);</code></pre><p><strong>3、反射的实现方式</strong></p><p>获取Class对象的四种</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;    <span class="hljs-comment">// 方式一:调用运行类属性：.class</span>    Class class0 = Person<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;    System.out.println(class0);    <span class="hljs-comment">// 方式二：调用运行时类的对象，调用getClass()</span>    Person p1 = <span class="hljs-keyword">new</span> Person();    Class class1 = p1.getClass();    System.out.println(class1);    <span class="hljs-comment">// 方式三：调用Class的静态方法：forName(String classPath)</span>    Class class2 = Class.forName(<span class="hljs-string">"reflection.Person"</span>);    System.out.println(class2);    <span class="hljs-comment">// 方式四：使用类加载器：Classloader</span>    ClassLoader classLoader = Classloader.getSystemClassLoader();    Class class3 = classLoader.loadClass(<span class="hljs-string">"reflection.Person"</span>);    System.out.println(class3);&#125;</code></pre><p><strong>4、反射中的常用API</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    <span class="hljs-comment">// 通过反射创建对应的运行时类</span>    Class&lt;Person&gt; class1 = Person<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;    <span class="hljs-comment">// 创建运行时类的对象</span>    Person p1 = class1.newInstance();    System.out.println(p1);    <span class="hljs-comment">// 获取运行时类的属性getField(String fieldName),只能获取权限为public的属性</span>    Field id = class1.getField(<span class="hljs-string">"id"</span>);    <span class="hljs-comment">// 通常使用getDeclaredField(String FieldName)获取运行时类的属性</span>    Field name = class1.getDeclaredField(<span class="hljs-string">"name"</span>);    name.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 表示当前属性时可访问的</span>    <span class="hljs-comment">// 设置属性值 set(实例对象,属性值)</span>    id.set(p1,<span class="hljs-number">10001</span>);    name.set(p1,<span class="hljs-string">"Tony"</span>);    <span class="hljs-comment">// 获取属性值</span>    <span class="hljs-keyword">int</span> p1_id = (<span class="hljs-keyword">int</span>) id.get(p1);    System.out.println(p1_id);<span class="hljs-comment">// 10001</span>    System.out.println(name.get(p1));<span class="hljs-comment">// Tony</span>    System.out.println(p1);<span class="hljs-comment">// Person&#123;id=10001, name='Tony', age=0&#125;</span>    <span class="hljs-comment">// 获取运行时类方法 getDeclaredMethod(方法名,指定方法的形参列表)</span>    Method setAge = class1.getDeclaredMethod(<span class="hljs-string">"setAge"</span>, <span class="hljs-keyword">int</span><span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    setAge.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 指明该方法可访问</span>    <span class="hljs-comment">// 执行运行时类方法 invoke(对象实例,实参列表)</span>    <span class="hljs-comment">// invoke()的返回值即为对应类中调用方法的返回值</span>    setAge.invoke(p1,<span class="hljs-number">24</span>);    System.out.println(p1);<span class="hljs-comment">// Person&#123;id=10001, name='Tony', age=24&#125;</span>    <span class="hljs-comment">// 获取指定构造器</span>    Constructor con = class1.getDeclaredConstructor(<span class="hljs-keyword">int</span><span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">String</span>.<span class="hljs-title">class</span>,<span class="hljs-title">int</span>.<span class="hljs-title">class</span>)</span>;    con.setAccessible(<span class="hljs-keyword">true</span>);    Person p2 = (Person) con.newInstance(<span class="hljs-number">1002</span>,<span class="hljs-string">"Taylor"</span>,<span class="hljs-number">18</span>);    System.out.println(p2);<span class="hljs-comment">// Person&#123;id=1002, name='Taylor', age=18&#125;</span>&#125;</code></pre><p><strong>5、反射机制的优缺点</strong></p><p><strong>优点：</strong></p><p>1、能够运行时动态获取类的实例，提高灵活性；<br>2、与动态编译结合</p><p><strong>缺点：</strong></p><p>1、使用反射性能较低，需要解析字节码，将内存中的对象进行解析；<br>2、相对不安全，破环了封装性（因为反射可以获得私有属性和方法）。</p><p>解决方案：<br>1、通过setAccessible(true)关闭jdk的安全检查来提升反射速度；<br>2、多次创建一个类的实例时，有缓存会快很多；<br>3、ReflactASM工具类，通过字节码生成的方式加快反射速度；</p><h2 id="28、List、Set、Map的区别"><a href="#28、List、Set、Map的区别" class="headerlink" title="28、List、Set、Map的区别"></a>28、List、Set、Map的区别</h2><ul><li><strong>List(对付顺序的好帮手)：</strong>List接口存储一组不唯一的（可以有多个元素引用相同的对象），有序的对象。</li><li><strong>Set(注重独一无二的本质)：</strong>不允许有重复的集合，不会有多个元素引用相同的对象。</li><li><strong>Map(用Key来搜索的专家)：</strong>使用键值对来存储。Key不能重复，但是可以引用相同的的对象。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC注解式开发</title>
    <link href="/2020/06/30/SpringMVC-02/"/>
    <url>/2020/06/30/SpringMVC-02/</url>
    
    <content type="html"><![CDATA[<h2 id="1、对请求提交方式的定义"><a href="#1、对请求提交方式的定义" class="headerlink" title="1、对请求提交方式的定义"></a>1、对请求提交方式的定义</h2><p>@RequestMapping 请求映射<br>属性:<br>value,表示所匹配请求的URI<br>method,表示请求的方式：<br>get请求: RequestMethod.GET<br>post请求: RequestMethod.POST<a id="more"></a></p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/some.do"</span>,method= RequestMethod.GET)<span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;&#125;</code></pre><h2 id="2、处理器的请求参数"><a href="#2、处理器的请求参数" class="headerlink" title="2、处理器的请求参数"></a>2、处理器的请求参数</h2><p>处理器方法可以包含以下四类参数，这些参数会在系统调用时由系统自动赋值，即程序员可在方法内直接使用。<br>➢ HttpServletRequest<br>➢ HttpServletResponse<br>➢ HttpSession<br>➢ 请求中所携带的请求参数</p><h3 id="1、逐个参数接收"><a href="#1、逐个参数接收" class="headerlink" title="1、逐个参数接收"></a>1、逐个参数接收</h3><p>保证请求参数名与该请求处理方法的参数名相同。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 保证请求参数名与该请求处理方法的参数名相同。</span><span class="hljs-comment">     * 框架接收请求参数</span><span class="hljs-comment">     * 1、使用request对象接收请求参数</span><span class="hljs-comment">     * 2、springmvc框架通过DispatcherServlet 调用myController中的doSome()</span><span class="hljs-comment">     * 并按名称对应，把接收到的参数赋值给形参，框架会提供类型自动转换功能</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/other.do"</span>,method = RequestMethod.POST)<span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOther</span><span class="hljs-params">(String name,Integer age)</span></span>&#123;&#125;</code></pre><p>400错误码：客户端错误，表示提交请求时出现了错误</p><h3 id="2、解决中文乱码"><a href="#2、解决中文乱码" class="headerlink" title="2、解决中文乱码"></a>2、解决中文乱码</h3><p>提交请求参数时，get方式没有乱码，post方式出现中文乱码。<br>使用框架提供的过滤器解决乱码：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册过滤器，解决post请求的乱码问题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-comment">&lt;!--设置项目中的字符编码--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 强制请求对象(HttpServletRequest)使用encoding编码值--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 强制响应对象(HttpServletResponse)使用encoding编码值--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><h3 id="3、-RequestParam校正请求参数"><a href="#3、-RequestParam校正请求参数" class="headerlink" title="3、@RequestParam校正请求参数"></a>3、@RequestParam校正请求参数</h3><p>若请求URL 所携带的参数名称与处理方法中指定的参数名不相同时，则需在处理方法参数前，添加一个注解@RequestParam(“请求参数名”)，指定请求URL 所携带参数的名称。</p><p><img src="/2020/06/30/SpringMVC-02/1.png" srcset="/img/loading.gif" alt> </p><p><img src="/2020/06/30/SpringMVC-02/2.png" srcset="/img/loading.gif" alt></p><h3 id="4、对象参数接收"><a href="#4、对象参数接收" class="headerlink" title="4、对象参数接收"></a>4、对象参数接收</h3><p>将处理器方法的参数定义为一个对象，只要保证<strong>请求参数名与这个对象的属性同名</strong>即可。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, Integer age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/other.do"</span>,method = RequestMethod.POST)    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOther</span><span class="hljs-params">(Student student)</span></span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">"student"</span>,student);        <span class="hljs-comment">// 指定视图 框架对视图执行forward操作</span>        modelAndView.setViewName(<span class="hljs-string">"show"</span>);        <span class="hljs-comment">// 返回modelAndView</span>        <span class="hljs-keyword">return</span> modelAndView;    &#125;</code></pre><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;show.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;name：$&#123;student.name&#125;&lt;/p&gt;    &lt;p&gt;age：$&#123;student.age&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3、处理器方法的返回值"><a href="#3、处理器方法的返回值" class="headerlink" title="3、处理器方法的返回值"></a>3、处理器方法的返回值</h2><h3 id="1、返回ModelAndView"><a href="#1、返回ModelAndView" class="headerlink" title="1、返回ModelAndView"></a>1、返回ModelAndView</h3><p>处理器方法处理完后，需要跳转到其他资源，并且要在跳转的资源之间传递数据。</p><h3 id="2、返回String"><a href="#2、返回String" class="headerlink" title="2、返回String"></a>2、返回String</h3><p>视图跳转，不传递数据。</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/returnView.do"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doRetyrnView</span><span class="hljs-params">(String name,Integer age)</span> </span>&#123;        <span class="hljs-comment">// show  逻辑视图名称。项目中配置了视图解析器</span>        <span class="hljs-comment">// 框架对视图进行forward转发操作</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"show"</span>;    &#125;&#125;</code></pre><h3 id="3、返回void"><a href="#3、返回void" class="headerlink" title="3、返回void"></a>3、返回void</h3><p>不能表示数据，也不能表示视图。<br>在处理ajax的时候，可以使用void返回值。通过HttpServletResponse输出数据，响应ajax请求。<br>ajax请求服务端返回的就是数据，与视图无关。</p><p>step1：服务端向浏览器传回的是JSON 数据，需要使用一个工具类将字符串包装为JSON 格式，所以需要导入JSON 的依赖。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p> step2：引入jquery<br><img src="/2020/06/30/SpringMVC-02/3.png" srcset="/img/loading.gif" alt></p><p>step3：发起ajax请求</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;index.jsp&lt;/title&gt;    &lt;script type="text/javascript" src="js/jquery-3.4.1.js"&gt;&lt;/script&gt;    &lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;        $(function()&#123;            $(<span class="hljs-string">"#btn"</span>).click(function()&#123;                <span class="hljs-comment">// alert("button click")</span>                $.ajax(&#123;                    url:<span class="hljs-string">"returnVoid-ajax.do"</span>,                    data:&#123;                        name:<span class="hljs-string">"zyz"</span>,                        age:<span class="hljs-number">21</span>                    &#125;,                    type:<span class="hljs-string">"post"</span>,                    dataType:<span class="hljs-string">"json"</span>,                    <span class="hljs-comment">// resp是服务器端返回的json格式的字符串</span>                    <span class="hljs-comment">// jquery会把json字符串转化为json对象，赋值给形参</span>                    success:function(resp)&#123;                        alert(<span class="hljs-string">"name:"</span>+resp.name+<span class="hljs-string">" age:"</span>+resp.age);                    &#125;                &#125;)            &#125;)        &#125;)    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;button id="btn"&gt;发起ajax请求&lt;/button&gt;&lt;/body&gt;</code></pre><p>step4：响应ajax请求</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/returnVoid-ajax.do"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doReturnVoidAjax</span><span class="hljs-params">(HttpServletResponse resp, String name, Integer age)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    System.out.println(<span class="hljs-string">"name:"</span> + name);    System.out.println(<span class="hljs-string">"age:"</span> + age);    <span class="hljs-comment">// 处理ajax请求  使用json数据格式</span>    Student student = <span class="hljs-keyword">new</span> Student(name, age);    <span class="hljs-comment">// 将数据转换为json格式</span>    String studentJson=<span class="hljs-string">""</span>;    <span class="hljs-keyword">if</span> (student != <span class="hljs-keyword">null</span>) &#123;        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();         studentJson= objectMapper.writeValueAsString(student);        System.out.println(<span class="hljs-string">"student的json格式："</span>+studentJson);    &#125;    <span class="hljs-comment">// resp输出数据到页面，响应ajax请求</span>    resp.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);    PrintWriter writer = resp.getWriter();    writer.print(studentJson);    writer.flush();    writer.close();&#125;</code></pre><h3 id="4、返回Object"><a href="#4、返回Object" class="headerlink" title="4、返回Object"></a>4、返回Object</h3><p>处理器返回的对象不是作为逻辑视图出现的，而是作为直接在页面显示的数据出现。<br>可以使用对象表示数据，响应ajax请求。<br>将对象类型转换为json类型 以及 将结果数据输出到页面，springmvc框架都可以自动帮你完成：</p><p><strong>step1:</strong><br>在pom.xml中引入Jackson相关依赖，Jackson工具库用于将Object转换为Json。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><strong>step2:</strong></p><p>在springmvc.xml配置文件中添加注解驱动。<br>将Object 数据转化为JSON 数据，需要由消息转换器HttpMessageConverter 完成。而转换器的开启，需要由<code>&lt;mvc:annotation-driven/&gt;</code>来完成。<br>SpringMVC 使用消息转换器实现请求数据和对象，处理器方法返回对象和响应输出之间的<strong>自动转换</strong>。</p><p>当Spring 容器进行初始化过程中，在<code>&lt;mvc:annotation-driven/&gt;</code>处创建注解驱动时，默认创建了八个HttpMessageConverter 对象。也就是说，我们注册<code>&lt;mvc:annotation-driven/&gt;</code>，就是为了让容器为我们创建HttpMessageConverter 对象。</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注解驱动--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span></code></pre><p><strong>step3:</strong></p><p>修改处理器方法：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 使用框架来处理ajax请求</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Student</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/returnStudent.do"</span>)<span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">// 处理器返回对象转换为json后，通过HttpServletResponse输出给浏览器</span><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">doReturnStudentAjax</span><span class="hljs-params">()</span></span>&#123;    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"zyz"</span>, <span class="hljs-number">19</span>);    <span class="hljs-keyword">return</span> student;<span class="hljs-comment">// 框架会将obj转为json格式</span>&#125;</code></pre><p>从页面发起ajax请求：</p><pre><code class="hljs js">$(<span class="hljs-string">"#btn02"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    $.ajax(&#123;        url:<span class="hljs-string">"returnStudent.do"</span>,        type:<span class="hljs-string">"post"</span>,        dataType:<span class="hljs-string">"json"</span>,        <span class="hljs-comment">// resp是服务器端返回的json格式的字符串</span>        <span class="hljs-comment">// jquery会把json字符串转化为json对象，赋值给形参</span>        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resp</span>)</span>&#123;            alert(<span class="hljs-string">"name:"</span>+resp.name+<span class="hljs-string">" age:"</span>+resp.age);        &#125;    &#125;)&#125;)</code></pre><p><strong>处理流程：</strong></p><p>1、框架会把处理器返回的Student类型的数据，调用框架中的<code>ArrayList&lt;HttpMessageConverter&gt;</code>中每个类的canWrite()方法，检查哪个HttpMessageConverter接口的类能处理Student类型的数据—-MappingJackson2HttpMessageConverter<br>2、调用实现类中的Write()方法，将student对象转换为json字符串<br>3、调用@ResponseBody把转换好的json数据输出到浏览器，ajax处理完成</p><h4 id="返回List集合："><a href="#返回List集合：" class="headerlink" title="返回List集合："></a>返回List集合：</h4><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/returnStudents.do"</span>)<span class="hljs-meta">@ResponseBody</span> <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">doReturnStudentAjax</span><span class="hljs-params">()</span> </span>&#123;    List&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    Student student1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"张伟1"</span>, <span class="hljs-number">19</span>);    Student student2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"张伟2"</span>, <span class="hljs-number">20</span>);    Student student3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">"张伟3"</span>, <span class="hljs-number">21</span>);    students.add(student1);    students.add(student2);    students.add(student3);    <span class="hljs-keyword">return</span> students;&#125;</code></pre><pre><code class="hljs js">$(<span class="hljs-string">"#btn03"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    $.ajax(&#123;        url:<span class="hljs-string">"returnStudents.do"</span>,        type:<span class="hljs-string">"post"</span>,        dataType:<span class="hljs-string">"json"</span>,        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resp</span>)</span>&#123;            $.each(resp,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i,stu</span>) </span>&#123;                alert(stu.name+<span class="hljs-string">" "</span>+stu.age);            &#125;)        &#125;    &#125;)&#125;);</code></pre><h4 id="返回String"><a href="#返回String" class="headerlink" title="返回String"></a>返回String</h4><p>String表示数据，不是视图。</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/returnString.do"</span>, produces=<span class="hljs-string">"text/plain;charset=utf-8"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doReturnStringAjax</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"返回的字符串~"</span>;&#125;</code></pre><pre><code class="hljs js">$(<span class="hljs-string">"#btn04"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    $.ajax(&#123;        url:<span class="hljs-string">"returnString.do"</span>,        type:<span class="hljs-string">"post"</span>,        success:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) </span>&#123;            alert(resp);        &#125;    &#125;)&#125;);</code></pre><h2 id="4、解读url-pattern标签"><a href="#4、解读url-pattern标签" class="headerlink" title="4、解读url-pattern标签"></a>4、解读url-pattern标签</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><p>意思是将所有以.do结尾的请求交给中央调度器（框架）处理。<br>但是，当提交一些静态资源，例如图片，html页面，js文件的请求时，服务器也会响应。<br>因为tomcat本身就能处理一些未映射的静态资源的访问。</p><p><strong>将所有请求都交给框架处理：</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><p>处理方式一：转发给服务器处理</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 处理静态资源</span><span class="hljs-comment">框架会创建控制器对象DefaultServletHttpRequestHandler把接收到的请求转发给tomcat来处理静态资源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span></code></pre><p>处理方式二：框架自己处理</p><p>将静态资源集中存放到一个文件夹中<br><img src="/2020/06/30/SpringMVC-02/4.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  处理静态资源方式二</span><span class="hljs-comment"> 创建 ResourceHttpServletHandler处理器对象 让这个对象去处理静态资源的请求  不依赖于tomcat</span><span class="hljs-comment"> mapping:访问静态资源的uri  使用通配符 **</span><span class="hljs-comment"> location:静态资源在项目中的位置--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">"/static/**"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"/static/"</span>/&gt;</span></code></pre><h2 id="5、绝对地址和相对地址"><a href="#5、绝对地址和相对地址" class="headerlink" title="5、绝对地址和相对地址"></a>5、绝对地址和相对地址</h2><p><strong>绝对地址</strong><br>带有协议的地址，在互联网上唯一的</p><p><strong>相对地址</strong><br>没有协议开头的，不能独立使用，需要一个参考地址。通过参考地址+相对地址本身才能指定资源。</p><p>在jsp，html 中使用的地址，都是前端页面中的地址，都是相对地址。</p><p>在页面中访问地址不加 ” / “ ，访问的是当前页面地址加上链接地址。使用base标签固定参考地址<br><img src="/2020/06/30/SpringMVC-02/5.png" srcset="/img/loading.gif" alt></p><h2 id="6、文件上传和下载"><a href="#6、文件上传和下载" class="headerlink" title="6、文件上传和下载"></a>6、文件上传和下载</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>1、导入依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- springmvc--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--文件上传--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​      2、如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"multipartResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10485760"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxInMemorySize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"40960"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>3、编写上传文件的表单</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=<span class="hljs-string">"upload2"</span> enctype=<span class="hljs-string">"multipart/form-data"</span> method=<span class="hljs-string">"post"</span>&gt;    &lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"file"</span>/&gt;    &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"upload"</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>4、编写处理文件上传的Controller方法</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload"</span>)    <span class="hljs-comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span>        String uploadFileName = file.getOriginalFilename();        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(uploadFileName)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        &#125;        System.out.println(<span class="hljs-string">"上传文件名 : "</span> + uploadFileName);        <span class="hljs-comment">//上传路径保存设置</span>        String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);        <span class="hljs-comment">//如果路径不存在，创建一个</span>        File realPath = <span class="hljs-keyword">new</span> File(path);        <span class="hljs-keyword">if</span> (!realPath.exists()) &#123;            realPath.mkdir();        &#125;        System.out.println(<span class="hljs-string">"上传文件保存地址："</span> + realPath);        InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath, uploadFileName)); <span class="hljs-comment">//文件输出流</span>        <span class="hljs-comment">//读取写出</span>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;            os.write(buffer, <span class="hljs-number">0</span>, len);            os.flush();        &#125;        os.close();        is.close();        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">     * 采用file.TransferTo 来保存上传的文件</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload2</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span>        String uploadFileName = file.getOriginalFilename();        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(uploadFileName)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        &#125;        <span class="hljs-comment">//上传路径保存设置</span>        String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);        File realPath = <span class="hljs-keyword">new</span> File(path);        <span class="hljs-keyword">if</span> (!realPath.exists()) &#123;            realPath.mkdir();        &#125;        <span class="hljs-comment">//上传文件地址</span>        System.out.println(<span class="hljs-string">"上传文件保存地址："</span> + realPath);        <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span>        file.transferTo(<span class="hljs-keyword">new</span> File(realPath + <span class="hljs-string">"/"</span> + file.getOriginalFilename()));        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    &#125;&#125;</code></pre><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/download"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    <span class="hljs-comment">//要下载的图片地址</span>    String  path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);    String  fileName = <span class="hljs-string">"基础语法.png"</span>;    <span class="hljs-comment">//1、设置response 响应头</span>    response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span>    response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">//字符编码</span>    response.setContentType(<span class="hljs-string">"multipart/form-data"</span>); <span class="hljs-comment">//二进制传输数据</span>    <span class="hljs-comment">// 判断浏览器类型</span>    String ua = request.getHeader(<span class="hljs-string">"User-Agent"</span>);    String str=<span class="hljs-string">""</span>;    <span class="hljs-comment">// 判断是否是火狐浏览器</span>    <span class="hljs-keyword">if</span> (ua.contains(<span class="hljs-string">"Firefox"</span>)) &#123;        <span class="hljs-comment">// 使用下面的格式进行BASE64 编码后</span>        str = <span class="hljs-string">"=?utf-8?B?"</span> + <span class="hljs-keyword">new</span> BASE64Encoder().encode(fileName.getBytes(<span class="hljs-string">"utf-8"</span>)) + <span class="hljs-string">"?="</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 把中文名进行UTF-8 编码操作</span>        str = URLEncoder.encode(fileName, <span class="hljs-string">"UTF-8"</span>);    &#125;    <span class="hljs-comment">//设置响应头</span>    response.setHeader(<span class="hljs-string">"Content-Disposition"</span>,            <span class="hljs-string">"attachment;fileName="</span>+ str);    File file = <span class="hljs-keyword">new</span> File(path,fileName);    <span class="hljs-comment">//2、 读取文件--输入流</span>    InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);    <span class="hljs-comment">//3、 写出文件--输出流</span>    OutputStream out = response.getOutputStream();    <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;    <span class="hljs-comment">//4、执行 写出操作</span>    <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;        out.write(buff, <span class="hljs-number">0</span>, index);        out.flush();    &#125;    out.close();    input.close();    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;&#125;</code></pre><pre><code class="hljs jsp">&lt;a href="download"&gt;下载&lt;/a&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC简介</title>
    <link href="/2020/06/20/SpringMVC-01/"/>
    <url>/2020/06/20/SpringMVC-01/</url>
    
    <content type="html"><![CDATA[<p>SpringMVC是Spring框架的一部分。相当于servlet的一个升级。SpringMVC创建控制器对象，放入SpringMVC容器中。<a id="more"></a></p><h2 id="SpringMVC使用"><a href="#SpringMVC使用" class="headerlink" title="SpringMVC使用"></a>SpringMVC使用</h2><h3 id="1、在web工程中添加依赖"><a href="#1、在web工程中添加依赖" class="headerlink" title="1、在web工程中添加依赖"></a>1、在web工程中添加依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、在web-xml文件中注册中央处理对象DispacherServlet"><a href="#2、在web-xml文件中注册中央处理对象DispacherServlet" class="headerlink" title="2、在web.xml文件中注册中央处理对象DispacherServlet"></a>2、在web.xml文件中注册中央处理对象DispacherServlet</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册springMVC核心依赖DispatcherServlet</span><span class="hljs-comment">   tomcat服务器启动后创建DispatcherServlet实例对象，同时读取配置文件创建容器对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-comment">&lt;!--自定义读取配置文件的位置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 在tomcat启动后，创建Servlet对象  数值越小创建越早--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><h3 id="3、在springmvc配置文件中注册组件扫描器"><a href="#3、在springmvc配置文件中注册组件扫描器" class="headerlink" title="3、在springmvc配置文件中注册组件扫描器"></a>3、在springmvc配置文件中注册组件扫描器</h3><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!-- 声明组件扫描器 创建Controller对象  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.controller"</span>/&gt;</span></code></pre><h3 id="4、编写MyController处理请求"><a href="#4、编写MyController处理请求" class="headerlink" title="4、编写MyController处理请求"></a>4、编写MyController处理请求</h3><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理some.do请求</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 请求处理完成后，返回用户的数据</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/some.do"</span>)<span class="hljs-comment">// 请求映射，将请求地址与请求方法绑定</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();                <span class="hljs-comment">// 添加数据 框架请求的最后将数据放入Request域中</span>        modelAndView.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"hello,SpringMVC"</span>);                <span class="hljs-comment">// 指定视图 框架对视图执行forward操作</span>        modelAndView.setViewName(<span class="hljs-string">"/show.jsp"</span>);                <span class="hljs-comment">// 返回modelAndView</span>        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre><h3 id="5、页面"><a href="#5、页面" class="headerlink" title="5、页面"></a>5、页面</h3><p>请求页面：index.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;index.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;第一个springMVC程序&lt;/p&gt;    &lt;p&gt;&lt;a href="some.do"&gt;发起some.do请求&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>跳转页面：show.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;show.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;msg数据：$&#123;msg&#125;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="SpringMVC请求的处理过程"><a href="#SpringMVC请求的处理过程" class="headerlink" title="SpringMVC请求的处理过程"></a>SpringMVC请求的处理过程</h2><p><img src="/2020/06/20/SpringMVC-01/1.png" srcset="/img/loading.gif" alt></p><p>SpringMVC内部执行流程：<br><img src="/2020/06/20/SpringMVC-01/4.png" srcset="/img/loading.gif" alt></p><h2 id="使用视图解析器"><a href="#使用视图解析器" class="headerlink" title="使用视图解析器"></a>使用视图解析器</h2><p>在springmvc配置文件中声明视图解析器：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  声明springmvc框架中的视图解析器  帮助开发人员设置视图文件的路径  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!--前缀  视图文件的路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/view/"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--后缀  视图文件的拓展名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">// 配置视图解析器后,可直接使用文件名指定视图</span>modelAndView.setViewName(<span class="hljs-string">"show"</span>);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web项目环境搭建</title>
    <link href="/2020/06/20/Spring-05/"/>
    <url>/2020/06/20/Spring-05/</url>
    
    <content type="html"><![CDATA[<h1 id="实现一个简单的注册功能"><a href="#实现一个简单的注册功能" class="headerlink" title="实现一个简单的注册功能"></a>实现一个简单的注册功能</h1><p>项目整体结构：<a id="more"></a><br><img src="/2020/06/20/Spring-05/2.jpg" srcset="/img/loading.gif" alt></p><h2 id="1、使用maven创建web项目"><a href="#1、使用maven创建web项目" class="headerlink" title="1、使用maven创建web项目"></a>1、使用maven创建web项目</h2><p><img src="/2020/06/20/Spring-05/1.jpg" srcset="/img/loading.gif" alt></p><h2 id="2、添加依赖和插件"><a href="#2、添加依赖和插件" class="headerlink" title="2、添加依赖和插件"></a>2、添加依赖和插件</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--    Spring事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--    MyBatis依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- servlet依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jsp依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 监听器依赖--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><p>将spring-mybatis整合的代码复制到src下</p><h2 id="3、编写页面"><a href="#3、编写页面" class="headerlink" title="3、编写页面"></a>3、编写页面</h2><p>index.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;注册页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;员工注册&lt;/h1&gt;    &lt;form action=<span class="hljs-string">"registerServlet"</span> method=<span class="hljs-string">"post"</span>&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;姓名&lt;/td&gt;                &lt;td&gt;&lt;input type="text" name="name"&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;性别&lt;/td&gt;                &lt;td&gt;&lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"1"</span>&gt;男                &lt;input type="radio" name="gender" value="0"&gt;女&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;电子邮件&lt;/td&gt;                &lt;td&gt;&lt;input type="text" name="email"&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;部门编号&lt;/td&gt;                &lt;td&gt;&lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"deptId"</span> value=<span class="hljs-string">"1"</span>&gt;<span class="hljs-number">1</span>                &lt;input type="radio" name="deptId" value="2"&gt;2&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=<span class="hljs-string">"2"</span>&gt;                    &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"注册提交"</span>&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>registerSuccess.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;注册成功页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;注册成功&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="4、编写servlet"><a href="#4、编写servlet" class="headerlink" title="4、编写servlet"></a>4、编写servlet</h2><h3 id="1-在web-xml中注册servlet和listener"><a href="#1-在web-xml中注册servlet和listener" class="headerlink" title="1.在web.xml中注册servlet和listener"></a>1.在web.xml中注册servlet和listener</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册servlet--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zyz.controller.RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/registerServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-comment">&lt;!--注册监听器ContextLoaderListener  自动创建容器对象，并放入全局作用域ServletContext中</span><span class="hljs-comment">                                       用户发起请求时可以直接使用对象，不需要再创建容器--&gt;</span><span class="hljs-comment">&lt;!--自定义配置文件路径  创建容器对象时需要读取配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span></code></pre><h3 id="2、编写servlet程序"><a href="#2、编写servlet程序" class="headerlink" title="2、编写servlet程序"></a>2、编写servlet程序</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        String name = request.getParameter(<span class="hljs-string">"name"</span>);        String gender = request.getParameter(<span class="hljs-string">"gender"</span>);        String email = request.getParameter(<span class="hljs-string">"email"</span>);        String deptId = request.getParameter(<span class="hljs-string">"deptId"</span>);        WebApplicationContext webApplicationContext = <span class="hljs-keyword">null</span>;        <span class="hljs-comment">/*// 从ServletContext中获取容器对象</span><span class="hljs-comment">        String key = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;</span><span class="hljs-comment">        Object attribute = getServletContext().getAttribute(key);</span><span class="hljs-comment">        if(attribute!=null)&#123;</span><span class="hljs-comment">            webApplicationContext = (WebApplicationContext) attribute;</span><span class="hljs-comment">        &#125;*/</span>       <span class="hljs-comment">// 使用框架提供的工具类直接从ServletContext中获取创建好容器对象</span>        ServletContext servletContext = getServletContext();        webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);        <span class="hljs-comment">// 获取service</span>        EmployeeService employeeService = (EmployeeService) webApplicationContext.getBean(<span class="hljs-string">"employeeService"</span>);        Employee employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,name,gender,email,Integer.parseInt(deptId));        employeeService.addEmp(employee);        <span class="hljs-comment">// 注册成功 页面跳转</span>        request.getRequestDispatcher(<span class="hljs-string">"/registerSuccess.jsp"</span>).forward(request,response);    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring事务</title>
    <link href="/2020/06/19/Spring-04/"/>
    <url>/2020/06/19/Spring-04/</url>
    
    <content type="html"><![CDATA[<p>spring提供一种处理事务的统一模型，能使用统一的步骤，完成多种不同数据库访问技术的事务处理。<a id="more"></a><br><img src="/2020/06/19/Spring-04/1.png" srcset="/img/loading.gif" alt></p><h2 id="spring管理事务的三个方面"><a href="#spring管理事务的三个方面" class="headerlink" title="spring管理事务的三个方面"></a>spring管理事务的三个方面</h2><p>1、事务管理器<br>事务管理器是一个接口和它的众多实现类，由事务管理器对象完成事务的提交和回滚。<br>实现类：spring将每一种数据库访问技术对应的事务处理类都创建好了<br>mybatis访问数据库——-DateSourceTransactionManager<br>hibernate访问数据库———HibernateTransactionManager<br>使用方法：告诉spring你使用的那种数据库的访问方式</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"  "</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"  ...DateSourceTransaction"</span>/&gt;</span></code></pre><p>2、事务的类型<br>（1）事务的隔离级别<br><img src="/2020/06/19/Spring-04/2.jpg" srcset="/img/loading.gif" alt><br>(2)事务的超时时间<br>表示一个方法的最长执行时间，如果方法执行超过了该时间，事务就回滚<br>(3)事务的传播行为<br>PROPAGATION_REQUIRED：指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是Spring 默认的事务传播行为。<br>PROPAGATION_REQUIRES_NEW：总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。<br>PROPAGATION_SUPPORTS：指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。</p><p>3、spring提交事务，回滚事务的时机<br>(1)业务方法执行成功，没有异常抛出，spring会在方法指向后提交事务<br>(2)业务方法抛出运行时异常，spring执行回滚<br>运行时异常定义：RuntimeException和它的子类都是运行时异常，NullPointException，NumberFormatException<br>(3)业务方法抛出非运行时异常，受查异常时，提交事务。<br>受查异常：写代码时必须处理的异常，IOException，SQLException</p><h2 id="事务应用——购买商品项目"><a href="#事务应用——购买商品项目" class="headerlink" title="事务应用——购买商品项目"></a>事务应用——购买商品项目</h2><p>实现购买商品，模拟用户下订单，向订单中添加销售记录，从商品表中减少库存。</p><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>1、在spring配置文件添加事务管理器和事务注解驱动</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明事务管理器   --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>    <span class="hljs-comment">&lt;!--  连接的数据库，指定数据源 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 开启事务注解驱动 告诉spring使用注解管理事务，创建代理对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>/&gt;</span></code></pre><p>2、在需要使用事务的方法上添加Transactional注解</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;    <span class="hljs-keyword">private</span> SaleDao saleDao;    <span class="hljs-keyword">private</span> GoodsDao goodsDao;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> </span>&#123;        <span class="hljs-keyword">this</span>.saleDao = saleDao;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> </span>&#123;        <span class="hljs-keyword">this</span>.goodsDao = goodsDao;    &#125;    <span class="hljs-comment">/*@Transactional(</span><span class="hljs-comment">            propagation = Propagation.REQUIRED,// 传播行为(默认)</span><span class="hljs-comment">            isolation = Isolation.DEFAULT,// 隔离级别(默认)</span><span class="hljs-comment">            readOnly = false,</span><span class="hljs-comment">            rollbackFor = &#123; // 发生指定异常时回滚</span><span class="hljs-comment">                    RuntimeException.class</span><span class="hljs-comment">            &#125;</span><span class="hljs-comment"></span><span class="hljs-comment">    )*/</span>    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(Integer gid, Integer nums)</span> </span>&#123;        System.out.println(<span class="hljs-string">"buy开始"</span>);        <span class="hljs-comment">// 记录销售信息，向sale表中添加记录</span>        saleDao.insertSale(<span class="hljs-keyword">new</span> Sale(<span class="hljs-keyword">null</span>, gid, nums));        Goods goods = goodsDao.selectGoodsById(gid);        <span class="hljs-keyword">if</span> (goods == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"商品不存在！"</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(goods.getAmount()&lt;nums)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"商品不足"</span>);        &#125;        <span class="hljs-comment">// 更新库存</span>        goodsDao.updateGoods(<span class="hljs-keyword">new</span> Goods(gid,<span class="hljs-keyword">null</span>,nums,<span class="hljs-keyword">null</span>));        System.out.println(<span class="hljs-string">"buy结束"</span>);    &#125;&#125;</code></pre><h3 id="使用aspectj完成事务配置"><a href="#使用aspectj完成事务配置" class="headerlink" title="使用aspectj完成事务配置"></a>使用aspectj完成事务配置</h3><p>1、添加aspectj依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>2、声明事务管理器</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明事务管理器   --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="hljs-comment">&lt;!--  连接的数据库，指定数据源 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>3、声明业务方法及事务属性</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  声明业务方法及事务属性（隔离级别、传播行为、超时时间）  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><span class="hljs-comment">&lt;!-- name 方法名称  可使用通配符--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"buy"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">"DEFAULT"</span></span><span class="hljs-tag">                   <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">"java.lang.RuntimeException"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--修改方法  --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update*"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--删除方法  --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete*"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--查询方法  --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query*"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"SUPPORTS"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span></code></pre><p>4、配置aop</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置切入点表达式：指定哪些包中的类需要使用事务</span><span class="hljs-comment">        id:切入点表达式的名称，唯一值</span><span class="hljs-comment">        expression:切入点表达式，指定哪些类需要使用事务，aspectj会自动创建代理对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"servicePt"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* *..service..*.*(..))"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:pointcut</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置增强器  关联advice和pointcut</span><span class="hljs-comment">                    advice-ref  通知,tx:advice的id值</span><span class="hljs-comment">                    pointcut-ref  切入点表达式aop:pointcut的id值 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"myAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"servicePt"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring集成MyBatis</title>
    <link href="/2020/06/16/Spring-03/"/>
    <url>/2020/06/16/Spring-03/</url>
    
    <content type="html"><![CDATA[<p>整合的想法：使用spring的ioc核心技术， 把mybatis中使用的对象交给spring统一创建和管理。spring是容器，存放项目中使用的各种对象，例如Service对象，Dao对象，工具类对象等等<a id="more"></a></p><p>项目结构：<br><img src="/2020/06/16/Spring-03/3.jpg" srcset="/img/loading.gif" alt></p><h2 id="1、在pom-xml文件中添加依赖及插件"><a href="#1、在pom-xml文件中添加依赖及插件" class="headerlink" title="1、在pom.xml文件中添加依赖及插件"></a>1、在pom.xml文件中添加依赖及插件</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--    Spring事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--    MyBatis依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h2 id="2、交给spring的mybatis对象"><a href="#2、交给spring的mybatis对象" class="headerlink" title="2、交给spring的mybatis对象"></a>2、交给spring的mybatis对象</h2><p>1.数据源</p><p>2.SqlSessionFactory对象</p><p>3.Dao对象</p><p>4.Service对象<br>创建spring配置文件applicationContext.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--  将数据库配置文件写入单独的文件中        --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:jdbc.properties"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--声明数据源  用于连接数据库--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myDataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.druid.pool.DruidDataSource"</span></span><span class="hljs-tag">          <span class="hljs-attr">init-method</span>=<span class="hljs-string">"init"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.maxActive&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myDataSource"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- mybatis主配置文件的位置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatisConfig.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 声明Dao类</span><span class="hljs-comment">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span><span class="hljs-comment">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--  声明Service类  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"employeeService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.service.impl.EmployeeServiceImpl"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"employeeDao"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"employeeDao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>jdbc.propeties</p><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">2824199842</span><span class="hljs-meta">jdbc.maxActive</span>=<span class="hljs-string">20</span></code></pre><h2 id="3、mybatis配置文件"><a href="#3、mybatis配置文件" class="headerlink" title="3、mybatis配置文件"></a>3、mybatis配置文件</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--  打印日志--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-comment">&lt;!--  注册映射文件  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zyz.dao"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h2 id="4、在dao包下添加sql映射文件"><a href="#4、在dao包下添加sql映射文件" class="headerlink" title="4、在dao包下添加sql映射文件"></a>4、在dao包下添加sql映射文件</h2><pre><code class="hljs sql">&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="com.zyz.dao.EmployeeDao"&gt;    &lt;insert id="insertEmp" useGeneratedKeys="true" keyProperty="id"&gt;        <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee(<span class="hljs-keyword">name</span>,gender,email,dept_id) <span class="hljs-keyword">values</span>(<span class="hljs-comment">#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;)</span>    &lt;/<span class="hljs-keyword">insert</span>&gt;    &lt;<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>=<span class="hljs-string">"selectAllEmps"</span> resultType=<span class="hljs-string">"com.zyz.bean.Employee"</span>&gt;        <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, gender, email, dept_id deptId <span class="hljs-keyword">from</span> employee    &lt;/<span class="hljs-keyword">select</span>&gt;&lt;/mapper&gt;</code></pre><h2 id="5、创建service包添加相应的Service接口并实现"><a href="#5、创建service包添加相应的Service接口并实现" class="headerlink" title="5、创建service包添加相应的Service接口并实现"></a>5、创建service包添加相应的Service接口并实现</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">queryAllEmps</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmployeeService</span> </span>&#123;    <span class="hljs-keyword">private</span> EmployeeDao employeeDao;    <span class="hljs-comment">// 使用set注入赋值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmployeeDao</span><span class="hljs-params">(EmployeeDao employeeDao)</span> </span>&#123;        <span class="hljs-keyword">this</span>.employeeDao = employeeDao;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span> </span>&#123;        <span class="hljs-keyword">return</span> employeeDao.insertEmp(employee);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">queryAllEmps</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> employeeDao.selectAllEmps();    &#125;&#125;</code></pre><h2 id="6、创建测试类"><a href="#6、创建测试类" class="headerlink" title="6、创建测试类"></a>6、创建测试类</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDao</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;        String config = <span class="hljs-string">"applicationContext.xml"</span>;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);        EmployeeDao employeeDao = (EmployeeDao) applicationContext.getBean(<span class="hljs-string">"employeeDao"</span>);        Employee employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">"zyz001"</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">"2824199842@qq.com"</span>,<span class="hljs-number">1</span>);        employeeDao.insertEmp(employee);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;        String config = <span class="hljs-string">"applicationContext.xml"</span>;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);        EmployeeDao employeeDao = (EmployeeDao) applicationContext.getBean(<span class="hljs-string">"employeeDao"</span>);        List&lt;Employee&gt; employees = employeeDao.selectAllEmps();        <span class="hljs-keyword">for</span> (Employee e:employees) &#123;            System.out.println(e);        &#125;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestService</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        String config = <span class="hljs-string">"applicationContext.xml"</span>;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);        EmployeeService employeeService = (EmployeeService) applicationContext.getBean(<span class="hljs-string">"employeeService"</span>);        Employee employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">"zhangsan"</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">"zhangsan@126.com"</span>,<span class="hljs-number">1</span>);        <span class="hljs-comment">// 事务自动提交</span>        employeeService.addEmp(employee);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        String config = <span class="hljs-string">"applicationContext.xml"</span>;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);        EmployeeService employeeService = (EmployeeService) applicationContext.getBean(<span class="hljs-string">"employeeService"</span>);        Employee employee1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">"zhangsan"</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">"zhangsan@126.com"</span>,<span class="hljs-number">1</span>);        <span class="hljs-comment">// 事务自动提交</span>        List&lt;Employee&gt; employees = employeeService.queryAllEmps();        <span class="hljs-keyword">for</span>(Employee employee:employees)&#123;            System.out.println(employee);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOP面向切面编程</title>
    <link href="/2020/06/12/Spring-02/"/>
    <url>/2020/06/12/Spring-02/</url>
    
    <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><img src="/2020/06/12/Spring-02/1.jpg" srcset="/img/loading.gif" alt><a id="more"></a></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析：<br>抽象角色：一般使用接口或抽象类来实现。一是通过继承被代理类的方式实现其子类，重写父类方法；二是与被代理类实现共同的一个接口。<br>真实角色：被代理的角色。<br>代理角色：代理真实角色，执行附属操作。<br>客户：使用代理角色来进行一些操作。<br>代码步骤 ：</p><p>1、接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>2、真实角色</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"Host提供租房服务~"</span>);    &#125;&#125;</code></pre><p>3、代理角色</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>&#123;    <span class="hljs-keyword">private</span> Host host;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;        <span class="hljs-keyword">this</span>.host = host;    &#125;    <span class="hljs-comment">// 代理Host对象提供服务</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;        host.rent();    &#125;&#125;</code></pre><p>4、客户端访问代理角色</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Host host = <span class="hljs-keyword">new</span> Host();        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);        proxy.rent();    &#125;&#125;</code></pre><p>好处：<br>1、可以使真实角色的操作更加纯粹，不用去关注其他公共的业务<br>2、公共业务交给代理角色，实现业务分工<br>3、公共业务发生拓展时，方便集中管理<br>缺点：<br>一个真实角色就会产生一个代理角色，造成代码量翻倍</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>代理类是动态生成的，不是我们直接写好的。交给程序去自动生成代理类（在程序运行期间由JVM根据反射等机制动态的生成源码 ）。<br>动态代理分为两大类：基于接口的JDK动态代理；基于类cglib动态代理。<br>1、接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>2、真实角色</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"添加"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"删除"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"修改"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"查询"</span>);    &#125;&#125;</code></pre><p>3、实现InvocationHandler接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;    <span class="hljs-comment">// 目标对象</span>    <span class="hljs-keyword">private</span> Object target;     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;        <span class="hljs-keyword">this</span>.target = target;    &#125;    <span class="hljs-comment">// 通过代理对象执行方法时，会调用invoke</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(<span class="hljs-string">"执行了MyInvocationHandler中的invoke方法"</span>);        <span class="hljs-comment">// 执行目标类方法</span>        <span class="hljs-keyword">return</span> method.invoke(target,args);    &#125;&#125;</code></pre><p>4、创建并使用代理对象</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 创建目标对象</span>        UserServiceImpl target = <span class="hljs-keyword">new</span> UserServiceImpl();        <span class="hljs-comment">// 创建MyInvocationHandler对象</span>        MYInvocationHandler myInvocationHandler = <span class="hljs-keyword">new</span> MyInvocationHandler();        myInvocationHandler.setTarget(target);        <span class="hljs-comment">// 使用Proxy创建代理对象</span>        UserService proxy = (UserService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), myInvocationHandler);        <span class="hljs-comment">// 通过代理执行方法，会调用myINvocationHandler中的invoke方法</span>        proxy.add();    &#125;&#125;</code></pre><p>动态代理作用：<br>1、在目标类源代码不改变的情况下，增加功能。<br>2、减少代码重复<br>3、专注业务逻辑代码<br>4、解耦合</p><h2 id="AOP定义"><a href="#AOP定义" class="headerlink" title="AOP定义"></a>AOP定义</h2><p>面向切面编程，基于动态代理，可使用jdk,cglib两种代理方式。<br>Spring会根据具体的Bean是否具有接口去选择动态代理方式，如果有接口，使用的是Jdk的动态代理方式，如果没有接口，使用的是cglib的动态代理方式。<br>AOP就是动态代理的规范化，供开发人员以统一的方式使用动态代理。<br>比如你写了个方法用来做一些事情，但这个事情要求登录用户才能做，你就可以在这个方法执行前验证一下，执行后记录下操作日志，把前后的这些与业务逻辑无关的代码抽取出来放一个类里，这个<strong>类就是切面（Aspect），</strong>这个<strong>被环绕的方法就是切点（Pointcut），</strong>你所做的<strong>执行前执行后的</strong>这些方法统一叫做<strong>增强处理（Advice）。</strong></p><p>怎么理解面向切面编程？<br>1、需要在分析项目功能时，找出切面<br>2、合理的安排切面的执行时间（目标方法前，还是目标方法后）—-&gt;通知注解<br>3、合理的安排切面执行的位置（在哪个类，哪个方法增加增强方法）—-&gt;切入点表达式</p><h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><p>aspectj：开源的aop实现框架<br>加入aspectj依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>1、真实对象的接口：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SomeService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>2、实现真实对象</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SomeService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"doSome方法执行"</span>);    &#125;&#125;</code></pre><p>3、切面对象，用于给业务增加功能</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Aspect</span> 表示当前类是切面类。</span><span class="hljs-comment"> * 切面类：用于给业务方法增加功能</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Aspect</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@Before</span>  前置通知 </span><span class="hljs-comment">     * 定义方法，实现切面功能</span><span class="hljs-comment">     * 必须为  public void</span><span class="hljs-comment">     * 切入点表达式：execution(访问修饰符 返回值 包名.类名.方法名(方法参数) 异常类型)</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Before</span>(value = <span class="hljs-string">"execution(public void com.zyz.SomeServiceImpl.doSome())"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mybefore</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<span class="hljs-comment">// JoinPoint 获取执行方法的信息  必须是第一个参数</span>        <span class="hljs-comment">// 获取方法名</span>        System.out.println(joinPoint.getSignature().getName());        System.out.println(<span class="hljs-string">"前置通知："</span>+<span class="hljs-keyword">new</span> Date());    &#125;&#125;</code></pre><p>4、添加配置文件，由spring创建需要的对象</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--    将对象交给spring容器，由spring容器统一创建，管理对象--&gt;</span><span class="hljs-comment">&lt;!--    声明目标对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"someService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.SomeServiceImpl"</span>/&gt;</span><span class="hljs-comment">&lt;!--    声明切面对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myAspection"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.MyAspect"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 声明自动代理生成器：使用aspectj框架内部的功能，创建目标对象的代理对象</span><span class="hljs-comment">    将spring容器中所有目标对象，一次性生成代理对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>5、测试</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;    String config = <span class="hljs-string">"applicationContext.xml"</span>;    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);    SomeService proxy = (SomeService) applicationContext.getBean(<span class="hljs-string">"someService"</span>);    proxy.doSome();&#125;</code></pre><p>结果：<br><img src="/2020/06/12/Spring-02/2.jpg" srcset="/img/loading.gif" alt></p><p>后置通知：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * returning   目标方法返回值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> res</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AfterReturning</span>(value = <span class="hljs-string">"execution(public Integer com.zyz.SomeService.doOther(Integer))"</span>,returning = <span class="hljs-string">"res"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfterReturn</span><span class="hljs-params">(Object res)</span></span>&#123;    System.out.println(<span class="hljs-string">"后置通知  获取的返回值为"</span>+res);&#125;</code></pre><p>环绕通知：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> proceedingJoinPoint  固定参数</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Around</span>(value = <span class="hljs-string">"execution(public Integer com.zyz.SomeService.doAround(Integer))"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAround</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;    System.out.println(<span class="hljs-string">"环绕通知:目标方法前"</span>);    Object res = <span class="hljs-keyword">null</span>;    res = proceedingJoinPoint.proceed();<span class="hljs-comment">// method.invoke()</span>    System.out.println(<span class="hljs-string">"目标方法返回值："</span>+res);    System.out.println(<span class="hljs-string">"环绕通知：目标方法后"</span>);&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2020/06/01/Maven/"/>
    <url>/2020/06/01/Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><p>Maven是一款自动化构建工具，专注服务于java平台的项目构建和依赖管理。<br>1、maven可以管理jar包及其各个版本，并且可以自动下载和引入项目中<br>2、maven可以把jar包依赖的包自动下载并引入项目中<br>3、maven可以编译代码，测试代码<br>4、打包文件，形成jar文件，或是war文件<br>5、部署项目<a id="more"></a><br>项目的构建：构建是面向过程的，包括项目的编译，测试，运行，打包，部署等等<br>Maven支持的构建包括：<br>1、清理，把之前项目编译的东西删除，为新的编译代码做准备<br>2、编译，把程序的源代码编译成可执行文件。（批量进行）<br>3、测试，maven可以执行测试程序代码，验证所需的功能是否正确。（批量进行）<br>4、报告，生成测试结果文件<br>5、打包，把项目中的所有class文件，配置文件等所有资源文件放到一个压缩文件中。<br>6、安装，把打包好的文件jar，war安装到本机仓库<br>7、部署，把程序安装好可以执行</p><h2 id="Maven核心概念"><a href="#Maven核心概念" class="headerlink" title="Maven核心概念"></a>Maven核心概念</h2><p>1、POM：一个文件pom.xml，项目对象模型，把一个项目当作一个模型来使用。控制maven构建项目的过程，管理jar依赖。<br>2、约定的目录结构：maven项目的目录和文件的位置都是规定的。<br>3、坐标：是一个唯一的字符串，用来表示资源。<br>4、依赖管理：管理项目中的jar包<br>5、仓库管理：资源存放的位置<br>6、生命周期：maven构建项目的过程<br>7、插件和目标：执行maven构建的时候用的 工具<br>8、继承<br>9、聚合</p><h2 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h2><p>1、下载解压<br>2、配置环境变量<br>MAVEN_HOME=d:/apache-maven-3.3.9<br>path=%MAVEN_HOME%/bin;<br>3、验证是否安装成功<br>mvn -v<br><img src="/2020/06/01/Maven/1.jpg" srcset="/img/loading.gif" alt></p><h2 id="Maven工程约定的目录结构"><a href="#Maven工程约定的目录结构" class="headerlink" title="Maven工程约定的目录结构"></a>Maven工程约定的目录结构</h2><p><img src="/2020/06/01/Maven/2.jpg" srcset="/img/loading.gif" alt></p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>存放maven使用的jar包和我们项目使用的jar包<br>仓库的分类：<br>本地仓库：个人计算机上的一个文件夹，存放jar包<br>远程仓库：在互联网上使用网络才能使用的仓库。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、中央仓库：最权威的，所有开发人员都共享使用的一个集中仓库<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、中央仓库的镜像：就是中央仓库的备份，分布在各大州，重要城市。减轻中央仓库的压力<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、私人服务器：在公司内部，局域网中使用，不对外使用<br>仓库的使用：<br>maven仓库的使用不需要认为参与<br>maven首先查本地仓库—&gt;私服—&gt;镜像—&gt;中央仓库</p><h2 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h2><p>项目对象模型，Maven 把一个项目的结构和内容抽象成一个模型，在xml 文件中进行声明，以方便进行构建和描述，pom.xml 是Maven 的灵魂。<br>1、坐标，唯一值，在互联网中唯一标识一个项目</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-comment">&lt;!-- 公司域名的倒写--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ch01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-comment">&lt;!-- 自定义项目的名称--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 自定义版本号--&gt;</span></code></pre><p>2、packaging：打包后压缩文件的扩展名，默认为jar，web应用是war<br>3、依赖dependencies和dependency，相当于java中的import</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>4、设置属性properties<br>5、build：与构建相关的配置信息</p><h2 id="IDEA集成Maven"><a href="#IDEA集成Maven" class="headerlink" title="IDEA集成Maven"></a>IDEA集成Maven</h2><p><img src="/2020/06/01/Maven/3.jpg" srcset="/img/loading.gif" alt></p><p><img src="/2020/06/01/Maven/4.jpg" srcset="/img/loading.gif" alt></p><p>选择Settings for New Projects再次设置<br><img src="/2020/06/01/Maven/5.jpg" srcset="/img/loading.gif" alt></p><h2 id="创建Maven版的普通的java项目"><a href="#创建Maven版的普通的java项目" class="headerlink" title="创建Maven版的普通的java项目"></a>创建Maven版的普通的java项目</h2><p>使用模板创建：<br><img src="/2020/06/01/Maven/6.jpg" srcset="/img/loading.gif" alt></p><p>项目结构：<br><img src="/2020/06/01/Maven/7.jpg" srcset="/img/loading.gif" alt></p><h2 id="创建Maven版的web项目"><a href="#创建Maven版的web项目" class="headerlink" title="创建Maven版的web项目"></a>创建Maven版的web项目</h2><p><img src="/2020/06/01/Maven/8.jpg" srcset="/img/loading.gif" alt></p><p>项目结构：<br><img src="/2020/06/01/Maven/9.jpg" srcset="/img/loading.gif" alt></p><p>添加依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>创建一个Servlet程序<br><img src="/2020/06/01/Maven/10.jpg" srcset="/img/loading.gif" alt></p><p>再运行环境中添加Tomcat服务器：<br><img src="/2020/06/01/Maven/11.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring简介、IOC控制反转</title>
    <link href="/2020/06/01/Spring-01/"/>
    <url>/2020/06/01/Spring-01/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><p>Spring用于减轻项目模块之间的管理，类与类之间的管理，帮助开发人员创建对象，管理对象之间的关系。<br>Spring核心技术是IOC，AOP。能实现模块之间的，类之间的解耦合。<a id="more"></a><br>优点：<br>1、轻量<br>2、针对接口编程，IOC解耦合<br>3、AOP面向切面编程<br>4、方便集成其他各种框架</p><h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p><img src="/2020/06/01/Spring-01/1.jpg" srcset="/img/loading.gif" alt></p><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。</p><p> Spring DAO，  Spring Web，SpringMVC，Spring AOP，Spring上下文，Spring ORM，核心容器。所以，Spring是一系列轻量级Java EE框架的集合</p><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>Inversion of control：控制反转，是一个概念，一种思想。<br>是指把对象的创建、赋值、管理工作都交给代码以外的容器实现，控制反转就是对对象控制权的转移，由程序代码本身反转到了程序外部容器。<br><strong>控制：</strong>创建对象，对象属性的赋值，对象之间关系的管理。<br><strong>反转：</strong>把原来开发人员管理，创建对象的权力交给代码之外的容器。由容器代替开发人员管理对象。<br>正转：由开发人员在代码中，使用new 构造方法 创建对象，开发人员主动管理对象。<br>容器：一个服务器软件，一个框架(Spring)。<br>IOC的好处：减少对代码的改动，也能实现不同的功能。实现解耦合。<br>IOC的体现：Servlet ,Tomcat作为容器创建Servlet对象。<br>IOC的技术实现：<br>DI(Dependency Injection) 依赖注入，只需要在程序中提供对象的名称，至于对象是如何在容器中创建，赋值，查找都是由容器内部实现的。<br>Spring使用DI实现了IOC的功能，Spring底层创建对象使用的是反射机制。<br>Spring是一个容器。</p><h2 id="使用Spring"><a href="#使用Spring" class="headerlink" title="使用Spring"></a>使用Spring</h2><h3 id="1、使用Maven创建一个普通的java项目"><a href="#1、使用Maven创建一个普通的java项目" class="headerlink" title="1、使用Maven创建一个普通的java项目"></a>1、使用Maven创建一个普通的java项目</h3><p><img src="/2020/06/01/Spring-01/2.jpg" srcset="/img/loading.gif" alt></p><h3 id="2、引入Spring依赖"><a href="#2、引入Spring依赖" class="headerlink" title="2、引入Spring依赖"></a>2、引入Spring依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>插件可加可不加，指明jdk版本(前面已经指定)</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>ss<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h3 id="3、创建Spring配置文件"><a href="#3、创建Spring配置文件" class="headerlink" title="3、创建Spring配置文件"></a>3、创建Spring配置文件</h3><p>bean.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!-- 声明bean 一个bean标签声明一个对象</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"someService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.service.impl.SomeServiceImpl"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h3 id="4、使用spring创建对象，调用对象方法"><a href="#4、使用spring创建对象，调用对象方法" class="headerlink" title="4、使用spring创建对象，调用对象方法"></a>4、使用spring创建对象，调用对象方法</h3><pre><code class="hljs java"><span class="hljs-comment">// 使用Spring 容器创建对象</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// 1、指明spring配置文件名称</span>        String config = <span class="hljs-string">"beans.xml"</span>;        <span class="hljs-comment">// 2、创建spring容器对象 ApplicationContext</span>        <span class="hljs-comment">// 从类路径加载配置文件（创建配置文件中的所有对象）</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);        <span class="hljs-comment">// 3、从容器中获取对象</span>        SomeService someService = (SomeService) applicationContext.getBean(<span class="hljs-string">"someService"</span>);<span class="hljs-comment">// 通过id</span>        someService.doSome();    &#125;</code></pre><h2 id="di依赖注入"><a href="#di依赖注入" class="headerlink" title="di依赖注入"></a>di依赖注入</h2><p>语法分类：set注入；构造注入</p><h3 id="基于xml文件"><a href="#基于xml文件" class="headerlink" title="基于xml文件"></a>基于xml文件</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--普通类型  set注入--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myPerson"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.Person"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10001"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Tony"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 引用类型  set注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"school"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"mySchool"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mySchool"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.School"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1001"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"schoolName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"长江大学"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  构造注入</span><span class="hljs-comment"> constructor-arg  形参属性</span><span class="hljs-comment">        name   构造方法形参名</span><span class="hljs-comment">index  表示构造方法的参数位置  从左到右0,1,2 ...</span><span class="hljs-comment">        普通类型   value</span><span class="hljs-comment">        引用类型   ref</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myPersonConstructor"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.Person"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10002"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"zyz"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"school"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"mySchool"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mySchool"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.School"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1001"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"schoolName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"长江大学"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myPersonConstructor2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.Person"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10003"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"wd"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"mySchool2"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mySchool2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.School"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1002"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"schoolName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"清华大学"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p><img src="/2020/06/01/Spring-01/3.jpg" srcset="/img/loading.gif" alt></p><p>引用类型自动注入：</p><ul><li><p>byName：java类中引用类型属性名 与spring配置文件中的bean标签中的id值相同</p><p>  <img src="/2020/06/01/Spring-01/4.jpg" srcset="/img/loading.gif" alt></p>  <pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myPersonConstructor2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.Person"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10003"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"wd"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"school"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zyz.bean.School"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1002"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"schoolName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"清华大学"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></li><li><p>byType：使用byType 方式自动注入，要求：配置文件中被调用者bean 的class 属性指定的类，要与代码中调用者bean 类的某引用类型属性类型同源。即要么相同，要么有is-a 关系（子类，或是实现类）。<strong>但这样的同源的被调用bean 只能有一个。</strong></p>  <pre><code class="hljs java">&lt;bean id=<span class="hljs-string">"person"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"com.zyz.bean.Person"</span> autowire=<span class="hljs-string">"byType"</span>&gt;        &lt;property name=<span class="hljs-string">"id"</span> value=<span class="hljs-string">"10004"</span>/&gt;        &lt;property name=<span class="hljs-string">"name"</span> value=<span class="hljs-string">"wd788"</span>/&gt;&lt;/bean&gt;&lt;bean id=<span class="hljs-string">"school"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"com.zyz.bean.School"</span>&gt;        &lt;property name=<span class="hljs-string">"id"</span> value=<span class="hljs-string">"1001"</span>/&gt;        &lt;property name=<span class="hljs-string">"schoolName"</span> value=<span class="hljs-string">"北京大学"</span>/&gt; &lt;/bean&gt;</code></pre></li></ul><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><p><img src="/2020/06/01/Spring-01/5.jpg" srcset="/img/loading.gif" alt></p><p>​    value可省略</p><p>在配置文件中声明组件扫描器</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   声明组件扫描器  组件就是java对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zyz.component"</span>/&gt;</span></code></pre><p>另外，Spring 还提供了3 个创建对象的注解：<br>@Repository 用于对DAO 实现类进行注解<br>@Service 用于对Service 实现类进行注解<br>@Controller 用于对Controller 实现类进行注解<br>这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义，@Service创建业务层对象，业务层对象可以加入事务功能，@Controller 注解创建的对象可以作为处理器接收用户的请求。<br>@Repository，@Service，@Controller 是对@Component 注解的细化，标注不同层的对象。即持久层对象，业务层对象，控制层对象。<br>普通类型赋值：<br><img src="/2020/06/01/Spring-01/6.jpg" srcset="/img/loading.gif" alt></p><p>byType自动注入（默认）<br><img src="/2020/06/01/Spring-01/7.jpg" srcset="/img/loading.gif" alt></p><p><img src="/2020/06/01/Spring-01/8.jpg" srcset="/img/loading.gif" alt></p><p>byName自动注入（当一个接口有多个实现类时，需要使用次方式注入）<br><img src="/2020/06/01/Spring-01/9.jpg" srcset="/img/loading.gif" alt></p><p><img src="/2020/06/01/Spring-01/8.jpg" srcset="/img/loading.gif" alt></p><p><strong>JDK注解@Resource自动注入</strong><br>byName（默认），按Name不能注入成功则按Type<br><img src="/2020/06/01/Spring-01/10.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis缓存机制</title>
    <link href="/2020/05/31/MyBatis-05/"/>
    <url>/2020/05/31/MyBatis-05/</url>
    
    <content type="html"><![CDATA[<p>MyBatis系统中默认定义了两级缓存。<br>一级缓存和二级缓存：<br>1、默认情况下，只有一级缓存开启。(SqlSession级别的缓存，也称本地缓存)<br>2、二级缓存需要手动开启和配置。(namespace级别全局缓存)<br>3、MyBatis定义了缓存接口Cache，可以通过实现Cache接口自定义二级缓存<a id="more"></a></p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>与数据库<font color="red">同一次会话期间</font>查询到的数据会存放在本地缓存中；<br>以后如果需要获取相同的数据，会从缓存中查找，不会访问数据库。</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFirstLevelCache</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span>&#123;    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();    SqlSession sqlSession = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">try</span>&#123;        sqlSession = sqlSessionFactory.openSession();        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        Employee empById1 = mapper.getEmpById(<span class="hljs-number">1</span>);        System.out.println(empById1);        <span class="hljs-comment">// 再次查询相同的数据</span>        Employee empById2 = mapper.getEmpById(<span class="hljs-number">1</span>);        System.out.println(empById2);        System.out.println(empById1==empById2);<span class="hljs-comment">// true</span>    &#125;<span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">if</span>(sqlSession!=<span class="hljs-keyword">null</span>)&#123;            sqlSession.close();        &#125;    &#125;&#125;</code></pre><p><img src="/2020/05/31/MyBatis-05/1.jpg" srcset="/img/loading.gif" alt></p><p>可以看见在两次查询中，sql语句只向数据库发送了一次，并且第二次查询得到的对象与第一次完全相同，说明第二次查询访问的是内存中的缓存。</p><p><strong>一级缓存失效的情况：</strong><br>1、不同的SqlSession对应不同的一级缓存；<br>2、同一个SqlSession但是查询条件不同；<br>3、同一个SqlSession两次查询期间执行了任何一次增删改操作；<br>4、同一个SqlSession两次查询期间手动清空了缓存。sqlSession.clearCache()</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>工作机制：<br>1、一个会话，查询一条数据，这个数据就会被保存在当前会话的一级缓存中；<br>2、<strong>如果会话关闭</strong>，一级缓存中的数据就会保存到二级缓存中。新的会话就会参照二级缓存。<br>3、不同的namespace查出的数据会放在自己对应的缓存中(map)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlSession——–EmployeeMapper——-Employee<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——–DepartmentMapper——-Department<br>使用：<br>1、开启全局二级缓存</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  开启全局缓存--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span></code></pre><p>2、在sql映射文件mapper.xml中配置使用二级缓存<br>只需在mapper标签的第一行添加：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- cache参数：</span><span class="hljs-comment">          eviction 缓存回收策略  默认LRU 最近最少使用</span><span class="hljs-comment">          flushInterval 缓存刷新间隔  默认不刷新</span><span class="hljs-comment">          readOnly  是否只读 默认flase</span><span class="hljs-comment">          size 缓存大小</span><span class="hljs-comment">          type 自定义缓存全类名(实现Cache接口)--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cache</span>&gt;</span></code></pre><p>3、JavaBean对象需要实现序列化Serializable接口</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSecondLevelCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();    SqlSession sqlSession1 = <span class="hljs-keyword">null</span>;    SqlSession sqlSession2 = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">try</span> &#123;        sqlSession1 = sqlSessionFactory.openSession();        sqlSession2 = sqlSessionFactory.openSession();        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        EmployeeMapper mapper2 = sqlSession2.getMapper(EmployeeMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-comment">// 使用不同的sqlSession 查询相同的数据</span>        Employee empById1 = mapper1.getEmpById(<span class="hljs-number">1</span>);        System.out.println(empById1);        <span class="hljs-comment">// 关闭会话，数据才会存入二级缓存  从一级缓存转移到二级缓存</span>        <span class="hljs-keyword">if</span> (sqlSession1 != <span class="hljs-keyword">null</span>) &#123;            sqlSession1.close();        &#125;        Employee empById2 = mapper2.getEmpById(<span class="hljs-number">1</span>);        System.out.println(empById2);        System.out.println(empById1 == empById2);<span class="hljs-comment">// false empById1是一级缓存里面的 empById2是从二级缓存中获取的 故地址值不相同</span>    &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">if</span> (sqlSession2 != <span class="hljs-keyword">null</span>) &#123;            sqlSession2.close();        &#125;    &#125;&#125;</code></pre><p><img src="/2020/05/31/MyBatis-05/2.jpg" srcset="/img/loading.gif" alt></p><h2 id="关闭缓存"><a href="#关闭缓存" class="headerlink" title="关闭缓存"></a>关闭缓存</h2><p>1、cacheEnabled=false：关闭二级缓存，一级缓存还可以使用<br>2、每一个select标签都有useCache = “true”（默认）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useCache = “false”：关闭二级缓存，一级缓存还可以使用<br>3、每一个增删改标签默认flushCache=”true”，查询标签默认flushCache=”false”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增删改操作执行完后就会清空缓存<br>4、sqlSession.clearCache()：只是清空当前sqlSession的一级缓存</p><h2 id="缓存原理图"><a href="#缓存原理图" class="headerlink" title="缓存原理图"></a>缓存原理图</h2><p><img src="/2020/05/31/MyBatis-05/3.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis动态SQL</title>
    <link href="/2020/05/30/MyBatis-04/"/>
    <url>/2020/05/30/MyBatis-04/</url>
    
    <content type="html"><![CDATA[<p>动态SQL可以极大的简化拼装SQL的操作。类似于JSTL。</p><h2 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h2><p>动态传入查询所需要的条件。<a id="more"></a></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpByConditionIf</span><span class="hljs-params">(Employee emp)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"dao.EmployeeMapperDynamicSQL"</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 查询某些条件没带上可能会出现sql拼接问题</span><span class="hljs-comment">        1.给where后面加上1=1,以后的条件都and xxx</span><span class="hljs-comment">        2.去掉where,使用&lt;where&gt;&lt;/where&gt;标签将所有查询条件包括在内</span><span class="hljs-comment">            只会去掉前面的多余的and或or--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpByConditionIf"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>        select * from employee        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"name!=null and name.trim()!=''"</span>&gt;</span>and name like #&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"email!=null and email.trim()!=''"</span>&gt;</span>and email=#&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"deptId!=null"</span>&gt;</span> and dept_id=#&#123;deptId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"gender==0 or gender==1"</span>&gt;</span>gender=#&#123;gender&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h2 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpByConditionChoose"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>    select * from employee    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 如果带了id就用id查，如果带了name就用name查；只会进入其中一个--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"name!=null"</span>&gt;</span>name like #&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"email!=null"</span>&gt;</span> emial=#&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>gender=0<span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateEmp"</span>&gt;</span>    update employee    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"name!=null and name.trim()!=''"</span>&gt;</span> name=#&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"email!=null and email.trim()!=''"</span>&gt;</span>email=#&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"deptId!=null"</span>&gt;</span>dept_id=#&#123;deptId&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"gender==0 or gender==1"</span>&gt;</span>gender=#&#123;gender&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>    where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><pre><code class="hljs java"><span class="hljs-comment">// 查询员工 id在给定集合中</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpByConditionForeach</span><span class="hljs-params">( @Param(<span class="hljs-string">"ids"</span>)</span> List&lt;Integer&gt; ids)</span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpByConditionForeach"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>    select  * from employee where id in    <span class="hljs-comment">&lt;!-- collection 指定要遍历的集合  list类型的参数会被封装成map</span><span class="hljs-comment">                    item  将当前遍历出的元素赋值给指定变量</span><span class="hljs-comment">                    separator  每个元素之间的分割符</span><span class="hljs-comment">                    #&#123;变量名&#125;  取出遍历的值</span><span class="hljs-comment">                    open 遍历出所有的结果拼接一个起始字符</span><span class="hljs-comment">                    close 遍历出所有的结果拼接一个结束字符</span><span class="hljs-comment">                    index 遍历list时是索引  遍历map时是key--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"ids"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"item_id"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"("</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span>&gt;</span>        #&#123;item_id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java">List&lt;Employee&gt; employeeList = mapper.getEmpByConditionForeach(Arrays.asList(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>));<span class="hljs-keyword">for</span>(Employee emp:employeeList)&#123;    System.out.println(emp);&#125;</code></pre><h2 id="foreach批量添加数据"><a href="#foreach批量添加数据" class="headerlink" title="foreach批量添加数据"></a>foreach批量添加数据</h2><pre><code class="hljs java"><span class="hljs-comment">// 批量添加</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmps</span><span class="hljs-params">(@Param(<span class="hljs-string">"emps"</span>)</span> List&lt;Employee&gt; emps)</span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addEmps"</span>&gt;</span>    INSERT INTO employee(name,email,gender,dept_id)    VALUES    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"emps"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"emp"</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">","</span>&gt;</span>        (#&#123;emp.name&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.deptId&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><pre><code class="hljs java">List&lt;Employee&gt; emps = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();emps.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">"wd123"</span>,<span class="hljs-string">"1"</span>,<span class="hljs-string">"wd123@qq.com"</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Department()));emps.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">"lz123"</span>,<span class="hljs-string">"1"</span>,<span class="hljs-string">"lz123@qq.com"</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> Department()));mapper.addEmps(emps);sqlSession.commit();</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis映射文件</title>
    <link href="/2020/05/25/MyBatis-03/"/>
    <url>/2020/05/25/MyBatis-03/</url>
    
    <content type="html"><![CDATA[<h2 id="实现增删改查功能"><a href="#实现增删改查功能" class="headerlink" title="实现增删改查功能"></a>实现增删改查功能</h2><p>映射文件指导着MyBatis如何进行数据库增删改查<br>在EmployeeMapper接口中添加增删改查的方法:<a id="more"></a></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpById</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmp</span><span class="hljs-params">(Employee employee)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteEmpById</span><span class="hljs-params">(Integer id)</span></span>;&#125;</code></pre><p>在映射文件Employee.xml添加相应的sql映射：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-comment">&lt;!-- namespace  名称空间  1.通过 namespace.id 来确定要执行的sql语句</span><span class="hljs-comment">                         2.指定为接口的全类名，用于绑定接口</span><span class="hljs-comment">     id  唯一标识   用于唯一标识一条sql语句</span><span class="hljs-comment">     result  返回值类型</span><span class="hljs-comment">     #&#123;id&#125;  从传递过来的参数中取出id值</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"dao.EmployeeMapper"</span>&gt;</span><span class="hljs-comment">&lt;!--public Employee getEmpById(Integer id);--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>        select * from employee where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--public void addEmp(Employee employee);--&gt;</span> <span class="hljs-comment">&lt;!-- parameterType： 参数类型  可以省略</span><span class="hljs-comment">         mysql支持自增主键，自增主键的获取，mybatis也是利用statement.getGenerateKeys()</span><span class="hljs-comment">         useGenerateKey="true":使用自增主键获取主键值策略</span><span class="hljs-comment">         keyProperty:指定对应的主键值类型，也就是mybatis获取到主键后封装给javaBean的哪个属性--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addEmp"</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">"id"</span>&gt;</span>        insert into employee(name,gender,email) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-comment">&lt;!--public void updateEmp(Employee employee);--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateEmp"</span>&gt;</span>        update employee set name=#&#123;name&#125;,gender=#&#123;gender&#125;,email=#&#123;email&#125; where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-comment">&lt;!--public void deleteEmpById(Integer id);--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteEmpById"</span>&gt;</span>        delete from employee where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>测试增删改方法：</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();        SqlSession sqlSession = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            sqlSession = sqlSessionFactory.openSession();<span class="hljs-comment">// 不会自动提交</span>            EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;            <span class="hljs-comment">// 添加</span>            Employee employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>, <span class="hljs-string">"Tom"</span>, <span class="hljs-string">"1"</span>, <span class="hljs-string">"tom@126.com"</span>);            mapper.addEmp(employee);            <span class="hljs-comment">// 获取自增主键的值</span>            System.out.println(employee.getId());<span class="hljs-comment">// 5</span>            <span class="hljs-comment">// 修改</span>            <span class="hljs-comment">//mapper.updateEmp(new Employee(2,"zyz001","1","zyz001@qq.com"));</span>            <span class="hljs-comment">// 删除</span>            <span class="hljs-comment">//mapper.deleteEmpById(2);</span>            <span class="hljs-comment">// 手动提交</span>            sqlSession.commit();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-keyword">null</span>) &#123;                sqlSession.close();            &#125;        &#125;    &#125;</code></pre><h2 id="MyBatis参数处理"><a href="#MyBatis参数处理" class="headerlink" title="MyBatis参数处理"></a>MyBatis参数处理</h2><p>单个参数：mybatis不会做特殊处理。&nbsp;&nbsp;&nbsp;&nbsp;#{参数名}：取出参数<br>多个参数：mybatis会做特殊处理，多个参数封装成一个map<br>key：参数param1,param2…<br>value：传入的参数值<br>#{param1}或#{0}：取出参数值1<br><strong>通过注解明确指定封装类型的key：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdAndName</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span>Integer id,@<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"name"</span>)</span>String name)</span>;</code></pre><p>#{指定的key}：取出对应的参数值<br><strong>#{}与${}的区别：</strong><br>#{}：是以预编译的形式，将参数设置到sql；防止sql注入<br>${}：直接拼装到sql中；有安全问题</p><h2 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h2><p>1、返回list对象</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByNameLike</span><span class="hljs-params">(String name)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpsByNameLike"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>    select * from employee where name like #&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java">List&lt;Employee&gt; employeeList = mapper.getEmpsByNameLike(<span class="hljs-string">"%o%"</span>);<span class="hljs-comment">// 查询name含有o的所有记录</span></code></pre><p>2、返回map对象(单条记录)</p><pre><code class="hljs java"><span class="hljs-comment">// 返回一条记录的map key:列名   value:对应的值</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">getEmpByIdReturnMap</span><span class="hljs-params">(Integer id)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpByIdReturnMap"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"map"</span>&gt;</span>     select * from employee where id=#&#123;id&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java">Map&lt;String,Object&gt; map = mapper.getEmpByIdReturnMap(<span class="hljs-number">1</span>);System.out.println(map);<span class="hljs-comment">// &#123;gender=1, name=zyz001, id=1, email=zyz001@qq.com&#125;</span></code></pre><p>2、返回map对象(多条记录)</p><pre><code class="hljs java"><span class="hljs-comment">// 返回多条记录发map key:主键  value:封装后的bean对象</span>  <span class="hljs-comment">// 告诉mybatis封装这个map的时候使用哪个属性作为map的主键</span>  <span class="hljs-meta">@MapKey</span>(<span class="hljs-string">"id"</span>)  <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Integer,Employee&gt; <span class="hljs-title">getEmpsByNameLikeReturnMap</span><span class="hljs-params">(String name)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpsByNameLikeReturnMap"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>       select * from employee where name like #&#123;name&#125;;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java">Map&lt;Integer,Employee&gt; employeeMap = mapper.getEmpsByNameLikeReturnMap(<span class="hljs-string">"%o%"</span>);</code></pre><h2 id="resultMap-自定义结果集封装规则"><a href="#resultMap-自定义结果集封装规则" class="headerlink" title="resultMap 自定义结果集封装规则"></a>resultMap 自定义结果集封装规则</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- resultMap  自定义结果集规则</span><span class="hljs-comment">            id  方便引用</span><span class="hljs-comment">            type 自定义规则的java类型</span><span class="hljs-comment">            --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MyEmp"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>    <span class="hljs-comment">&lt;!--  id 指定主键封装规则</span><span class="hljs-comment">             column  指定哪一列</span><span class="hljs-comment">             property  指定对应Javabean的哪一个属性--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 定义普通列封装规则 不指定则自动封装       --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"gender"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpById"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"MyEmp"</span>&gt;</span>    select * from employee where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>联合查询：级联属性封装结果集 </p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MyEmpAndDept"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"gender"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"deptId"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"d_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"dept.id"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"dept.departmentName"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpAndDept"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"MyEmpAndDept"</span>&gt;</span>        SELECT e.id id,e.name name,e.gender gender,e.email email,        e.dept_id dept_id,d.id d_id,d.dept_name dept_name        from employee e,dept d WHERE e.dept_id=d.id AND e.id=#&#123;id&#125;;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p> 联合查询：通过association标签封装结果集   </p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MyEmpAndDept2"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"gender"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"deptId"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-comment">&lt;!-- association 可以指定联合的javabean对象</span><span class="hljs-comment">                    property="dept"  指定javabean中的哪个属性是联合的对象</span><span class="hljs-comment">                    javaType  指定联合对象的类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"dept"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"bean.Department"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"d_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"departmentName"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><p>分部查询：先查询员工，得到员工信息后再根据员工的部门编号，查询部门信息</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptById</span><span class="hljs-params">(Integer id)</span></span>;&#125;</code></pre><p>DepartmentMapper.xml</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"dao.DepartmentMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getDeptById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"bean.Department"</span>&gt;</span>        select id,dept_name departmentName from dept where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>EmployeeMapper.xml</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  分部查询  可以启动延迟加载--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MyEmpByStep"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"gender"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"deptId"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 定义关联对象封装规则</span><span class="hljs-comment">        select 表明当前属性是调用指定的方法后查询出来的结果</span><span class="hljs-comment">        column  指定哪一列的值传给这个方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"dept"</span></span><span class="hljs-tag">                     <span class="hljs-attr">select</span>=<span class="hljs-string">"dao.DepartmentMapper.getDeptById"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_id"</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getEmpByIdStep"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"MyEmpByStep"</span>&gt;</span>        select * from employee where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>mybatis-config.xml</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span>&gt;</span><span class="hljs-comment">&lt;!--  开启延迟加载 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lazyLoadingEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 按需加载--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"aggressiveLazyLoading"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">setting</span>&gt;</span></code></pre><p>使用时才进行加载：</p><pre><code class="hljs java">Employee empByIdStep = mapper.getEmpByIdStep(<span class="hljs-number">1</span>);System.out.println(empByIdStep.getName());</code></pre><p><img src="/2020/05/25/MyBatis-03/1.jpg" srcset="/img/loading.gif" alt></p><pre><code class="hljs java">Employee empByIdStep = mapper.getEmpByIdStep(<span class="hljs-number">1</span>);System.out.println(empByIdStep);</code></pre><p><img src="/2020/05/25/MyBatis-03/2.jpg" srcset="/img/loading.gif" alt></p><p><strong>Collection集合类型&amp;嵌套结果集：</strong><br>通过部门编号查找所有在该部门的员工，返回一个List员工集合</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> Integer id;<span class="hljs-keyword">private</span> String departmentName;<span class="hljs-keyword">private</span> List&lt;Employee&gt; emps;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptByIdPlus</span><span class="hljs-params">(Integer id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MyDept"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"bean.Department"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"did"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"departmentName"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- collection标签用来定义关联集合类型的属性的封装规则</span><span class="hljs-comment">                    ofType  指定集合里面元素的类型 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"emps"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"bean.Employee"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"eid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"gender"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"gender"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"email"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"dept_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"deptId"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getDeptByIdPlus"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"MyDept"</span>&gt;</span>    SELECT d.id did ,dept_name,e.id eid,e.`name`,e.gender,e.email,e.dept_id    FROM dept d LEFT JOIN employee e ON d.id=e.dept_id WHERE d.id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java">Department deptByIdPlus = mapper.getDeptByIdPlus(<span class="hljs-number">1</span>);System.out.println(deptByIdPlus);System.out.println(deptByIdPlus.getEmps());</code></pre><p><img src="/2020/05/25/MyBatis-03/3.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis全局配置文件</title>
    <link href="/2020/05/25/MyBatis-02/"/>
    <url>/2020/05/25/MyBatis-02/</url>
    
    <content type="html"><![CDATA[<h2 id="在IDEA中引入XML的dtd约束文件"><a href="#在IDEA中引入XML的dtd约束文件" class="headerlink" title="在IDEA中引入XML的dtd约束文件"></a>在IDEA中引入XML的dtd约束文件</h2><p>便于在编写xml文件时有提示信息<br><img src="/2020/05/25/MyBatis-02/1.jpg" srcset="/img/loading.gif" alt><a id="more"></a></p><p><img src="/2020/05/25/MyBatis-02/2.jpg" srcset="/img/loading.gif" alt></p><h2 id="properties属性"><a href="#properties属性" class="headerlink" title="properties属性"></a>properties属性</h2><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">2824199842</span></code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- properties标签引入properties配置文件</span><span class="hljs-comment">     resource 引入类路径下的资源</span><span class="hljs-comment">     url 引入网络或磁盘路径下的文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"dbConfig.properties"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></code></pre><h2 id="setting属性"><a href="#setting属性" class="headerlink" title="setting属性"></a>setting属性</h2><p>setting包含一些重要的设置，会改变MyBatis运行时行为</p><p><img src="/2020/05/25/MyBatis-02/3.jpg" srcset="/img/loading.gif" alt></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  settings标签包含很多重要的设置项  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapUnderscoreToCamelCase"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><h2 id="typeAliases别名处理器"><a href="#typeAliases别名处理器" class="headerlink" title="typeAliases别名处理器"></a>typeAliases别名处理器</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--typeAliases 别名处理器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-comment">&lt;!-- &lt;typeAlias type="bean.Employee" alias="emp"/&gt;--&gt;</span><span class="hljs-comment">&lt;!-- package 为某个包下的所有类批量起别名</span><span class="hljs-comment">             name:指定包名 为当前包下的所有后代包的每一个类起一个默认别名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"bean"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre><p><img src="/2020/05/25/MyBatis-02/4.jpg" srcset="/img/loading.gif" alt></p><h2 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h2><p>无论是MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java 类型。<br><img src="/2020/05/25/MyBatis-02/5.jpg" srcset="/img/loading.gif" alt></p><h2 id="plugins插件"><a href="#plugins插件" class="headerlink" title="plugins插件"></a>plugins插件</h2><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。<br><img src="/2020/05/25/MyBatis-02/6.jpg" srcset="/img/loading.gif" alt></p><h2 id="environment环境配置"><a href="#environment环境配置" class="headerlink" title="environment环境配置"></a>environment环境配置</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置多个环境  default快速指定环境</span><span class="hljs-comment">      id  唯一标识环境</span><span class="hljs-comment">      transactionManager  事务管理器</span><span class="hljs-comment">      dataSource  数据源</span><span class="hljs-comment">                自定义数据源：实现DataSourceFactory接口--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></code></pre><p><strong>实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</strong></p><h2 id="databaseIdProvider环境"><a href="#databaseIdProvider环境" class="headerlink" title="databaseIdProvider环境"></a>databaseIdProvider环境</h2><p>MyBatis 可以根据不同的数据库厂商执行不同的语句。<br><img src="/2020/05/25/MyBatis-02/7.jpg" srcset="/img/loading.gif" alt></p><p><img src="/2020/05/25/MyBatis-02/8.jpg" srcset="/img/loading.gif" alt></p><h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span> <span class="hljs-comment">&lt;!-- &lt;mapper resource="EmployeeMapper.xml"/&gt;--&gt;</span><span class="hljs-comment">&lt;!--  批量注册    xml文件必须与接口文件名相同且在同一个包下  --&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dao"</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis简介及测试</title>
    <link href="/2020/05/24/MyBatis-01/"/>
    <url>/2020/05/24/MyBatis-01/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis是一个半自动化的持久层框架。<br>sql与java编码分开，功能边界清晰，一个专注业务，一个专注数据。<a id="more"></a><br><img src="/2020/05/24/MyBatis-01/1.jpg" srcset="/img/loading.gif" alt></p><h2 id="MyBatis的使用"><a href="#MyBatis的使用" class="headerlink" title="MyBatis的使用"></a>MyBatis的使用</h2><p><strong>创建测试的数据库mybatis，再创建一个student表</strong></p><p><img src="/2020/05/24/MyBatis-01/1.png" srcset="/img/loading.gif" alt></p><h3 id="1、导入MyBatis-jar等相应的数据库连接驱动等相应的包"><a href="#1、导入MyBatis-jar等相应的数据库连接驱动等相应的包" class="headerlink" title="1、导入MyBatis.jar等相应的数据库连接驱动等相应的包"></a>1、导入MyBatis.jar等相应的数据库连接驱动等相应的包</h3><p>log4j.jar用于打印数据库日志（需要编写相应的.xml配置文件）<br><img src="/2020/05/24/MyBatis-01/2.jpg" srcset="/img/loading.gif" alt></p><h3 id="2、创建对应于数据库中表的javaBean对象"><a href="#2、创建对应于数据库中表的javaBean对象" class="headerlink" title="2、创建对应于数据库中表的javaBean对象"></a>2、创建对应于数据库中表的javaBean对象</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> bean;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String gender;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(Integer id, String name, String gender, String email)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.gender = gender;        <span class="hljs-keyword">this</span>.email = email;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> gender;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(String gender)</span> </span>&#123;        <span class="hljs-keyword">this</span>.gender = gender;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> email;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;        <span class="hljs-keyword">this</span>.email = email;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Employee&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", gender='"</span> + gender + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", email='"</span> + email + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><h3 id="3、编写全局配置文件"><a href="#3、编写全局配置文件" class="headerlink" title="3、编写全局配置文件"></a>3、编写全局配置文件</h3><p>mybatis-config.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2824199842"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 将写好的sql映射文件注册到全局配置文件中--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"EmployeeMapper.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h3 id="4、编写sql映射文件-采用面向接口的方式"><a href="#4、编写sql映射文件-采用面向接口的方式" class="headerlink" title="4、编写sql映射文件(采用面向接口的方式)"></a>4、编写sql映射文件(采用面向接口的方式)</h3><p>创建dao层，并添加EmployeeDao接口</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeDao</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpById</span><span class="hljs-params">(Integer id)</span></span>;&#125;</code></pre><p>EmployeeMapper.xml</p><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;&lt;!DOCTYPE mapper        PUBLIC <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;&lt;!-- namespace  名称空间  <span class="hljs-number">1</span>.通过 namespace.id 来确定要执行的sql语句                         <span class="hljs-number">2</span>.指定为接口的全类名，用于绑定接口(一般使用这种方式)     id  唯一标识   用于唯一标识一条sql语句     result  返回值类型     #&#123;id&#125;  从传递过来的参数中取出id值--&gt;&lt;mapper namespace=<span class="hljs-string">"dao.EmployeeDao"</span>&gt;    &lt;!-- 将接口中的函数与sql语句绑定--&gt;    &lt;select id=<span class="hljs-string">"getEmpById"</span> resultType=<span class="hljs-string">"bean.Employee"</span>&gt;        select * from employee where id = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="5、测试是否成功"><a href="#5、测试是否成功" class="headerlink" title="5、测试是否成功"></a>5、测试是否成功</h3><p>MybaitTest.java</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">getSqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        String resource = <span class="hljs-string">"mybatis-config.xml"</span>;        InputStream inputStream = Resources.getResourceAsStream(resource);        <span class="hljs-comment">// 根据 xml 配置文件创建一个SqlSessionFactory对象</span>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        <span class="hljs-keyword">return</span> sqlSessionFactory;    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        SqlSession sqlSession = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.获取SqlSessionFactory对象</span>            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();            <span class="hljs-comment">// 2.获取sqlSession对象 用于执行sql语句</span>            sqlSession = sqlSessionFactory.openSession();            <span class="hljs-comment">// 3.获取接口实现类对象</span>            <span class="hljs-comment">// 会为接口自动创建一个代理对象  代理对象去执行增删改查方法</span>            EmployeeDao mapper = sqlSession.getMapper(EmployeeDao<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;            System.out.println(mapper.getClass());<span class="hljs-comment">// 代理对象</span>            <span class="hljs-comment">// 4.使用接口实现类对象调用接口中的方法</span>            Employee emp = mapper.getEmpById(<span class="hljs-number">1</span>);            System.out.println(emp);        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span>(sqlSession!=<span class="hljs-keyword">null</span>)&#123;                sqlSession.close();            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Json,AJAX</title>
    <link href="/2020/05/15/javaweb-08/"/>
    <url>/2020/05/15/javaweb-08/</url>
    
    <content type="html"><![CDATA[<h2 id="json概念"><a href="#json概念" class="headerlink" title="json概念"></a>json概念</h2><p>json是一种轻量级的数据交换格式。<br>1、比xml更为轻量，解析速度更快。<br>2、数据交换指的是客户端和服务器之间业务数据的传递格式。<a id="more"></a></p><h2 id="json在javaScipt中的使用"><a href="#json在javaScipt中的使用" class="headerlink" title="json在javaScipt中的使用"></a>json在javaScipt中的使用</h2><pre><code class="hljs javascript"><span class="hljs-comment">// json的定义</span><span class="hljs-keyword">var</span> jsonObj = &#123;<span class="hljs-string">"key1"</span>:<span class="hljs-number">666</span>,<span class="hljs-string">"key2"</span>:<span class="hljs-string">"qwer"</span>,<span class="hljs-string">"key3"</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">"key4"</span>:[<span class="hljs-number">111</span>,<span class="hljs-string">"abc"</span>,<span class="hljs-literal">false</span>],<span class="hljs-string">"key5"</span>:&#123;<span class="hljs-string">"key5_1"</span>:<span class="hljs-number">222</span>,<span class="hljs-string">"key5_2"</span>:<span class="hljs-string">"aaaa"</span>&#125;,<span class="hljs-string">"key6"</span>:[&#123;<span class="hljs-string">"key6_1_1"</span>:<span class="hljs-number">333</span>,<span class="hljs-string">"key6_1_2"</span>:<span class="hljs-number">444</span>&#125;,&#123;<span class="hljs-string">"key6_2_1"</span>:<span class="hljs-number">555</span>&#125;]&#125;;alert(jsonObj);<span class="hljs-comment">//object  json就是一个对象</span>alert(jsonObj.key1);<span class="hljs-comment">// 666</span>alert(jsonObj.key4[<span class="hljs-number">1</span>])<span class="hljs-comment">// abc</span><span class="hljs-comment">// json对象转字符串</span><span class="hljs-keyword">var</span> jsonString = <span class="hljs-built_in">JSON</span>.stringify(jsonObj);alert(jsonString);符串<span class="hljs-comment">// json字符串转json对象</span><span class="hljs-keyword">var</span> jsonObj2 = <span class="hljs-built_in">JSON</span>.parse(jsonString);alert(jsonObj2);</code></pre><p> <strong>json的存在有两种形式：</strong><br>1、对象的形式：操作json中的数据时，使用json对象；<br>2、字符串的形式：客户端与服务端之间进行数据交换时，使用json字符串。<br>JSON.stringify()：把json对象转换为json字符串<br>JSON.parse()：把json字符串转换为json对象</p><h2 id="json在java中的使用"><a href="#json在java中的使用" class="headerlink" title="json在java中的使用"></a>json在java中的使用</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonTest</span> </span>&#123;    <span class="hljs-comment">// javaBean和json的相互转换</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">10001</span>,<span class="hljs-string">"Tom"</span>);        Gson gson = <span class="hljs-keyword">new</span> Gson();        <span class="hljs-comment">// javaBean转json字符串</span>        String p1JsonString = gson.toJson(p1);        System.out.println(p1JsonString);        <span class="hljs-comment">// json字符串转javaBean</span>        Person p2 = gson.fromJson(p1JsonString, Person<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(p2);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-comment">// List 和json的相互转换</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        List&lt;Person&gt; personList = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();        personList.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10001</span>,<span class="hljs-string">"Tom"</span>));        personList.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10002</span>,<span class="hljs-string">"Tony"</span>));        personList.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10003</span>,<span class="hljs-string">"Nick"</span>));        Gson gson = <span class="hljs-keyword">new</span> Gson();        <span class="hljs-comment">// List转json字符串数组</span>        String jsonStringArr = gson.toJson(personList);        System.out.println(jsonStringArr);        <span class="hljs-comment">// json字符串数组转List</span>        <span class="hljs-comment">// List&lt;Person&gt; personList1 = gson.fromJson(jsonStringArr, new PersonListType().getType());</span>        List&lt;Person&gt; personList1 = gson.fromJson(jsonStringArr, <span class="hljs-keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());        System.out.println(personList1);        System.out.println(personList1.get(<span class="hljs-number">1</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-comment">// Map 和json的相互转换</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;        Map&lt;Integer,Person&gt; personMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Person&gt;();        personMap.put(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10001</span>,<span class="hljs-string">"Tom1"</span>));        personMap.put(<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10002</span>,<span class="hljs-string">"Tom2"</span>));        personMap.put(<span class="hljs-number">3</span>,<span class="hljs-keyword">new</span> Person(<span class="hljs-number">10003</span>,<span class="hljs-string">"Tom3"</span>));        Gson gson = <span class="hljs-keyword">new</span> Gson();        <span class="hljs-comment">// Map转json字符串集合</span>        String jsonStringMap = gson.toJson(personMap);        System.out.println(jsonStringMap);        <span class="hljs-comment">// json字符串集合转Map</span>        <span class="hljs-comment">// Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(jsonStringMap, new PersonMapList().getType());</span>        Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(jsonStringMap, <span class="hljs-keyword">new</span> TypeToken&lt;Map&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());        System.out.println(personMap1);        System.out.println(personMap1.get(<span class="hljs-number">1</span>));    &#125;&#125;</code></pre><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><p>AJAX是一种创建交互式网页应用的开发技术。<br>浏览器通过javaScript异步发起请求，局部更新页面的技术。<br>浏览器地址栏不会发生变化；局部更新不会舍弃原来页面的内容。</p><h2 id="原生AJAX请求"><a href="#原生AJAX请求" class="headerlink" title="原生AJAX请求"></a>原生AJAX请求</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">javaScriptAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    System.out.println(<span class="hljs-string">"javaScriptAjax调用了~"</span>);    Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1</span>,<span class="hljs-string">"Tony"</span>);    <span class="hljs-comment">// 将需要返回给客户端的对象转换为json字符串</span>    Gson gson = <span class="hljs-keyword">new</span> Gson();    String personJsonString = gson.toJson(person);    resp.getWriter().write(personJsonString);&#125;</code></pre><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="hljs-meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"pragma"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"no-cache"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"cache-control"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"no-cache"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Expires"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"0"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="actionscript">        <span class="hljs-comment">// 使用js发起Ajax请求，访问服务器AjaxServlet中的javascriptAjax()</span></span><span class="actionscript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajaxRequest</span><span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript"><span class="hljs-comment">// 1、我们首先要创建XMLHttpRequest </span></span><span class="actionscript">            <span class="hljs-keyword">var</span> xmlHttpRequest = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><span class="actionscript"><span class="hljs-comment">// 2、调用open方法设置请求参数 open(请求方法,请求地址,异步(true))</span></span><span class="actionscript">            xmlHttpRequest.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"http://localhost:8080/11_json/ajaxServlet?action=javaScriptAjax"</span>, <span class="hljs-literal">true</span>);</span><span class="actionscript"><span class="hljs-comment">// 3、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span><span class="actionscript">            xmlHttpRequest.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span>                if (xmlHttpRequest.readyState == 4 &amp;&amp; xmlHttpRequest.status == 200) &#123;<span class="actionscript">                    <span class="hljs-comment">// 将json字符串转换为json对象</span></span><span class="javascript">                    <span class="hljs-keyword">var</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(xmlHttpRequest.responseText);</span><span class="actionscript">                    <span class="hljs-comment">// 将响应数据显示在页面上</span></span><span class="javascript">                    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"div01"</span>).innerHTML = <span class="hljs-string">"编号："</span> + jsonObj.id + <span class="hljs-string">"&lt;br/&gt;姓名："</span> + jsonObj.name;</span>                &#125;            &#125;<span class="actionscript">            <span class="hljs-comment">// 4、调用send方法发送请求</span></span>            xmlHttpRequest.send();        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"ajaxRequest()"</span>&gt;</span>ajax request<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"div01"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="jquery中的ajax请求"><a href="#jquery中的ajax请求" class="headerlink" title="jquery中的ajax请求"></a>jquery中的ajax请求</h2><p><strong>$.ajax 方法</strong><br>url：表示请求的地址<br>type：表示请求的类型GET 或POST 请求<br>data：表示发送给服务器的数据<br>data的格式有两种：<br>一：name=value&amp;name=value<br>二：{key:value}<br>success：请求成功，响应的回调函数<br>dataType：响应的数据类型<br>常用的响应数据类型有：text、xml、json</p><pre><code class="hljs javaScript"><span class="hljs-comment">// ajax请求</span>$(<span class="hljs-string">"#ajaxBtn"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    $.ajax(&#123;        url: <span class="hljs-string">"http://localhost:8080/11_json/ajaxServlet"</span>,        data: <span class="hljs-string">"action=jqueryAjax"</span>,        type: <span class="hljs-string">"GET"</span>,        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;            alert(<span class="hljs-string">"服务器返回的数据："</span> + data);            $(<span class="hljs-string">"#msg"</span>).html(<span class="hljs-string">"编号："</span> + data.id + <span class="hljs-string">" 姓名："</span> + data.name);        &#125;,        dataType: <span class="hljs-string">"json"</span>    &#125;);&#125;);</code></pre><p><strong>$.get 方法和$.post 方法</strong><br>url： 请求的url 地址<br>data： 发送的数据<br>callback： 成功的回调函数<br>type ：返回的数据类型</p><pre><code class="hljs javaScript"><span class="hljs-comment">// ajax--get请求</span>$(<span class="hljs-string">"#getBtn"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    $.<span class="hljs-keyword">get</span>(        "http://localhost:8080/11_json/ajaxServlet",        "action=jqueryAjax",        function (data) &#123;            alert(<span class="hljs-string">"服务器返回的数据："</span> + data);            $(<span class="hljs-string">"#msg"</span>).html(<span class="hljs-string">"编号："</span> + data.id + <span class="hljs-string">" 姓名："</span> + data.name);        &#125;,        <span class="hljs-string">"json"</span>    );&#125;);<span class="hljs-comment">// ajax--post请求</span>$(<span class="hljs-string">"#postBtn"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// post请求</span>    $.post(        <span class="hljs-string">"http://localhost:8080/11_json/ajaxServlet"</span>,        <span class="hljs-string">"action=jqueryAjax"</span>,        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;            alert(<span class="hljs-string">"服务器返回的数据："</span> + data);            $(<span class="hljs-string">"#msg"</span>).html(<span class="hljs-string">"编号："</span> + data.id + <span class="hljs-string">" 姓名："</span> + data.name);        &#125;,        <span class="hljs-string">"json"</span>    );&#125;);</code></pre><p><strong>$.getJSON 方法</strong><br>url： 请求的url 地址<br>data： 发送给服务器的数据<br>callback： 成功的回调函数</p><pre><code class="hljs javaScript"><span class="hljs-comment">// ajax--getJson请求</span>$(<span class="hljs-string">"#getJSONBtn"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    $.getJSON(        <span class="hljs-string">"http://localhost:8080/11_json/ajaxServlet"</span>,        <span class="hljs-string">"action=jqueryAjax"</span>,        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;            alert(<span class="hljs-string">"服务器返回的数据："</span> + data);            $(<span class="hljs-string">"#msg"</span>).html(<span class="hljs-string">"编号："</span> + data.id + <span class="hljs-string">" 姓名："</span> + data.name);       &#125;);&#125;);</code></pre><p><strong>表单序列化serialize()</strong><br>serialize()可以把表单中所有的表单项都获取到，并以name1=value1&amp;name2=value2 的形式拼接。</p><pre><code class="hljs javaScript">$(<span class="hljs-string">"#submit"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;     <span class="hljs-comment">// 把参数序列化</span>     <span class="hljs-keyword">var</span> params = $(<span class="hljs-string">"#form01"</span>).serialize();     $.getJSON(<span class="hljs-string">"http://localhost:8080/11_json/ajaxServlet"</span>,         <span class="hljs-string">"action=serializeAjax&amp;"</span>+params,          <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;          alert(<span class="hljs-string">"服务器返回的数据："</span> + data);          $(<span class="hljs-string">"#msg"</span>).html(<span class="hljs-string">"编号："</span> + data.id + <span class="hljs-string">" 姓名："</span> + data.name);     &#125;);&#125;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Filter,ThreadLocal</title>
    <link href="/2020/05/13/javaweb-07/"/>
    <url>/2020/05/13/javaweb-07/</url>
    
    <content type="html"><![CDATA[<h2 id="Filter过滤器的作用"><a href="#Filter过滤器的作用" class="headerlink" title="Filter过滤器的作用"></a>Filter过滤器的作用</h2><p>作用：拦截请求，过滤响应<br>拦截请求常见的应用场景：1、权限检查 ；2、日志操作；3、事务管理 ……<a id="more"></a><br><img src="/2020/05/13/javaweb-07/1.png" srcset="/img/loading.gif" alt></p><h3 id="Filter过滤器的使用"><a href="#Filter过滤器的使用" class="headerlink" title="Filter过滤器的使用"></a>Filter过滤器的使用</h3><p>1.编写一个类去实现Filter接口<br>2.实现过滤  方法doFilter()<br>3.到web.xml中配置Filter的拦截路径</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;    HttpServletRequest req = (HttpServletRequest) request;    HttpSession session = req.getSession();    Object user = session.getAttribute(<span class="hljs-string">"user"</span>);    <span class="hljs-keyword">if</span>(user==<span class="hljs-keyword">null</span>)&#123;        request.getRequestDispatcher(<span class="hljs-string">"/login.jsp"</span>).forward(request,response);        <span class="hljs-keyword">return</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-comment">// 让程序继续向下访问用户的目标资源</span>        chain.doFilter(request,response);    &#125;&#125;</code></pre><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-comment">&lt;!--  配置拦截路径  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>Filter生命周期包含的方法：<br>Web工程启动时就创建了：1、构造器方法；2、init 初始化方法<br>每次拦截到请求就开始执行：3、doFilter 过滤方法<br>Web工程停止时：4、destory  销毁方法</p><h3 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h3><p>包含了Filter过滤器的配置信息<br>FilterConfig类的作用是获取filter过滤器的配置信息：<br>1、获取Filter的名称filter-name的内容<br>2、获取Filter中配置的init-param的初始化参数<br>3、获取ServletContext对象</p><h3 id="FilterChain过滤器链"><a href="#FilterChain过滤器链" class="headerlink" title="FilterChain过滤器链"></a>FilterChain过滤器链</h3><p><img src="/2020/05/13/javaweb-07/2.png" srcset="/img/loading.gif" alt></p><h3 id="Filter的拦截路径"><a href="#Filter的拦截路径" class="headerlink" title="Filter的拦截路径"></a>Filter的拦截路径</h3><p>1、精确匹配，拦截的是指定路径的一个资源，请求地址必须是 : <code>http://ip:port/工程路径/a.jsp</code></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/a.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p>2、目录匹配，拦截的是目录下的所有资源</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p>3、后缀名匹配，拦截的是指定后缀名的资源</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p>Filter只关心请求地址是否匹配，不关心资源是否存在。</p><h2 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h2><p>作用：解决线程安全问题。<br>ThreadLocal可以给当前线程关联一个数据(普通变量，对象，数组，集合)。<br>ThreadLocald 特点：<br>1、ThreadLocal可以为当前线程关联一个数据；(可以像Map一样存取数据，key为当前线程)；<br>2、每一个ThreadLoacl对象，只能为当前线程关联一个数据；<br>3、每个ThreadLocal对象实例化时，一般都是static类型；<br>4、ThreadLocal中保存的数据，在线程销毁后，JVM自动释放。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向链表</title>
    <link href="/2020/05/05/dataStructure-03/"/>
    <url>/2020/05/05/dataStructure-03/</url>
    
    <content type="html"><![CDATA[<h2 id="1-单向链表与双向链表的区别"><a href="#1-单向链表与双向链表的区别" class="headerlink" title="1.单向链表与双向链表的区别"></a>1.单向链表与双向链表的区别</h2><p>1、单向链表查找方向只能是一个方向，而双向链表可以向前或向后查找。<br>2、单向链表不能自我删除，需要靠赋辅助节点，而双向链表则可以自我删除。<a id="more"></a><br><img src="/2020/05/05/dataStructure-03/1.png" srcset="/img/loading.gif" alt></p><h2 id="2-双向链表的创建、插入、删除和显示"><a href="#2-双向链表的创建、插入、删除和显示" class="headerlink" title="2.双向链表的创建、插入、删除和显示"></a>2.双向链表的创建、插入、删除和显示</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> linkedlist;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListDemo</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 创建节点</span>HeroNode2 hero1 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1000</span>, <span class="hljs-string">"wd"</span>);HeroNode2 hero2 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1001</span>, <span class="hljs-string">"lz"</span>);HeroNode2 hero3 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1002</span>, <span class="hljs-string">"lp"</span>);<span class="hljs-comment">// 创建链表</span>DoubleLinkedList heroList2 = <span class="hljs-keyword">new</span> DoubleLinkedList();<span class="hljs-comment">// 添加节点到 链表</span>heroList2.add(hero1);heroList2.add(hero2);heroList2.add(hero3);<span class="hljs-comment">// 遍历链表</span>heroList2.list(heroList2.head);<span class="hljs-comment">// 修改节点</span>heroList2.update(<span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1002</span>, <span class="hljs-string">"gf"</span>));<span class="hljs-comment">// 再次遍历</span>System.out.println(<span class="hljs-string">"修改后： "</span>);heroList2.list(heroList2.head);<span class="hljs-comment">// 删除id=1001的节点</span>heroList2.delete(<span class="hljs-number">1000</span>);<span class="hljs-comment">// 再次遍历</span>System.out.println(<span class="hljs-string">"删除id=1000的节点后： "</span>);heroList2.list(heroList2.head);&#125;&#125;<span class="hljs-comment">//定义HeroNode2 ,每一个HeroNode 对象就是一个节点</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode2</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">public</span> String name;<span class="hljs-keyword">public</span> HeroNode2 pre; <span class="hljs-comment">// 指向前一个节点</span><span class="hljs-keyword">public</span> HeroNode2 next;<span class="hljs-comment">// 指向下一个节点</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode2</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">super</span>();&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<span class="hljs-keyword">this</span>.id = id;<span class="hljs-keyword">this</span>.name = name;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"HeroNode2 [id="</span> + id + <span class="hljs-string">", name="</span> + name + <span class="hljs-string">"]"</span>;&#125;&#125;<span class="hljs-comment">// 创建一个双向链表的类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span> </span>&#123;HeroNode2 head = <span class="hljs-keyword">new</span> HeroNode2();<span class="hljs-comment">// 从链表尾添加节点</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode2 newNode)</span> </span>&#123;HeroNode2 cur = head;<span class="hljs-comment">// 找到最后一个节点</span><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (cur.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;cur = cur.next;&#125; <span class="hljs-comment">// 循环结束后cur指向最后一个节点</span><span class="hljs-comment">// 将新节点添加到链表中</span>cur.next = newNode;newNode.pre = cur;&#125;<span class="hljs-comment">// 遍历双向链表</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">(HeroNode2 head)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);<span class="hljs-keyword">return</span>;&#125;HeroNode2 cur = head.next;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (cur == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span>;&#125;System.out.println(cur);cur = cur.next;&#125;&#125;<span class="hljs-comment">// 根据id修改节点</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode2 newNode)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);&#125;HeroNode2 cur = head.next;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (cur == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 遍历完成没有找到</span>System.out.println(<span class="hljs-string">"没有id相同的节点~"</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">if</span> (cur.id == newNode.id) &#123;<span class="hljs-comment">// 找到该节点</span>cur.name = newNode.name;<span class="hljs-keyword">return</span>;&#125;cur = cur.next;&#125;&#125;<span class="hljs-comment">// 删除指定id的节点</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表位空！"</span>);<span class="hljs-keyword">return</span>;&#125;HeroNode2 cur = head.next;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (cur == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"没有找到指定id的节点~"</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">if</span> (cur.id == id) &#123;<span class="hljs-comment">// 找到该节点 将待删除节点前后的节点链接到一起</span><span class="hljs-keyword">if</span> (cur.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 待删除的节点是最后一个节点</span>cur.pre.next = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">return</span>;&#125; <span class="hljs-keyword">else</span> &#123;cur.pre.next = cur.next;cur.next.pre = cur.pre;<span class="hljs-keyword">return</span>;&#125;&#125;cur = cur.next;&#125;&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表</title>
    <link href="/2020/04/30/dataStructure-02/"/>
    <url>/2020/04/30/dataStructure-02/</url>
    
    <content type="html"><![CDATA[<h2 id="1、链表介绍"><a href="#1、链表介绍" class="headerlink" title="1、链表介绍"></a>1、链表介绍</h2><p>链表是有序的列表，在内存中的存储结构：<br><img src="/2020/04/30/dataStructure-02/1.png" srcset="/img/loading.gif" alt></p><a id="more"></a>小结:<p>1)链表是以节点的方式来存储,是链式存储<br>2)每个节点包含 data 域， next 域：指向下一个节点<br>3)如图：发现链表的<strong>各个节点不一定是连续存储</strong>.<br>4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定逻辑结构图：<br><img src="/2020/04/30/dataStructure-02/2.png" srcset="/img/loading.gif" alt></p><h2 id="2、单链表的创建，插入，删除，显示"><a href="#2、单链表的创建，插入，删除，显示" class="headerlink" title="2、单链表的创建，插入，删除，显示"></a>2、单链表的创建，插入，删除，显示</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> linkedlist;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListDemo</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 创建节点</span>HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1000</span>, <span class="hljs-string">"wd"</span>);HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1001</span>, <span class="hljs-string">"lz"</span>);HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1002</span>, <span class="hljs-string">"lp"</span>);<span class="hljs-comment">// 创建链表</span>SingleLinkedList heroList = <span class="hljs-keyword">new</span> SingleLinkedList();<span class="hljs-comment">// 添加节点</span><span class="hljs-comment">//heroList.add(hero1);</span><span class="hljs-comment">//heroList.add(hero3);</span><span class="hljs-comment">//heroList.add(hero2);</span>heroList.addByOrder(hero3);heroList.addByOrder(hero2);heroList.addByOrder(hero1);<span class="hljs-comment">// 修改</span>HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1002</span>, <span class="hljs-string">"ljb"</span>);heroList.update(hero4);<span class="hljs-comment">// 删除</span>heroList.delete(<span class="hljs-number">1000</span>);<span class="hljs-comment">// 显示</span>heroList.list();&#125;&#125;<span class="hljs-comment">// 定义HeroNode ,每一个HeroNode 对象就是一个节点</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">public</span> String name;<span class="hljs-keyword">public</span> HeroNode next;<span class="hljs-comment">// 指向下一个节点</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">super</span>();&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<span class="hljs-keyword">this</span>.id = id;<span class="hljs-keyword">this</span>.name = name;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"HeroNode [id="</span> + id + <span class="hljs-string">", name="</span> + name + <span class="hljs-string">"]"</span>;&#125;&#125;<span class="hljs-comment">// 定义SingleLinkedList</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<span class="hljs-comment">// 初始化头节点 不存放具体的数据 表示单链表的头</span><span class="hljs-keyword">private</span> HeroNode head = <span class="hljs-keyword">new</span> HeroNode();<span class="hljs-comment">// 添加节点到单链表</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<span class="hljs-comment">// head节点不能动，需要创建一个临时节点</span>HeroNode temp = head;<span class="hljs-comment">// 1.找到当前链表的最后一个节点</span><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">// 如果没有找到，将temp后移</span>temp = temp.next;&#125;<span class="hljs-comment">// 当退出while循环时，temp就指向了链表的最后</span><span class="hljs-comment">// 2.将最后的这个节点指向新的节点</span>temp.next = heroNode;&#125;<span class="hljs-comment">// 显示当前链表</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 判断链表是否为空</span><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">// 遍历输出</span>HeroNode temp = head.next;<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">// 输出节点信息</span>System.out.println(temp);<span class="hljs-comment">// 将temp 后移</span>temp = temp.next;&#125;&#125;<span class="hljs-comment">// 根据排名添加节点到指定位置</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<span class="hljs-comment">// 1.找到要添加节点的前一个节点</span>HeroNode temp = head;<span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 标识添加的编号是否 存在</span><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (temp.next.id &gt; heroNode.id) &#123;<span class="hljs-comment">// 位置找到 就在temp 与 temp.next 之间</span><span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.id == heroNode.id) &#123;<span class="hljs-comment">// 要插入的节点的编号已经存在</span>flag = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">// 后移</span>temp = temp.next;&#125;<span class="hljs-comment">// 判断flag的值</span><span class="hljs-keyword">if</span> (flag) &#123;System.out.printf(<span class="hljs-string">"准备插入的英雄的编号%d已经存在，不能添加！"</span>, heroNode.id);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 2.插入到链表中 </span>heroNode.next = temp.next;<span class="hljs-comment">// 插入节点的next指向原有节点的下一个节点</span>temp.next = heroNode;<span class="hljs-comment">// 原有节点的next指向插入节点</span>&#125;&#125;<span class="hljs-comment">// 根据编号修改节点信息</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<span class="hljs-comment">// 判链表是否为空</span><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);<span class="hljs-keyword">return</span>;&#125;HeroNode temp = head.next;<span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 判断是否找到</span><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (temp.id == heroNode.id) &#123;flag = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">break</span>;&#125;temp = temp.next;&#125;<span class="hljs-keyword">if</span> (flag) &#123;temp.name = heroNode.name;&#125; <span class="hljs-keyword">else</span> &#123;System.out.printf(<span class="hljs-string">"没有找到编号为%d的节点！"</span>, heroNode.id);&#125;&#125;    <span class="hljs-comment">// 根据编号删除节点信息</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);<span class="hljs-keyword">return</span>;&#125;HeroNode temp = head;<span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<span class="hljs-comment">// 1.找到待删除节点的前一个节点</span><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span>(temp.next.id == id) &#123;flag =<span class="hljs-keyword">true</span>;<span class="hljs-keyword">break</span>;&#125;temp = temp.next;&#125;<span class="hljs-keyword">if</span>(flag) &#123;<span class="hljs-comment">// 2.使原有节点的next指向  待删除节点(temp.next)  的下一个节点</span>temp.next = temp.next.next;&#125;<span class="hljs-keyword">else</span> &#123;System.out.printf(<span class="hljs-string">"没有找到编号为%d的节点"</span>,id);&#125;&#125;&#125;</code></pre><h2 id="3、求单链表有效节点个数"><a href="#3、求单链表有效节点个数" class="headerlink" title="3、求单链表有效节点个数"></a>3、求单链表有效节点个数</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;HeroNode cur = head.next;<span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;length++;cur = cur.next;&#125;<span class="hljs-keyword">return</span> length;&#125;</code></pre><h2 id="4、查找倒数第-k-个节点"><a href="#4、查找倒数第-k-个节点" class="headerlink" title="4、查找倒数第 k 个节点"></a>4、查找倒数第 k 个节点</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<span class="hljs-comment">// 判断链表是否为空</span><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-comment">// 获取链表长度</span><span class="hljs-keyword">int</span> length = <span class="hljs-keyword">this</span>.getLength(head);<span class="hljs-comment">// 验证 index 是否合法</span><span class="hljs-keyword">if</span>(index&lt;=<span class="hljs-number">0</span>||index&gt;length) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-comment">// for循环定位到倒数第 index 个节点</span>HeroNode cur = head.next;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length-index; i++) &#123;cur = cur.next;&#125;<span class="hljs-keyword">return</span> cur;&#125;</code></pre><h2 id="5、单链表的反转"><a href="#5、单链表的反转" class="headerlink" title="5、单链表的反转"></a>5、单链表的反转</h2><p><img src="/2020/04/30/dataStructure-02/3.png" srcset="/img/loading.gif" alt></p> <pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span> || head.next.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空或长度为 1！"</span>);<span class="hljs-keyword">return</span>;&#125;HeroNode cur = head.next;HeroNode next = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 指向当前节点的下一个节点</span>HeroNode reverseHead = <span class="hljs-keyword">new</span> HeroNode();<span class="hljs-comment">// 遍历原来的链表</span><span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;next = cur.next;<span class="hljs-comment">// 先暂时保存当前节点的下一个节点</span>cur.next = reverseHead.next;<span class="hljs-comment">// 使当前节点指向新链表的第一个节点</span>reverseHead.next = cur;<span class="hljs-comment">// 使 新链表的头节点指向当前节点</span>cur = next;<span class="hljs-comment">// 当前节点后移</span>&#125;<span class="hljs-comment">// 将新链表的第一个节点连接到原来链表的头节点上</span>head.next = reverseHead.next;&#125;</code></pre><h2 id="6、逆序打印单链表"><a href="#6、逆序打印单链表" class="headerlink" title="6、逆序打印单链表"></a>6、逆序打印单链表</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">"链表为空！"</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">// 创建一个栈</span>Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;HeroNode&gt;();<span class="hljs-comment">// 创建一个指针用于遍历</span>HeroNode cur = head.next;<span class="hljs-comment">// 遍历单链表</span><span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;stack.push(cur);<span class="hljs-comment">// 将遍历的节点入栈</span>cur = cur.next;<span class="hljs-comment">// 后移</span>&#125;<span class="hljs-keyword">while</span>(stack.size()&gt;<span class="hljs-number">0</span>) &#123;System.out.println(stack.pop());&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2020/04/28/dataStructure-01-2/"/>
    <url>/2020/04/28/dataStructure-01-2/</url>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一个有序列表，可以用数组和链表来实现。<br>遵循<strong>先进先出</strong>原则。<a id="more"></a><br><img src="/2020/04/28/dataStructure-01-2/3.png" srcset="/img/loading.gif" alt></p><h3 id="1、数组模拟队列"><a href="#1、数组模拟队列" class="headerlink" title="1、数组模拟队列"></a>1、数组模拟队列</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueueDemo</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;ArrayQueue queue = <span class="hljs-keyword">new</span> ArrayQueue(<span class="hljs-number">3</span>);<span class="hljs-keyword">char</span> key = <span class="hljs-string">' '</span>;Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">while</span>(loop) &#123;System.out.println(<span class="hljs-string">"s:显示队列   a:添加数据到队列   g:取出数据  h:查看队列头  e:退出"</span>);System.out.println(<span class="hljs-string">"请输入要执行的操作："</span>);key = in.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-keyword">switch</span> (key) &#123;<span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>:queue.showQueue();System.out.println();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'a'</span>:System.out.print(<span class="hljs-string">"请输入一个数字："</span>);<span class="hljs-keyword">int</span> num = in.nextInt();queue.addQueue(num);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'g'</span>:<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">int</span> num1 = queue.getQueue();System.out.println(<span class="hljs-string">"取出的数据为："</span>+ num1);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.getMessage();&#125;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>:<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">int</span> head = queue.headQueue();System.out.println(<span class="hljs-string">"队列头为："</span>+ head);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.getMessage();&#125;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'e'</span>:loop = <span class="hljs-keyword">false</span>;System.out.println(<span class="hljs-string">"程序退出"</span>);<span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;&#125;&#125;&#125;&#125;<span class="hljs-comment">// 使用数组模拟队列---编写一个ArrayQueue类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<span class="hljs-comment">// 表示数组的最大容量</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;<span class="hljs-comment">// 队列头</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;<span class="hljs-comment">// 队列尾</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<span class="hljs-comment">// 用于存放数据，模拟队列</span><span class="hljs-comment">// 创建队列的构造器</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<span class="hljs-keyword">this</span>.maxSize = maxSize;<span class="hljs-keyword">this</span>.arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [maxSize];<span class="hljs-keyword">this</span>.front = -<span class="hljs-number">1</span>;<span class="hljs-comment">// 指向队列头部的前一个位置</span><span class="hljs-keyword">this</span>.rear = -<span class="hljs-number">1</span>;<span class="hljs-comment">// 指向队列尾部</span>&#125;<span class="hljs-comment">// 判断队列是否满</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> rear == maxSize-<span class="hljs-number">1</span>;&#125;<span class="hljs-comment">// 判断队列是否为空</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> front == rear;&#125;<span class="hljs-comment">// 添加数据到队列，入队列</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<span class="hljs-comment">// 判断队列是否已满</span><span class="hljs-keyword">if</span>(isFull()) &#123;System.out.println(<span class="hljs-string">"队列已满！"</span>);<span class="hljs-keyword">return</span> ;&#125;<span class="hljs-keyword">else</span> &#123;rear++; <span class="hljs-comment">// 让rear后移</span>arr[rear]=num;&#125;&#125;<span class="hljs-comment">// 获取队列数据，出队列</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 判断队列是否为空</span><span class="hljs-keyword">if</span>(isEmpty()) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"队列为空！"</span>);<span class="hljs-comment">// 抛出异常</span>&#125;front++;<span class="hljs-keyword">return</span> arr[front];&#125;<span class="hljs-comment">// 显示队列所有数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 遍历</span><span class="hljs-keyword">if</span>(isEmpty()) &#123;System.out.println(<span class="hljs-string">"队列为空"</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;System.out.print(arr[i]+<span class="hljs-string">" "</span>);&#125;&#125;&#125;<span class="hljs-comment">// 显示队列的头数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">if</span>(isEmpty()) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"队列为空！"</span>);&#125;<span class="hljs-keyword">return</span> arr[front+<span class="hljs-number">1</span>];&#125;&#125;</code></pre><h3 id="2、环形队列"><a href="#2、环形队列" class="headerlink" title="2、环形队列"></a>2、环形队列</h3><p>1.目前数组使用一次之后就不能再使用了，没有达到复用的效果。<br>2.将数组使用算法，改进成为一个环形队列&nbsp;&nbsp;&nbsp;取模%<br><img src="/2020/04/28/dataStructure-01-2/4.png" srcset="/img/loading.gif" alt></p><blockquote><p>循环队列中，由于入队时尾指针向前追赶头指针；出队时头指针向前追赶尾指针，造成队空和队满时头尾指针均相等。因此，无法通过条件front==rear来判别队列是”空”还是”满”。<br>解决这个问题的方法至少有三种：<br>① 另设一布尔变量以区别队列的空和满；<br>② 少用一个元素的空间。约定入队前，测试尾指针在循环意义下加1后是否等于头指针，若相等则认为队满</p></blockquote><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleQueue</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<span class="hljs-comment">// 表示数组的最大容量</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;<span class="hljs-comment">// 队列头</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;<span class="hljs-comment">// 队列尾</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<span class="hljs-comment">// 用于存放数据，模拟队列</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<span class="hljs-keyword">this</span>.maxSize = maxSize;<span class="hljs-keyword">this</span>.arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<span class="hljs-comment">// this.front = 0;// 指向队列头部</span><span class="hljs-comment">// this.rear = 0;// 指向队列尾部的后一个位置</span>&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> rear == front;&#125;<span class="hljs-comment">// 添加数据到队列，入队列</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<span class="hljs-comment">// 判断队列是否已满</span><span class="hljs-keyword">if</span> (isFull()) &#123;System.out.println(<span class="hljs-string">"队列已满！"</span>);<span class="hljs-keyword">return</span>;&#125; <span class="hljs-keyword">else</span> &#123;arr[rear] = num;rear = (rear + <span class="hljs-number">1</span>) % maxSize; <span class="hljs-comment">// 让rear后移</span>&#125;&#125;<span class="hljs-comment">// 获取队列数据，出队列</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 判断队列是否为空</span><span class="hljs-keyword">if</span> (isEmpty()) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"队列为空！"</span>);<span class="hljs-comment">// 抛出异常</span>&#125;<span class="hljs-comment">// 1.将front对应的值保存</span><span class="hljs-keyword">int</span> value = arr[front];<span class="hljs-comment">// 2.front后移</span>front = (front + <span class="hljs-number">1</span>) % maxSize;<span class="hljs-comment">// 3.返回保存的front对应的值</span><span class="hljs-keyword">return</span> value;&#125;<span class="hljs-comment">// 当前队列的有效数据个数</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;&#125;<span class="hljs-comment">// 显示队列所有数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 遍历</span><span class="hljs-keyword">if</span> (isEmpty()) &#123;System.out.println(<span class="hljs-string">"队列为空"</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 从front开始遍历</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; front + size(); i++) &#123;System.out.print(arr[i % maxSize] + <span class="hljs-string">" "</span>);&#125;&#125;&#125;<span class="hljs-comment">// 显示队列的头数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">if</span> (isEmpty()) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"队列为空！"</span>);&#125;<span class="hljs-keyword">return</span> arr[front];&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>稀疏数组</title>
    <link href="/2020/04/25/dataStructure-01/"/>
    <url>/2020/04/25/dataStructure-01/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><p>数据结构包括：线性结构和非线性结构<br><strong>线性结构：</strong><br>1.数据元素之间存在<strong>一对一</strong>的线性关系。<br>2.线性结构有两种不同的存储结构，即<strong>顺序存储结构(数组)</strong>和<strong>链式存储结构(链表)</strong>。</p><a id="more"></a><p>3.顺序存储的线性表称为顺序表，存储的元素是<strong>连续的</strong>；<br>&nbsp;&nbsp;&nbsp;链式存储的线性表称为链表，存储的元素<strong>不一定是连续的</strong>，元素节点中存放着数据元素和相邻元素的地址信息。<br>4.线性结构常见的有：数组，队列，链表和栈。<br><strong>非线性结构：</strong><br>非线性结构包括：二维数组，多维数组，广义表，树，图。</p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。<br>稀疏数组的处理方法是:<br>1)记录数组一共有几行几列，有多少个不同的非零值。<br>2)把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p><h3 id="1、基本介绍："><a href="#1、基本介绍：" class="headerlink" title="1、基本介绍："></a>1、基本介绍：</h3><p><img src="/2020/04/25/dataStructure-01/1.png" srcset="/img/loading.gif" alt></p><h3 id="2、应用实例："><a href="#2、应用实例：" class="headerlink" title="2、应用实例："></a>2、应用实例：</h3><p><img src="/2020/04/25/dataStructure-01/2.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 创建原始的二维数组11*11</span><span class="hljs-comment">// 0：表示没有棋子 1:表示黑色棋子 2：表示蓝色棋子</span><span class="hljs-keyword">int</span> chessArr1[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];chessArr1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;chessArr1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;System.out.println(<span class="hljs-string">"原始的二维数组："</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr1) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;System.out.print(data + <span class="hljs-string">"  "</span>);&#125;System.out.println();&#125;<span class="hljs-comment">// 将二维数组转换为稀疏数组</span><span class="hljs-comment">// 1.先遍历二维数组 得到非零数据的个数</span><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chessArr1.length; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; chessArr1[<span class="hljs-number">0</span>].length; j++) &#123;<span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123;sum++;&#125;&#125;&#125;<span class="hljs-comment">// System.out.println(sum);</span><span class="hljs-comment">// 2.创建对应的稀疏数组</span><span class="hljs-keyword">int</span> sparseArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<span class="hljs-comment">// 3.给稀疏数组赋值</span>sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = chessArr1.length;sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = chessArr1[<span class="hljs-number">0</span>].length;sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<span class="hljs-comment">// 遍历二维数组将非零值存放到稀疏数组中</span><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于记录是第几个非零数据</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chessArr1.length; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; chessArr1[<span class="hljs-number">0</span>].length; j++) &#123;<span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123;count++;sparseArr[count][<span class="hljs-number">0</span>] = i;sparseArr[count][<span class="hljs-number">1</span>] = j;sparseArr[count][<span class="hljs-number">2</span>] = chessArr1[i][j];&#125;&#125;&#125;System.out.println(<span class="hljs-string">"稀疏数组："</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : sparseArr) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;System.out.printf(<span class="hljs-string">"%d\t"</span>, data);&#125;System.out.println();&#125;<span class="hljs-comment">// 稀疏数组转换为二维数组</span><span class="hljs-comment">// 1.读取稀疏数组的第一行，根据第一行的数据创建原始的二维数组</span><span class="hljs-keyword">int</span> chessArr2[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<span class="hljs-comment">// 2.读取其余的几行数据，并赋值给原始的 二维数组</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123;<span class="hljs-keyword">int</span> row = sparseArr[i][<span class="hljs-number">0</span>];<span class="hljs-keyword">int</span> col = sparseArr[i][<span class="hljs-number">1</span>];<span class="hljs-keyword">int</span> value = sparseArr[i][<span class="hljs-number">2</span>];chessArr2[row][col] = value;&#125;System.out.println(<span class="hljs-string">"恢复后的二维数组："</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr2) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;System.out.print(data + <span class="hljs-string">"  "</span>);&#125;System.out.println();&#125;&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie,session</title>
    <link href="/2020/04/23/javaweb-06/"/>
    <url>/2020/04/23/javaweb-06/</url>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie是服务器通知客户端保存键值对的一种技术。<a id="more"></a><br>客户端有了Cookie后，每次请求都会发送给服务器。<br>Cookie 的值可以唯一地标识客户端，因此 Cookie 常用于会话管理。<br>每个Cookie的 大小不能超过4kb。</p><h3 id="1-创建Cookie"><a href="#1-创建Cookie" class="headerlink" title="1.创建Cookie"></a>1.创建Cookie</h3><p><img src="/2020/04/23/javaweb-06/1.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.创建Cookie对象</span>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">"key1"</span>, <span class="hljs-string">"value"</span>);        <span class="hljs-comment">// 2.通知客户端保存Cookie</span>        resp.addCookie(cookie);        resp.getWriter().write(<span class="hljs-string">"Cookie创建成功"</span>);    &#125;&#125;</code></pre><h3 id="2-服务器获取Cookie"><a href="#2-服务器获取Cookie" class="headerlink" title="2.服务器获取Cookie"></a>2.服务器获取Cookie</h3><p><img src="/2020/04/23/javaweb-06/2.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    Cookie[] cookies = req.getCookies();    <span class="hljs-keyword">for</span>(Cookie cookie:cookies)&#123;        <span class="hljs-comment">// getName()返回cookie的key</span>        <span class="hljs-comment">// getValue()返回cookie的value</span>        resp.getWriter().write(<span class="hljs-string">"Cookie["</span>+cookie.getName()+<span class="hljs-string">"="</span>+cookie.getValue()+<span class="hljs-string">"]&lt;br/&gt;"</span>);    &#125;    Cookie iwantCookie = <span class="hljs-keyword">null</span>;    <span class="hljs-comment">/*for(Cookie cookie:cookies)&#123;</span><span class="hljs-comment">            // 给到想要的cookie</span><span class="hljs-comment">            if("key1".equals(cookie.getName()))&#123;</span><span class="hljs-comment">                iwantCookie = cookie;</span><span class="hljs-comment">                break;</span><span class="hljs-comment">            &#125;</span><span class="hljs-comment">        &#125;*/</span>    iwantCookie = CookieUtils.findCookie(<span class="hljs-string">"key1"</span>,req.getCookies());    <span class="hljs-keyword">if</span>(iwantCookie!=<span class="hljs-keyword">null</span>)&#123;    resp.getWriter().write(<span class="hljs-string">"找到了指定的cookie"</span>);    &#125;&#125;</code></pre><p><strong>将查找指定Cookie封装成工具类：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> Utils;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieUtils</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查找指定名称的cookie</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cookies</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> cookie</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cookie <span class="hljs-title">findCookie</span><span class="hljs-params">(String name,Cookie[] cookies)</span></span>&#123;        <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>||cookies==<span class="hljs-keyword">null</span>||cookies.length==<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">for</span>(Cookie cookie:cookies)&#123;            <span class="hljs-comment">// 给到想要的cookie</span>            <span class="hljs-keyword">if</span>(name.equals(cookie.getName()))&#123;                <span class="hljs-keyword">return</span> cookie;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h3 id="3-Cookie值的修改"><a href="#3-Cookie值的修改" class="headerlink" title="3.Cookie值的修改"></a>3.Cookie值的修改</h3><p><strong>方案一：</strong><br>1、先创建一个要修改的同名（指的就是key）的Cookie 对象<br>2、在构造器，同时赋于新的Cookie 值。<br>3、调用response.addCookie( Cookie );</p><p><strong>方案二：</strong><br>1、先查找到需要修改的Cookie 对象<br>2、调用setValue()方法赋于新的Cookie 值。<br>3、调用response.addCookie()通知客户端保存修改</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;   <span class="hljs-comment">/* // 方式一：</span><span class="hljs-comment">    // 1、先创建一个要修改的同名（指的就是key）的Cookie 对象</span><span class="hljs-comment">    // 2、在构造器，同时赋于新的Cookie 值。</span><span class="hljs-comment">    Cookie cookie = new Cookie("key1", "value2");</span><span class="hljs-comment">    // 3、调用response.addCookie( Cookie );通知客户端保存cookie</span><span class="hljs-comment">    resp.addCookie(cookie);</span><span class="hljs-comment">   */</span>    <span class="hljs-comment">// 方式二：</span>    <span class="hljs-comment">// 1、先查找到需要修改的Cookie 对象</span>    Cookie cookie = CookieUtils.findCookie(<span class="hljs-string">"key1"</span>,req.getCookies());    <span class="hljs-comment">// 2、调用setValue()方法赋于新的Cookie 值。</span>    <span class="hljs-keyword">if</span>(cookie!=<span class="hljs-keyword">null</span>)&#123;    cookie.setValue(<span class="hljs-string">"value3"</span>);    &#125;    <span class="hljs-comment">// 3、调用response.addCookie()通知客户端保存修改</span>    resp.addCookie(cookie);&#125;</code></pre><h3 id="4-Cookie的生命控制"><a href="#4-Cookie的生命控制" class="headerlink" title="4.Cookie的生命控制"></a>4.Cookie的生命控制</h3><p>管理cookie什么时候被销毁(删除)<br>setAge()：<br>正数表示在指定的秒数后过期；<br>负数表示浏览器关闭后，cookie就会销毁；（）默认值为-1<br>0表示马上删除cookie。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">"defaultLife"</span>,<span class="hljs-string">"defaultLife"</span>);    cookie.setMaxAge(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 设置存活时间</span>    resp.addCookie(cookie);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    Cookie cookie = CookieUtils.findCookie(<span class="hljs-string">"defaultLife"</span>,req.getCookies());    <span class="hljs-keyword">if</span>(cookie!=<span class="hljs-keyword">null</span>)&#123;    cookie.setMaxAge(<span class="hljs-number">0</span>);<span class="hljs-comment">// 马上删除cookie</span>    resp.addCookie(cookie);    resp.getWriter().write(<span class="hljs-string">"cookie[defaultLife=defaultValue]已删除"</span>);    &#125;&#125;</code></pre><h3 id="5-Cookie有效路径Path的设置"><a href="#5-Cookie有效路径Path的设置" class="headerlink" title="5.Cookie有效路径Path的设置"></a>5.Cookie有效路径Path的设置</h3><p>Cookie的path属性可以有效的过滤哪些Cookie可以发送 个服务器。<br>path属性是通过请求的地址来进行有效的过滤。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPath</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">"key2"</span>,<span class="hljs-string">"value2"</span>);    cookie.setPath(req.getContextPath()+<span class="hljs-string">"/a"</span>);  <span class="hljs-comment">// 设置Path值为  /工程路径/a</span>    resp.addCookie(cookie);&#125;</code></pre><h3 id="6-免输入用户名登录"><a href="#6-免输入用户名登录" class="headerlink" title="6.免输入用户名登录"></a>6.免输入用户名登录</h3><p><img src="/2020/04/23/javaweb-06/3.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=<span class="hljs-string">"http://localhost:8080/08_cookie/loginServlet"</span> method=<span class="hljs-string">"post"</span>&gt;        用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span> value=<span class="hljs-string">"$&#123;cookie.username.value&#125;"</span>/&gt;&lt;br/&gt;        密码：&lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"password"</span>/&gt;&lt;br/&gt;        &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"登录"</span>/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        req.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);        resp.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-string">"zyz"</span>.equals(username)&amp;&amp;<span class="hljs-string">"123456"</span>.equals(password))&#123;            Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">"username"</span>,username);            cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);<span class="hljs-comment">// cookie一周内有效</span>            resp.addCookie(cookie);            System.out.println(<span class="hljs-string">"登录成功！"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">"登录失败！"</span>);        &#125;    &#125;&#125;</code></pre><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>1、Session 是一个接口（HttpSession）。<br>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。<br>3、每个客户端都有自己的一个Session 会话。<br>4、Session 会话中，我们经常用来保存用户登录之后的信息。</p><h3 id="1-创建和获取session"><a href="#1-创建和获取session" class="headerlink" title="1.创建和获取session"></a>1.创建和获取session</h3><p>request.getSeesion()：<br>第一次调用：创建Session会话。<br>之后的调用：获取前面创建好的Session会话对象。<br>isNew()：判断Session是否是刚创建的<br>&nbsp;&nbsp;&nbsp;&nbsp;true：表示刚创建<br>&nbsp;&nbsp;&nbsp;&nbsp;false：表示获取之前创建<br>getId()：得到Session的会话id值</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createOrGetSession</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 创建或获取Session会话对象</span>    HttpSession session = req.getSession();    <span class="hljs-comment">// 判断Session是否是刚刚创建的</span>    <span class="hljs-keyword">boolean</span> isNew = session.isNew();    <span class="hljs-comment">// 获取Session会话的唯一标识id</span>    String id = session.getId();    resp.getWriter().write(<span class="hljs-string">"得到Session,id为："</span>+id+<span class="hljs-string">"&lt;br/&gt;"</span>);    resp.getWriter().write(<span class="hljs-string">"是否是刚刚创建的："</span>+isNew+<span class="hljs-string">"&lt;br/&gt;"</span>);&#125;</code></pre><h3 id="2-Session域数据的存取"><a href="#2-Session域数据的存取" class="headerlink" title="2.Session域数据的存取"></a>2.Session域数据的存取</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 往Session域中保存数据</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAttribute</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    req.getSession().setAttribute(<span class="hljs-string">"key1"</span>,<span class="hljs-string">"value1"</span>);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取Session中的数据</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAttribute</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    Object key1 = req.getSession().getAttribute(<span class="hljs-string">"key1"</span>);    resp.getWriter().write(<span class="hljs-string">"从Session中获取的key1的数据为："</span>+ key1);&#125;</code></pre><h3 id="3-Session生命周期控制"><a href="#3-Session生命周期控制" class="headerlink" title="3.Session生命周期控制"></a>3.Session生命周期控制</h3><p>setMaxInactiveInterval(int  interval)：设置Session超时时间，超过指定的时长就会被销毁。<br>负数表示永不超时。<br>getMaxInactiveInterval()：获取Session超时时长。<br>invalidate()：使当前会话马上超时。</p><p>获取默认超时时长：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-keyword">int</span> maxInactiveInterval = req.getSession().getMaxInactiveInterval();    resp.getWriter().write(<span class="hljs-string">"Session的默认超时时长为："</span>+maxInactiveInterval);<span class="hljs-comment">// 1800</span>&#125;</code></pre><p> 设置web工程下所有的 Session 默认超时时长：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span></code></pre><p>设置个别Session的超时时长：                                                                                                                                                                                                                                                                                                                                                                                                                                            </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    req.getSession().setMaxInactiveInterval(<span class="hljs-number">3</span>);    resp.getWriter().write(<span class="hljs-string">"设置Session 3秒后失效~"</span>);&#125;</code></pre><p>使Session马上失效：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNow</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;       req.getSession().invalidate();       resp.getWriter().write(<span class="hljs-string">"设置Session 马上失效~"</span>);   &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件的上传和下载</title>
    <link href="/2020/04/13/javaweb-05/"/>
    <url>/2020/04/13/javaweb-05/</url>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传的要求：<br>1、要有一个form标签，method=post<br>2、form标签的encType属性值必须为multipart/form-data(表示提交的数据以多段进行拼接(每个表单项分为一段)，然后以二进制流的形式提交给服务器)<br>3、在form标签中使用 input type=file 添加上传的文件<br>4、编写服务器代码接收，处理上传的数据<a id="more"></a><br><img src="/2020/04/13/javaweb-05/1.png" srcset="/img/loading.gif" alt></p><p>导入两个第三方的jar包：<br><img src="/2020/04/13/javaweb-05/2.png" srcset="/img/loading.gif" alt></p><p>处理文件上传的servlet程序：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> servlet;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// System.out.println("文件上传过来了");</span>        <span class="hljs-comment">// 1.先判断上传的数据是否为多段数据(文件上传)</span>        <span class="hljs-keyword">if</span> (ServletFileUpload.isMultipartContent(req))&#123;            <span class="hljs-comment">// 2.创建FileItemFactory工厂实现类</span>            FileItemFactory fileItemFactory = <span class="hljs-keyword">new</span> DiskFileItemFactory();            <span class="hljs-comment">// 3.创建用于解析上传数据的工具类ServletFileUpload类</span>            ServletFileUpload servletFileUpload = <span class="hljs-keyword">new</span> ServletFileUpload(fileItemFactory);            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-comment">// 4.解析上传数据，得到每一个表单项FileItem</span>                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);                <span class="hljs-comment">// 5.循环判断每一个表单项是普通类型，还是文件类型</span>                <span class="hljs-keyword">for</span>(FileItem fileItem : list)&#123;                    <span class="hljs-keyword">if</span>(fileItem.isFormField())&#123;                        <span class="hljs-comment">// 普通表单项</span>                        System.out.println(<span class="hljs-string">"表单项的name属性值："</span>+fileItem.getFieldName());                        System.out.println(<span class="hljs-string">"表单项的value属性值"</span>+fileItem.getString(<span class="hljs-string">"UTF-8"</span>));                    &#125;<span class="hljs-keyword">else</span>&#123;                        <span class="hljs-comment">// 文件表单项</span>                        System.out.println(<span class="hljs-string">"表单项的name属性值："</span>+fileItem.getFieldName());                        System.out.println(<span class="hljs-string">"上传的文件名："</span>+fileItem.getName());                        fileItem.write(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"d://"</span>+fileItem.getName()));                    &#125;                &#125;            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=<span class="hljs-string">"http://localhost:8080/07_jsp/uploadServlet"</span> method=<span class="hljs-string">"post"</span> enctype=<span class="hljs-string">"multipart/form-data"</span>&gt;        用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span> /&gt; &lt;br/&gt;        头像：&lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"photo"</span> /&gt; &lt;br/&gt;        &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"上传"</span>&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> servlet;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取要下载的文件名</span>        String downloadFileName = <span class="hljs-string">"cat.jpg"</span>;        <span class="hljs-comment">// 2.通过servletContext对象 读取要下载的文件内容</span>        ServletContext servletContext = getServletContext();        InputStream resourceAsStream = servletContext.getResourceAsStream(<span class="hljs-string">"/file/"</span> + downloadFileName);        <span class="hljs-comment">// 获取响应输出流</span>        OutputStream outputStream = resp.getOutputStream();        <span class="hljs-comment">// 3.在回传前通过响应头告诉客户端返回的数据类型</span>        String mimeType = servletContext.getMimeType(<span class="hljs-string">"/file/"</span> + downloadFileName);        System.out.println(<span class="hljs-string">"下载的文件类型："</span> + mimeType);        <span class="hljs-comment">// 4.以及告诉客户端收到的数据是用于下载使用的</span>        <span class="hljs-comment">// 判断浏览器类型</span>        String ua = req.getHeader(<span class="hljs-string">"User-Agent"</span>);        String str=<span class="hljs-string">""</span>;        <span class="hljs-comment">// 判断是否是火狐浏览器</span>        <span class="hljs-keyword">if</span> (ua.contains(<span class="hljs-string">"Firefox"</span>)) &#123;        <span class="hljs-comment">// 使用下面的格式进行BASE64 编码后</span>            str = <span class="hljs-string">"=?utf-8?B?"</span> + <span class="hljs-keyword">new</span> BASE64Encoder().encode(<span class="hljs-string">"中文.jpg"</span>.getBytes(<span class="hljs-string">"utf-8"</span>)) + <span class="hljs-string">"?="</span>;        &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 把中文名进行UTF-8 编码操作</span>            str = URLEncoder.encode(<span class="hljs-string">"中文.jpg"</span>, <span class="hljs-string">"UTF-8"</span>);        &#125;        <span class="hljs-comment">// Content-Disposition响应头，表示收到的数据该怎么处理</span>        <span class="hljs-comment">// attachment 附件，表示下载使用</span>        <span class="hljs-comment">// filename 表示指定下载的文件名</span>        resp.setHeader(<span class="hljs-string">"Content-Disposition"</span>, <span class="hljs-string">"attachment;fileName="</span> + str);        <span class="hljs-comment">// 5.把要下载的文件内容回传给客户端</span>        <span class="hljs-comment">//  读取输入流中的全部数据，复制给输出流，输出给客户端</span>        IOUtils.copy(resourceAsStream, outputStream);    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EL表达式，JSTL标签库</title>
    <link href="/2020/04/12/javaweb-04/"/>
    <url>/2020/04/12/javaweb-04/</url>
    
    <content type="html"><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>Express Language：表达式语言。<br>作用：代替jsp页面中的表达式脚本在jsp页面中进行数据的输出。<a id="more"></a></p><pre><code class="hljs jsp">&lt;body&gt;    &lt;%        request.setAttribute(<span class="hljs-string">"key"</span>,<span class="hljs-string">"value"</span>);    %&gt;    jsp表达式输出key的值：&lt;%=    request.getAttribute(<span class="hljs-string">"key"</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">""</span>:request.getAttribute(<span class="hljs-string">"key"</span>)    %&gt;&lt;br/&gt;    EL表达式输出key的值：$&#123;key&#125;&lt;/body&gt;</code></pre><p>格式：<code>${表达式}</code><br>EL表达式在输出空值的时候，输出的是空串，而jsp表达式输出的是null字符串。</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>关系运算</p><p>逻辑运算</p><p>算数运算<br>empty运算：判断一个数据是否为空，为空输出truem，否则输出false<br>三元运算<br>“.”点运算和[] 中括号运算符</p><h2 id="EL表达式中的11个隐含对象"><a href="#EL表达式中的11个隐含对象" class="headerlink" title="EL表达式中的11个隐含对象"></a>EL表达式中的11个隐含对象</h2><p><img src="/2020/04/12/javaweb-04/1.png" srcset="/img/loading.gif" alt></p><p>pageContext对象的使用：</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%-- jsp表达式request.getScheme() 它可以获取请求的协议request.getServerName() 获取请求的服务器ip 或域名request.getServerPort() 获取请求的服务器端口号request.getContextPath() 获取当前工程路径request.getMethod() 获取请求的方式（GET 或POST）request.getRemoteHost() 获取客户端的ip 地址session.getId() 获取会话的唯一标识--%&gt;&lt;%-- EL表达式--%&gt;&lt;%    pageContext.setAttribute(<span class="hljs-string">"req"</span>, request);%&gt;<span class="hljs-number">1</span>. 协议：$&#123;req.scheme&#125;&lt;br/&gt;<span class="hljs-number">2</span>. 服务器ip：$&#123;pageContext.request.serverName&#125;&lt;br/&gt;<span class="hljs-number">3</span>. 服务器端口：$&#123;pageContext.request.serverPort&#125;&lt;br/&gt;<span class="hljs-number">4</span>. 获取工程路径：$&#123;pageContext.request.contextPath&#125;&lt;br/&gt;<span class="hljs-number">5</span>. 获取请求方法：$&#123;pageContext.request.method&#125;&lt;br/&gt;<span class="hljs-number">6</span>. 获取客户端ip 地址：$&#123;pageContext.request.remoteHost&#125;&lt;br/&gt;<span class="hljs-number">7</span>. 获取会话的id 编号：$&#123;pageContext.session.id&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><p>EL表达式是为了替换jsp中的表达式，而标签库是为了替换jsp中的代码脚本。<br><img src="/2020/04/12/javaweb-04/2.png" srcset="/img/loading.gif" alt></p><p>在jsp 标签库中使用taglib 指令引入标签库</p><pre><code class="hljs jsp">CORE 标签库&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;FMT 标签库&lt;%@ taglib prefix=<span class="hljs-string">"fmt"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;FUNCTIONS 标签库&lt;%@ taglib prefix=<span class="hljs-string">"fn"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</code></pre><h3 id="core核心库使用"><a href="#core核心库使用" class="headerlink" title="core核心库使用"></a>core核心库使用</h3><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.HashMap"</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.Map"</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"bean.Student"</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.List"</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.reflect.Array"</span> %&gt;&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.ArrayList"</span> %&gt;&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%-- <span class="hljs-keyword">if</span>判断 --%&gt;&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;1==1&#125;"</span>&gt;    &lt;h1&gt;1==1&lt;/h1&gt;&lt;/c:if&gt;&lt;%-- 多路判断--%&gt;&lt;c:choose&gt;    &lt;c:when test=""&gt;&lt;/c:when&gt;    &lt;c:when test=""&gt;&lt;/c:when&gt;    &lt;c:otherwise&gt;&lt;/c:otherwise&gt;&lt;/c:choose&gt;&lt;%-- foreach遍历输出--%&gt;&lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"10"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;    $&#123;i&#125;&lt;br/&gt;&lt;/c:forEach&gt;&lt;%--遍历数组--%&gt;&lt;%    request.setAttribute(<span class="hljs-string">"arr"</span>,<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"Troye"</span>&#125;);%&gt;&lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.arr&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"item"</span>&gt;    $&#123;item&#125;&lt;br/&gt;&lt;/c:forEach&gt;&lt;%-- 遍历Map--%&gt;&lt;%    Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();    map.put(<span class="hljs-string">"key1"</span>,<span class="hljs-string">"value1"</span>);    map.put(<span class="hljs-string">"key2"</span>,<span class="hljs-string">"value2"</span>);    map.put(<span class="hljs-string">"key3"</span>,<span class="hljs-string">"value3"</span>);<span class="hljs-comment">//    for(Map.Entry&lt;String,String&gt; entry:map.entrySet())&#123;</span><span class="hljs-comment">//</span><span class="hljs-comment">//    &#125;</span>    request.setAttribute(<span class="hljs-string">"map"</span>,map);%&gt;&lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.map&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"entry"</span>&gt;    键：$&#123;entry.key&#125;    值：$&#123;entry.value&#125;    &lt;br/&gt;&lt;/c:forEach&gt;&lt;%-- 遍历List--%&gt;&lt;%    List&lt;Student&gt; stuList = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;        stuList.add(<span class="hljs-keyword">new</span> Student(i,<span class="hljs-string">"username"</span>+i,<span class="hljs-string">"password"</span>+i, <span class="hljs-number">18</span>+i));    &#125;    request.setAttribute(<span class="hljs-string">"students"</span>,stuList);%&gt;&lt;table width=<span class="hljs-string">"500px"</span> border=<span class="hljs-string">"1px solid black"</span> cellspacing=<span class="hljs-string">"0"</span>&gt;    &lt;tr&gt;        &lt;th&gt;编号&lt;/th&gt;        &lt;th&gt;用户名&lt;/th&gt;        &lt;th&gt;密码&lt;/th&gt;        &lt;th&gt;年龄&lt;/th&gt;        &lt;th&gt;状态信息&lt;/th&gt;    &lt;/tr&gt;&lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.students&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"stu"</span> varStatus=<span class="hljs-string">"status"</span>&gt;    &lt;tr&gt;        &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;        &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;        &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;        &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;        &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;    &lt;/tr&gt;&lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp,Listener监听器</title>
    <link href="/2020/04/11/javaweb-03/"/>
    <url>/2020/04/11/javaweb-03/</url>
    
    <content type="html"><![CDATA[<h2 id="jsp定义"><a href="#jsp定义" class="headerlink" title="jsp定义"></a>jsp定义</h2><p>jsp全称为 java server page，用来代替servlet程序回传html页面的数据。</p><p><strong>jsp页面的本质就是一个Servlet程序</strong>，在第一次访问jsp页面时，Tomcat服务器就会把jsp页面翻译成一个java源程序，并对它进行编译成.class字节码文件。<a id="more"></a></p><h2 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h2><h3 id="jsp头部的page指令"><a href="#jsp头部的page指令" class="headerlink" title="jsp头部的page指令"></a>jsp头部的page指令</h3><p>jsp 的page 指令可以修改jsp 页面中一些重要的属性，或者行为。</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;</code></pre><p>i. language 属性表示jsp 翻译后是什么语言文件。暂时只支持java。<br>ii. contentType 属性表示jsp 返回的数据类型是什么。也是源码中response.setContentType()参数值<br>iii. pageEncoding 属性表示当前jsp 页面文件本身的字符集。<br>iv. import 属性跟java 源代码中一样。用于导包，导类。<br>v. autoFlush 属性设置当out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是true。<br>vi. buffer 属性设置out 缓冲区的大小。默认是8kb<br>vii. errorPage 属性设置当jsp 页面运行时出错，自动跳转去的错误页面路径。</p><h3 id="jsp中的常用脚本"><a href="#jsp中的常用脚本" class="headerlink" title="jsp中的常用脚本"></a>jsp中的常用脚本</h3><p>1、声明脚本<br>作用：可以给jsp 翻译出来的java 类定义属性和方法甚至是静态代码块，内部类等。<br>格式：<code>&lt;%!  java代码%&gt;</code></p><p>2、表达式脚本<br>作用：在jsp页面上输出数据<br>格式：<code>&lt;%= 表达式 %&gt;</code></p><p>3、代码脚本<br>作用：可以在jsp页面中，编写我们需要的功能(java代码)<br>格式：<code>&lt;% java代码 %&gt;</code></p><h2 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h2><p>jsp在翻译成servlet代码后内部提供的九个对象。<br>request&nbsp;&nbsp;&nbsp;请求对象<br>response&nbsp;&nbsp;&nbsp;响应对象<br>pageContext&nbsp;&nbsp;&nbsp;jsp上下文对象<br>session&nbsp;&nbsp;&nbsp;会话对象<br>application&nbsp;&nbsp;&nbsp;ServletContext对象<br>config&nbsp;&nbsp;&nbsp;ServletConfig对象<br>page&nbsp;&nbsp;&nbsp;当前的jsp对象<br>exception&nbsp;&nbsp;&nbsp;异常对象<br>out 向客户端输出内容常用的对象</p><p><strong>四个域对象：</strong><br>page&nbsp;&nbsp;&nbsp;&nbsp;(PageContextImpl类)&nbsp;&nbsp;&nbsp;&nbsp;当前的jsp页面有效<br>request&nbsp;&nbsp;&nbsp;&nbsp;(HttpServletRequest类)&nbsp;&nbsp;&nbsp;&nbsp;一次请求有效<br>session&nbsp;&nbsp;&nbsp;&nbsp;(HttpSession类)&nbsp;&nbsp;&nbsp;&nbsp;一次会话范围内有效(打开浏览器访问服务器，直到关闭浏览器)<br>application&nbsp;&nbsp;&nbsp;&nbsp;(ServletContext类)&nbsp;&nbsp;&nbsp;&nbsp;整个web工程范围内都有效(只要web工程不停止，数据一直都在)<br>域对象是可以像Map一样存取数据的对象。四个域对象的功能一样，不同的是它们对数据的存取范围。</p><p><strong>jsp中的out输出与response.getWriter()输出的区别：</strong><br><img src="/2020/04/11/javaweb-03/1.png" srcset="/img/loading.gif" alt></p><p><font color="red">统一使用out.print()输出</font></p><h2 id="jsp常用标签"><a href="#jsp常用标签" class="headerlink" title="jsp常用标签"></a>jsp常用标签</h2><h3 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h3><p>格式：<code>&lt;%@ include file=&quot;/&quot;%&gt;</code><br>file属性指定要包含的页面路径<br>静态包含的特点：<br>1、静态包含不会翻译被包含的jsp 页面。<br>2、静态包含其实是把被包含的jsp 页面的代码拷贝到包含的位置执行输出。</p><h3 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h3><p>格式：<code>&lt;jsp:include page=&quot;/&quot;&gt;&lt;/jsp:include&gt;</code><br>动态包含特点：<br>1、动态包含会把包含的jsp页面也翻译成java代码。<br>2、通过调用被包含的jsp页面进行输出。<br>3、动态包含可以传递参数。</p><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>格式：<code>&lt;jsp:forward page=&quot;/&quot;&gt;&lt;/jsp:forward&gt;</code></p><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><p>1、Listener 监听器是javaweb三大组件之一(Servlet程序，Filter过滤器，Listener监听器)。<br>2、Listener是javaEE接口规范，就是接口。<br>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。ServletContextListener 它可以监听ServletContext 对象的创建和销毁。<br>ServletContext 对象在web 工程启动的时候创建，在web 工程停止的时候销毁。<br>监听到创建和销毁之后都会分别调用ServletContextListener 监听器的方法反馈。</p><p>使用ServletContextListener 监听器监听ServletContext 对象步骤如下：<br>1、编写一个类去实现ServletContextListener<br>2、实现其两个回调方法<br>3、到web.xml 中去配置监听器</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> listener;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextListenerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;        System.out.println(<span class="hljs-string">"创建ServletContext"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;        System.out.println(<span class="hljs-string">"销毁ServletContext"</span>);    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>listener.ServletContextListenerImpl<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书城项目</title>
    <link href="/2020/04/08/javaweb-02/"/>
    <url>/2020/04/08/javaweb-02/</url>
    
    <content type="html"><![CDATA[<h2 id="一、创建项目所需要的包"><a href="#一、创建项目所需要的包" class="headerlink" title="一、创建项目所需要的包"></a>一、创建项目所需要的包</h2><p>各个层所对应的包名：<a id="more"></a><br>web层：<br>com.bookmall.web/servlet/controller<br>service层：<br>com.bookmall.service&nbsp;&nbsp;&nbsp;Service接口包<br>com.bookmall.service.impl&nbsp;&nbsp;&nbsp;Service接口实现类<br>dao层：<br>com.bookmall.dao&nbsp;&nbsp;&nbsp;Dao接口包<br>com.bookmall.dao.impl&nbsp;&nbsp;&nbsp;Dao接口实现类<br>实体bean对象：<br>com.bookmall.pojo/entity/domain/bean&nbsp;&nbsp;&nbsp;JavaBean类<br>测试包：<br>com.bookmall.test/junit<br>工具包：<br>com.bookmall.utils<br><img src="/2020/04/08/javaweb-02/1.png" srcset="/img/loading.gif" alt></p><h2 id="二、创建需要的数据库和表"><a href="#二、创建需要的数据库和表" class="headerlink" title="二、创建需要的数据库和表"></a>二、创建需要的数据库和表</h2><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> bookmall;<span class="hljs-keyword">USE</span> bookmall;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> userinfo( <span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> auto_increment, <span class="hljs-string">`username`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>, <span class="hljs-string">`password`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`email`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">40</span>));<span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> userinfo(<span class="hljs-string">`username`</span>,<span class="hljs-string">`password`</span>,<span class="hljs-string">`email`</span>)<span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'admin'</span>,<span class="hljs-string">'123456'</span>,<span class="hljs-string">'admin@qq.com'</span>);<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> userinfo;</code></pre><h2 id="三、编写数据库表对应的-JavaBean-对象"><a href="#三、编写数据库表对应的-JavaBean-对象" class="headerlink" title="三、编写数据库表对应的 JavaBean 对象"></a>三、编写数据库表对应的 JavaBean 对象</h2><p>在com.bookmall.bean包下创建User类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.bean;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String username, String password, String email)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.username = username;        <span class="hljs-keyword">this</span>.password = password;        <span class="hljs-keyword">this</span>.email = email;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> username;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;        <span class="hljs-keyword">this</span>.username = username;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> password;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;        <span class="hljs-keyword">this</span>.password = password;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> email;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;        <span class="hljs-keyword">this</span>.email = email;    &#125;         <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"User&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", username='"</span> + username + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", password='"</span> + password + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", email='"</span> + email + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><h2 id="四、编写工具类JdbcUtils并测试"><a href="#四、编写工具类JdbcUtils并测试" class="headerlink" title="四、编写工具类JdbcUtils并测试"></a>四、编写工具类JdbcUtils并测试</h2><p>1.首先导入所需要的jar包：<br><img src="/2020/04/08/javaweb-02/2.png" srcset="/img/loading.gif" alt></p><p>2.在src目录下创建jdbc.properties 配置文件：</p><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">2824199842</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/bookmall?serverTimezone=Asia/Shanghai</span><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span></code></pre><p>3.在com.bookmall.utils下创建 JdbcUtils 类：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.utils;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;    <span class="hljs-keyword">static</span>&#123;        Properties properties = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            properties = <span class="hljs-keyword">new</span> Properties();            <span class="hljs-comment">// 创建输入流 读取jdbc.properties属性配置文件</span>            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream("jdbc.properties");            <span class="hljs-comment">// 从流中加载数据</span>            properties.load(inputStream);            <span class="hljs-comment">// 创建数据库连接池</span>            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取数据库连接池中的连接</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回连接  否则返回null</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;        Connection conn = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            conn = dataSource.getConnection();        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> conn;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 关闭连接，放回数据库连接池</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn)</span></span>&#123;        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                conn.close();            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><p>4.在com.bookmall.test包下创建JdbcUtilsTest类，测试是否连接成功：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtilsTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testJdbcUtils</span><span class="hljs-params">()</span> </span>&#123;        Connection conn = JdbcUtils.getConnection();        System.out.println(conn);        JdbcUtils.close(conn);    &#125;&#125;</code></pre><h2 id="五、编写BaseDao"><a href="#五、编写BaseDao" class="headerlink" title="五、编写BaseDao"></a>五、编写BaseDao</h2><p>1.导入DBUtils 的jar包：<br><img src="/2020/04/08/javaweb-02/4.png" srcset="/img/loading.gif" alt></p><p>2.在com.bookmall.dao.impl包下创建BaseDao抽象类：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.dao.impl;<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>&#123;    <span class="hljs-comment">// 使用dbutils操作数据库</span>    <span class="hljs-keyword">private</span> QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行增删改方法</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 要执行的sql语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 要填充的占位符</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回受影响的行数，否则执行失败，返回-1</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql,Object ... args)</span></span>&#123;        Connection conn = JdbcUtils.getConnection();        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> queryRunner.update(conn,sql,args);        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            JdbcUtils.close(conn);        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行返回一条结果的查询语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 要执行的sql语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 要填充的占位符</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回一个指定类型的对象，否则执行失败，返回null</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object ... args)</span></span>&#123;        Connection conn = JdbcUtils.getConnection();        <span class="hljs-comment">// BeanHandler是ResultSetHandler接口的一个实现类，用于封装表中的一条记录</span>        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> queryRunner.query(conn,sql,<span class="hljs-keyword">new</span> BeanHandler&lt;T&gt;(type),args);        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            JdbcUtils.close(conn);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行返回多条结果的查询语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 要执行的sql语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 要填充的占位符</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回一个指定类型的对象的列表，否则执行失败，返回null</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type, String sql, Object ... args)</span></span>&#123;        Connection conn = JdbcUtils.getConnection();        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> queryRunner.query(conn,sql,<span class="hljs-keyword">new</span> BeanListHandler&lt;T&gt;(type),args);        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            JdbcUtils.close(conn);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行返回特殊值（一行一列）的查询</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 要执行的sql语句</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 要填充的占位符</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回一个值，否则执行失败，返回null</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">queryForSingleValue</span><span class="hljs-params">(String sql, Object ... args)</span></span>&#123;        Connection conn = JdbcUtils.getConnection();        <span class="hljs-comment">// ScalarHandler将单个值封装</span>        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> queryRunner.query(conn,sql,<span class="hljs-keyword">new</span> ScalarHandler(),args);        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span>&#123;            JdbcUtils.close(conn);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h2 id="六、编写UserDao接口并测试"><a href="#六、编写UserDao接口并测试" class="headerlink" title="六、编写UserDao接口并测试"></a>六、编写UserDao接口并测试</h2><p>1.在com.bookmall.dao包下编写UserDao 接口</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据用户名查询用户信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回User对象，否则返回null</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserByUsername</span><span class="hljs-params">(String username)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 保存用户信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user User对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功，返回受影响的行数，否则返回-1</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *根据用户名和密码查询用户信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行成功返回User对象，否则返回null说明用户名或密码错误</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username,String password)</span></span>;&#125;</code></pre><p>2.在com.bookmall.dao包下编写UserDao接口实现类UserDaoImpl</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.book.dao.impl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserByUsername</span><span class="hljs-params">(String username)</span> </span>&#123;        String sql = <span class="hljs-string">"select `id`,`username`,`password`,`email` from userinfo where username = ?"</span>;        <span class="hljs-keyword">return</span> queryForOne(User<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">sql</span>, <span class="hljs-title">username</span>)</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(User user)</span> </span>&#123;        String sql = <span class="hljs-string">"insert into userinfo(`username`,`password`,`email`)value(?,?,?)"</span>;        <span class="hljs-keyword">return</span> update(sql, user.getUsername(), user.getPassword(), user.getEmail());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span> </span>&#123;        String sql = <span class="hljs-string">"select `id`,`username`,`password`,`email` from userInfo where username = ? and password = ?"</span>;        <span class="hljs-keyword">return</span> queryForOne(User<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">sql</span>, <span class="hljs-title">username</span>, <span class="hljs-title">password</span>)</span>;    &#125;&#125;</code></pre><p>3.在com.bookmall.test包下创建UserDaoImplTest测试类(UserDaoImpl类下按ctrl+shift+t快速创建测试类)，测试UserDaoImpl类中的方法。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImplTest</span> </span>&#123;    UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserByUsername</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span>(userDao.queryUserByUsername(<span class="hljs-string">"admin"</span>)!=<span class="hljs-keyword">null</span>)&#123;            System.out.println(<span class="hljs-string">"用户名可用"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;        System.out.println(<span class="hljs-string">"用户名已存在"</span>);        &#125;    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(userDao.saveUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,<span class="hljs-string">"大司马"</span>,<span class="hljs-string">"123456"</span>,<span class="hljs-string">"dsm@qq.com"</span>)));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserByUsernameAndPassword</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span>(userDao.queryUserByUsernameAndPassword(<span class="hljs-string">"admin"</span>,<span class="hljs-string">"123456"</span>) == <span class="hljs-keyword">null</span>)&#123;            System.out.println(<span class="hljs-string">"用户名或密码错误，登录失败！"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;        System.out.println(<span class="hljs-string">"登录成功！"</span>);        &#125;    &#125;&#125;</code></pre><h2 id="七、编写UserService并测试"><a href="#七、编写UserService并测试" class="headerlink" title="七、编写UserService并测试"></a>七、编写UserService并测试</h2><p>1.在com.bookmall.service包下创建UserService接口</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 用户注册</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 用户登录</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 检查用户名是否可用</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true，表示用户已存在，否则返回false</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">existUsername</span><span class="hljs-params">(String username)</span></span>;&#125;</code></pre><p>2.在com.bookmall.service.impl创建UserService接口实现类UserServiceImpl</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.service.impl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registUser</span><span class="hljs-params">(User user)</span> </span>&#123;        userDao.saveUser(user);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(User user)</span> </span>&#123;        <span class="hljs-keyword">return</span> userDao.queryUserByUsernameAndPassword(user.getUsername(),user.getPassword());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">existUsername</span><span class="hljs-params">(String username)</span> </span>&#123;        <span class="hljs-keyword">if</span>(userDao.queryUserByUsername(username)==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-comment">// 为null表示不存在，表示可以使用</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><p>3.在com.bookmall.test包下创建测试类UserServiceImplTest，测试UserServiceImpl中的方法</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImplTest</span> </span>&#123;    UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registUser</span><span class="hljs-params">()</span> </span>&#123;        userService.registUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,<span class="hljs-string">"张伟"</span>,<span class="hljs-string">"123456"</span>,<span class="hljs-string">"zw@126.com"</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(userService.login(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,<span class="hljs-string">"zyz"</span>,<span class="hljs-string">"123456"</span>,<span class="hljs-keyword">null</span>)));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">existUsername</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(userService.existUsername(<span class="hljs-string">"zyz"</span>));<span class="hljs-comment">// ture</span>    &#125;&#125;</code></pre><h2 id="八、编写Web层"><a href="#八、编写Web层" class="headerlink" title="八、编写Web层"></a>八、编写Web层</h2><h3 id="1-实现注册功能"><a href="#1-实现注册功能" class="headerlink" title="1.实现注册功能"></a>1.实现注册功能</h3><p>在com.bookmall.web中创建RegistServlet类<br>在web.xml文件中配置文件路径</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegistServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bookmall.web.RegistServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegistServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/registServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.web;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegistServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        String email = req.getParameter(<span class="hljs-string">"email"</span>);        String code = req.getParameter(<span class="hljs-string">"code"</span>);        <span class="hljs-comment">// 2.检查验证码是否正确====先写死为qwer</span>        <span class="hljs-keyword">if</span>(<span class="hljs-string">"qwer"</span>.equalsIgnoreCase(code))&#123;            <span class="hljs-comment">// 验证码正确</span>            <span class="hljs-comment">// 3.检查用户名是否可用</span>            <span class="hljs-keyword">if</span>(userService.existUsername(username))&#123;                <span class="hljs-comment">// true 用户名已存在</span>                System.out.println(<span class="hljs-string">"用户名["</span>+username+<span class="hljs-string">"]已存在！"</span>);                <span class="hljs-comment">// 跳转到首页</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.html"</span>).forward(req,resp);            &#125; <span class="hljs-keyword">else</span>&#123;                <span class="hljs-comment">// false 用户名不存在  可以注册</span>                userService.registUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,username,password,email));                <span class="hljs-comment">// 跳转到注册成功页面</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist_success.html"</span>).forward(req,resp);            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 验证码错误</span>            System.out.println(<span class="hljs-string">"验证码["</span>+code+<span class="hljs-string">"]错误！"</span>);            <span class="hljs-comment">// 跳转到首页</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.html"</span>).forward(req,resp);        &#125;    &#125;&#125;</code></pre><h3 id="2-实现登录功能"><a href="#2-实现登录功能" class="headerlink" title="2.实现登录功能"></a>2.实现登录功能</h3><p>在com.bookmall.web中创建LogintServlet类<br>在web.xml文件中配置文件路径</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bookmall.web.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/loginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.web;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        User loginUser = userService.login(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,username, password, <span class="hljs-keyword">null</span>));        <span class="hljs-keyword">if</span>(loginUser==<span class="hljs-keyword">null</span>)&#123;                System.out.println(<span class="hljs-string">"登录失败！"</span>);                <span class="hljs-comment">// 跳转到首页</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login.html"</span>).forward(req,resp);        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">"登录成功！"</span>);                <span class="hljs-comment">// 跳转到登录成功页面</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login_success.html"</span>).forward(req,resp);        &#125;    &#125;&#125;</code></pre><h2 id="九、优化代码"><a href="#九、优化代码" class="headerlink" title="九、优化代码"></a>九、优化代码</h2><h3 id="1-将多个页面中重复的代码抽取出来："><a href="#1-将多个页面中重复的代码抽取出来：" class="headerlink" title="1.将多个页面中重复的代码抽取出来："></a>1.将多个页面中重复的代码抽取出来：</h3><p><strong>写入单独的jsp文件中</strong><br><img src="/2020/04/08/javaweb-02/5.png" srcset="/img/loading.gif" alt></p><p>footer.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;div id=<span class="hljs-string">"bottom"</span>&gt;      &lt;span&gt;         尚硅谷书城.Copyright &amp;copy;<span class="hljs-number">2015</span>      &lt;/span&gt;&lt;/div&gt;</code></pre><p>header.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;% String basePath = request.getContextPath()+<span class="hljs-string">"/"</span>;%&gt;&lt;!-- base标签永远固定相对路径跳转  --&gt;&lt;base href=<span class="hljs-string">"&lt;%=basePath%&gt;"</span>&gt;&lt;link type=<span class="hljs-string">"text/css"</span> rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"static/css/style.css"</span>&gt;&lt;script type="text/javascript" src="static/script/jquery-3.4.1.js"&gt;&lt;/script&gt;</code></pre><p>login_success_menu.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;div&gt;    &lt;span&gt;欢迎&lt;span class="um_span"&gt;张总&lt;/span&gt;光临尚硅谷书城&lt;/span&gt;    &lt;a href="pages/order/order.jsp"&gt;我的订单&lt;/a&gt;    &lt;a href="index.jsp"&gt;注销&lt;/a&gt;&amp;nbsp;&amp;nbsp;    &lt;a href="index.jsp"&gt;返回&lt;/a&gt;&lt;/div&gt;</code></pre><p>manage_menu.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;div&gt;    &lt;a href="book_manager"&gt;图书管理&lt;/a&gt;    &lt;a href="order_manager"&gt;订单管理&lt;/a&gt;    &lt;a href="index.jsp"&gt;返回商城&lt;/a&gt;&lt;/div&gt;</code></pre><p><strong>采用静态包含的方式替换重复的代码：</strong></p><pre><code class="hljs jsp"> &lt;%-- 静态包含 页脚内容--%&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/footer.jsp"</span>%&gt;</code></pre><pre><code class="hljs jsp">&lt;%-- 静态包含 base标签、css样式、jquery文件--%&gt;   &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/head.jsp"</span>%&gt;</code></pre><pre><code class="hljs jsp"> &lt;%-- 静态包含 成功之后的菜单--%&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/login_sucess_menu.jsp"</span>%</code></pre><pre><code class="hljs jsp"> &lt;%-- 静态包含 管理菜单--%&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/manage_menu.jsp"</span>%&gt;</code></pre><h3 id="2-登录、注册错误提示以及表单回显"><a href="#2-登录、注册错误提示以及表单回显" class="headerlink" title="2.登录、注册错误提示以及表单回显"></a>2.登录、注册错误提示以及表单回显</h3><p>LoginServlet.java</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        User loginUser = userService.login(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, username, password, <span class="hljs-keyword">null</span>));        <span class="hljs-keyword">if</span> (loginUser == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-comment">// System.out.println("登录失败！");</span>            <span class="hljs-comment">// 将要回显的错误信息保存到request域中</span>            req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名或密码错误！"</span>);            req.setAttribute(<span class="hljs-string">"username"</span>,username);            <span class="hljs-comment">// 跳转到首页</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login.jsp"</span>).forward(req, resp);        &#125; <span class="hljs-keyword">else</span> &#123;            System.out.println(<span class="hljs-string">"登录成功！"</span>);            <span class="hljs-comment">// 跳转到登录成功页面</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login_success.jsp"</span>).forward(req, resp);        &#125;    &#125;&#125;</code></pre><p>login.jsp</p><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"msg_cont"</span>&gt;   &lt;b&gt;&lt;/b&gt;   &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"errorMsg"</span>&gt;      &lt;%=         request.getAttribute(<span class="hljs-string">"msg"</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">"请输入用户名和密码"</span>:request.getAttribute(<span class="hljs-string">"msg"</span>)      %&gt;   &lt;/span&gt;&lt;/div&gt;</code></pre><pre><code class="hljs jsp">&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"itxt"</span> type=<span class="hljs-string">"text"</span> placeholder=<span class="hljs-string">"请输入用户名"</span>      autocomplete=<span class="hljs-string">"off"</span> tabindex=<span class="hljs-string">"1"</span> name=<span class="hljs-string">"username"</span>      value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>username<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>username<span class="hljs-string">")%&gt;"</span>/&gt;</code></pre><p>RegistServlet.java</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegistServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        String email = req.getParameter(<span class="hljs-string">"email"</span>);        String code = req.getParameter(<span class="hljs-string">"code"</span>);        <span class="hljs-comment">// 2.检查验证码是否正确====先写死为qwer</span>        <span class="hljs-keyword">if</span>(<span class="hljs-string">"qwer"</span>.equalsIgnoreCase(code))&#123;            <span class="hljs-comment">// 验证码正确</span>            <span class="hljs-comment">// 3.检查用户名是否可用</span>            <span class="hljs-keyword">if</span>(userService.existUsername(username))&#123;                <span class="hljs-comment">// true 用户名已存在</span>                <span class="hljs-comment">// System.out.println("用户名["+username+"]已存在！");</span>                <span class="hljs-comment">// 把回显信息保存到request域中</span>                req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名已存在！"</span>);                req.setAttribute(<span class="hljs-string">"username"</span>,username);                req.setAttribute(<span class="hljs-string">"email"</span>,email);                <span class="hljs-comment">// 跳转到首页</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.jsp"</span>).forward(req,resp);            &#125; <span class="hljs-keyword">else</span>&#123;                <span class="hljs-comment">// false 用户名不存在  可以注册</span>                userService.registUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>,username,password,email));                <span class="hljs-comment">// 跳转到注册成功页面</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist_success.jsp"</span>).forward(req,resp);            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 验证码错误</span>            <span class="hljs-comment">// System.out.println("验证码["+code+"]错误！");</span>            <span class="hljs-comment">// 把错误信息和回显信息保存到request域中</span>            req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"验证码错误！"</span>);            req.setAttribute(<span class="hljs-string">"username"</span>,username);            req.setAttribute(<span class="hljs-string">"email"</span>,email);            <span class="hljs-comment">// 跳转到首页</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.jsp"</span>).forward(req,resp);        &#125;    &#125;&#125;</code></pre><p>regist.jsp</p><pre><code class="hljs jsp">&lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"errorMsg"</span>&gt;    &lt;%=request.getAttribute(<span class="hljs-string">"msg"</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">""</span>:request.getAttribute(<span class="hljs-string">"msg"</span>)%&gt;&lt;/span&gt;</code></pre><pre><code class="hljs jsp">&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"itxt"</span> type=<span class="hljs-string">"text"</span> placeholder=<span class="hljs-string">"请输入用户名"</span>       autocomplete=<span class="hljs-string">"off"</span> tabindex=<span class="hljs-string">"1"</span>       name=<span class="hljs-string">"username"</span> id=<span class="hljs-string">"username"</span>       value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>username<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>username<span class="hljs-string">")%&gt;"</span>/&gt;</code></pre><pre><code class="hljs jsp">&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"itxt"</span> type=<span class="hljs-string">"text"</span> placeholder=<span class="hljs-string">"请输入邮箱地址"</span> autocomplete=<span class="hljs-string">"off"</span> tabindex=<span class="hljs-string">"1"</span>       name=<span class="hljs-string">"email"</span> id=<span class="hljs-string">"email"</span>       value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>email<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>email<span class="hljs-string">")%&gt;"</span>/&gt;</code></pre><h3 id="3-将LoginServlet和RegistServlet合并为UserServlet"><a href="#3-将LoginServlet和RegistServlet合并为UserServlet" class="headerlink" title="3.将LoginServlet和RegistServlet合并为UserServlet"></a>3.将LoginServlet和RegistServlet合并为UserServlet</h3><p><img src="/2020/04/08/javaweb-02/6.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取请求类型</span>        String action = req.getParameter(<span class="hljs-string">"action"</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-string">"login"</span>.equals(action)) &#123;            login(req, resp);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"regist"</span>.equals(action)) &#123;            regist(req, resp);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理登录的功能</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        User loginUser = userService.login(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, username, password, <span class="hljs-keyword">null</span>));        <span class="hljs-keyword">if</span> (loginUser == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-comment">// System.out.println("登录失败！");</span>            <span class="hljs-comment">// 将要回显的错误信息保存到request域中</span>            req.setAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名或密码错误！"</span>);            req.setAttribute(<span class="hljs-string">"username"</span>, username);            <span class="hljs-comment">// 跳转到首页</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login.jsp"</span>).forward(req, resp);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// System.out.println("登录成功！");</span>            <span class="hljs-comment">// 跳转到登录成功页面</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/login_success.jsp"</span>).forward(req, resp);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理注册的功能</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">regist</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取请求参数</span>        String username = req.getParameter(<span class="hljs-string">"username"</span>);        String password = req.getParameter(<span class="hljs-string">"password"</span>);        String email = req.getParameter(<span class="hljs-string">"email"</span>);        String code = req.getParameter(<span class="hljs-string">"code"</span>);        <span class="hljs-comment">// 2.检查验证码是否正确====先写死为qwer</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">"qwer"</span>.equalsIgnoreCase(code)) &#123;            <span class="hljs-comment">// 验证码正确</span>            <span class="hljs-comment">// 3.检查用户名是否可用</span>            <span class="hljs-keyword">if</span> (userService.existUsername(username)) &#123;                <span class="hljs-comment">// true 用户名已存在</span>                <span class="hljs-comment">// System.out.println("用户名["+username+"]已存在！");</span>                <span class="hljs-comment">// 把回显信息保存到request域中</span>                req.setAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名已存在！"</span>);                req.setAttribute(<span class="hljs-string">"username"</span>, username);                req.setAttribute(<span class="hljs-string">"email"</span>, email);                <span class="hljs-comment">// 跳转到首页</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.jsp"</span>).forward(req, resp);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// false 用户名不存在  可以注册</span>                userService.registUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, username, password, email));                <span class="hljs-comment">// 跳转到注册成功页面</span>                req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist_success.jsp"</span>).forward(req, resp);            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 验证码错误</span>            <span class="hljs-comment">// System.out.println("验证码["+code+"]错误！");</span>            <span class="hljs-comment">// 把错误信息和回显信息保存到request域中</span>            req.setAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"验证码错误！"</span>);            req.setAttribute(<span class="hljs-string">"username"</span>, username);            req.setAttribute(<span class="hljs-string">"email"</span>, email);            <span class="hljs-comment">// 跳转到首页</span>            req.getRequestDispatcher(<span class="hljs-string">"/pages/user/regist.jsp"</span>).forward(req, resp);        &#125;    &#125;&#125;</code></pre><p>login.jsp<br><img src="/2020/04/08/javaweb-02/7.png" srcset="/img/loading.gif" alt></p><p>regist.jsp<br><img src="/2020/04/08/javaweb-02/8.png" srcset="/img/loading.gif" alt></p><h3 id="4-使用反射优化大量else-if-代码"><a href="#4-使用反射优化大量else-if-代码" class="headerlink" title="4.使用反射优化大量else if 代码"></a>4.使用反射优化大量else if 代码</h3><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 通过反射根据action属性值调用相应的方法</span>    String action = req.getParameter(<span class="hljs-string">"action"</span>);    <span class="hljs-keyword">try</span> &#123;        Method method = UserServlet<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getDeclaredMethod</span>(<span class="hljs-title">action</span>, <span class="hljs-title">HttpServletRequest</span>.<span class="hljs-title">class</span>, <span class="hljs-title">HttpServletResponse</span>.<span class="hljs-title">class</span>)</span>;        method.invoke(<span class="hljs-keyword">this</span>,req, resp);    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        e.printStackTrace();    &#125;&#125;</code></pre><h3 id="5-抽取BaseServlet"><a href="#5-抽取BaseServlet" class="headerlink" title="5.抽取BaseServlet"></a>5.抽取BaseServlet</h3><p><img src="/2020/04/08/javaweb-02/10.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.web;<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);        doPost(req, resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        req.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);        <span class="hljs-comment">// 获取请求类型</span>        String action = req.getParameter(<span class="hljs-string">"action"</span>);        <span class="hljs-comment">// System.out.println(action);</span>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 通过反射根据action属性值调用相应的方法</span>            Method method = <span class="hljs-keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">HttpServletResponse</span>.<span class="hljs-title">class</span>)</span>;            method.invoke(<span class="hljs-keyword">this</span>, req, resp);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.web;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// ......</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">regist</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// ......</span>    &#125;&#125;</code></pre><h3 id="6-数据的封装和抽取-BeanUtils的使用"><a href="#6-数据的封装和抽取-BeanUtils的使用" class="headerlink" title="6.数据的封装和抽取 BeanUtils的使用"></a>6.数据的封装和抽取 BeanUtils的使用</h3><p>BeanUtils工具类，可以一次性的把所有请求的参数注入导JavaBean中<br>1、导入需要的jar 包：<br>commons-beanutils-1.8.0.jar<br>commons-logging-1.1.1jar<br>2、使用BeanUtils类方法实现注入</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.utils;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebUtils</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">copyParamToBean</span><span class="hljs-params">(Map map, T bean)</span></span>&#123;        <span class="hljs-comment">// 将所有请求的参数封装到bean中</span>        <span class="hljs-keyword">try</span> &#123;            BeanUtils.populate(bean,map);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> bean;    &#125;&#125;</code></pre><p>UserServlet.java</p><pre><code class="hljs java"><span class="hljs-comment">// 将请求参数一次性封装到user对象中</span>User user = WebUtils.copyParamToBean(req.getParameterMap(),<span class="hljs-keyword">new</span> User());</code></pre><h3 id="7-使用EL表达式修改表单回显"><a href="#7-使用EL表达式修改表单回显" class="headerlink" title="7.使用EL表达式修改表单回显"></a>7.使用EL表达式修改表单回显</h3><p>login.jsp</p><pre><code class="hljs jsp">&lt;%--    &lt;%= request.getAttribute(<span class="hljs-string">"msg"</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">"请输入用户名和密码"</span>:request.getAttribute(<span class="hljs-string">"msg"</span>)%&gt;--%&gt;$&#123;empty requestScope.msg ? <span class="hljs-string">"请输入用户名和密码"</span>:requestScope.msg&#125;</code></pre><pre><code class="hljs jsp">&lt;%--    value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>username<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>username<span class="hljs-string">")%&gt;"</span>--%&gt;value=<span class="hljs-string">"$&#123;requestScope.username&#125;"</span></code></pre><p>regist.jsp</p><pre><code class="hljs jsp">&lt;%--    &lt;%=request.getAttribute(<span class="hljs-string">"msg"</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">""</span>:request.getAttribute(<span class="hljs-string">"msg"</span>)%&gt;--%&gt;$&#123;requestScope.msg&#125;</code></pre><pre><code class="hljs jsp">&lt;%--    value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>username<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>username<span class="hljs-string">")%&gt;"</span>--%&gt;$&#123;requestScope.username&#125;</code></pre><pre><code class="hljs jsp">&lt;%--    value=<span class="hljs-string">"&lt;%=request.getAttribute("</span>email<span class="hljs-string">")==null?"</span><span class="hljs-string">":request.getAttribute("</span>email<span class="hljs-string">")%&gt;"</span>--%&gt;$&#123;requestScope.email&#125;</code></pre><h2 id="十、图书模块"><a href="#十、图书模块" class="headerlink" title="十、图书模块"></a>十、图书模块</h2><h3 id="1-创建图书模块的数据库表"><a href="#1-创建图书模块的数据库表" class="headerlink" title="1.创建图书模块的数据库表"></a>1.创建图书模块的数据库表</h3><pre><code class="hljs sql"><span class="hljs-keyword">USE</span> bookmall;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book(<span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> auto_increment,<span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`price`</span> <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`author`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`sales`</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`stock`</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`img_path`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>);<span class="hljs-comment"># drop table book;</span><span class="hljs-comment">## 插入初始化测试数据</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'java从入门到放弃'</span> , <span class="hljs-string">'国哥'</span> , <span class="hljs-number">80</span> , <span class="hljs-number">9999</span> , <span class="hljs-number">9</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'数据结构与算法'</span> , <span class="hljs-string">'严敏君'</span> , <span class="hljs-number">78.5</span> , <span class="hljs-number">6</span> , <span class="hljs-number">13</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'编程珠玑'</span> , <span class="hljs-string">'Tom'</span> , <span class="hljs-number">68</span>, <span class="hljs-number">99999</span> , <span class="hljs-number">52</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'从你的全世界路过'</span> , <span class="hljs-string">'张嘉加'</span> , <span class="hljs-number">16</span>, <span class="hljs-number">1000</span> , <span class="hljs-number">50</span> , <span class="hljs-string">'static/img/cover.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'C++编程思想'</span> , <span class="hljs-string">'刚哥'</span> , <span class="hljs-number">45.5</span> , <span class="hljs-number">14</span> , <span class="hljs-number">95</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'蛋炒饭'</span> , <span class="hljs-string">'周星星'</span> , <span class="hljs-number">9.9</span>, <span class="hljs-number">12</span> , <span class="hljs-number">53</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'Java编程思想'</span> , <span class="hljs-string">'阳哥'</span> , <span class="hljs-number">99.5</span> , <span class="hljs-number">47</span> , <span class="hljs-number">36</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'JavaScript从入门到精通'</span> , <span class="hljs-string">'婷姐'</span> , <span class="hljs-number">9.9</span> , <span class="hljs-number">85</span> , <span class="hljs-number">95</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'C语言程序设计'</span> , <span class="hljs-string">'谭浩强'</span> , <span class="hljs-number">28</span> , <span class="hljs-number">52</span> , <span class="hljs-number">74</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'Lua语言程序设计'</span> , <span class="hljs-string">'雷丰阳'</span> , <span class="hljs-number">51.5</span> , <span class="hljs-number">48</span> , <span class="hljs-number">82</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'西游记'</span> , <span class="hljs-string">'罗贯中'</span> , <span class="hljs-number">12</span>, <span class="hljs-number">19</span> , <span class="hljs-number">9999</span> , <span class="hljs-string">'static/img/default.jpg'</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'水浒传'</span> , <span class="hljs-string">'华仔'</span> , <span class="hljs-number">33.05</span> , <span class="hljs-number">22</span> , <span class="hljs-number">88</span> , <span class="hljs-string">'static/img/default.jpg'</span>); <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'操作系统原理'</span> , <span class="hljs-string">'刘优'</span> , <span class="hljs-number">133.05</span> , <span class="hljs-number">122</span> , <span class="hljs-number">188</span> , <span class="hljs-string">'static/img/default.jpg'</span>); <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'数据结构 java版'</span> , <span class="hljs-string">'封大神'</span> , <span class="hljs-number">173.15</span> , <span class="hljs-number">21</span> , <span class="hljs-number">81</span> , <span class="hljs-string">'static/img/default.jpg'</span>); <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'UNIX高级环境编程'</span> , <span class="hljs-string">'乐天'</span> , <span class="hljs-number">99.15</span> , <span class="hljs-number">210</span> , <span class="hljs-number">810</span> , <span class="hljs-string">'static/img/default.jpg'</span>); <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> book(<span class="hljs-string">`id`</span> , <span class="hljs-string">`name`</span> , <span class="hljs-string">`author`</span> , <span class="hljs-string">`price`</span> , <span class="hljs-string">`sales`</span> , <span class="hljs-string">`stock`</span> , <span class="hljs-string">`img_path`</span>) <span class="hljs-keyword">values</span>(<span class="hljs-literal">null</span> , <span class="hljs-string">'javaScript高级编程'</span> , <span class="hljs-string">'国哥'</span> , <span class="hljs-number">69.15</span> , <span class="hljs-number">210</span> , <span class="hljs-number">810</span> , <span class="hljs-string">'static/img/default.jpg'</span>);</code></pre><h3 id="2-编写图书模块的JavaBean对象"><a href="#2-编写图书模块的JavaBean对象" class="headerlink" title="2.编写图书模块的JavaBean对象"></a>2.编写图书模块的JavaBean对象</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.bean;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String author;    <span class="hljs-keyword">private</span> BigDecimal price;    <span class="hljs-keyword">private</span> Integer sales;    <span class="hljs-keyword">private</span> Integer stock;    <span class="hljs-keyword">private</span> String imgPath;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(Integer id, String name, String author, BigDecimal price, Integer sales, Integer stock, String imgPath)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.author = author;        <span class="hljs-keyword">this</span>.price = price;        <span class="hljs-keyword">this</span>.sales = sales;        <span class="hljs-keyword">this</span>.stock = stock;        <span class="hljs-keyword">if</span> (imgPath != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-string">""</span>.equals(imgPath)) &#123;            <span class="hljs-keyword">this</span>.imgPath = imgPath;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> author;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;        <span class="hljs-keyword">this</span>.author = author;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(BigDecimal price)</span> </span>&#123;        <span class="hljs-keyword">this</span>.price = price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getSales</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> sales;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSales</span><span class="hljs-params">(Integer sales)</span> </span>&#123;        <span class="hljs-keyword">this</span>.sales = sales;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getStock</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> stock;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStock</span><span class="hljs-params">(Integer stock)</span> </span>&#123;        <span class="hljs-keyword">this</span>.stock = stock;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getImgPath</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> imgPath;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImgPath</span><span class="hljs-params">(String imgPath)</span> </span>&#123;        <span class="hljs-keyword">if</span> (imgPath != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-string">""</span>.equals(imgPath)) &#123;            <span class="hljs-keyword">this</span>.imgPath = imgPath;        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Book&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", author='"</span> + author + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", price="</span> + price +                <span class="hljs-string">", sales="</span> + sales +                <span class="hljs-string">", stock="</span> + stock +                <span class="hljs-string">", imgPath='"</span> + imgPath + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><h3 id="3-编写图书模块的DAO并测试"><a href="#3-编写图书模块的DAO并测试" class="headerlink" title="3.编写图书模块的DAO并测试"></a>3.编写图书模块的DAO并测试</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.dao.impl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookDao</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        String sql = <span class="hljs-string">"insert into book(`name`,`author`,`price`,`sales`,`stock`,`img_path`) values(?,?,?,?,?,?)"</span>;        <span class="hljs-keyword">return</span> update(sql, book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">(Integer id)</span> </span>&#123;        String sql = <span class="hljs-string">"delete from book where id = ?"</span>;        <span class="hljs-keyword">return</span> update(sql,id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        String sql = <span class="hljs-string">"update book set `name`=?,`author`=?,`price`=?,`sales`=?,`stock`=?,`img_path`= ? where id = ?"</span>;        <span class="hljs-keyword">return</span> update(sql,book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath(),book.getId());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">queryBookById</span><span class="hljs-params">(Integer id)</span> </span>&#123;        String sql = <span class="hljs-string">"select `id`,`name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book where id = ?"</span>;        <span class="hljs-keyword">return</span> queryForOne(Book<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>,<span class="hljs-title">id</span>)</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span> </span>&#123;        String sql = <span class="hljs-string">"select `id`,`name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book"</span>;        <span class="hljs-keyword">return</span> queryForList(Book<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>)</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImplTest</span> </span>&#123;    <span class="hljs-keyword">private</span> BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBook</span><span class="hljs-params">()</span> </span>&#123;        bookDao.addBook(<span class="hljs-keyword">new</span> Book(<span class="hljs-keyword">null</span>,<span class="hljs-string">"算法与数据结构(java版)"</span>,<span class="hljs-string">"张三三"</span>,<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">58.80</span>),<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-string">"static/img/default.jpg"</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">()</span> </span>&#123;        bookDao.deleteBook(<span class="hljs-number">1</span>);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">()</span> </span>&#123;        bookDao.updateBook(<span class="hljs-keyword">new</span> Book(<span class="hljs-number">21</span>,<span class="hljs-string">"算法与数据结构(C++版)"</span>,<span class="hljs-string">"张三三"</span>,<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">58.80</span>),<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-string">"static/img/default.jpg"</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBookById</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(bookDao.queryBookById(<span class="hljs-number">21</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span>(Book book:bookDao.queryBooks())&#123;            System.out.println(book);        &#125;    &#125;&#125;</code></pre><h3 id="4-编写图书模块的Service并测试"><a href="#4-编写图书模块的Service并测试" class="headerlink" title="4.编写图书模块的Service并测试"></a>4.编写图书模块的Service并测试</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.service.impl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;    <span class="hljs-keyword">private</span> BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        bookDao.addBook(book);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">(Integer id)</span> </span>&#123;        bookDao.deleteBook(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span> </span>&#123;        bookDao.updateBook(book);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">queryBookById</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookDao.queryBookById(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> bookDao.queryBooks();    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImplTest</span> </span>&#123;    <span class="hljs-keyword">private</span> BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBook</span><span class="hljs-params">()</span> </span>&#123;        bookService.addBook(<span class="hljs-keyword">new</span> Book(<span class="hljs-keyword">null</span>,<span class="hljs-string">"肉蛋葱鸡"</span>,<span class="hljs-string">"马老师"</span>,<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">66.66</span>),<span class="hljs-number">666</span>,<span class="hljs-number">66</span>,<span class="hljs-string">"static/img/cover.jpg"</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">()</span> </span>&#123;        bookService.deleteBook(<span class="hljs-number">10</span>);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">()</span> </span>&#123;        bookService.updateBook(<span class="hljs-keyword">new</span> Book(<span class="hljs-number">7</span>,<span class="hljs-string">"红皮烤鸭"</span>,<span class="hljs-string">"马老师"</span>,<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">99.8</span>),<span class="hljs-number">100</span>,<span class="hljs-number">2</span>,<span class="hljs-string">"static/img/cover.jpg"</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBookById</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(bookService.queryBookById(<span class="hljs-number">7</span>));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span>(Book book :bookService.queryBooks())&#123;            System.out.println(book);        &#125;    &#125;&#125;</code></pre><h3 id="5-编写图书模块的Web层，和页面联调测试"><a href="#5-编写图书模块的Web层，和页面联调测试" class="headerlink" title="5.编写图书模块的Web层，和页面联调测试"></a>5.编写图书模块的Web层，和页面联调测试</h3><h4 id="1、实现展示全部图书"><a href="#1、实现展示全部图书" class="headerlink" title="1、实现展示全部图书"></a>1、实现展示全部图书</h4><p><img src="/2020/04/08/javaweb-02/11.png" srcset="/img/loading.gif" alt></p><p><strong>在BookServlet.java中添加list()方法用于展示全部图书信息：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">private</span> BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 1.通过BookService查询全部图书</span>    List&lt;Book&gt; books = bookService.queryBooks();    <span class="hljs-comment">// 2.将全部的图书信息保存到request域中</span>    req.setAttribute(<span class="hljs-string">"books"</span>,books);    <span class="hljs-comment">// 3.请求转发</span>    req.getRequestDispatcher(<span class="hljs-string">"/pages/manager/book_manager.jsp"</span>).forward(req,resp);&#125;</code></pre><p><strong>修改图书管理页面的跳转地址：</strong><br><img src="/2020/04/08/javaweb-02/12.png" srcset="/img/loading.gif" alt></p><p><strong>利用JSTL标签库遍历图书信息在jsp页面中输出：</strong><br>1、导入JSTL标签库的jar包<br>taglibs-standard-impl-1.2.1.jar<br>taglibs-standard-spec-1.2.1.jar<br>2、在book_manager.jsp中编写遍历图书信息的代码</p><pre><code class="hljs jsp">&lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.books&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"book"</span>&gt;&lt;tr&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;td&gt;&lt;a href="book_edit"&gt;修改&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="#"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/c:forEach&gt;</code></pre><h4 id="2、实现添加图书"><a href="#2、实现添加图书" class="headerlink" title="2、实现添加图书"></a>2、实现添加图书</h4><p><img src="/2020/04/08/javaweb-02/17.png" srcset="/img/loading.gif" alt></p><p><strong>在BookServlet中添加add()方法用于添加图书：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">//  1、获取请求的参数==封装成为Book对象</span>        Book book = WebUtils.copyParamToBean(req.getParameterMap(), <span class="hljs-keyword">new</span> Book());        <span class="hljs-comment">//  2、调用BookService.addBook()保存图书</span>        bookService.addBook(book);        <span class="hljs-comment">// 3、跳到图书列表页面 /manager/bookServlet?action=list</span>        <span class="hljs-comment">// 请求转发会造成表单的多次提交</span>        <span class="hljs-comment">// req.getRequestDispatcher("/manager/bookServlet?action=list").forward(req, resp);</span>        <span class="hljs-comment">// 请求重定向</span>        resp.sendRedirect(req.getContextPath()+ <span class="hljs-string">"/manager/bookServlet?action=list"</span>);    &#125;</code></pre><p><strong>修改book_edit.jsp：</strong><br><img src="/2020/04/08/javaweb-02/13.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/04/08/javaweb-02/14.png" srcset="/img/loading.gif" alt></p><h4 id="3、实现删除图书"><a href="#3、实现删除图书" class="headerlink" title="3、实现删除图书"></a>3、实现删除图书</h4><p><img src="/2020/04/08/javaweb-02/18.png" srcset="/img/loading.gif" alt></p><p><strong>在BookServlet中添加delete()方法：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;       <span class="hljs-comment">// 1、获取图书id</span>       <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);       <span class="hljs-comment">// 2、调用BookService.deleteById() 删除图书</span>       bookService.deleteBook(id);       <span class="hljs-comment">// 3、重定向 /manager/bookServlet?action=list</span>       resp.sendRedirect(req.getScheme()+<span class="hljs-string">"://"</span>+ req.getServerName()+<span class="hljs-string">":"</span>+               req.getServerPort()+req.getContextPath()+ <span class="hljs-string">"/manager/bookServlet?action=list"</span>);   &#125;</code></pre><p><strong>修改book_manager.jsp：</strong><br><img src="/2020/04/08/javaweb-02/15.png" srcset="/img/loading.gif" alt></p><p><strong>添加确认删除提示：</strong><br>给a标签添加class属性用于对标签选择<br><img src="/2020/04/08/javaweb-02/16.png" srcset="/img/loading.gif" alt>给a标签绑定单击事件：</p><pre><code class="hljs javascript"> &lt;%-- 给删除按钮绑定单击事件 用于删除操作的确认--%&gt;&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;    <span class="hljs-comment">// 在事件的function函数中，有一个this对象，表示当前正在响应事件的dom对象</span>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;$(<span class="hljs-string">"a.deleteClass"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">// 确认返回true  取消返回false</span><span class="hljs-keyword">return</span> confirm(<span class="hljs-string">"你确定删除《"</span> + $(<span class="hljs-keyword">this</span>).parent().parent().find(<span class="hljs-string">"td:first"</span>).text() +<span class="hljs-string">"》吗？"</span>);<span class="hljs-comment">// return false; 阻止元素的默认行为  不提交</span>&#125;);&#125;);&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="4、实现修改图书"><a href="#4、实现修改图书" class="headerlink" title="4、实现修改图书"></a>4、实现修改图书</h4><p><img src="/2020/04/08/javaweb-02/19.png" srcset="/img/loading.gif" alt></p><p><strong>在bookServlet中添加getBook()用于获取要修改图书的信息：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getBook</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;       <span class="hljs-comment">// 1.获取id</span>       <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);       <span class="hljs-comment">// 2.调用BookService.queryBookById() 获取图书信息</span>       Book book = bookService.queryBookById(id);       <span class="hljs-comment">// 3.将图书信息保存至request域中</span>       req.setAttribute(<span class="hljs-string">"book"</span>,book);       <span class="hljs-comment">// 4.请求转发到 /pages/manager/book_edit.jsp</span>       req.getRequestDispatcher(<span class="hljs-string">"/pages/manager/book_edit.jsp"</span>).forward(req,resp);   &#125;</code></pre><p><strong>修改book_edit.jsp让数据回显：</strong><br><img src="/2020/04/08/javaweb-02/20.png" srcset="/img/loading.gif" alt></p><p><strong>在BookServlet中添加update()方法：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 1.获取从book_edit.jsp提交的表单数据  将数据封装到book对象中</span>    Book book = WebUtils.copyParamToBean(req.getParameterMap(),<span class="hljs-keyword">new</span> Book());    <span class="hljs-comment">// 2.调用BookService.update()更新图书</span>    bookService.updateBook(book);    <span class="hljs-comment">// 3.重定向 manager/bookServlet?action=list 刷新图书列表</span>    resp.sendRedirect(req.getContextPath()+ <span class="hljs-string">"/manager/bookServlet?action=list"</span>);&#125;</code></pre><p><strong>在book_edit.jsp中添加隐藏域用于回传修改图书所需要的id值：</strong><br><img src="/2020/04/08/javaweb-02/21.png" srcset="/img/loading.gif" alt></p><p><strong>图书信息并没有发生修改的原因：</strong><br>book_edit.jsp页面中既要进行添加add操作，又要进行修改update操作，最终进行何种操作是根据一个隐藏域决定的，因此需要动态修改隐藏域：在请求发起时附带上要执行操作的值，并注入隐藏域中。<br>传入update参数：<img src="/2020/04/08/javaweb-02/22.png" srcset="/img/loading.gif" style="zoom:100%;"><br>传入add参数：<img src="/2020/04/08/javaweb-02/23.png" srcset="/img/loading.gif" alt><br>注入隐藏域：<img src="/2020/04/08/javaweb-02/24.png" srcset="/img/loading.gif" alt></p><h4 id="5、实现图书的分页"><a href="#5、实现图书的分页" class="headerlink" title="5、实现图书的分页"></a>5、实现图书的分页</h4><p><img src="/2020/04/08/javaweb-02/25.png" srcset="/img/loading.gif" alt><br><strong>创建Page对象：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.bean;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Page为分页的模型</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 是具体的模块的 JavaBean 对象</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer PAGE_SIZE = <span class="hljs-number">4</span>;    <span class="hljs-comment">// 当前页码</span>    <span class="hljs-keyword">private</span> Integer pageNo;    <span class="hljs-comment">// 总页码</span>    <span class="hljs-keyword">private</span> Integer pageTotal;    <span class="hljs-comment">// 总记录数</span>    <span class="hljs-keyword">private</span> Integer pageTotalCount;    <span class="hljs-comment">// 每页显示的数量</span>    <span class="hljs-keyword">private</span> Integer pageSize = PAGE_SIZE;    <span class="hljs-comment">// 当前页的数据</span>    <span class="hljs-keyword">private</span> List&lt;T&gt; items;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">(Integer pageNo, Integer pageTotal, Integer pageTotalCount, Integer pageSize, List&lt;T&gt; items)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageNo = pageNo;        <span class="hljs-keyword">this</span>.pageTotal = pageTotal;        <span class="hljs-keyword">this</span>.pageTotalCount = pageTotalCount;        <span class="hljs-keyword">this</span>.pageSize = pageSize;        <span class="hljs-keyword">this</span>.items = items;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getPageSize</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> PAGE_SIZE;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageSize</span><span class="hljs-params">(Integer pageSize)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageSize = pageSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getItems</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> items;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setItems</span><span class="hljs-params">(List&lt;T&gt; items)</span> </span>&#123;        <span class="hljs-keyword">this</span>.items = items;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getPageNo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageNo;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageNo</span><span class="hljs-params">(Integer pageNo)</span> </span>&#123;        <span class="hljs-comment">// 对页码进行检查</span>        <span class="hljs-keyword">if</span>(pageNo&lt;<span class="hljs-number">1</span>)&#123;            pageNo = <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">if</span> (pageNo&gt;pageTotal)&#123;            pageNo = pageTotal;        &#125;        <span class="hljs-keyword">this</span>.pageNo = pageNo;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getPageTotal</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageTotal;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageTotal</span><span class="hljs-params">(Integer pageTotal)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageTotal = pageTotal;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getPageTotalCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageTotalCount;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageTotalCount</span><span class="hljs-params">(Integer pageTotalCount)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageTotalCount = pageTotalCount;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Page&#123;"</span> +                <span class="hljs-string">"pageNo="</span> + pageNo +                <span class="hljs-string">", pageTotal="</span> + pageTotal +                <span class="hljs-string">", pageTotalCount="</span> + pageTotalCount +                <span class="hljs-string">", pageSize="</span> + pageSize +                <span class="hljs-string">", items="</span> + items +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><p><strong>在BookServlet中添page()用于处理分页：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">page</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 1.获取js页面传来的请求参数 pageNo 和 pageSize</span>        <span class="hljs-keyword">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageNo"</span>),<span class="hljs-number">1</span>);        <span class="hljs-keyword">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageSize"</span>), Page.PAGE_SIZE);        <span class="hljs-comment">// 2.调用BookService.page(pageNo,pageSize) 得到Page对象</span>        Page&lt;Book&gt; page = bookService.page(pageNo, pageSize);        <span class="hljs-comment">// 3.将Page对象保存到Request域中</span>        req.setAttribute(<span class="hljs-string">"page"</span>,page);        <span class="hljs-comment">// 4.请求转发到 /pages/manager/book_manager.jsp</span>        req.getRequestDispatcher(<span class="hljs-string">"/pages/manager/book_manager.jsp"</span>).forward(req,resp);    &#125;</code></pre><p><strong>在BookService中添加page(pageNo,pageSize) 获取page对象：</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询分页</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNo</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回一个Page对象</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title">page</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNo, <span class="hljs-keyword">int</span> pageSize)</span></span>;</code></pre><p><strong>在BookServiceImpl中实现page(pageNo,pageSize)：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title">page</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNo, <span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;       Page&lt;Book&gt; bookPage = <span class="hljs-keyword">new</span> Page&lt;&gt;();       <span class="hljs-comment">//设置每页显示的数量</span>       bookPage.setPageSize(pageSize);       <span class="hljs-comment">// 设置总记录数</span>       Integer pageTotalCount = bookDao.queryForPageTotalCount();       bookPage.setPageTotalCount(pageTotalCount);       <span class="hljs-comment">// 设置总页码</span>       Integer pageTotal = pageTotalCount/pageSize;       <span class="hljs-keyword">if</span> (pageTotalCount % pageSize&gt;<span class="hljs-number">0</span>)&#123;           pageTotal++;       &#125;       bookPage.setPageTotal(pageTotal);       <span class="hljs-comment">// 设置当前页码</span>       bookPage.setPageNo(pageNo);       <span class="hljs-comment">// 设置当页数据</span>       <span class="hljs-keyword">int</span> begin = (bookPage.getPageNo()-<span class="hljs-number">1</span>)*pageSize;       bookPage.setItems(bookDao.queryForItems(begin,pageSize));       <span class="hljs-keyword">return</span> bookPage;   &#125;</code></pre><p><strong>在BookDao中添加queryForPageTotal()和queryForItems()方法：</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询图书的总记录数</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">queryForPageTotalCount</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询当前页面的图书记录</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> begin</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">queryForItems</span><span class="hljs-params">(<span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> pageSize)</span></span>;</code></pre><p><strong>在BookDaoImpl中实现queryForPageTotal()和queryForItems()方法：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">queryForPageTotalCount</span><span class="hljs-params">()</span> </span>&#123;    String sql = <span class="hljs-string">"select count(*) from book"</span>;    Number count = (Number) queryForSingleValue(sql);    <span class="hljs-keyword">return</span>  count.intValue();&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">queryForItems</span><span class="hljs-params">(<span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;    String sql = <span class="hljs-string">" select `id`, `name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book limit ?,?"</span>;    <span class="hljs-keyword">return</span> queryForList(Book<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>,<span class="hljs-title">begin</span>,<span class="hljs-title">pageSize</span>)</span>;&#125;</code></pre><p><strong>修改manage_menu.jsp页面显示分页后的内容：</strong><br><img src="/2020/04/08/javaweb-02/26.png" srcset="/img/loading.gif" alt></p><p><strong>修改book_manage.jsp页面，让下方显示页面跳转的功能按键：</strong></p><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;       <span class="hljs-comment">// 在事件的function函数中，有一个this对象，表示当前正在响应事件的dom对象</span>       $(function () &#123;           &lt;%-- 给删除按钮绑定单击事件 用于删除操作的确认--%&gt;           $(<span class="hljs-string">"a.deleteClass"</span>).click(function () &#123;               <span class="hljs-comment">// 确认返回true  取消返回false</span>               <span class="hljs-keyword">return</span> confirm(<span class="hljs-string">"你确定删除《"</span> + $(<span class="hljs-keyword">this</span>).parent().parent().find(<span class="hljs-string">"td:first"</span>).text() + <span class="hljs-string">"》吗？"</span>);               <span class="hljs-comment">// return false; 阻止元素的默认行为  不提交</span>           &#125;);           $(<span class="hljs-string">"#searchPageBtn"</span>).click(function () &#123;               <span class="hljs-keyword">var</span> pageNo = $(<span class="hljs-string">"#pn_input"</span>).val();               location.href = <span class="hljs-string">"$&#123;pageScope.basePath&#125;manager/bookServlet?action=page&amp;pageNo="</span> + pageNo;           &#125;);       &#125;);   &lt;/script&gt;</code></pre><p>修改hesd.jsp 将basePath保存至pageContext域中：供指定页面跳转时使用<br><img src="/2020/04/08/javaweb-02/27.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs jsp">&lt;div id=<span class="hljs-string">"page_nav"</span>&gt;    &lt;%-- 大于首页才显示--%&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;1&#125;"</span>&gt;        &lt;a href="manager/bookServlet?action=page&amp;pageNo=1"&gt;首页&lt;/a&gt;        &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;"&gt;上一页&lt;/a&gt;    &lt;/c:if&gt;    &lt;%--  页码输出的开始--%&gt;    &lt;c:choose&gt;        &lt;%-- 情况<span class="hljs-number">1</span>：如果总页码&lt;=<span class="hljs-number">5</span>,页码的范围是<span class="hljs-number">1</span>~总页码 --%&gt;        &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&lt;=5&#125;"</span>&gt;            &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                    【$&#123;i&#125;】                &lt;/c:if&gt;                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                    &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                &lt;/c:if&gt;            &lt;/c:forEach&gt;        &lt;/c:when&gt;        &lt;%--情况<span class="hljs-number">2</span>：总页码&gt;<span class="hljs-number">5</span> --%&gt;        &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&gt;5&#125;"</span>&gt;            &lt;c:choose&gt;                &lt;%-- 当前页码为前面<span class="hljs-number">3</span>个：页码范围是：<span class="hljs-number">1</span>~<span class="hljs-number">5</span>--%&gt;                &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;=3&#125;"</span>&gt;                    &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"5"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:when&gt;                &lt;%-- 当前页码为后面<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~末页--%&gt;                &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;"</span>&gt;                    &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-4&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:when&gt;                &lt;%-- 当前页码为中间<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~当前页码+<span class="hljs-number">2</span>--%&gt;                &lt;c:otherwise&gt;                    &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-2&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageNo+2&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:otherwise&gt;            &lt;/c:choose&gt;        &lt;/c:when&gt;    &lt;/c:choose&gt;    &lt;%--  页码输出的结束--%&gt;    &lt;%--  小于末页才显示--%&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;"</span>&gt;        &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;"&gt;下一页&lt;/a&gt;        &lt;a href="manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;"&gt;末页&lt;/a&gt;    &lt;/c:if&gt;    共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录    到第&lt;input value=<span class="hljs-string">"$&#123;param.pageNo&#125;"</span> name=<span class="hljs-string">"pn"</span> id=<span class="hljs-string">"pn_input"</span>/&gt;页    &lt;input id=<span class="hljs-string">"searchPageBtn"</span> type=<span class="hljs-string">"button"</span> value=<span class="hljs-string">"确定"</span>&gt;&lt;/div&gt;</code></pre><p><strong>修改增删改操作的重定向地址并传入pageNo参数：</strong><br><img src="/2020/04/08/javaweb-02/28.png" srcset="/img/loading.gif" alt></p><p><strong>在book_manager.jsp传入页码pageNo：</strong><br><img src="/2020/04/08/javaweb-02/29.png" srcset="/img/loading.gif" alt></p><p><strong>在book_edit.jsp中添加隐藏域用于传递pageNo给BookServlet：</strong><br><img src="/2020/04/08/javaweb-02/30.png" srcset="/img/loading.gif" alt></p><p><strong>前台图书的分页展示：</strong>|<br><img src="/2020/04/08/javaweb-02/31.png" srcset="/img/loading.gif" alt></p><p>web目录下的index.jsp只负责转发：</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;%--只负责请求转发--%&gt;&lt;jsp:forward page="/client/clientBookServlet?action=page"&gt;&lt;/jsp:forward&gt;</code></pre><p>创建ClientBookServlet用于处理前台的分页请求：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.web;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理图书分页</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">page</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        System.out.println(<span class="hljs-string">"经过了前台的ClientBookServlet"</span>);        <span class="hljs-comment">// 1.获取js页面传来的请求参数 pageNo 和 pageSize</span>        <span class="hljs-keyword">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageNo"</span>),<span class="hljs-number">1</span>);        <span class="hljs-keyword">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageSize"</span>), Page.PAGE_SIZE);        <span class="hljs-comment">// 2.调用BookService.page(pageNo,pageSize) 得到Page对象</span>        Page&lt;Book&gt; page = bookService.page(pageNo, pageSize);        <span class="hljs-comment">// 3.将Page对象保存到Request域中</span>        req.setAttribute(<span class="hljs-string">"page"</span>,page);        <span class="hljs-comment">// 4.请求转发到 /pages/client/index.jsp</span>        req.getRequestDispatcher(<span class="hljs-string">"/pages/client/index.jsp"</span>).forward(req,resp);    &#125;&#125;</code></pre><p>在web目录的/page/client/路径下创建index.jsp用于显示前台图书信息：</p><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;    &lt;title&gt;书城首页&lt;/title&gt;    &lt;%-- 静态包含 base标签、css样式、jquery文件   --%&gt;    &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/head.jsp"</span> %&gt;    &lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;        $(function()&#123;            $(<span class="hljs-string">"#searchPageBtn"</span>).click(function()&#123;                <span class="hljs-keyword">var</span> pageNo = $(<span class="hljs-string">"#pn_input"</span>).val();                location.href = <span class="hljs-string">"$&#123;pageScope.basePath&#125;client/clientBookServlet?action=page&amp;pageNo="</span>+pageNo;            &#125;);        &#125;)    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=<span class="hljs-string">"header"</span>&gt;    &lt;span class="wel_word"&gt;网上书城&lt;/span&gt;    &lt;div&gt;        &lt;a href="pages/user/login.jsp"&gt;登录&lt;/a&gt; |        &lt;a href="pages/user/regist.jsp"&gt;注册&lt;/a&gt; &amp;nbsp;&amp;nbsp;        &lt;a href="pages/cart/cart.jsp"&gt;购物车&lt;/a&gt;        &lt;a href="pages/manager/manager.jsp"&gt;后台管理&lt;/a&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div id=<span class="hljs-string">"main"</span>&gt;    &lt;div id=<span class="hljs-string">"book"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_cond"</span>&gt;            &lt;form action=<span class="hljs-string">""</span> method=<span class="hljs-string">"get"</span>&gt;                价格：&lt;input id=<span class="hljs-string">"min"</span> type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"min"</span> value=<span class="hljs-string">""</span>&gt; 元 -                &lt;input id=<span class="hljs-string">"max"</span> type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"max"</span> value=<span class="hljs-string">""</span>&gt; 元                &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"查询"</span>/&gt;            &lt;/form&gt;        &lt;/div&gt;        &lt;div style=<span class="hljs-string">"text-align: center"</span>&gt;            &lt;span&gt;您的购物车中有3件商品&lt;/span&gt;            &lt;div&gt;                您刚刚将&lt;span style="color: red"&gt;时间简史&lt;/span&gt;加入到了购物车中            &lt;/div&gt;        &lt;/div&gt;        &lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.page.items&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"book"</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"b_list"</span>&gt;                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"img_div"</span>&gt;                    &lt;img <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_img"</span> alt=<span class="hljs-string">""</span> src=<span class="hljs-string">"$&#123;book.imgPath&#125;"</span>/&gt;                &lt;/div&gt;                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_info"</span>&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_name"</span>&gt;                        &lt;span class="sp1"&gt;书名:&lt;/span&gt;                        &lt;span class="sp2"&gt;$&#123;book.name&#125;&lt;/span&gt;                    &lt;/div&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_author"</span>&gt;                        &lt;span class="sp1"&gt;作者:&lt;/span&gt;                        &lt;span class="sp2"&gt;$&#123;book.author&#125;&lt;/span&gt;                    &lt;/div&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_price"</span>&gt;                        &lt;span class="sp1"&gt;价格:￥&lt;/span&gt;                        &lt;span class="sp2"&gt;$&#123;book.price&#125;&lt;/span&gt;                    &lt;/div&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_sales"</span>&gt;                        &lt;span class="sp1"&gt;销量:&lt;/span&gt;                        &lt;span class="sp2"&gt;$&#123;book.sales&#125;&lt;/span&gt;                    &lt;/div&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_amount"</span>&gt;                        &lt;span class="sp1"&gt;库存:&lt;/span&gt;                        &lt;span class="sp2"&gt;$&#123;book.stock&#125;&lt;/span&gt;                    &lt;/div&gt;                    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_add"</span>&gt;                        &lt;button&gt;加入购物车&lt;/button&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/c:forEach&gt;    &lt;/div&gt;    &lt;div id=<span class="hljs-string">"page_nav"</span>&gt;        &lt;%-- 大于首页才显示--%&gt;        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;1&#125;"</span>&gt;            &lt;a href="client/clientBookServlet?action=page&amp;pageNo=1"&gt;首页&lt;/a&gt;            &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;"&gt;上一页&lt;/a&gt;        &lt;/c:if&gt;        &lt;%--  页码输出的开始--%&gt;        &lt;c:choose&gt;            &lt;%-- 情况<span class="hljs-number">1</span>：如果总页码&lt;=<span class="hljs-number">5</span>,页码的范围是<span class="hljs-number">1</span>~总页码 --%&gt;            &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&lt;=5&#125;"</span>&gt;                &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                        【$&#123;i&#125;】                    &lt;/c:if&gt;                    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                        &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                    &lt;/c:if&gt;                &lt;/c:forEach&gt;            &lt;/c:when&gt;            &lt;%--情况<span class="hljs-number">2</span>：总页码&gt;<span class="hljs-number">5</span> --%&gt;            &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&gt;5&#125;"</span>&gt;                &lt;c:choose&gt;                    &lt;%-- 当前页码为前面<span class="hljs-number">3</span>个：页码范围是：<span class="hljs-number">1</span>~<span class="hljs-number">5</span>--%&gt;                    &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;=3&#125;"</span>&gt;                        &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"5"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                                【$&#123;i&#125;】                            &lt;/c:if&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                                &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                            &lt;/c:if&gt;                        &lt;/c:forEach&gt;                    &lt;/c:when&gt;                    &lt;%-- 当前页码为后面<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~末页--%&gt;                    &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;"</span>&gt;                        &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-4&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                                【$&#123;i&#125;】                            &lt;/c:if&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                                &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                            &lt;/c:if&gt;                        &lt;/c:forEach&gt;                    &lt;/c:when&gt;                    &lt;%-- 当前页码为中间<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~当前页码+<span class="hljs-number">2</span>--%&gt;                    &lt;c:otherwise&gt;                        &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-2&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageNo+2&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                                【$&#123;i&#125;】                            &lt;/c:if&gt;                            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                                &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                            &lt;/c:if&gt;                        &lt;/c:forEach&gt;                    &lt;/c:otherwise&gt;                &lt;/c:choose&gt;            &lt;/c:when&gt;        &lt;/c:choose&gt;        &lt;%--  页码输出的结束--%&gt;        &lt;%--  小于末页才显示--%&gt;        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;"</span>&gt;            &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;"&gt;下一页&lt;/a&gt;            &lt;a href="client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;"&gt;末页&lt;/a&gt;        &lt;/c:if&gt;        共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录        到第&lt;input value=<span class="hljs-string">"$&#123;param.pageNo&#125;"</span> name=<span class="hljs-string">"pn"</span> id=<span class="hljs-string">"pn_input"</span>/&gt;页        &lt;input id=<span class="hljs-string">"searchPageBtn"</span>  type=<span class="hljs-string">"button"</span> value=<span class="hljs-string">"确定"</span>&gt;    &lt;/div&gt;&lt;/div&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/footer.jsp"</span> %&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>抽取分页：</strong><br>在Page对象中添加url属性以及相应的get 和set方法：<br><img src="/2020/04/08/javaweb-02/32.png" srcset="/img/loading.gif" alt><br>分别在BookServlet和ClientBookServlet中设置url属性值：<br><img src="/2020/04/08/javaweb-02/33.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/04/08/javaweb-02/34.png" srcset="/img/loading.gif" alt></p><p>分别将index.jsp和book_manager.jsp中出现的相应的地址值替换为<code>${requestScope.page.url}</code></p><p>在/pages/common/下创建page_nav.jsp用于提取分页代码：</p><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;div id=<span class="hljs-string">"page_nav"</span>&gt;    &lt;%-- 大于首页才显示--%&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;1&#125;"</span>&gt;        &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=1"&gt;首页&lt;/a&gt;        &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;"&gt;上一页&lt;/a&gt;    &lt;/c:if&gt;    &lt;%--  页码输出的开始--%&gt;    &lt;c:choose&gt;        &lt;%-- 情况<span class="hljs-number">1</span>：如果总页码&lt;=<span class="hljs-number">5</span>,页码的范围是<span class="hljs-number">1</span>~总页码 --%&gt;        &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&lt;=5&#125;"</span>&gt;            &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                    【$&#123;i&#125;】                &lt;/c:if&gt;                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                    &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                &lt;/c:if&gt;            &lt;/c:forEach&gt;        &lt;/c:when&gt;        &lt;%--情况<span class="hljs-number">2</span>：总页码&gt;<span class="hljs-number">5</span> --%&gt;        &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&gt;5&#125;"</span>&gt;            &lt;c:choose&gt;                &lt;%-- 当前页码为前面<span class="hljs-number">3</span>个：页码范围是：<span class="hljs-number">1</span>~<span class="hljs-number">5</span>--%&gt;                &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;=3&#125;"</span>&gt;                    &lt;c:forEach begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"5"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:when&gt;                &lt;%-- 当前页码为后面<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~末页--%&gt;                &lt;c:when test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;"</span>&gt;                    &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-4&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageTotal&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:when&gt;                &lt;%-- 当前页码为中间<span class="hljs-number">3</span>个：页码范围是：当前页码-<span class="hljs-number">2</span>~当前页码+<span class="hljs-number">2</span>--%&gt;                &lt;c:otherwise&gt;                    &lt;c:forEach begin=<span class="hljs-string">"$&#123;requestScope.page.pageNo-2&#125;"</span> end=<span class="hljs-string">"$&#123;requestScope.page.pageNo+2&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"i"</span>&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo==i&#125;"</span>&gt;                            【$&#123;i&#125;】                        &lt;/c:if&gt;                        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo!=i&#125;"</span>&gt;                            &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;"&gt;$&#123;i&#125;&lt;/a&gt;                        &lt;/c:if&gt;                    &lt;/c:forEach&gt;                &lt;/c:otherwise&gt;            &lt;/c:choose&gt;        &lt;/c:when&gt;    &lt;/c:choose&gt;    &lt;%--  页码输出的结束--%&gt;    &lt;%--  小于末页才显示--%&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;"</span>&gt;        &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;"&gt;下一页&lt;/a&gt;        &lt;a href="$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;"&gt;末页&lt;/a&gt;    &lt;/c:if&gt;    共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录    到第&lt;input value=<span class="hljs-string">"$&#123;param.pageNo&#125;"</span> name=<span class="hljs-string">"pn"</span> id=<span class="hljs-string">"pn_input"</span>/&gt;页    &lt;input id=<span class="hljs-string">"searchPageBtn"</span> type=<span class="hljs-string">"button"</span> value=<span class="hljs-string">"确定"</span>&gt;&lt;/div&gt;</code></pre><p>在index.jsp和book_mansger.jsp中的分页代码替换成静态包含代码：</p><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/page_nav.jsp"</span>%&gt;</code></pre><h4 id="6、实现价格区间的搜索功能："><a href="#6、实现价格区间的搜索功能：" class="headerlink" title="6、实现价格区间的搜索功能："></a>6、实现价格区间的搜索功能：</h4><p><img src="/2020/04/08/javaweb-02/35.png" srcset="/img/loading.gif" alt></p><p><strong>在ClientBookClient中添加pageByPrice()方法用于处理搜索请求：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pageByPrice</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 1.获取请求参数 pageNo,pageSize,min,max</span>    <span class="hljs-keyword">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageNo"</span>),<span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"pageSize"</span>),Page.PAGE_SIZE);    <span class="hljs-keyword">int</span> min = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"min"</span>),<span class="hljs-number">0</span>);    <span class="hljs-keyword">int</span> max = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"max"</span>),Integer.MAX_VALUE);    <span class="hljs-comment">// 2.调用bookService.pageByPrice(pageNo,pageSize,min,max) 返回page对象</span>    Page&lt;Book&gt; page = bookService.pageByPrice(pageNo,pageSize,min,max);    <span class="hljs-comment">//设置请求地址 分页时需要传递价格区间</span>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"client/clientBookServlet?action=pageByPrice"</span>);    <span class="hljs-comment">// 对价格区间进行检查</span>    <span class="hljs-keyword">if</span>(req.getParameter(<span class="hljs-string">"min"</span>)!=<span class="hljs-keyword">null</span>)&#123;        stringBuilder.append(<span class="hljs-string">"&amp;min="</span>).append(req.getParameter(<span class="hljs-string">"min"</span>));    &#125;    <span class="hljs-keyword">if</span>(req.getParameter(<span class="hljs-string">"max"</span>)!=<span class="hljs-keyword">null</span>)&#123;        stringBuilder.append(<span class="hljs-string">"&amp;max="</span>).append(req.getParameter(<span class="hljs-string">"max"</span>));    &#125;    page.setUrl(stringBuilder.toString());    <span class="hljs-comment">// 3.将Page对象保存到Request域中</span>    req.setAttribute(<span class="hljs-string">"page"</span>,page);    <span class="hljs-comment">// 4.请求转发到</span>    req.getRequestDispatcher(<span class="hljs-string">"/pages/client/index.jsp"</span>).forward(req,resp);&#125;</code></pre><p><strong>在BookService中添加pageByPrice(pageNo,pageSize,min,max)方法：</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据价格区间获取page对象</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageNo</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function">Page&lt;Book&gt; <span class="hljs-title">pageByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNo, <span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span></span>;</code></pre><p><strong>在BookServiceImpl中实现pageByPrice(pageNo,pageSize,min,max)方法：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title">pageByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNo, <span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span> </span>&#123;    Page&lt;Book&gt; bookPage = <span class="hljs-keyword">new</span> Page&lt;&gt;();    <span class="hljs-comment">//设置每页显示的数量</span>    bookPage.setPageSize(pageSize);    <span class="hljs-comment">// 设置总记录数</span>    Integer pageTotalCount = bookDao.queryForPageTotalCountByPrice(min,max);    bookPage.setPageTotalCount(pageTotalCount);    <span class="hljs-comment">// 设置总页码</span>    Integer pageTotal = pageTotalCount/pageSize;    <span class="hljs-keyword">if</span> (pageTotalCount % pageSize&gt;<span class="hljs-number">0</span>)&#123;        pageTotal++;    &#125;    bookPage.setPageTotal(pageTotal);    <span class="hljs-comment">// 设置当前页码</span>    bookPage.setPageNo(pageNo);    <span class="hljs-comment">// 设置当页数据</span>    <span class="hljs-keyword">int</span> begin = (bookPage.getPageNo()-<span class="hljs-number">1</span>)*pageSize;    bookPage.setItems(bookDao.queryForItemsByPrice(begin,pageSize,min,max));    <span class="hljs-keyword">return</span> bookPage;&#125;</code></pre><p><strong>在BookDao中添加queryForPageTotalCountByPrice(int min, int max)和queryForItemsByPrice(int begin, int pageSize, int min, int max)方法：</strong></p><pre><code class="hljs java"> <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据价格区间查询总记录数</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">Integer <span class="hljs-title">queryForPageTotalCountByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据价格区间查询所有记录</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">queryForItemsByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span></span>;&#125;</code></pre><p><strong>在BookDaoImpl中实现这两种方法：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">queryForPageTotalCountByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span> </span>&#123;    String sql = <span class="hljs-string">"select count(*) from book where price between ? and ?"</span>;    Number count = (Number) queryForSingleValue(sql,min,max);    <span class="hljs-keyword">return</span>  count.intValue();&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">queryForItemsByPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> pageSize, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span> </span>&#123;    String sql = <span class="hljs-string">" select `id`, `name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book"</span> +            <span class="hljs-string">" where price between ? and ? order by price limit ?,?"</span>;    <span class="hljs-keyword">return</span> queryForList(Book<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>,<span class="hljs-title">min</span>,<span class="hljs-title">max</span>,<span class="hljs-title">begin</span>,<span class="hljs-title">pageSize</span>)</span>;&#125;</code></pre><p><strong>修改index.jsp向服务器提交搜索请求：</strong></p><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_cond"</span>&gt;        &lt;form action=<span class="hljs-string">"client/clientBookServlet"</span> method=<span class="hljs-string">"get"</span>&gt;            &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"action"</span> value=<span class="hljs-string">"pageByPrice"</span>/&gt;            价格：&lt;input id=<span class="hljs-string">"min"</span> type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"min"</span> value=<span class="hljs-string">"$&#123;param.min&#125;"</span>&gt; 元 -            &lt;input id=<span class="hljs-string">"max"</span> type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"max"</span> value=<span class="hljs-string">"$&#123;param.max&#125;"</span>&gt; 元            &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"查询"</span>/&gt;        &lt;/form&gt;&lt;/div&gt;</code></pre><h2 id="十一、保存用户登录之后的信息"><a href="#十一、保存用户登录之后的信息" class="headerlink" title="十一、保存用户登录之后的信息"></a>十一、保存用户登录之后的信息</h2><p>在UserServlet添加保存用户登录信息到Session域中的代码：<br><img src="/2020/04/08/javaweb-02/36.png" srcset="/img/loading.gif" alt></p><p>在login_success_menu.jsp中 显示用户姓名：<br><img src="/2020/04/08/javaweb-02/37.png" srcset="/img/loading.gif" alt></p><p>修改index.jsp的菜单显示：</p><pre><code class="hljs jsp">&lt;div&gt;     &lt;%--  如果用户还没有登录，显示登录和注册菜单 --%&gt;     &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;empty sessionScope.user&#125;"</span>&gt;      &lt;a href="pages/user/login.jsp"&gt;登录&lt;/a&gt;/         &lt;a href="pages/user/regist.jsp"&gt;注册&lt;/a&gt;     &lt;/c:if&gt;     &lt;%--  如果用户已经登录，则显示登录成功之后用户的信息 --%&gt;     &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;not empty sessionScope.user&#125;"</span>&gt;         &lt;span&gt;欢迎&lt;span class="um_span"&gt;$&#123;sessionScope.user.username&#125;&lt;/span&gt;光临书城&lt;/span&gt;         &lt;a href="pages/order/order.jsp"&gt;我的订单&lt;/a&gt;         &lt;a href="pages/cart/cart.jsp"&gt;购物车&lt;/a&gt;         &lt;a href="pages/manager/manager.jsp"&gt;后台管理&lt;/a&gt;         &lt;a href="index.jsp"&gt;注销&lt;/a&gt;&amp;nbsp;     &lt;/c:if&gt;&lt;/div&gt;</code></pre><p><strong><font color="red">注意：</font></strong><br>固定相对路径跳转使用的地址必须是相对路径，否则在进行跳转时Tomcat会创建一个新的Session，造成Session会话信息丢失！<br><img src="/2020/04/08/javaweb-02/38.png" srcset="/img/loading.gif" alt></p><h2 id="十二、注销登录"><a href="#十二、注销登录" class="headerlink" title="十二、注销登录"></a>十二、注销登录</h2><p>在userServlet中添加logout()方法用于处理注销请求：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logout</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// 1.销毁 Session</span>    req.getSession().invalidate();    <span class="hljs-comment">// 2.重定向到首页</span>    resp.sendRedirect(req.getContextPath());&#125;</code></pre><p>修改jsp页面的跳转地址：<br><img src="/2020/04/08/javaweb-02/39.png" srcset="/img/loading.gif" alt></p><h2 id="十三、使用验证码解决表单的重复提交"><a href="#十三、使用验证码解决表单的重复提交" class="headerlink" title="十三、使用验证码解决表单的重复提交"></a>十三、使用验证码解决表单的重复提交</h2><p>表单重复提交有三种常见的情况：<br>一：提交完表单。服务器使用请求转来进行页面跳转。这个时候，用户按下功能键F5，就会发起最后一次的请求。造成表单重复提交问题。解决方法：使用重定向来进行跳转。<br>二：用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败，<br>就会着急，然后多点了几次提交操作，也会造成表单重复提交。<br>三：用户正常提交服务器。服务器也没有延迟，但是提交完成后，用户回退浏览器。重新提交。也会造成表单重复<br>提交。<br><img src="/2020/04/08/javaweb-02/40.png" srcset="/img/loading.gif" alt></p><p>1.导入谷歌验证码的jar包：kaptcha-2.3.2.jar<br>2.在web.xml中配置用于访问生成验证码的Servlet程序的地址</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><p>3.在表单中使用img标签显示验证码图片</p><pre><code class="hljs jsp">&lt;label&gt;验证码：&lt;/label&gt;&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"itxt"</span> type=<span class="hljs-string">"text"</span> style=<span class="hljs-string">"width: 150px;"</span> name=<span class="hljs-string">"code"</span> id=<span class="hljs-string">"code"</span>/&gt;&lt;img id=<span class="hljs-string">"code_img"</span> alt=<span class="hljs-string">""</span> src=<span class="hljs-string">"kaptcha.jpg"</span> style=<span class="hljs-string">"float: right; height: 40px; width:120px"</span>&gt;&lt;br/&gt;&lt;span style="float: right;font-size: 80%"&gt;看不清？点击图片刷新&lt;/span&gt;&lt;br/&gt;</code></pre><p>4.在服务端中获取生成的验证码并于与客户端发送过来的验证码比较<br><img src="/2020/04/08/javaweb-02/41.png" srcset="/img/loading.gif" alt></p><p>5.给验证码图片绑定单击事件用于刷新验证码：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 给验证码图片绑定单击事件</span>$(<span class="hljs-string">"#code_img"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 添加一个随机数避免请求地址相同，因为浏览器缓存造成不刷新</span><span class="hljs-keyword">this</span>.src = <span class="hljs-string">"$&#123;basePath&#125;kaptcha.jpg?n="</span>+ <span class="hljs-built_in">Math</span>.random();&#125;);</code></pre><h2 id="十四、购物车模块"><a href="#十四、购物车模块" class="headerlink" title="十四、购物车模块"></a>十四、购物车模块</h2><p><img src="/2020/04/08/javaweb-02/42.png" srcset="/img/loading.gif" alt></p><h3 id="1、创建购物车对象"><a href="#1、创建购物车对象" class="headerlink" title="1、创建购物车对象"></a>1、创建购物车对象</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cart</span> </span>&#123;    <span class="hljs-comment">// private Integer totalCount;// 商品总数</span>    <span class="hljs-comment">// private BigDecimal totalPrice;// 总商品金额</span>    <span class="hljs-keyword">private</span> Map&lt;Integer, CartItem&gt; items = <span class="hljs-keyword">new</span> LinkedHashMap&lt;Integer, CartItem&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getTotalCount</span><span class="hljs-params">()</span> </span>&#123;        Integer totalCount = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : items.entrySet()) &#123;            totalCount += entry.getValue().getCount();        &#125;        <span class="hljs-keyword">return</span> totalCount;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getTotalPrice</span><span class="hljs-params">()</span> </span>&#123;        BigDecimal totalPrice = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">0</span>);        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : items.entrySet()) &#123;            totalPrice = totalPrice.add(entry.getValue().getTotalPrice());        &#125;        <span class="hljs-keyword">return</span> totalPrice;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Integer, CartItem&gt; <span class="hljs-title">getItems</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> items;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setItems</span><span class="hljs-params">(Map&lt;Integer, CartItem&gt; items)</span> </span>&#123;        <span class="hljs-keyword">this</span>.items = items;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Cart&#123;"</span> +                <span class="hljs-string">"totalCount="</span> + getTotalCount() +                <span class="hljs-string">", totalPrice="</span> + getTotalPrice() +                <span class="hljs-string">", items="</span> + items +                <span class="hljs-string">'&#125;'</span>;    &#125;    <span class="hljs-comment">// 添加商品项</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addItem</span><span class="hljs-params">(CartItem cartItem)</span> </span>&#123;        <span class="hljs-comment">// 判断商品是否已经添加</span>        CartItem item = items.get(cartItem.getId());        <span class="hljs-keyword">if</span> (item == <span class="hljs-keyword">null</span>) &#123;            items.put(cartItem.getId(), cartItem);        &#125; <span class="hljs-keyword">else</span> &#123;            item.setCount(item.getCount() + <span class="hljs-number">1</span>);            item.setTotalPrice(item.getPrice().multiply(<span class="hljs-keyword">new</span> BigDecimal(item.getCount())));        &#125;    &#125;    <span class="hljs-comment">// 删除商品项</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteItem</span><span class="hljs-params">(Integer id)</span> </span>&#123;        items.remove(id);    &#125;    <span class="hljs-comment">// 清空购物车</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span> </span>&#123;        items.clear();    &#125;    <span class="hljs-comment">// 修改商品数量</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateCount</span><span class="hljs-params">(Integer id, Integer count)</span> </span>&#123;        CartItem item = items.get(id);        <span class="hljs-keyword">if</span> (item != <span class="hljs-keyword">null</span>) &#123;            item.setCount(count);            item.setTotalPrice(item.getPrice().multiply(<span class="hljs-keyword">new</span> BigDecimal(item.getCount())));        &#125;    &#125;&#125;</code></pre><h3 id="2、创建购物车商品项"><a href="#2、创建购物车商品项" class="headerlink" title="2、创建购物车商品项"></a>2、创建购物车商品项</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartItem</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer count; <span class="hljs-comment">// 数量</span>    <span class="hljs-keyword">private</span> BigDecimal price; <span class="hljs-comment">// 单价</span>    <span class="hljs-keyword">private</span> BigDecimal totalPrice;<span class="hljs-comment">// 商品总价</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CartItem</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CartItem</span><span class="hljs-params">(Integer id, String name, Integer count, BigDecimal price, BigDecimal totalPrice)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.count = count;        <span class="hljs-keyword">this</span>.price = price;        <span class="hljs-keyword">this</span>.totalPrice = totalPrice;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> count;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCount</span><span class="hljs-params">(Integer count)</span> </span>&#123;        <span class="hljs-keyword">this</span>.count = count;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(BigDecimal price)</span> </span>&#123;        <span class="hljs-keyword">this</span>.price = price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getTotalPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> totalPrice;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> </span>&#123;        <span class="hljs-keyword">this</span>.totalPrice = totalPrice;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"CartItem&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", count="</span> + count +                <span class="hljs-string">", price="</span> + price +                <span class="hljs-string">", totalPrice="</span> + totalPrice +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><h3 id="3、CartServlet用于处理商品的添加、删除、清空和修改数量"><a href="#3、CartServlet用于处理商品的添加、删除、清空和修改数量" class="headerlink" title="3、CartServlet用于处理商品的添加、删除、清空和修改数量"></a>3、CartServlet用于处理商品的添加、删除、清空和修改数量</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// System.out.println("加入购物车");</span>        <span class="hljs-comment">// 获取请求参数  商品编号</span>        <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);        <span class="hljs-comment">// 调用bookService.queryBookById(id) 得到图书信息</span>        Book book = bookService.queryBookById(id);        <span class="hljs-comment">// 将图书信息转换位CartItem商品项</span>        CartItem cartItem = <span class="hljs-keyword">new</span> CartItem(book.getId(),book.getName(),<span class="hljs-number">1</span>,book.getPrice(),book.getPrice());        <span class="hljs-comment">// 调用cart.add(CartItem)添加至购物车</span>        Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);        <span class="hljs-keyword">if</span>(cart == <span class="hljs-keyword">null</span>)&#123;            cart = <span class="hljs-keyword">new</span> Cart();            req.getSession().setAttribute(<span class="hljs-string">"cart"</span>,cart);        &#125;        cart.addItem(cartItem);        <span class="hljs-comment">// System.out.println(cart);</span>        <span class="hljs-comment">// 重定向到原来商品所在的页面</span>        resp.sendRedirect(req.getHeader(<span class="hljs-string">"Referer"</span>));    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取请求参数 id</span>        <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);        <span class="hljs-comment">// 调用cart.deleteItem(id)</span>        Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);        <span class="hljs-keyword">if</span>(cart != <span class="hljs-keyword">null</span>)&#123;            cart.deleteItem(id);        &#125;       resp.sendRedirect(req.getHeader(<span class="hljs-string">"Referer"</span>));    &#125;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取购物车对象</span>        Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);        <span class="hljs-comment">// 调用cart.clear()</span>        <span class="hljs-keyword">if</span>(cart!=<span class="hljs-keyword">null</span>)&#123;            cart.clear();        &#125;        resp.sendRedirect(req.getHeader(<span class="hljs-string">"Referer"</span>));    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateCount</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取请求的参数  商品编号  商品数量</span>        <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);        <span class="hljs-keyword">int</span> count = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"count"</span>), <span class="hljs-number">1</span>);        <span class="hljs-comment">// 获取Cart对象</span>        Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);        <span class="hljs-keyword">if</span>(cart!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-comment">// 调用updateCount方法</span>            cart.updateCount(id,count);        &#125;        resp.sendRedirect(req.getHeader(<span class="hljs-string">"Referer"</span>));    &#125;&#125;</code></pre><h3 id="4、购物车页面的展示"><a href="#4、购物车页面的展示" class="headerlink" title="4、购物车页面的展示"></a>4、购物车页面的展示</h3><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;    $(function () &#123;        <span class="hljs-comment">// 给删除商品绑定单击事件</span>        $(<span class="hljs-string">"a.deleteItem"</span>).click(function () &#123;            <span class="hljs-keyword">return</span> confirm(<span class="hljs-string">"确定从购物车中删除《"</span>+$(<span class="hljs-keyword">this</span>).parent().parent().find(<span class="hljs-string">"td:first"</span>).text()+<span class="hljs-string">"》吗？"</span>)        &#125;);        <span class="hljs-comment">// 给清空购物车绑定单击事件</span>        $(<span class="hljs-string">"#clearCart"</span>).click(function()&#123;           <span class="hljs-keyword">return</span>  confirm(<span class="hljs-string">"确定清空购物车？"</span>);        &#125;);        <span class="hljs-comment">// 给修改商品数量绑定失去焦点事件  --- onchange事件判断内容是否改变</span>        $(<span class="hljs-string">".updateCount"</span>).change(function()&#123;            <span class="hljs-keyword">var</span> id = $(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">"bookId"</span>);            <span class="hljs-keyword">var</span> count = <span class="hljs-keyword">this</span>.value;            <span class="hljs-keyword">if</span>(confirm(<span class="hljs-string">"确定修改商品的数量为 "</span>+count+<span class="hljs-string">" 吗？"</span>)&amp;&amp;count&gt;<span class="hljs-number">0</span>)&#123;                location.href=<span class="hljs-string">"$&#123;PageScope.basePath&#125;cartServlet?action=updateCount&amp;count="</span>+count+<span class="hljs-string">"&amp;id="</span>+id;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">this</span>.value = <span class="hljs-keyword">this</span>.defaultValue;<span class="hljs-comment">// 恢复到原来的数据</span>            &#125;        &#125;);    &#125;)&lt;/script&gt;&lt;body&gt;&lt;div id=<span class="hljs-string">"header"</span>&gt;    &lt;span class="wel_word"&gt;购物车&lt;/span&gt;        &lt;%--   静态包含，登录成功之后的菜单    --%&gt;        &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"/pages/common/login_sucess_menu.jsp"</span> %&gt;&lt;/div&gt;&lt;div id=<span class="hljs-string">"main"</span>&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;商品名称&lt;/td&gt;            &lt;td&gt;数量&lt;/td&gt;            &lt;td&gt;单价&lt;/td&gt;            &lt;td&gt;金额&lt;/td&gt;            &lt;td&gt;操作&lt;/td&gt;        &lt;/tr&gt;        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;empty sessionScope.cart.items&#125;"</span>&gt;            &lt;tr&gt;                &lt;td colspan="5"&gt;&lt;a href="index.jsp"&gt;当前购物车为空！点击浏览商品&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:if&gt;        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;not empty sessionScope.cart.items&#125;"</span>&gt;            &lt;%-- 购物车非空才输出--%&gt;            &lt;c:forEach items=<span class="hljs-string">"$&#123;sessionScope.cart.items&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"entry"</span>&gt;                &lt;tr&gt;                    &lt;td&gt;$&#123;entry.value.name&#125;&lt;/td&gt;                    &lt;td&gt;                         &lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"updateCount"</span>                                style=<span class="hljs-string">"width: 80px;text-align: center"</span>                                bookId=<span class="hljs-string">"$&#123;entry.value.id&#125;"</span>                                type=<span class="hljs-string">"number"</span> value=<span class="hljs-string">"$&#123;entry.value.count&#125;"</span>&gt;                    &lt;/td&gt;                    &lt;td&gt;$&#123;entry.value.price&#125;&lt;/td&gt;                    &lt;td&gt;$&#123;entry.value.totalPrice&#125;&lt;/td&gt;                    &lt;td&gt;&lt;a class="deleteItem" href="cartServlet?action=deleteItem&amp;id=$&#123;entry.value.id&#125;"&gt;删除&lt;/a&gt;&lt;/td&gt;                &lt;/tr&gt;            &lt;/c:forEach&gt;        &lt;/c:if&gt;    &lt;/table&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;not empty sessionScope.cart.items&#125;"</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"cart_info"</span>&gt;            &lt;span class="cart_span"&gt;购物车中共有&lt;span class="b_count"&gt;$&#123;sessionScope.cart.totalCount&#125;&lt;/span&gt;件商品&lt;/span&gt;            &lt;span class="cart_span"&gt;总金额&lt;span class="b_price"&gt;$&#123;sessionScope.cart.totalPrice&#125;&lt;/span&gt;元&lt;/span&gt;            &lt;span class="cart_span"&gt;&lt;a id="clearCart" href="cartServlet?action=clear"&gt;清空购物车&lt;/a&gt;&lt;/span&gt;            &lt;span class="cart_span"&gt;&lt;a href="pages/cart/checkout"&gt;去结账&lt;/a&gt;&lt;/span&gt;        &lt;/div&gt;    &lt;/c:if&gt;&lt;/div&gt;</code></pre><h3 id="5、修改首页"><a href="#5、修改首页" class="headerlink" title="5、修改首页"></a>5、修改首页</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 添加到购物车</span>$(<span class="hljs-string">"button.addToCart"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 在事件响应的function函数中  this表示正在响应的dom对象  $(this)表示经过jquery封装后的dom对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@type <span class="hljs-type">&#123;jQuery&#125;</span></span></span><span class="hljs-comment">     */</span>    <span class="hljs-comment">// 判断用户是否登录</span>    <span class="hljs-keyword">if</span>($&#123;sessionScope.user == <span class="hljs-literal">null</span>&#125;)&#123;        alert(<span class="hljs-string">"您还没有登录，请先登录或注册！"</span>)        location.href =<span class="hljs-string">"$&#123;pageScope.basePath&#125;pages/user/login.jsp"</span>;    &#125; <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">var</span> bookid =$(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">"bookid"</span>);<span class="hljs-comment">// 获取选中元素的属性值</span>        location.href=<span class="hljs-string">"$&#123;pageScope.basePath&#125;cartServlet?action=addItem&amp;id="</span>+bookid;    &#125;   &#125;);</code></pre><pre><code class="hljs jsp">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"book_add"</span>&gt;    &lt;button bookid="$&#123;book.id&#125;" class="addToCart"&gt;加入购物车&lt;/button&gt;&lt;/div&gt;</code></pre><h3 id="6、首页购物车数据回显"><a href="#6、首页购物车数据回显" class="headerlink" title="6、首页购物车数据回显"></a>6、首页购物车数据回显</h3><p>在addItem()中将添加的图书信息保存到session域中：<br><img src="/2020/04/08/javaweb-02/43.png" srcset="/img/loading.gif" alt></p><p>在首页显示需要的信息：</p><pre><code class="hljs jsp">&lt;span&gt;您的购物车中有&lt;span style="color: blue"&gt;$&#123;sessionScope.cart.totalCount&#125;&lt;/span&gt;件商品&lt;/span&gt;&lt;span&gt;   &lt;%--  购物车为空--%&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;empty sessionScope.cart.items&#125;"</span>&gt;        &lt;span style="color: red"&gt;当前购物车为空~&lt;/span&gt;    &lt;/c:if&gt;    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;not empty sessionScope.cart.items&#125;"</span>&gt;           您刚刚将&lt;span style="color: red"&gt;$&#123;sessionScope.itemName&#125;&lt;/span&gt;加入到了购物车中     &lt;/c:if&gt;&lt;/span&gt;</code></pre><h2 id="十五、订单模块"><a href="#十五、订单模块" class="headerlink" title="十五、订单模块"></a>十五、订单模块</h2><p><img src="/2020/04/08/javaweb-02/44.png" srcset="/img/loading.gif" alt></p><h3 id="1、创建Order-与OrderItem对象"><a href="#1、创建Order-与OrderItem对象" class="headerlink" title="1、创建Order 与OrderItem对象"></a>1、创建Order 与OrderItem对象</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;    <span class="hljs-keyword">private</span> String orderId;<span class="hljs-comment">// 订单号</span>    <span class="hljs-keyword">private</span> Date createTime;<span class="hljs-comment">// 下单时间</span>    <span class="hljs-keyword">private</span> BigDecimal price;<span class="hljs-comment">// 订单价格</span>    <span class="hljs-keyword">private</span> Integer status = <span class="hljs-number">0</span>;<span class="hljs-comment">// 0 未发货  1 已发货 2 已签收</span>    <span class="hljs-keyword">private</span> Integer userId;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">(String orderId, Date createTime, BigDecimal price, Integer status, Integer userId)</span> </span>&#123;        <span class="hljs-keyword">this</span>.orderId = orderId;        <span class="hljs-keyword">this</span>.createTime = createTime;        <span class="hljs-keyword">this</span>.price = price;        <span class="hljs-keyword">this</span>.status = status;        <span class="hljs-keyword">this</span>.userId = userId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getOrderId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> orderId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderId</span><span class="hljs-params">(String orderId)</span> </span>&#123;        <span class="hljs-keyword">this</span>.orderId = orderId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreateTime</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> createTime;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreateTime</span><span class="hljs-params">(Date createTime)</span> </span>&#123;        <span class="hljs-keyword">this</span>.createTime = createTime;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(BigDecimal price)</span> </span>&#123;        <span class="hljs-keyword">this</span>.price = price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> status;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(Integer status)</span> </span>&#123;        <span class="hljs-keyword">this</span>.status = status;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUserId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> userId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserId</span><span class="hljs-params">(Integer userId)</span> </span>&#123;        <span class="hljs-keyword">this</span>.userId = userId;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Order&#123;"</span> +                <span class="hljs-string">"orderId="</span> + orderId +                <span class="hljs-string">", createTime="</span> + createTime +                <span class="hljs-string">", price="</span> + price +                <span class="hljs-string">", status="</span> + status +                <span class="hljs-string">", userId="</span> + userId +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderItem</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;<span class="hljs-comment">// 商品编号</span>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">// 商品名称</span>    <span class="hljs-keyword">private</span> Integer count;<span class="hljs-comment">// 商品数量</span>    <span class="hljs-keyword">private</span> BigDecimal price;<span class="hljs-comment">// 商品总价格</span>    <span class="hljs-keyword">private</span> BigDecimal totalPrice;<span class="hljs-comment">// 商品总价格</span>    <span class="hljs-keyword">private</span> String orderId;<span class="hljs-comment">// 订单号</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrderItem</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OrderItem</span><span class="hljs-params">(Integer id, String name, Integer count, BigDecimal price, BigDecimal totalPrice, String orderId)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.count = count;        <span class="hljs-keyword">this</span>.price = price;        <span class="hljs-keyword">this</span>.totalPrice = totalPrice;        <span class="hljs-keyword">this</span>.orderId = orderId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> count;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCount</span><span class="hljs-params">(Integer count)</span> </span>&#123;        <span class="hljs-keyword">this</span>.count = count;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getTotalPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> totalPrice;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> </span>&#123;        <span class="hljs-keyword">this</span>.totalPrice = totalPrice;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getOrderId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> orderId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderId</span><span class="hljs-params">(String orderId)</span> </span>&#123;        <span class="hljs-keyword">this</span>.orderId = orderId;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> price;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(BigDecimal price)</span> </span>&#123;        <span class="hljs-keyword">this</span>.price = price;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"OrderItem&#123;"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", count="</span> + count +                <span class="hljs-string">", price="</span> + price +                <span class="hljs-string">", totalPrice="</span> + totalPrice +                <span class="hljs-string">", orderId="</span> + orderId +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre><h3 id="2、创建OrderDao接口并实现接口中的方法"><a href="#2、创建OrderDao接口并实现接口中的方法" class="headerlink" title="2、创建OrderDao接口并实现接口中的方法"></a>2、创建OrderDao接口并实现接口中的方法</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderDao</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 保存订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveOrder</span><span class="hljs-params">(Order order)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询全部订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">queryOrders</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 修改订单状态</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Status</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">changeOrderStatus</span><span class="hljs-params">(String orderId,Integer status)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据用户编号查看订单信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> UserId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">queryOrderByUserId</span><span class="hljs-params">(Integer userId)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderDao</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveOrder</span><span class="hljs-params">(Order order)</span> </span>&#123;        String sql = <span class="hljs-string">"insert into bookorder(`order_id`,`create_time`,`price`,`status`,`user_id`)values(?,?,?,?,?)"</span>;        <span class="hljs-keyword">return</span> update(sql,order.getOrderId(),order.getCreateTime(),order.getPrice(),order.getStatus(),order.getUserId());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">queryOrders</span><span class="hljs-params">()</span> </span>&#123;        String sql = <span class="hljs-string">"select `order_id` orderId ,`create_time` createTime,`price` ,`status`,`user_id` userId from bookorder"</span>;        <span class="hljs-keyword">return</span> queryForList(Order<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>)</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">changeOrderStatus</span><span class="hljs-params">(String orderId, Integer status)</span> </span>&#123;        String sql = <span class="hljs-string">"update bookorder set status = ? where order_id = ?"</span>;        <span class="hljs-keyword">return</span> update(sql,status,orderId);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">queryOrderByUserId</span><span class="hljs-params">(Integer userId)</span> </span>&#123;        String sql = <span class="hljs-string">"select `order_id` orderId ,`create_time` createTime,`price` ,`status`,`user_id` userId from bookorder where user_id=?"</span>;        <span class="hljs-keyword">return</span> queryForList(Order<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>,<span class="hljs-title">userId</span>)</span>;    &#125;&#125;</code></pre><h3 id="3、创建-OrderItemDao接口并实现其方法"><a href="#3、创建-OrderItemDao接口并实现其方法" class="headerlink" title="3、创建 OrderItemDao接口并实现其方法"></a>3、创建 OrderItemDao接口并实现其方法</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderItemDao</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 保存订单项</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveOrderItem</span><span class="hljs-params">(OrderItem item)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更具订单号查询订单详情</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OrderItem <span class="hljs-title">queryOrderItemsByOrderId</span><span class="hljs-params">(String orderId)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderItemDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderItemDao</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveOrderItem</span><span class="hljs-params">(OrderItem item)</span> </span>&#123;        String sql = <span class="hljs-string">"insert into bookorder_item(`name`,`count`,`price`,`totalprice`,`order_id`)values(?,?,?,?,?)"</span>;        <span class="hljs-keyword">return</span> update(sql,item.getName(),item.getCount(),item.getPrice(),item.getTotalPrice(),item.getOrderId());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OrderItem <span class="hljs-title">queryOrderItemsByOrderId</span><span class="hljs-params">(String orderId)</span> </span>&#123;        String sql = <span class="hljs-string">"select `name`,`count`,`price`,`totalprice` totalPrice,`order_id` orderId from bookorder_item where order_id = ?"</span>;        <span class="hljs-keyword">return</span> queryForOne(OrderItem<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>,<span class="hljs-title">orderId</span>)</span>;    &#125;&#125;</code></pre><h3 id="4、创建OrderService并实现其中的方法"><a href="#4、创建OrderService并实现其中的方法" class="headerlink" title="4、创建OrderService并实现其中的方法"></a>4、创建OrderService并实现其中的方法</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 生成订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cart</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 订单号</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createOrder</span><span class="hljs-params">(Cart cart,Integer userId)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询全部订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">showAllOrder</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发货</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendOrder</span><span class="hljs-params">(String orderId)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查看订单详情</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OrderItem <span class="hljs-title">showOrderDetailById</span><span class="hljs-params">(String orderId)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 用户查看订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">showMyOrder</span><span class="hljs-params">(Integer userId)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 签收订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiverOrder</span><span class="hljs-params">(String orderId)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span> </span>&#123;    <span class="hljs-keyword">private</span> OrderDao orderDao = <span class="hljs-keyword">new</span> OrderDaoImpl();    <span class="hljs-keyword">private</span> OrderItemDao orderItemDao = <span class="hljs-keyword">new</span> OrderItemDaoImpl();    <span class="hljs-keyword">private</span> BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createOrder</span><span class="hljs-params">(Cart cart, Integer userId)</span> </span>&#123;        <span class="hljs-comment">// 订单号唯一</span>        String orderId = System.currentTimeMillis() + <span class="hljs-string">""</span> + userId;        <span class="hljs-comment">// 创建一个订单对象</span>        Order order = <span class="hljs-keyword">new</span> Order(orderId, <span class="hljs-keyword">new</span> Date(), cart.getTotalPrice(), <span class="hljs-number">0</span>, userId);        <span class="hljs-comment">// 保存 订单到数据库</span>        orderDao.saveOrder(order);        <span class="hljs-comment">// 保存订单项</span>        <span class="hljs-comment">// 创建订单项</span>        <span class="hljs-comment">// 遍历购物车中的每一个商品项转换为订单商品项</span>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : cart.getItems().entrySet()) &#123;            CartItem cartItem = entry.getValue();            OrderItem orderItem = <span class="hljs-keyword">new</span> OrderItem(<span class="hljs-keyword">null</span>, cartItem.getName(), cartItem.getCount(), cartItem.getPrice(), cartItem.getTotalPrice(), orderId);            orderItemDao.saveOrderItem(orderItem);            <span class="hljs-comment">// 修改图书库存和销量</span>            <span class="hljs-comment">// 获取book对象</span>            Book book = bookDao.queryBookById(cartItem.getId());            book.setSales(book.getSales() + cartItem.getCount());            book.setStock(book.getStock() - cartItem.getCount());            bookDao.updateBook(book);        &#125;        <span class="hljs-comment">// 清空购物车</span>        cart.clear();        <span class="hljs-keyword">return</span> orderId;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">showAllOrder</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> orderDao.queryOrders();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendOrder</span><span class="hljs-params">(String orderId)</span> </span>&#123;        orderDao.changeOrderStatus(orderId,<span class="hljs-number">1</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OrderItem <span class="hljs-title">showOrderDetailById</span><span class="hljs-params">(String orderId)</span> </span>&#123;        <span class="hljs-keyword">return</span> orderItemDao.queryOrderItemsByOrderId(orderId);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">showMyOrder</span><span class="hljs-params">(Integer userId)</span> </span>&#123;        <span class="hljs-keyword">return</span> orderDao.queryOrderByUserId(userId);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiverOrder</span><span class="hljs-params">(String orderId)</span> </span>&#123;        orderDao.changeOrderStatus(orderId,<span class="hljs-number">2</span>);    &#125;&#125;</code></pre><h3 id="5、创建OrderServlet并添加相应的功能"><a href="#5、创建OrderServlet并添加相应的功能" class="headerlink" title="5、创建OrderServlet并添加相应的功能"></a>5、创建OrderServlet并添加相应的功能</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;    <span class="hljs-keyword">private</span> OrderService orderService = <span class="hljs-keyword">new</span> OrderServiceImpl();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 生成订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createOrder</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取Cart对象</span>        Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);        <span class="hljs-comment">// 获取userId</span>        User user = (User) req.getSession().getAttribute(<span class="hljs-string">"user"</span>);        Integer userId = user.getId();        <span class="hljs-comment">// 调用orderService</span>        String orderId = orderService.createOrder(cart, userId);        req.getSession().setAttribute(<span class="hljs-string">"orderId"</span>,orderId);        <span class="hljs-comment">// 重定向结算成功页面</span>        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">"/pages/cart/checkout.jsp"</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询我的订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showMyOrders</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取userId</span>        User user = (User) req.getSession().getAttribute(<span class="hljs-string">"user"</span>);        Integer userId = user.getId();        <span class="hljs-comment">// 得到order对象</span>        List&lt;Order&gt; orders= orderService.showMyOrder(userId);        <span class="hljs-comment">// 保存至request中</span>        req.setAttribute(<span class="hljs-string">"orders"</span>,orders);        <span class="hljs-comment">// 请求转发到我的订单页面</span>        req.getRequestDispatcher(<span class="hljs-string">"/pages/order/order.jsp"</span>).forward(req,resp);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查看商品详情</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showOrderDetail</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取orderId</span>        String orderId = req.getParameter(<span class="hljs-string">"orderId"</span>);        <span class="hljs-comment">// System.out.println(orderId);</span>        <span class="hljs-comment">// 创建OrderItem对象</span>        <span class="hljs-comment">// 调用oderService.showOrderDetailById()</span>        OrderItem orderItem = orderService.showOrderDetailById(orderId);        req.setAttribute(<span class="hljs-string">"orderItem"</span>,orderItem);        req.getRequestDispatcher(<span class="hljs-string">"/pages/order/order_detail.jsp"</span>).forward(req,resp);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 显示所有订单</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAllOrders</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        List&lt;Order&gt; allOrders =  orderService.showAllOrder();        req.setAttribute(<span class="hljs-string">"allOrders"</span>,allOrders);        req.getRequestDispatcher(<span class="hljs-string">"/pages/manager/order_manager.jsp"</span>).forward(req,resp);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发货</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendOrder</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取orderId</span>        String orderId = req.getParameter(<span class="hljs-string">"orderId"</span>);        orderService.sendOrder(orderId);        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">"/orderServlet?action=showAllOrders"</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 确认收货</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiverOrder</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取orderId</span>        String orderId = req.getParameter(<span class="hljs-string">"orderId"</span>);        orderService.receiverOrder(orderId);        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">"/orderServlet?action=showMyOrders"</span>);    &#125;&#125;</code></pre><h3 id="5、调整jsp页面"><a href="#5、调整jsp页面" class="headerlink" title="5、调整jsp页面"></a>5、调整jsp页面</h3><p>1.修改购物车页面中去结算的跳转地址<img src="/2020/04/08/javaweb-02/45.png" srcset="/img/loading.gif" alt></p><p>2.在order.jsp中显示当前用户的订单信息</p><pre><code class="hljs jsp">&lt;table&gt;   &lt;tr&gt;      &lt;td&gt;日期&lt;/td&gt;      &lt;td&gt;金额&lt;/td&gt;      &lt;td&gt;状态&lt;/td&gt;      &lt;td&gt;详情&lt;/td&gt;      &lt;td&gt;确认收货&lt;/td&gt;   &lt;/tr&gt;   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;not empty requestScope.orders&#125;"</span>&gt;      &lt;c:forEach items=<span class="hljs-string">"$&#123;requestScope.orders&#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"order"</span>&gt;         &lt;tr&gt;            &lt;td&gt;$&#123;order.createTime&#125;&lt;/td&gt;            &lt;td&gt;$&#123;order.price&#125;&lt;/td&gt;            &lt;td&gt;               &lt;c:choose&gt;                  &lt;c:when test="$&#123;order.status==0&#125;"&gt;未发货&lt;/c:when&gt;                  &lt;c:when test="$&#123;order.status==1&#125;"&gt;已发货&lt;/c:when&gt;                  &lt;c:otherwise&gt;已签收&lt;/c:otherwise&gt;               &lt;/c:choose&gt;            &lt;/td&gt;            &lt;td&gt;&lt;a href="orderServlet?action=showOrderDetail&amp;orderId=$&#123;order.orderId&#125;"&gt;查看详情&lt;/a&gt;&lt;/td&gt;            &lt;td&gt;&lt;c:choose&gt;               &lt;c:when test="$&#123;order.status==0&#125;"&gt;&lt;span style="color: red"&gt;还没有发货哦~&lt;/span&gt;&lt;/c:when&gt;               &lt;c:when test="$&#123;order.status==1&#125;"&gt;&lt;a href="orderServlet?action=receiverOrder&amp;orderId=$&#123;order.orderId&#125;"&gt;确认收货&lt;/a&gt;&lt;/c:when&gt;               &lt;c:otherwise&gt;&lt;span style="color: red"&gt;已经签收了~&lt;/span&gt;&lt;/c:otherwise&gt;            &lt;/c:choose&gt;            &lt;/td&gt;         &lt;/tr&gt;      &lt;/c:forEach&gt;   &lt;/c:if&gt;   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"$&#123;empty requestScope.orders&#125;"</span>&gt;      &lt;td colspan="4"&gt;&lt;a href="pages/cart/cart.jsp"&gt;您暂时没有订单，快去购物车下单吧~&lt;/a&gt;&lt;/td&gt;   &lt;/c:if&gt;&lt;/table&gt;</code></pre><p>4.在order_detail.jsp中显示订单的详细信息</p><pre><code class="hljs jsp">&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;商品名称&lt;/td&gt;        &lt;td&gt;数量&lt;/td&gt;        &lt;td&gt;单价&lt;/td&gt;        &lt;td&gt;总价&lt;/td&gt;        &lt;td&gt;订单号&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;$&#123;requestScope.orderItem.name&#125;&lt;/td&gt;        &lt;td&gt;$&#123;requestScope.orderItem.count&#125;&lt;/td&gt;        &lt;td&gt;$&#123;requestScope.orderItem.price&#125;&lt;/td&gt;        &lt;td&gt;$&#123;requestScope.orderItem.totalPrice&#125;&lt;/td&gt;        &lt;td&gt;$&#123;requestScope.orderItem.orderId&#125;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p>5.修改首页的后台管理中订单管理的跳转地址<br><img src="/2020/04/08/javaweb-02/46.png" srcset="/img/loading.gif" alt></p><p>6.在订单管理中显示所有的订单信息</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>日期<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>金额<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>详情<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>状态<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>发货<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;not empty requestScope.allOrders&#125;"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">"$&#123;requestScope.allOrders&#125;"</span> <span class="hljs-attr">var</span>=<span class="hljs-string">"order"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;order.createTime&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;order.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"orderServlet?action=showOrderDetail&amp;orderId=$&#123;order.orderId&#125;"</span>&gt;</span>查看详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;order.status==0&#125;"</span>&gt;</span>未发货<span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;order.status==1&#125;"</span>&gt;</span>已发货<span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span>已签收<span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;order.status==0&#125;"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"orderServlet?action=sendOrder&amp;orderId=$&#123;order.orderId&#125;"</span>&gt;</span>发货<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;order.status==1&#125;"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red"</span>&gt;</span>已经发货了~<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red"</span>&gt;</span>已经签收了~<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"$&#123;empty requestScope.allOrders&#125;"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"5"</span>&gt;</span>暂时没有订单<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h2 id="十六、使用Filter实现权限检查"><a href="#十六、使用Filter实现权限检查" class="headerlink" title="十六、使用Filter实现权限检查"></a>十六、使用Filter实现权限检查</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.filter;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ManagerFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;        HttpServletRequest httpServletRequest = (HttpServletRequest) request;        User user = (User) httpServletRequest.getSession().getAttribute(<span class="hljs-string">"user"</span>);        <span class="hljs-keyword">if</span>(user.getStatus()!=<span class="hljs-number">1</span>)&#123;            httpServletRequest.getRequestDispatcher(<span class="hljs-string">"/pages/user/login.jsp"</span>).forward(request,response);        &#125;<span class="hljs-keyword">else</span>&#123;            chain.doFilter(request,response);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>ManagerFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bookmall.filter.ManagerFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>ManagerFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/pages/manager/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/manager/bookServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><h2 id="十七、使用Filter和TheadLocal组合管理事务"><a href="#十七、使用Filter和TheadLocal组合管理事务" class="headerlink" title="十七、使用Filter和TheadLocal组合管理事务"></a>十七、使用Filter和TheadLocal组合管理事务</h2><p><img src="/2020/04/08/javaweb-02/49.png" srcset="/img/loading.gif" alt></p><p><strong>修改JdbcUtils：</strong><br>创建一个ThreadLocal对象，用于将获取的连接与当前线程关联：<br><img src="/2020/04/08/javaweb-02/47.png" srcset="/img/loading.gif" alt><br>修改getConnection()：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;    Connection conn = conns.get();    <span class="hljs-keyword">if</span> (conn == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">try</span> &#123;            conn = dataSource.getConnection();<span class="hljs-comment">// 从数据库连接池中获取连接</span>            conns.set(conn);<span class="hljs-comment">// 将连接保存到ThreadLocal对象中，供后面的jdbc操作使用，保证执行事务时是同一个连接</span>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<span class="hljs-comment">// 设置为不自动提交事务</span>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">return</span> conn;&#125;</code></pre><p>添加提交并关闭连接的方法以及回滚并关闭连接的方法：</p><pre><code class="hljs java"> <span class="hljs-comment">/**</span><span class="hljs-comment"> * 提交事务并关闭连接</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commitAndClose</span><span class="hljs-params">()</span></span>&#123;    Connection conn = conns.get();    <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;        <span class="hljs-keyword">try</span> &#123;            conn.commit();<span class="hljs-comment">// 提交事务</span>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                conn.close();<span class="hljs-comment">// 关闭连接</span>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;                throwables.printStackTrace();            &#125;        &#125;    &#125;    <span class="hljs-comment">// 移除线程</span>    conns.remove(); &#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 回滚事务并关闭连接</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rollbackAndClose</span><span class="hljs-params">()</span></span>&#123;    Connection conn = conns.get();    <span class="hljs-keyword">if</span>(conn !=<span class="hljs-keyword">null</span>)&#123;        <span class="hljs-keyword">try</span> &#123;            conn.rollback();        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;            throwables.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                conn.close();            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;                throwables.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><p><strong>修改BaseDao,BaseServlet：</strong><br>1、将所有方法中的关闭连接操作删除，用于保证所用操作都使用同一个连接；<br>2、在每个方法中都添加抛出异常的语句，提供给执行相应操作的Servlet程序捕获，用于回滚。<br> <strong>使用Filter过滤器为所用的Service方法添加try-catch:</strong><br><img src="/2020/04/08/javaweb-02/48.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bookmall.filter;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransactionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;        <span class="hljs-keyword">try</span> &#123;            chain.doFilter(request,response);            <span class="hljs-comment">// 提交事务</span>            JdbcUtils.commitAndClose();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-comment">// 回滚事务</span>            JdbcUtils.rollbackAndClose();            <span class="hljs-comment">// 将异常抛给服务器</span>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bookmall.filter.TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-comment">&lt;!--  当前工程下的所有请求 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p><strong>将所有异常同一交给Tomcat，让Tomcat展示友好的错误信息页面：</strong><br>配置web.xml</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置服务器出错后，自动跳转的页面--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span>    <span class="hljs-comment">&lt;!--   错误类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span>    <span class="hljs-comment">&lt;!--  要跳转去的页面路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error404.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error500.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span></code></pre><h2 id="十八、使用Ajax判断用户名是否可用"><a href="#十八、使用Ajax判断用户名是否可用" class="headerlink" title="十八、使用Ajax判断用户名是否可用"></a>十八、使用Ajax判断用户名是否可用</h2><p><img src="/2020/04/08/javaweb-02/50.jpg" srcset="/img/loading.gif" alt></p><pre><code class="hljs javaScript"><span class="hljs-comment">// 给用户名输入框绑定失去焦点事件</span>$(<span class="hljs-string">"#username"</span>).blur(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// 获取用户名</span>    <span class="hljs-keyword">var</span> username = <span class="hljs-keyword">this</span>.value;    $.getJSON(        <span class="hljs-string">"$&#123;pageScope.basePath&#125;userServlet"</span>,        <span class="hljs-string">"action=ajaxExistUsername&amp;username="</span> + username,        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;            <span class="hljs-keyword">if</span> (data.existUsername) &#123;                $(<span class="hljs-string">"span.errorMsg"</span>).css(&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">"#dd0000"</span>&#125;);                $(<span class="hljs-string">"span.errorMsg"</span>).text(<span class="hljs-string">"用户名已存在！"</span>);            &#125; <span class="hljs-keyword">else</span> &#123;                $(<span class="hljs-string">"span.errorMsg"</span>).css(&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">"#00dd00"</span>&#125;);                $(<span class="hljs-string">"span.errorMsg"</span>).text(<span class="hljs-string">"用户名可用~"</span>);            &#125;        &#125;);&#125;);</code></pre><p>在UserServlet中添加ajaxExisUsername()</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 验证用户名是否已经注册</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajaxExistUsername</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException</span>&#123;    <span class="hljs-comment">// 获取请求参数</span>    String username = req.getParameter(<span class="hljs-string">"username"</span>);    <span class="hljs-comment">// 调用userService</span>    <span class="hljs-keyword">boolean</span> existUsername = userService.existUsername(username);    <span class="hljs-comment">// 把返回的结果封装成Map对象</span>    Map&lt;String,Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();    resultMap.put(<span class="hljs-string">"existUsername"</span>,existUsername);    <span class="hljs-comment">// 将Map对象转换为json字符串</span>    Gson gson = <span class="hljs-keyword">new</span> Gson();    String json = gson.toJson(resultMap);    resp.getWriter().write(json);&#125;</code></pre><h2 id="十九、使用Ajax修改把商品添加到购物车"><a href="#十九、使用Ajax修改把商品添加到购物车" class="headerlink" title="十九、使用Ajax修改把商品添加到购物车"></a>十九、使用Ajax修改把商品添加到购物车</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 使用Ajax添加图书到购物车</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajaxAddItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;    <span class="hljs-comment">// System.out.println("加入购物车");</span>    <span class="hljs-comment">// 获取请求参数  商品编号</span>    <span class="hljs-keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="hljs-string">"id"</span>),<span class="hljs-number">0</span>);    <span class="hljs-comment">// 调用bookService.queryBookById(id) 得到图书信息</span>    Book book = bookService.queryBookById(id);    <span class="hljs-comment">// 将图书信息转换为CartItem商品项</span>    CartItem cartItem = <span class="hljs-keyword">new</span> CartItem(book.getId(),book.getName(),<span class="hljs-number">1</span>,book.getPrice(),book.getPrice());    <span class="hljs-comment">// 调用cart.add(CartItem)添加至购物车</span>    Cart cart = (Cart) req.getSession().getAttribute(<span class="hljs-string">"cart"</span>);    <span class="hljs-keyword">if</span>(cart == <span class="hljs-keyword">null</span>)&#123;        cart = <span class="hljs-keyword">new</span> Cart();        req.getSession().setAttribute(<span class="hljs-string">"cart"</span>,cart);    &#125;    cart.addItem(cartItem);    <span class="hljs-comment">// 将添加的商品添加到session域中</span>    req.getSession().setAttribute(<span class="hljs-string">"itemName"</span>,cartItem.getName());    <span class="hljs-comment">// 将需要在页面刷新的信息封装到Map中</span>    Map&lt;String,Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();    <span class="hljs-comment">// 购物车中总的商品数量</span>    resultMap.put(<span class="hljs-string">"totalCount"</span>,cart.getTotalCount());    <span class="hljs-comment">// 最后一个添加到购物车的商品名称</span>    resultMap.put(<span class="hljs-string">"lastName"</span>,cartItem.getName());    <span class="hljs-comment">// 将Map转换为json字符串</span>    Gson gson = <span class="hljs-keyword">new</span> Gson();    String json = gson.toJson(resultMap);    <span class="hljs-comment">// 回传给客户端</span>    resp.getWriter().write(json);&#125;</code></pre><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> bookid = $(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">"bookid"</span>);<span class="hljs-comment">// 获取选中元素的属性值</span><span class="hljs-comment">// location.href="$&#123;pageScope.basePath&#125;cartServlet?action=addItem&amp;id="+bookid;</span><span class="hljs-comment">// 使用ajax发送请求</span>$.getJSON(    <span class="hljs-string">"$&#123;pageScope.basePath&#125;cartServlet"</span>,    <span class="hljs-string">"action=ajaxAddItem&amp;id="</span> + bookid,    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;        $(<span class="hljs-string">"#cartTotalCount"</span>).text(data.totalCount);        $(<span class="hljs-string">"#cartlastName"</span>).text(data.lastName);    &#125;)</code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>您的购物车中有<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cartTotalCount"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red"</span>&gt;</span>$&#123;sessionScope.cart.totalCount&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>件商品<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>    您刚刚将<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cartlastName"</span><span class="hljs-attr">style</span>=<span class="hljs-string">"color:red"</span>&gt;</span>$&#123;sessionScope.itemName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>加入到了购物车中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2020/04/05/javaweb-01/"/>
    <url>/2020/04/05/javaweb-01/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaWeb概念"><a href="#JavaWeb概念" class="headerlink" title="JavaWeb概念"></a>JavaWeb概念</h2><p><strong>javaweb：</strong>所有由java编写的可以通过浏览器访问的程序的总称。<br>javaweb是基于请求和响应来开发的。<a id="more"></a></p><p><strong>请求：</strong>Request，是指客户端(浏览器)给服务器(Tomcat)发送数据。<br><strong>响应：</strong>Response，服务器给客户端回传数据。</p><p><strong>请求与响应的关系：</strong>请求和响应是成对出现的，有请求就有响应。</p><h2 id="Web资源的分类"><a href="#Web资源的分类" class="headerlink" title="Web资源的分类"></a>Web资源的分类</h2><p>web资源按实现的技术和呈现的效果的不同，分为静态资源和动态资源。<br>静态资源：html、css、js、txt文本、mp4视频、jpg图片等等<br>动态资源：jsp页面、Servlet程序</p><h2 id="Tomcat端口号"><a href="#Tomcat端口号" class="headerlink" title="Tomcat端口号"></a>Tomcat端口号</h2><p>tomcat默认端口号：8080<br>apache-tomcat-8.0.50\conf\server.xml文件可修改默认端口号</p><p>http默认端口号：80<br>https默认端口号：443(浏览器会自动补全)</p><p>web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如JAVA中的Tomcat容器，ASP的IIS或PWS都是这样的容器。一个服务器可以多个容器。Web容器负责将HTTP请求转换为HttpServletRequest对象。</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>1、Servlet是JavaEE规范之一，规范就是接口。<br>2、Servlet是JavaWeb三大组件之一，三大组件为：Servlet程序、Filter过滤器、Listener监听器。<br>3、Servlet是运行在服务器上的一个java小程序，可以接受客户端发送过来的请求并发送响应数据给客户端。<br><strong>手动实现Servlet程序:</strong><br>1、编写一个类去实现Servlet 接口<br>2、实现service 方法，处理请求，并响应数据<br>3、到web.xml 中去配置servlet 程序的访问地址</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- servlet标签给Tomcat服务器配置Servlet程序 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-comment">&lt;!-- servlet-name标签用于给 Servlet程序起一个别名(一般是类名)--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-comment">&lt;!-- servlet-class 是Servlet程序的全类名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!-- servlet-mapping标签用于给servlet程序配置访问地址--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-comment">&lt;!-- servlet-name告诉服务器当前的配置地址是给哪一个servlet程序使用的--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-comment">&lt;!-- url-pattern标签配置访问地址</span><span class="hljs-comment">             / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径</span><span class="hljs-comment">        --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/test<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><p><strong>Servlet的生命周期：</strong></p><p>1、加载：容器通过类加载器使用Servlet类对应的文件来加载Servlet</p><p>2、创建：通过<strong>调用Servlet的构造函数来创建一个Servlet实例</strong></p><p>3、初始化：通过调用Servlet的init()方法来完成初始化工作，<strong>这个方法是在Servlet已经被创建，但在向客户端提供服务之前调用。</strong></p><p>4、处理客户请求：Servlet创建后就可以处理请求，当有新的客户端请求时，Web容器都会<strong>创建一个新的线程</strong>来处理该请求。接着调用Servlet的Service()方法来响应客户端请求（Service方法根据请求的method属性来调用doGet()和doPost()）</p><p>5、卸载：<strong>容器在卸载Servlet之前</strong>需要调用destroy()方法，让Servlet释放其占用的资源。</p><p><strong>通过继承HttpServlet实现Servlet程序：</strong>一般在实际开发中使用此方式<br>1、编写一个类去继承HttpServlet类<br>2、根据业务需求重写doGet 或 doPost 方法<br>3、在web.xml中配置servlet程序的访问地址<br><img src="/2020/04/05/javaweb-01/1.png" srcset="/img/loading.gif" alt></p><p>ServletConfig类的作用：<br>1、获取 Servlet 程序的别名 servlet-name的值；<br>2、获取初始化参数 init-param；<br>3、获取ServletContext 对象；</p><p>ServletContext：<br>1、ServletContext 是一个接口，它表示Servlet 上下文对象<br>2、一个web 工程，只有一个ServletContext 对象实例。<br>3、ServletContext 对象是一个域对象。<br>4、ServletContext 是在web 工程部署启动的时候创建。在web 工程停止的时候销毁。</p><blockquote><p>什么是域对象?<br>域对象，是可以像Map 一样存取数据的对象，叫域对象。<br>这里的域指的是存取数据的操作范围，整个web 工程。<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;存数据&nbsp;  &nbsp; &nbsp; &nbsp; 取数据&nbsp;  &nbsp; &nbsp;&nbsp;删除数据<br>Map &nbsp; &nbsp; &nbsp;put() &nbsp; &nbsp; &nbsp;&nbsp;get()  &nbsp; &nbsp; &nbsp;&nbsp;remove()<br>域对象 &nbsp; setAttribute() &nbsp;getAttribute()&nbsp; removeAttribute()</p></blockquote><p>ServletContext 类的四个作用<br>1、获取web.xml 中配置的上下文参数context-param<br>2、获取当前的工程路径，格式: /工程路径<br>3、获取工程部署后在服务器硬盘上的绝对路径<br>4、像Map 一样存取数据</p><h2 id="请求的HTTP协议格式"><a href="#请求的HTTP协议格式" class="headerlink" title="请求的HTTP协议格式"></a>请求的HTTP协议格式</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>1、请求行<br>(1) 请求的方式GET<br>(2) 请求的资源路径[+?+请求参数]<br>(3) 请求的协议的版本号HTTP/1.1<br>2、请求头<br>key : value 组成不同的键值对，表示不同的含义。<br><img src="/2020/04/05/javaweb-01/2.png" srcset="/img/loading.gif" alt></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>1、请求行<br>(1) 请求的方式POST<br>(2) 请求的资源路径[+?+请求参数]<br>(3) 请求的协议的版本号HTTP/1.1<br>2、请求头</p><p>1) key : value 不同的请求头，有不同的含义<br>空行<br>3、请求体===&gt;&gt;&gt; 就是发送给服务器的数据<br><img src="/2020/04/05/javaweb-01/3.png" srcset="/img/loading.gif" alt><br>GET 请求有哪些：<br>1、form 标签method=get<br>2、a 标签<br>3、link 标签引入css<br>4、Script 标签引入js 文件<br>5、img 标签引入图片<br>6、iframe 引入html 页面<br>7、在浏览器地址栏中输入地址后敲回车<br>POST 请求有哪些：<br>8、form 标签method=post</p><h2 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h2><p>1、响应行<br>(1) 响应的协议和版本号<br>(2) 响应状态码<br>(3) 响应状态描述符<br>2、响应头<br>(1) key : value 不同的响应头，有其不同含义<br>空行<br>3、响应体—-&gt;&gt;&gt; 就是回传给客户端的数据<br><img src="/2020/04/05/javaweb-01/4.png" srcset="/img/loading.gif" alt></p><p>常见的响应码：<br>200&nbsp;&nbsp;&nbsp;&nbsp;请求成功<br>302&nbsp;&nbsp;&nbsp;&nbsp;表示请求重定向<br>404&nbsp;&nbsp;&nbsp;&nbsp;表示服务器已经收到，但是请求的数据不存在<br>500&nbsp;&nbsp;&nbsp;&nbsp;表示服务器已经收到，但是服务器内部错误</p><h2 id="MMIE类型说明"><a href="#MMIE类型说明" class="headerlink" title="MMIE类型说明"></a>MMIE类型说明</h2><p>MIME是HTTP协议中的数据类型<br><img src="/2020/04/05/javaweb-01/5.png" srcset="/img/loading.gif" alt></p><h2 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h2><p>每次只要有请求进入Tomcat 服务器，Tomcat 服务器就会把请求过来的HTTP 协议信息解析好封装到Request 对象中。然后传递到service 方法（doGet 和doPost）中给我们使用。我们可以通过HttpServletRequest 对象，获取到有请求的信息。</p><p><strong>HttpServletRequest常用方法：</strong><br>i. getRequestURI() 获取请求的资源路径<br>ii. getRequestURL() 获取请求的统一资源定位符（绝对路径）<br>iii. getRemoteHost() 获取客户端的ip 地址<br>iv. getHeader() 获取请求头<br>v. getParameter() 获取请求的参数<br>vi. getParameterValues() 获取请求的参数（多个值的时候使用）<br>vii. getMethod() 获取请求的方式GET 或POST<br>viii. setAttribute(key, value); 设置域数据<br>ix. getAttribute(key); 获取域数据<br>x. getRequestDispatcher() 获取请求转发对象</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://localhost:8080/06.servlet/test3"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        兴趣爱好：        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cpp"</span>&gt;</span>C++        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"java"</span>&gt;</span>Java        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"js"</span>&gt;</span>JavaScript        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        System.out.println(<span class="hljs-string">"post请求"</span>);        <span class="hljs-comment">// 设置请求体的字符集为UTF-8，从而解决post 请求的中文乱码问题</span>        request.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);        <span class="hljs-comment">// 获取请求参数</span>        String username = request.getParameter(<span class="hljs-string">"username"</span>);        String pwd = request.getParameter(<span class="hljs-string">"pwd"</span>);        String[] hobbies = request.getParameterValues(<span class="hljs-string">"hobby"</span>);        System.out.println(username);        System.out.println(pwd);        System.out.println(Arrays.asList(hobbies));    &#125;&#125;</code></pre><h2 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h2><p>服务器收到请求后，从一个资源跳转到另一个资源的操作。<br>特点：1、浏览器地址栏没有变化<br>            2、是一次请求<br>            3、共享Request域中的数据<br>            4、可以转发到WEB-INF目录下<br>            5、不可以访问工程外的资源<br>可能会造成表单的多次提交。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,IOException </span>&#123;<span class="hljs-comment">// 获取请求的参数（办事的材料）查看</span>String username = req.getParameter(<span class="hljs-string">"username"</span>);System.out.println(<span class="hljs-string">"在Servlet1（柜台1）中查看参数（材料）："</span> + username);<span class="hljs-comment">// 给材料盖一个章，并传递到Servlet2（柜台2）去查看</span>req.setAttribute(<span class="hljs-string">"key1"</span>,<span class="hljs-string">"柜台1 的章"</span>);<span class="hljs-comment">// 问路：Servlet2（柜台2）怎么走</span><span class="hljs-comment">/**</span><span class="hljs-comment">* 请求转发必须要以斜杠打头，斜杠表示地址为：http://ip:port/工程名/ , 映射到IDEA 代码的web目录</span><span class="hljs-comment">    */</span>RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="hljs-string">"/servlet2"</span>);<span class="hljs-comment">// RequestDispatcher requestDispatcher = req.getRequestDispatcher("http://www.baidu.com");</span><span class="hljs-comment">// 走向Sevlet2（柜台2）</span>requestDispatcher.forward(req,resp);&#125;&#125;</code></pre><h2 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h2><p>设置页面相对路径工作时参照的路径</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>c.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!--base 标签设置页面相对路径工作时参照的地址</span><span class="hljs-comment">        href 属性就是参数的地址值</span><span class="hljs-comment">     --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://localhost:8080/06.servlet/a/b/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    这是a/b/c.html    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../../index.html"</span>&gt;</span>返回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h2><p>HttpServletResponse 类和HttpServletRequest 类一样。<br>每次请求进来，Tomcat 服务器都会创建一个Response 对象传递给Servlet 程序去使用。<br>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息。<br><strong>两个输出流：(同时只能使用一个)</strong><br>字节流：getOutputStream();  &nbsp;&nbsp;&nbsp;常用于下载，传递二进制数据<br>字符流：getWriter();&nbsp;&nbsp;&nbsp;常用于回传字符串</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<span class="hljs-comment">//        // 设置服务器字符集</span><span class="hljs-comment">//        response.setCharacterEncoding("utf-8");</span><span class="hljs-comment">//        // 通过响应头，设置客户端（浏览器）字符集</span><span class="hljs-comment">//        response.setHeader("Content-Type","text/html;charset=UTF-8");</span>        <span class="hljs-comment">// 同时设置服务端和客户端的编码集</span>        response.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);<span class="hljs-comment">// 必须在获取流对象之前使用</span>        <span class="hljs-comment">// 向客户端回传字符串数据</span>        PrintWriter writer = response.getWriter();        writer.write(<span class="hljs-string">"lbw牛逼"</span>);    &#125;&#125;</code></pre><h2 id="请求的重定向"><a href="#请求的重定向" class="headerlink" title="请求的重定向"></a>请求的重定向</h2><p>请求重定向，是指客户端给服务器发请求，然后服务器通过响应头告诉客户端，并提供一个新的地址，然后客户端去新地址访问，叫请求重定向（因为之前的地址可能已经被废弃）。可以解决表单的多次提交问题。<br><img src="/2020/04/05/javaweb-01/6.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<span class="hljs-comment">//        // 方式一：</span><span class="hljs-comment">//        // 设置响应码</span><span class="hljs-comment">//        response.setStatus(302);</span><span class="hljs-comment">//        // 设置响应头，指明新的地址</span><span class="hljs-comment">//        response.setHeader("Location","http://localhost:8080/06.servlet/ResponseServlet2");</span>                   <span class="hljs-comment">// 方式二：</span>        response.sendRedirect(<span class="hljs-string">"http://localhost:8080/06.servlet/ResponseServlet2"</span>);    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        response.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);        PrintWriter writer = response.getWriter();        writer.write(<span class="hljs-string">"欢迎来到卢本伟广场"</span>);    &#125;&#125;</code></pre><h2 id="JavaEE项目的三层架构"><a href="#JavaEE项目的三层架构" class="headerlink" title="JavaEE项目的三层架构"></a>JavaEE项目的三层架构</h2><p><img src="/2020/04/05/javaweb-01/7.png" srcset="/img/loading.gif" alt></p><p>分层的目的是为了解耦。解耦是为了降低代码的耦合度，方便项目后期的维护和升级。</p><h3 id="1、MVC-概念"><a href="#1、MVC-概念" class="headerlink" title="1、MVC 概念"></a>1、MVC 概念</h3><p>MVC 全称：Model 模型、View 视图、Controller 控制器。<br>MVC 最早出现在JavaEE 三层中的Web 层，它可以有效的指导Web 层的代码如何有效分离，单独工作。<br>Model 模型：将与业务逻辑相关的数据封装为具体的JavaBean 类，其中不掺杂任何与数据处理相关的代码——JavaBean/domain/entity/pojo。<br>View 视图：只负责数据和界面的显示，不接受任何与显示数据无关的代码，便于程序员和美工的分工合作——JSP/HTML。<br>Controller 控制器：只负责接收请求，调用业务层的代码处理请求，然后派发页面，是一个“调度者”的角色——Servlet。转到某个页面。或者是重定向到某个页面。<br>MVC 是一种思想，MVC 的理念是将软件代码拆分成为组件，单独开发，组合使用（目的还是为了降低耦合度）。<br><img src="/2020/04/05/javaweb-01/8.png" srcset="/img/loading.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8新特性</title>
    <link href="/2020/03/24/java-11/"/>
    <url>/2020/03/24/java-11/</url>
    
    <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda是一个匿名函数，可以理解为一段可传递的代码，将代码将数据一样进行传递。<a id="more"></a></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> lambda表达式的写法</span><span class="hljs-comment"> * 格式：lambda参数列表(接口中的抽象方法的形参列表)-&gt;lambda体(重写的抽象方法的方法体)</span><span class="hljs-comment"> * lambda表达式的本质：作为函数式接口的一个实例</span><span class="hljs-comment"> * 函数式接口：<span class="hljs-doctag">@FunctionalInterface</span> 只声明了一个抽象方法的接口</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-03-24 11:09</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LambdaTest1</span> </span>&#123;    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 方式一：无参，无返回值，一条执行语句 (可以省略return)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        Runnable r1 = ()-&gt; System.out.println(<span class="hljs-string">"歪比巴卜"</span>);        r1.run();    &#125;    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 方式二：一个参数，无返回值   参数数据类型可以省略(编译器类型推断)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        Consumer&lt;String&gt; c1 = (String s)-&gt; &#123;            System.out.println(s);        &#125;;        c1.accept(<span class="hljs-string">"茉莉~"</span>);    &#125;    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 方式三：一个参数，参数的小括号可以省略</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;        Consumer&lt;String&gt; c1 = s -&gt; &#123;            System.out.println(s);        &#125;;        <span class="hljs-comment">//方法引用   使用操作符“::” 将类(或对象) 与方法名分隔开来。</span>        <span class="hljs-comment">// Consumer&lt;String&gt; c1 = System.out::println;</span>        c1.accept(<span class="hljs-string">"起   飞"</span>);    &#125;    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 方式四：两个或以上的参数，多条执行语句</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;        Comparator&lt;Integer&gt; com1 = (o1,o2)-&gt;&#123;            System.out.println(o1);            System.out.println(o2);            <span class="hljs-keyword">return</span> o1.compareTo(o2);        &#125;;        System.out.println(com1.compare(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jdbc核心技术</title>
    <link href="/2020/03/23/jdbc/"/>
    <url>/2020/03/23/jdbc/</url>
    
    <content type="html"><![CDATA[<h2 id="一、JDBC概述"><a href="#一、JDBC概述" class="headerlink" title="一、JDBC概述"></a>一、JDBC概述</h2><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>(一组API)。<a id="more"></a><br>                  <img src="/2020/03/23/jdbc/1.png" srcset="/img/loading.gif" alt></p><p><strong>JDBC接口(API)包括两个层次：</strong><br><em>面向应用的API</em>：Java API，抽象接口，供程序开发人员使用(连接数据库，执行SQL语句，获得结果)。<br><em>面向数据库的API：</em>Java Driver API，供开发商数据库驱动程序用。</p><blockquote><p>JDBC是sun公司提供的一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂商，需要针对这套接口。提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p><p>​                                                                                                                                          ——面向接口编程</p></blockquote><p><strong>JDBC程序编写步骤：</strong></p><p><img src="/2020/03/23/jdbc/2.png" srcset="/img/loading.gif" alt></p><h2 id="二、获取数据库连接"><a href="#二、获取数据库连接" class="headerlink" title="二、获取数据库连接"></a>二、获取数据库连接</h2><p><strong>条件1、Driver接口</strong><br>java.sql.Driver 接口是所有JDBC驱动程序需要实现的接口 。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。<br>在程序中不需要直接取访问实现了Driver 接口的类，而是由程序驱动管理器类(java.sql.DriverManager)去调用这些Driver实现。<br>mysql的驱动：com.mysql.jdbc.Driver(mysql6.0及以前)<br><strong>mysql6.0之后改用：com.mysql.cj.jdbc.Driver</strong></p><p><strong>条件2、URL</strong><br>jdbc URL用于标识一个被注册的驱动程序，驱动程序管理器通过这个URL选择正确的驱动程序，从而建立到数据库的连接。</p><p>格式(mysql6.0及以前)：<img src="/2020/03/23/jdbc/3.png" srcset="/img/loading.gif" alt></p><p><strong>mysql6.0以后需要在后面加上时区：</strong><br><strong>”jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai“</strong></p><p><strong>条件3、用户名和密码</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionTest</span> </span>&#123;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionTest1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<span class="hljs-comment">// 获取Driver实现类对象</span>Driver driver = <span class="hljs-keyword">new</span> com.mysql.cj.jdbc.Driver();String url = <span class="hljs-string">"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai"</span>;<span class="hljs-comment">// 将用户名密码封装在Properties中</span>Properties info = <span class="hljs-keyword">new</span> Properties();info.setProperty(<span class="hljs-string">"user"</span>, <span class="hljs-string">"root"</span>);info.setProperty(<span class="hljs-string">"password"</span>, <span class="hljs-string">"2824199842"</span>);Connection conn = driver.connect(url, info);System.out.println(conn);&#125;<span class="hljs-meta">@Test</span>  <span class="hljs-comment">// 没有使用第三方的API,使得程序具有更好的移植性</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionTest2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<span class="hljs-comment">// 1.使用反射获取Driver实现类对象</span>Class&lt;?&gt; class1 = Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);Driver driver = (Driver) class1.newInstance();<span class="hljs-comment">// 2.提供要连接的数据库</span>String url = <span class="hljs-string">"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai"</span>;<span class="hljs-comment">// 3.提供要连接的用户名、密码</span>Properties info = <span class="hljs-keyword">new</span> Properties();info.setProperty(<span class="hljs-string">"user"</span>, <span class="hljs-string">"root"</span>);info.setProperty(<span class="hljs-string">"password"</span>, <span class="hljs-string">"2824199842"</span>);<span class="hljs-comment">// 4.建立连接</span>Connection conn = driver.connect(url, info);System.out.println(conn);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 使用DriverManager替换Driver</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionTest3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<span class="hljs-comment">// 1.获取Driver实现类对象</span>Class&lt;?&gt; class1 = Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);Driver driver = (Driver) class1.newInstance();<span class="hljs-comment">// 2.提供URL，用户名及密码</span>String url = <span class="hljs-string">"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai"</span>;String user = <span class="hljs-string">"root"</span>;String pwd = <span class="hljs-string">"2824199842"</span>;<span class="hljs-comment">// 3.注册驱动</span>DriverManager.registerDriver(driver);<span class="hljs-comment">// 4.获取连接</span>Connection conn = DriverManager.getConnection(url,user,pwd);System.out.println(conn);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 省略显式加载驱动</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionTest4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<span class="hljs-comment">// 提供URL，用户名及密码</span>String url = <span class="hljs-string">"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai"</span>;String user = <span class="hljs-string">"root"</span>;String pwd = <span class="hljs-string">"2824199842"</span>;<span class="hljs-comment">// 加载Driver  mysql的Driver中静态代码块中已经注册了driver</span>Class&lt;?&gt; class1 = Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);Driver driver = (Driver) class1.newInstance();<span class="hljs-comment">//</span><span class="hljs-comment">//// 注册驱动</span><span class="hljs-comment">//DriverManager.registerDriver(driver);</span><span class="hljs-comment">// 获取连接</span>Connection conn = DriverManager.getConnection(url,user,pwd);System.out.println(conn);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 将信息放入配置文件jdbc.properties中,通过读取配置文件获取连接条件(url,user,password,driverclass)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionTest5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<span class="hljs-comment">// 1.读取配置文件信息</span>InputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">"jdbc.properties"</span>);Properties pros = <span class="hljs-keyword">new</span> Properties();pros.load(inputStream);String user = pros.getProperty(<span class="hljs-string">"user"</span>);String pwd = pros.getProperty(<span class="hljs-string">"password"</span>);String url = pros.getProperty(<span class="hljs-string">"url"</span>);String driverClass = pros.getProperty(<span class="hljs-string">"driverclass"</span>);<span class="hljs-comment">// 2.加载驱动</span>Class.forName(driverClass);<span class="hljs-comment">// 3.获取连接</span>Connection conn = DriverManager.getConnection(url,user,pwd);System.out.println(conn);&#125;&#125;</code></pre><p><img src="/2020/03/23/jdbc/7.png" srcset="/img/loading.gif" alt></p><h2 id="三、使用PreparedStatement实现CRUD"><a href="#三、使用PreparedStatement实现CRUD" class="headerlink" title="三、使用PreparedStatement实现CRUD"></a>三、使用PreparedStatement实现CRUD</h2><p><strong>操作和访问数据库：</strong><br>数据库连接被用于向数据库发送命令和SQL语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。<br>在java.sql包中有三个接口分别定义了对数据库的不同调用方式：<br>1、Statement：用于执行静态SQL语句并返回它所生成结果的对象。<br>2、PreparedStatement：SQL语句被预编译并存储在此对象中，可以用此对象多次高效地执行该语句。<br>3、CallableStatement：用于执行SQL存储过程。</p><p><strong>Statement的弊端：</strong>存在拼串操作，并且存在SQL注入问题<br>        <strong>PreparedStatement：</strong>是Statement的子接口；能最大可能提高性能；操作Blob类型数据；可以防止sql注入</p><h3 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h3><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// 增加记录</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.读取配置文件信息</span>InputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">"jdbc.properties"</span>);Properties pros = <span class="hljs-keyword">new</span> Properties();pros.load(inputStream);String user = pros.getProperty(<span class="hljs-string">"user"</span>);String pwd = pros.getProperty(<span class="hljs-string">"password"</span>);String url = pros.getProperty(<span class="hljs-string">"url"</span>);String driverClass = pros.getProperty(<span class="hljs-string">"driverclass"</span>);<span class="hljs-comment">// 2.加载驱动</span>Class.forName(driverClass);<span class="hljs-comment">// 3.获取连接</span>conn = DriverManager.getConnection(url, user, pwd);System.out.println(conn);<span class="hljs-comment">// 4.预编译sql语句，返回PreparedStatement实例</span>String sql = <span class="hljs-string">"insert into customers(name,email,birth)values(?,?,?)"</span>;ps = conn.prepareStatement(sql);<span class="hljs-comment">// 5.填充占位符</span>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"Taylor"</span>);<span class="hljs-comment">// 索引从1开始</span>ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">"12324@qq.com"</span>);SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);java.util.Date date = sdf.parse(<span class="hljs-string">"1989-2-22"</span>);ps.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> Date(date.getTime()));<span class="hljs-comment">// 6.执行操作</span>ps.execute();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 7.关闭资源</span><span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;ps.close();&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>                e.printStackTrace();&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;conn.close();&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>                e.printStackTrace();&#125;&#125;&#125;</code></pre><p>1、可将增加、删除、修改、查询中的共同操作（1.获取连接，2.释放资源）封装成一个工具类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 获取数据库连接</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年3月25日下午5:38:23</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<span class="hljs-comment">// 1.读取配置文件信息</span>InputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">"jdbc.properties"</span>);Properties pros = <span class="hljs-keyword">new</span> Properties();pros.load(inputStream);String user = pros.getProperty(<span class="hljs-string">"user"</span>);String pwd = pros.getProperty(<span class="hljs-string">"password"</span>);String url = pros.getProperty(<span class="hljs-string">"url"</span>);String driverClass = pros.getProperty(<span class="hljs-string">"driverclass"</span>);<span class="hljs-comment">// 2.加载驱动</span>Class.forName(driverClass);<span class="hljs-comment">// 3.获取连接</span>Connection conn = DriverManager.getConnection(url, user, pwd);<span class="hljs-keyword">return</span> conn;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> // 关闭资源</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年3月25日下午5:40:43</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> conn</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ps</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeResource</span><span class="hljs-params">(Connection conn, Statement ps)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;ps.close();&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;conn.close();&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>            e.printStackTrace();&#125;&#125;&#125;</code></pre><p>2、进一步可将增加、删除、修改中的共同操作（1.获取连接，2.预编译sql，3.填充sql，4.执行操作，5.关闭资源）封装到一个方法中。</p><pre><code class="hljs java"><span class="hljs-comment">// 将增删改操作写成一个通用的方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql, Object ... args)</span> </span>&#123;<span class="hljs-comment">// 1.建立连接</span>Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 2.预编译sql</span>PreparedStatement ps = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();ps = conn.prepareStatement(sql);<span class="hljs-comment">// 3.填充占位符</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">// 4.执行操作</span>ps.execute();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>            e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 5.关闭资源</span>JDBCUtils.closeResource(conn, ps);&#125;&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 测试通用的方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;String sql = <span class="hljs-string">"delete from customers where id =?"</span>;<span class="hljs-keyword">try</span> &#123;update(sql,<span class="hljs-number">3</span>);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;</code></pre><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>Java与SQL对应数据类型转换表：<br>       <img src="/2020/03/23/jdbc/4.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery1</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet resultset = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 连接</span>conn = JDBCUtils.getConnection();<span class="hljs-comment">// 预编译sql</span>String sql = <span class="hljs-string">"select id,name,email,birth from customers where id = ?"</span>;ps = conn.prepareStatement(sql);<span class="hljs-comment">// 填充占位符</span>ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 执行操作并返回结果集</span>resultset = ps.executeQuery();<span class="hljs-keyword">if</span> (resultset.next()) &#123;<span class="hljs-comment">// 判断结果集的下一条是否有数据</span><span class="hljs-keyword">int</span> id = resultset.getInt(<span class="hljs-number">1</span>);String name = resultset.getString(<span class="hljs-number">2</span>);String email = resultset.getString(<span class="hljs-number">3</span>);Date birth = resultset.getDate(<span class="hljs-number">4</span>);<span class="hljs-comment">// 将数据封装到一个对象中</span>Customer customer = <span class="hljs-keyword">new</span> Customer(id, name, email, birth);System.out.println(customer);&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>         e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, ps, resultset);&#125;&#125;</code></pre><p><strong>针对Customer表创建通用的查询方法：</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">queryCustomers</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();ps = conn.prepareStatement(sql);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;ResultSet resultset = ps.executeQuery();<span class="hljs-comment">// 获取结果集中的元数据:ResultSetMetaData</span>ResultSetMetaData rsmd = resultset.getMetaData();<span class="hljs-comment">// 通过ResultSetData 获取结果集中的列数</span><span class="hljs-keyword">int</span> column = rsmd.getColumnCount();<span class="hljs-comment">// 获取数据并封装到对象中</span><span class="hljs-keyword">if</span> (resultset.next()) &#123;Customer customer = <span class="hljs-keyword">new</span> Customer();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; column; i++) &#123;<span class="hljs-comment">// 获取列值</span>Object columnValue = resultset.getObject(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获取每个列的列名-----属性</span>String columnName = rsmd.getColumnName(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 通过反射给属性赋值</span><span class="hljs-comment">// 通过列名获取属性</span>Field field = Customer<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getDeclaredField</span>(<span class="hljs-title">columnName</span>)</span>;field.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 给属性赋值</span>field.set(customer, columnValue);&#125;<span class="hljs-keyword">return</span> customer;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>e.printStackTrace();&#125;<span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, ps);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 测试通用方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryCustomers</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;String sql = <span class="hljs-string">"select id,name,email,birth from Customers where id = ? "</span>;Customer customer = queryCustomers(sql,<span class="hljs-number">12</span>);System.out.println(customer);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>e.printStackTrace();&#125;&#125;</code></pre><p><strong>针对Order表创建通用的查询方法：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderQuery</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> Order <span class="hljs-title">orderQuery</span><span class="hljs-params">(String sql, Object... args)</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();ps = conn.prepareStatement(sql);<span class="hljs-comment">// 填充占位符</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">// 返回结果集</span>rs = ps.executeQuery();<span class="hljs-comment">// 获取结果集元数据(用来修饰结果集的类，提供了结果集的各种属性值)</span>ResultSetMetaData metaData = rs.getMetaData();<span class="hljs-comment">// 获取列数</span><span class="hljs-keyword">int</span> columnCount = metaData.getColumnCount();<span class="hljs-comment">// 将获取到的结果封装到Order对象中</span><span class="hljs-keyword">if</span> (rs.next()) &#123;Order order = <span class="hljs-keyword">new</span> Order();<span class="hljs-comment">// 获取每一列的列值 通过结果集</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;Object columnValue = rs.getObject(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获取每一列的列名   通过元数据</span><span class="hljs-comment">//String columnName = metaData.getColumnName(i + 1);</span><span class="hljs-comment">// 获取别名</span>String columnName = metaData.getColumnLabel(i+<span class="hljs-number">1</span>);<span class="hljs-comment">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span>Field field = Order<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getDeclaredField</span>(<span class="hljs-title">columnName</span>)</span>;field.setAccessible(<span class="hljs-keyword">true</span>);field.set(order, columnValue);&#125;<span class="hljs-keyword">return</span> order;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, ps,rs);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOrderQuery</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;String sql = <span class="hljs-string">"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id = ?"</span>;System.out.println(orderQuery(sql, <span class="hljs-number">1</span>));&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;&#125;</code></pre><p><img src="/2020/03/23/jdbc/5.png" srcset="/img/loading.gif" alt></p><p><strong>通用的查询方法(针对所有的 表)：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Query</span> </span>&#123;    <span class="hljs-comment">// 返回一条结果</span><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();ps = conn.prepareStatement(sql);<span class="hljs-comment">// 填充占位符</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">// 返回结果集</span>rs = ps.executeQuery();<span class="hljs-comment">// 获取结果集元数据(用来修饰结果集的类，提供了结果集的各种属性值)</span>ResultSetMetaData metaData = rs.getMetaData();<span class="hljs-comment">// 获取列数</span><span class="hljs-keyword">int</span> columnCount = metaData.getColumnCount();<span class="hljs-comment">// 将获取到的结果封装到Order对象中</span><span class="hljs-keyword">if</span> (rs.next()) &#123;T t = clazz.newInstance();<span class="hljs-comment">// 获取每一列的列值 通过结果集</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;Object columnValue = rs.getObject(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获取每一列的列名 通过元数据(表中的列名与类中的属性名不一致时会报错)</span><span class="hljs-comment">// String columnName = metaData.getColumnName(i + 1);</span><span class="hljs-comment">// 解决方式：获取别名(没有别名时即为列名)</span>String columnName = metaData.getColumnLabel(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span>Field field = clazz.getDeclaredField(columnName);field.setAccessible(<span class="hljs-keyword">true</span>);field.set(t, columnValue);&#125;<span class="hljs-keyword">return</span> t;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, ps, rs);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;String sql = <span class="hljs-string">"select id,name,email from customers where id = ?"</span>;System.out.println(query(Customer<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">sql</span>, 2))</span>;String sql1 = <span class="hljs-string">"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id = ?"</span>;System.out.println(query(Order<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">sql1</span>, 1))</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;&#125;<span class="hljs-comment">// 返回多条结果</span><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">queries</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();ps = conn.prepareStatement(sql);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-keyword">int</span> columnCount = metaData.getColumnCount();<span class="hljs-comment">// 将获取到的结果封装到列表中</span>List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;T&gt;();<span class="hljs-keyword">while</span> (rs.next()) &#123;T t = clazz.newInstance();<span class="hljs-comment">// 获取每一列的列值 通过结果集</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;Object columnValue = rs.getObject(i + <span class="hljs-number">1</span>);                    <span class="hljs-comment">// 获取每一列的别名  通过元数据</span>String columnName = metaData.getColumnLabel(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span>Field field = clazz.getDeclaredField(columnName);field.setAccessible(<span class="hljs-keyword">true</span>);field.set(t, columnValue);&#125;list.add(t);&#125; <span class="hljs-keyword">return</span> list;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, ps, rs);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOrderQuery</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;String sql = <span class="hljs-string">"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id &lt; ?"</span>;List&lt;Order&gt; orders = queries(Order<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">sql</span>, 4)</span>;orders.forEach(System.out::println);String sql1 = <span class="hljs-string">"select id,name,email from customers where id &lt; ?"</span>;List&lt;Customer&gt; customers = queries(Customer<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">sql1</span>, 10)</span>;customers.forEach(System.out::println);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;&#125;&#125;</code></pre><h2 id="四、操作BLOB类型字段"><a href="#四、操作BLOB类型字段" class="headerlink" title="四、操作BLOB类型字段"></a>四、操作BLOB类型字段</h2><p>TinyBlob：255字节<br>        Blob：65K<br>        MediumBlob：16M<br>        LongBlob：4G</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// 向Customers表中添加一条Blob类型数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Connection conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"insert into customers(name,email,birth,photo) value(?,?,?,?)"</span>;PreparedStatement ps = conn.prepareStatement(sql);ps.setObject(<span class="hljs-number">1</span>, <span class="hljs-string">"wd"</span>);ps.setObject(<span class="hljs-number">2</span>, <span class="hljs-string">"wd@qq.com"</span>);ps.setObject(<span class="hljs-number">3</span>, <span class="hljs-string">"1999-7-20"</span>);FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"./src/wd1.jpg"</span>));ps.setBlob(<span class="hljs-number">4</span>, in);ps.execute();JDBCUtils.closeResource(conn, ps);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 查询customers表中的Blob类型的数据</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;InputStream in = <span class="hljs-keyword">null</span>;FileOutputStream out = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"select id,name,email,birth,photo from Customers where id=? "</span>;ps = conn.prepareStatement(sql);ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">23</span>);rs = ps.executeQuery();<span class="hljs-keyword">if</span> (rs.next()) &#123;<span class="hljs-keyword">int</span> id = rs.getInt(<span class="hljs-string">"id"</span>);<span class="hljs-comment">// 既可以写索引，又可以写别名或字段名</span>String name = rs.getString(<span class="hljs-string">"name"</span>);String email = rs.getString(<span class="hljs-string">"email"</span>);Date birth = rs.getDate(<span class="hljs-string">"birth"</span>);Customer customer = <span class="hljs-keyword">new</span> Customer(id, name, email, birth);System.out.println(customer);Blob photo = rs.getBlob(<span class="hljs-string">"photo"</span>);in = photo.getBinaryStream();out = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"./src/wd.jpg"</span>));<span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-keyword">int</span> len;<span class="hljs-keyword">while</span> ((len = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;out.write(buffer, <span class="hljs-number">0</span>, len);&#125;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-keyword">if</span> (in != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;in.close();&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;<span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;out.close();&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;JDBCUtils.closeResource(conn, ps, rs);&#125;&#125;</code></pre><h2 id="五、数据库事务"><a href="#五、数据库事务" class="headerlink" title="五、数据库事务"></a>五、数据库事务</h2><p><strong>事务：</strong>一组逻辑操作单元，使数据由一种状态变换到另一种状态。</p><p><strong>事务处理：</strong>要么所有的事务都被提交(commit)，那么这些修改就被永久的保存下来；要么放弃所作的全部修改，整个事务回滚(rollback)到最初的状态。</p><p><strong>JDBC事务处理：</strong><br>1.数据一旦提交，就不可回滚。<br>2.DDL操作一旦执行，都会自动提交。<br>    DML默认情况下，一旦执行，就会提交。可通过set autocommit=false 取消DML操作的自动提交。<br>3.默认关闭连接的时候，自动提交。</p><p><strong>JDBC程序中为了让多个SQL 语句作为一个事务执行：</strong><br>调用Connection 对象的setAutoCommit(false); 以取消自动提交事务<br>在所有的SQL 语句都成功执行后，调用commit(); 方法提交事务<br>在出现异常时，调用rollback(); 方法回滚事务</p><blockquote><p>若此时Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote><p><strong>事务的ACID属性：</strong><br>1.<strong>原子性(Atomicity)：</strong>事务是一个不可分割的工作单位，事务的操作要么都发生，要么都不发生。<br>2.<strong>一致性(Consistency)：</strong>事务必须使数据库从一个一致状态变换到另外一致状态。<br>3.<strong>隔离性(Isolation)：</strong>一个事务的执行不能被其他事务干扰。<br>4.<strong>持久性(Durability)：</strong>一个数据一旦被提交，它对数据库的改变就是永久性的。</p><p><strong>数据库并发问题：</strong><br><strong>脏读：</strong>对于两个事务T1、T2，T1读取了已经被T2更新但还没被提交的数据。之后，若T2回滚，T1读取的数据就是无效的。<br><strong>不可重复读：</strong>对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段。之后，T1再次读取同一个字段，值就不同了。<br><strong>幻读：</strong>对于两个事务T1、T2，T1从一个表中读了一个字段，然后T2再该表中插入了一些新的行。之后，如果如果T1再次读取同一个表，就会多出几行。</p><p><strong>四种隔离级别：</strong>隔离级别越高，一致性越好，并发性越弱。<br><img src="/2020/03/23/jdbc/6.png" srcset="/img/loading.gif" alt></p><h2 id="六、DAO及相关实现类"><a href="#六、DAO及相关实现类" class="headerlink" title="六、DAO及相关实现类"></a>六、DAO及相关实现类</h2><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。<br>有时也称作：BaseDAO(封装通用方法)<br>作用：为了实现功能的模块化，更有利于代码的维护和升级。</p><h2 id="七、数据库连接池"><a href="#七、数据库连接池" class="headerlink" title="七、数据库连接池"></a>七、数据库连接池</h2><p><strong>数据库连接池基本思想：</strong>为数据库连接建立一个“缓冲池”，预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕后再放回去。</p><p>JDBC的数据库连接池使用javax.sql.DataSource 来表示，DataSource只是一个接口，该接口通常由服务器(Weblogic,WebSphere,Tomcat)提供实现，也有一些开源组织提供实现。<br><img src="/2020/03/23/jdbc/9.png" srcset="/img/loading.gif" alt></p><p>Druid数据库连接池</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Properties pros = <span class="hljs-keyword">new</span> Properties();InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">"druid.properties"</span>);pros.load(is);DataSource dataSource = DruidDataSourceFactory.createDataSource(pros);Connection conn = dataSource.getConnection();System.out.println(conn);&#125;</code></pre><p><img src="/2020/03/23/jdbc/8.png" srcset="/img/loading.gif" alt></p><p>配置属性：<br><img src="/2020/03/23/jdbc/10.png" srcset="/img/loading.gif" alt></p><h2 id="八、Apache-DBUtils实现CRUD操作"><a href="#八、Apache-DBUtils实现CRUD操作" class="headerlink" title="八、Apache-DBUtils实现CRUD操作"></a>八、Apache-DBUtils实现CRUD操作</h2><p>commons-dbutils 是Apache 组织提供的一个开源JDBC工具类库，封装了增删改查操作。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryRunnerTest</span> </span>&#123;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"insert into customers(name,email,birth) value(?,?,?)"</span>;<span class="hljs-keyword">int</span> insertCount = runner.update(conn, sql, <span class="hljs-string">"zyz"</span>, <span class="hljs-string">"zyz@qq.com"</span>, <span class="hljs-string">"1999-1-1"</span>);System.out.println(insertCount);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// BeanHandler是ResultSetHandler接口的一个实现类，用于封装表中的一条记录</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery1</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"select id,name,email,birth from customers where id = ?"</span>;BeanHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> BeanHandler&lt;Customer&gt;(Customer<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;Customer customer = runner.query(conn, sql, handler, <span class="hljs-number">2</span>);System.out.println(customer);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// BeanListhandler是ResultSetHandler接口的一个实现类，用于封装表中的多条记录构成的集合</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery2</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"select id,name,email,birth from customers where id &gt; ?"</span>;BeanListHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> BeanListHandler&lt;Customer&gt;(Customer<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;List&lt;Customer&gt; customers = runner.query(conn, sql, handler, <span class="hljs-number">2</span>);customers.forEach(System.out::println);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 查询特殊值</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery3</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">"select count(*) from customers"</span>;ScalarHandler handler = <span class="hljs-keyword">new</span> ScalarHandler();Long count = (Long) runner.query(conn, sql, handler);System.out.println(count);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL变量,存储过程,流程结构</title>
    <link href="/2020/03/22/mysql-06/"/>
    <url>/2020/03/22/mysql-06/</url>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>系统变量：</strong>由系统提供，属于服务层面<br>_全局变量：_服务器每次启动将为所有全局变量赋初值。针对所有会话(连接)有效，但不能跨重启。<br>_会话变量：_仅仅针对于当前的会话(连接)有效。<a id="more"></a><br>查看所有的系统变量：show global | [ session] variable;<br>查看满足条件的系统变量：show global | [session] variable  like ‘%char%’;<br>查看指定系统变量：select @@global | [session].系统变量名;<br>为某个系统变量赋值：<br>set global | [session] 系统变量名=值;<br>set @@global \ [session].系统变量名=值;</p><p><strong>自定义变量：</strong>用户自定义<br>_用户变量：_针对于当前会话(连接)有效<br>1.声明并初始化<br>set @用户变量名=值;<br>set @用户变量名:=值;<br>select @用户变量名:=值;<br>2.赋值<br>set @用户变量名=值;<br>set @用户变量名:=值;<br>select @用户变量名:=值;<br>select into select 字段  into 变量名 from 表;<br>_局部变量：_仅仅在定义它的begin end中有效<br>1.声明<br>declare 变量 类型 [default 值];<br>2.赋值<br>与用户变量相同</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>事先经过编译并存储在数据库中一段sql语句的集合。<br>好处：<br>1.提高了代码的重用性；<br>2.简化操作；<br>3.减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</p><pre><code class="hljs sql"><span class="hljs-comment">/*</span><span class="hljs-comment">一、创建存储过程</span><span class="hljs-comment">语法：</span><span class="hljs-comment">create procedure 存储过程名(参数列表)</span><span class="hljs-comment">begin</span><span class="hljs-comment">存储过程体</span><span class="hljs-comment">end</span><span class="hljs-comment"></span><span class="hljs-comment">1、参数列表分为：参数模式  参数名 参数类型</span><span class="hljs-comment">参数模式：</span><span class="hljs-comment">in：该参数可以作为输入，也就是说该参数需要调用方传入值</span><span class="hljs-comment">out：该参数可以作为输出，也就是说该参数可以作为返回值</span><span class="hljs-comment">inout：该参数既可以作为输入也可以作为输入</span><span class="hljs-comment"></span><span class="hljs-comment">二、调用存储过程</span><span class="hljs-comment">语法：</span><span class="hljs-comment">call  储存过程名(实参列表);</span><span class="hljs-comment">*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp1()<span class="hljs-keyword">BEGIN</span><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">admin</span>(username,<span class="hljs-string">`password`</span>)<span class="hljs-keyword">VALUES</span>(<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"123456"</span>),(<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"123456"</span>),(<span class="hljs-string">"Jerry"</span>,<span class="hljs-string">"123456"</span>);<span class="hljs-keyword">END</span> <span class="hljs-keyword">CALL</span> myp1;<span class="hljs-comment"># 创建带in模式参数的储存过程</span><span class="hljs-comment"># 创建存储过程判断用户是否登录成功</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp2(<span class="hljs-keyword">IN</span> username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<span class="hljs-keyword">IN</span> <span class="hljs-string">`password`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-keyword">BEGIN</span><span class="hljs-keyword">DECLARE</span> <span class="hljs-keyword">result</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">result</span><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> admin.username=username <span class="hljs-keyword">AND</span> admin.<span class="hljs-string">`password`</span>=<span class="hljs-string">`password`</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">IF</span>(<span class="hljs-keyword">result</span>&gt;<span class="hljs-number">0</span>,<span class="hljs-string">"成功"</span>,<span class="hljs-string">"失败"</span>);<span class="hljs-keyword">END</span><span class="hljs-keyword">CALL</span> myp2(<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"123456"</span>);<span class="hljs-comment"># 创建带out模式参数的储存过程</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp3(<span class="hljs-keyword">IN</span> username <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<span class="hljs-keyword">IN</span> <span class="hljs-string">`password`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>),<span class="hljs-keyword">OUT</span> <span class="hljs-keyword">result</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">5</span>))<span class="hljs-keyword">BEGIN</span><span class="hljs-keyword">DECLARE</span> result1 <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">INTO</span> result1<span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> admin.username=username <span class="hljs-keyword">AND</span> admin.<span class="hljs-string">`password`</span>=<span class="hljs-string">`password`</span>;<span class="hljs-keyword">SET</span> <span class="hljs-keyword">result</span> = <span class="hljs-keyword">IF</span>(result1&gt;<span class="hljs-number">0</span>,<span class="hljs-string">"true"</span>,<span class="hljs-string">"false"</span>);<span class="hljs-keyword">END</span><span class="hljs-keyword">CALL</span> myp3(<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"123456"</span>,@<span class="hljs-keyword">result</span>);<span class="hljs-keyword">SELECT</span> @<span class="hljs-keyword">result</span>;<span class="hljs-comment"># 三、删除储存过程</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> myp3;<span class="hljs-comment"># 四、查看储存过程</span><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp2;</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>与储存过程的区别：<br>储存过程：可以有0个或多个返回值，适合批量插入、批量更新<br>函数：有且仅有一个返回值，适合处理数据后返回一个结果。</p><pre><code class="hljs sql"><span class="hljs-comment"># 创建函数</span><span class="hljs-comment">/*</span><span class="hljs-comment">语法：</span><span class="hljs-comment">create function 函数名(参数列表) returns  返回类型</span><span class="hljs-comment">begin</span><span class="hljs-comment">函数体  </span><span class="hljs-comment">end</span><span class="hljs-comment">*/</span></code></pre><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><p><strong>if函数：</strong><br>if(表达式1，表达式2，表达式3)：如果表达式1成立，返回表达式2的值，否则返回表达式3的值。</p><p><strong>case结构：</strong><br>case 变量|表达式|字段<br>when条件1或值 then 要返回的值或要执行的语句;<br>when条件2或值 then 要返回的值或要执行的语句;<br>when条件3或值 then 要返回的值或要执行的语句;<br>……<br>else  要返回的值或要执行的语句;<br> end case;</p><p><strong>if结构：</strong><br>if 条件1 then 语句1；<br>elif 条件2 then 语句2；<br>……<br>else then 语句n；<br>end if;</p><p><strong>循环结构：</strong><br>分类：while , loop  , repeat<br>循环控制：<br>iterate  类似于  continue  ,继续，结束本次循环继续下一次<br>leavele  类似于 break   ,跳出  ，结束当前所在循环<br>1.while</p><pre><code class="hljs sql">[标签:]while 循环条件 <span class="hljs-keyword">do</span>循环体;<span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span> [标签];</code></pre><p>2.loop</p><pre><code class="hljs sql">[标签:]loop 循环体;<span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span> [标签]</code></pre><p>3.repeat</p><pre><code class="hljs sql">[标签:]repeat循环体;until 结束循环的条件 <span class="hljs-keyword">end</span> <span class="hljs-keyword">repeat</span> [标签];</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCL,事务,视图</title>
    <link href="/2020/03/21/mysql-05/"/>
    <url>/2020/03/21/mysql-05/</url>
    
    <content type="html"><![CDATA[<p><strong>事务：</strong>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。<a id="more"></a><br><strong>事务的属性：</strong><br>原子性：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生；<br>一致性：事务必须使数据库从一个一致状态变换到另外一个一致状态；<br>隔离性：一个事务的执行不受其他事务的干扰；<br>持久性：一个事务一旦被提交，它对数据库的改变就是永久的。</p><h2 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h2><p>隐式事务：事务没有明显的开启和结束。<br>显式事务：设置提交功能为禁用，事务具有明显的开启和结束的标记<br>步骤1：开启事务<br>set autocommit=0;<br>start transaction;# 可以省略<br>步骤2：编写事务中的sql语句<br>语句1;<br>语句2;<br>步骤3：结束事务<br>commit;或者rollback;</p><h2 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h2><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采用必要的隔离机制，就会导致各种并发问题：<br><strong>脏读：</strong>对于两个事务T1、T2，T1读取了已经被T2更新但还没有被提交的字段。之后，若T2回滚，T1读取的内容就是临时且无效的。<br><strong>不可重复读：</strong>对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段。之后，T1再次读取同一个字段，值就不同了。<br><strong>幻读：</strong>对于两个事务T1、T2，T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行。之后，若T1再次读取同一个表，就会多出几行。<br><img src="/2020/03/21/mysql-05/1.png" srcset="/img/loading.gif" alt></p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>从mysql5.0.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果。</p><p><strong>创建视图：</strong></p><pre><code class="hljs sql"><span class="hljs-comment">/*</span><span class="hljs-comment">语法：</span><span class="hljs-comment">create view 视图名</span><span class="hljs-comment">as</span><span class="hljs-comment">查询语句;</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 查询邮箱中包含a字符的员工名、部门名和工种信息</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> myview1 <span class="hljs-keyword">AS</span><span class="hljs-keyword">SELECT</span> last_name,department_name,job_title <span class="hljs-keyword">FROM</span> employees e<span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> e.department_id=d.department_id<span class="hljs-keyword">JOIN</span> jobs j <span class="hljs-keyword">ON</span> e.job_id=j.job_id;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myview1 <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">"%a%"</span>;</code></pre><p><strong>好处：</strong><br>1.重用sql语句<br>2.简化复杂的sql操作，不必知道它的查询细节<br>3.保护数据，提高安全性</p><p><strong>删除视图：</strong>drop view 视图名1,视图名2,…<br>视图与表的区别：<br>视图只是保留了sql逻辑，没有保存数据，虽然可以增删改查，但是一般只作查询使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据类型，约束，标识列</title>
    <link href="/2020/03/21/mysql-04/"/>
    <url>/2020/03/21/mysql-04/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数值型"><a href="#一、数值型" class="headerlink" title="一、数值型"></a>一、数值型</h2><p><strong>整型：</strong><br>Tinyint：1个字节，有符号：-128到127 ，无符号(unsigned)：0到255<br>Smallint：2个字节，有符号：-32768到32767，无符号数：0到65535<a id="more"></a><br>Mediumint：3个字节<br>int/Integer：4个字节<br>Bigint：8个字节<br><strong>小数：</strong>M：整数位+小数位，D：小数位<br>定点数：（精度较高）<br>dec(M,D)<br>decimal(M,D)<br>浮点数：<br>float(M,D)：4个字节<br>double(M,D)：8个字节</p><h2 id="二、字符型"><a href="#二、字符型" class="headerlink" title="二、字符型"></a>二、字符型</h2><p><strong>较短的文本：</strong>最多的字符数M<br>char(M)：固定长度，M为0到255  可以省略  默认为1，比较耗费空间，效率较高<br>varchar(M)：可变长度，M为0到65535  不可以省略，节省空间，效率低</p><h2 id="三、日期型"><a href="#三、日期型" class="headerlink" title="三、日期型"></a>三、日期型</h2><p>date：4字节<br>datetime：8字节<br>timestamp：4字节<br>time：3字节<br>year：1字节</p><h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><p>NOT NULL：非空，保证该字段的值不能为空。比如姓名，学号等<br>DEFAULT：默认，保证该字段有默认值。比如性别<br>PRIMARITY：主键，保证该字段具有唯一性，且不为空。比如学号，员工编号<br>UNIQUE：唯一，保证该字段具有唯一性。比如座位号<br>CHECK：检查约束（mysql不支持）。比如性别<br>FOREIGN KEY：外键，用于限制两个表的关系，保证该字段的值必须来自主表的关联的值。在从表添加外键约束，用于引用主表中某一列的值。比如学生表的专业编号，员工表的部门编号，员工表的工种编号    </p><pre><code class="hljs sql"><span class="hljs-comment"># 添加列级约束</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,<span class="hljs-comment"># 主键</span>stuname <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-comment"># 非空</span>gender <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">CHECK</span> (gender=<span class="hljs-string">'男'</span> <span class="hljs-keyword">OR</span> gender=<span class="hljs-string">'女'</span>),<span class="hljs-comment"># 检查   不支持</span>seatid <span class="hljs-built_in">INT</span>  <span class="hljs-keyword">UNIQUE</span>,<span class="hljs-comment"># 唯一</span>age <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">18</span>,<span class="hljs-comment"># 默认约束</span>majorid <span class="hljs-built_in">INT</span> <span class="hljs-keyword">REFERENCES</span> major(<span class="hljs-keyword">id</span>)<span class="hljs-comment"># 外键 不支持</span>);<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> major(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> PRIMARY <span class="hljs-keyword">KEY</span>,majorname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>));<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> stuinfo;<span class="hljs-comment"># 查看所有的索引</span><span class="hljs-comment"># 2.添加表级约束</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> stuinfo;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,stuname <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>),gender <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>),age <span class="hljs-built_in">INT</span>,seatid <span class="hljs-built_in">INT</span>,majorid <span class="hljs-built_in">INT</span>,<span class="hljs-keyword">CONSTRAINT</span> pk PRIMARY <span class="hljs-keyword">KEY</span>(<span class="hljs-keyword">id</span>),<span class="hljs-comment"># 主键</span><span class="hljs-keyword">CONSTRAINT</span> ck <span class="hljs-keyword">CHECK</span>(gender=<span class="hljs-string">'男'</span><span class="hljs-keyword">or</span><span class="hljs-string">'女'</span>),<span class="hljs-comment"># 检查  不支持</span><span class="hljs-keyword">CONSTRAINT</span> uq <span class="hljs-keyword">UNIQUE</span>(seatid),<span class="hljs-comment"># 唯一</span><span class="hljs-keyword">CONSTRAINT</span> fk_stuinfo_major <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (majorid) <span class="hljs-keyword">REFERENCES</span> major(<span class="hljs-keyword">id</span>) <span class="hljs-comment"># 外键</span>);<span class="hljs-comment"># 修改表时添加约束</span><span class="hljs-comment">/*</span><span class="hljs-comment">1.添加列级约束</span><span class="hljs-comment">alter table 表名 modify column 字段名 字段类型 新约束;</span><span class="hljs-comment">2.添加表级约束</span><span class="hljs-comment">alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键的引用]</span><span class="hljs-comment">*/</span></code></pre><h2 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h2><pre><code class="hljs sql"><span class="hljs-comment">/*</span><span class="hljs-comment">1.标识列必须与key（主键，外键，unique）搭配</span><span class="hljs-comment">2.一个表至多有一个标识列</span><span class="hljs-comment">3.标识列的类型只能是数值型</span><span class="hljs-comment">4.可通过set auto_increment_increment=数字;设置步长</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 创建表时设置标识列</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,stuname <span class="hljs-built_in">char</span>(<span class="hljs-number">10</span>),gender <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>),age <span class="hljs-built_in">INT</span>,seatid <span class="hljs-built_in">INT</span>,majorid <span class="hljs-built_in">INT</span>);<span class="hljs-comment"># 修改表时设置标识列</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span>  <span class="hljs-keyword">COLUMN</span> <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DML,DDL</title>
    <link href="/2020/03/19/mysql-03/"/>
    <url>/2020/03/19/mysql-03/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作语言DML"><a href="#数据库操作语言DML" class="headerlink" title="数据库操作语言DML"></a>数据库操作语言DML</h1><h2 id="一、插入语句"><a href="#一、插入语句" class="headerlink" title="一、插入语句"></a>一、插入语句</h2><p>语法：<br>方式一：insert into 表名(列名,…) value(值1,…);<br>方式二：insert into 表名 set 列名=值,列名=值,…<a id="more"></a></p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span>,sex,borndate,phone,photo,boyfriend_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">13</span>,<span class="hljs-string">'Taylor'</span>,<span class="hljs-string">'女'</span>,<span class="hljs-string">'1990-1-1'</span>,<span class="hljs-string">'123456789'</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-number">2</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty <span class="hljs-keyword">SET</span> <span class="hljs-keyword">id</span> =<span class="hljs-number">14</span>,<span class="hljs-keyword">name</span>=<span class="hljs-string">'刘涛'</span>,phone=<span class="hljs-string">'987654321'</span>;</code></pre><h2 id="二、修改语句"><a href="#二、修改语句" class="headerlink" title="二、修改语句"></a>二、修改语句</h2><p>修改单表：<br>语法：update 表名 set 列=新值,….where 筛选条件;<br>修改多表：<br>语法：update 表1 别名,表2 别名 set 列=值,…where 连接条件;<br>update 表1 别名inner join表2 别名 on 连接条件 set 列=值,…where 筛选条件;</p><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> beauty <span class="hljs-keyword">SET</span> phone=<span class="hljs-string">'123456'</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">LIKE</span><span class="hljs-string">"周%"</span>;</code></pre><h2 id="三、删除语句"><a href="#三、删除语句" class="headerlink" title="三、删除语句"></a>三、删除语句</h2><p>删除单表：<br>语法：delete from 表名 where 条件;<br>删除多表：<br>语法：delete 表1的别名,表2的别名 from 表1 别名，表2 别名where 连接条件 and 筛选条件;<br>            delete 表1的别名,表2的别名 from 表1 别名 inner join表2 别名 on 连接条件    where 筛选条件;</p><p>删除整表：truncate table 表名;<br>1、如果要删除的表有自增长列，<br>用delete删除后再插入数据自增长值从断点开始<br>用truncate删除后再插入数据自增长的值从1开始<br>2、truncate没有返回值<br>3、truncate删除不能回滚，delete删除可以回滚</p><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> beauty <span class="hljs-keyword">WHERE</span> phone <span class="hljs-keyword">LIKE</span> <span class="hljs-string">"%9"</span>;</code></pre><h1 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h1><h2 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h2><pre><code class="hljs sql"><span class="hljs-comment"># 1.库的创建</span><span class="hljs-comment">/*</span><span class="hljs-comment">语法：create database [if not exists]库名;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> book;<span class="hljs-comment"># 2.库的修改</span><span class="hljs-comment">/*</span><span class="hljs-comment">一般不作修改</span><span class="hljs-comment">更改字符集：alter database 库名  character set 字符集;</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 3.库的删除</span><span class="hljs-comment">/*</span><span class="hljs-comment">语法：drop [if exists]database 库名;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> book;</code></pre><h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><h3 id="创建：create"><a href="#创建：create" class="headerlink" title="创建：create"></a>创建：create</h3><pre><code class="hljs sql"><span class="hljs-comment">/*</span><span class="hljs-comment">语法：</span><span class="hljs-comment">create table 表名(</span><span class="hljs-comment">列名 列的类型[(长度)约束],</span><span class="hljs-comment">列名 列的类型[(长度)约束],</span><span class="hljs-comment">....</span><span class="hljs-comment">列名 列的类型[(长度)约束],</span><span class="hljs-comment">);</span><span class="hljs-comment">*/</span><span class="hljs-keyword">USE</span> book;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,<span class="hljs-comment"># 编号</span>bname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-comment"># 书名</span>price <span class="hljs-keyword">DOUBLE</span>,<span class="hljs-comment"># 价格</span>author <span class="hljs-built_in">INT</span>,<span class="hljs-comment"># 作者id</span>publishDate DATETIME <span class="hljs-comment"># 出版日期</span>);DESC book; <span class="hljs-comment"># 查看表</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> author(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,au_name <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),nation <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>));DESC author;<span class="hljs-comment"># 表的复制</span><span class="hljs-comment"># 仅仅复制表的结构</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy <span class="hljs-keyword">LIKE</span> book;<span class="hljs-comment"># 复制表的结构和数据</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy1 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">FROM</span> book;</code></pre><h3 id="修改：alter"><a href="#修改：alter" class="headerlink" title="修改：alter"></a>修改：alter</h3><pre><code class="hljs sql"><span class="hljs-comment"># 修改列名</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>book <span class="hljs-keyword">CHANGE</span> <span class="hljs-keyword">COLUMN</span> publishDate pubdate DATETIME;<span class="hljs-comment"># 修改列的类型和约束</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> pubDate <span class="hljs-built_in">TIMESTAMP</span><span class="hljs-comment"># 添加新列</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> annual <span class="hljs-keyword">DOUBLE</span>;<span class="hljs-comment"># 删除列</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> annual;<span class="hljs-comment"># 修改表名</span><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">RENAME</span> book_author;</code></pre><h3 id="删除：drop"><a href="#删除：drop" class="headerlink" title="删除：drop"></a>删除：drop</h3><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> book_author;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2020/03/15/java-10/"/>
    <url>/2020/03/15/java-10/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。<a id="more"></a><br><strong>类的加载过程：</strong><br>程序经过javac.exe命令后，会生成一个或多个字节码文件(.class)，接着使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中，即类的加载。加载到内存中的类，我们就成为运行时类，此运行时类就作为Class的一个实例。<br>加载到内存中的运行时类，会缓存一段时间。在此时间内，我们可以通过不同的方式来获取此运行时类。</p><h2 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// 获取Class实例</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;    <span class="hljs-comment">// 方式一:调用运行类属性：.class</span>    Class class0 = Person<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;    System.out.println(class0);    <span class="hljs-comment">// 方式二：调用运行时类的对象，调用getClass()</span>    Person p1 = <span class="hljs-keyword">new</span> Person();    Class class1 = p1.getClass();    System.out.println(class1);    <span class="hljs-comment">// 方式三：调用Class的静态方法：forName(String classPath)</span>    Class class2 = Class.forName(<span class="hljs-string">"reflection.Person"</span>);    System.out.println(class2);    <span class="hljs-comment">// 方式四：使用类加载器：Classloader</span>    ClassLoader classLoader = ClassTest<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getClassLoader</span>()</span>;    Class class3 = classLoader.loadClass(<span class="hljs-string">"reflection.Person"</span>);    System.out.println(class3);&#125;</code></pre><h2 id="调用运行时类指定结构"><a href="#调用运行时类指定结构" class="headerlink" title="调用运行时类指定结构"></a>调用运行时类指定结构</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    <span class="hljs-comment">// 通过反射创建对应的运行时类</span>    Class&lt;Person&gt; class1 = Person<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;    <span class="hljs-comment">// 创建运行时类的对象</span>    Person p1 = class1.newInstance();    System.out.println(p1);    <span class="hljs-comment">// 获取运行时类的属性getField(String fieldName),只能获取权限为public的属性</span>    Field id = class1.getField(<span class="hljs-string">"id"</span>);    <span class="hljs-comment">// 通常使用getDeclaredField(String FieldName)获取运行时类的属性</span>    Field name = class1.getDeclaredField(<span class="hljs-string">"name"</span>);    name.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 表示当前属性时可访问的</span>    <span class="hljs-comment">// 设置属性值 set(实例对象,属性值)</span>    id.set(p1,<span class="hljs-number">10001</span>);    name.set(p1,<span class="hljs-string">"Tony"</span>);    <span class="hljs-comment">// 获取属性值</span>    <span class="hljs-keyword">int</span> p1_id = (<span class="hljs-keyword">int</span>) id.get(p1);    System.out.println(p1_id);<span class="hljs-comment">// 10001</span>    System.out.println(name.get(p1));<span class="hljs-comment">// Tony</span>    System.out.println(p1);<span class="hljs-comment">// Person&#123;id=10001, name='Tony', age=0&#125;</span>    <span class="hljs-comment">// 获取运行时类方法 getDeclaredMethod(方法名,指定方法的形参列表)</span>    Method setAge = class1.getDeclaredMethod(<span class="hljs-string">"setAge"</span>, <span class="hljs-keyword">int</span><span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    setAge.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">// 指明该方法可访问</span>    <span class="hljs-comment">// 执行运行时类方法 invoke(对象实例,实参列表)</span>    <span class="hljs-comment">// invoke()的返回值即为对应类中调用方法的返回值</span>    setAge.invoke(p1,<span class="hljs-number">24</span>);    System.out.println(p1);<span class="hljs-comment">// Person&#123;id=10001, name='Tony', age=24&#125;</span>    <span class="hljs-comment">// 获取指定构造器</span>    Constructor con = class1.getDeclaredConstructor(<span class="hljs-keyword">int</span><span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">String</span>.<span class="hljs-title">class</span>,<span class="hljs-title">int</span>.<span class="hljs-title">class</span>)</span>;    con.setAccessible(<span class="hljs-keyword">true</span>);    Person p2 = (Person) con.newInstance(<span class="hljs-number">1002</span>,<span class="hljs-string">"Taylor"</span>,<span class="hljs-number">18</span>);    System.out.println(p2);<span class="hljs-comment">// Person&#123;id=1002, name='Taylor', age=18&#125;</span>&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2020/03/13/java-09/"/>
    <url>/2020/03/13/java-09/</url>
    
    <content type="html"><![CDATA[<h2 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h2><p>使用TCP连接进行通信的客户端和服务端<a id="more"></a></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-comment">// 客户端</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 1.创建Socket对象，指明服务器端的IP和端口号</span>    Socket socket = <span class="hljs-keyword">null</span>;    OutputStream os = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">try</span> &#123;        InetAddress inet = InetAddress.getByName(<span class="hljs-string">"127.0.0.1"</span>);        socket = <span class="hljs-keyword">new</span> Socket(inet, <span class="hljs-number">9999</span>);        <span class="hljs-comment">// 2.创建输出流</span>        os = socket.getOutputStream();        <span class="hljs-comment">// 3.向外写数据</span>        os.write(<span class="hljs-string">"hello? hello? hello?"</span>.getBytes());    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (os != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-comment">// 4.关闭输入流</span>                os.close();            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span> (socket != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-comment">// 5.关闭Socket</span>                socket.close();            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-comment">// 服务端</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> </span>&#123;        Socket socket = <span class="hljs-keyword">null</span>;        InputStream is = <span class="hljs-keyword">null</span>;        ByteOutputStream byteOutputStream = <span class="hljs-keyword">null</span>;        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.创建服务器端的ServerSocket，指明端口号</span>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);            <span class="hljs-comment">// 2.接受来自客户端的Socket</span>            socket = serverSocket.accept();            <span class="hljs-comment">// 3.创建输入流</span>            is = socket.getInputStream();            byteOutputStream = <span class="hljs-keyword">new</span> ByteOutputStream();            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];            <span class="hljs-keyword">int</span> len;            <span class="hljs-comment">// 4.读取数据</span>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;                <span class="hljs-comment">// 将buffer数组中的数据写到ByteOutputStream类的一个数组中</span>                byteOutputStream.write(buffer, <span class="hljs-number">0</span>, len);            &#125;            System.out.println(<span class="hljs-string">"收到消息，来自："</span>+socket.getInetAddress());            System.out.println(byteOutputStream.toString());        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 5.关闭流和socket</span>            <span class="hljs-keyword">if</span> (byteOutputStream != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    byteOutputStream.close();                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (is != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    is.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (socket != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    socket.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (serverSocket != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    serverSocket.close();                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;</code></pre><h2 id="使用TCP实现文件传输"><a href="#使用TCP实现文件传输" class="headerlink" title="使用TCP实现文件传输"></a>使用TCP实现文件传输</h2><pre><code class="hljs java">  <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 创建socket并绑定IP和端口号</span>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">"127.0.0.1"</span>,<span class="hljs-number">9999</span>);        <span class="hljs-comment">// 创建输出流，发送数据</span>        OutputStream outputStream = socket.getOutputStream();        <span class="hljs-comment">// 创建文件输入流，外部读取文件内容</span>        FileInputStream fi = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"../java_08/pic2.png"</span>));        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];        <span class="hljs-keyword">int</span> len;        <span class="hljs-keyword">while</span> ((len = fi.read(buffer))!=-<span class="hljs-number">1</span>) &#123;            outputStream.write(buffer,<span class="hljs-number">0</span>,len);        &#125;        <span class="hljs-comment">// 关闭数据输出</span>        socket.shutdownOutput();        <span class="hljs-comment">// 客户端接收服务端的反馈信息</span>        InputStream inputStream = socket.getInputStream();        ByteOutputStream byteOutputStream = <span class="hljs-keyword">new</span> ByteOutputStream();        <span class="hljs-keyword">byte</span>[] buffer1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];        <span class="hljs-keyword">int</span> len1;        <span class="hljs-keyword">while</span>((len=inputStream.read(buffer1))!=-<span class="hljs-number">1</span>)&#123;            byteOutputStream.write(buffer1,<span class="hljs-number">0</span>,len);        &#125;        System.out.println(byteOutputStream.toString());        byteOutputStream.close();        inputStream.close();        outputStream.close();        fi.close();        socket.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 创建服务端ServerSocket并绑定端口</span>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);        <span class="hljs-comment">// 接收客户端socket</span>        Socket socket = serverSocket.accept();        <span class="hljs-comment">// 创建输入流，接收数据</span>        InputStream inputStream = socket.getInputStream();        <span class="hljs-comment">// 创建文件输出流，用于保存接收到的文件</span>        FileOutputStream fo = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"rec1.png"</span>));        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];        <span class="hljs-keyword">int</span> len;        <span class="hljs-keyword">while</span>((len = inputStream.read(buffer))!=-<span class="hljs-number">1</span>)&#123;            fo.write(buffer,<span class="hljs-number">0</span>,len);        &#125;        <span class="hljs-comment">// 服务器反馈消息给客户端</span>        OutputStream outputStream = socket.getOutputStream();        outputStream.write(<span class="hljs-string">"图片已接收到！"</span>.getBytes());        outputStream.close();        fo.close();        inputStream.close();        socket.close();        serverSocket.close();    &#125;&#125;</code></pre><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sender</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    <span class="hljs-comment">// 1.创建套接字</span>    DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket();    InetAddress inet = InetAddress.getByName(<span class="hljs-string">"127.0.0.1"</span>);    String str = <span class="hljs-string">"哈哈哈哈哈哈哈~"</span>;    <span class="hljs-keyword">byte</span>[] data = str.getBytes();    <span class="hljs-comment">// 2.初始化数据包，绑定IP,和端口号，确定数据的字节长度</span>    DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(data,<span class="hljs-number">0</span>,data.length,inet,<span class="hljs-number">9999</span>);    <span class="hljs-comment">// 3.发送数据包</span>    socket.send(packet);    <span class="hljs-comment">// 4.关闭Socket</span>    socket.close();&#125;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    <span class="hljs-comment">// 1.创建套接字</span>    DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);    <span class="hljs-comment">// 2.创建用于接收数据的字节数组</span>    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-comment">// 3.创建数据包</span>    DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(buffer,<span class="hljs-number">0</span>,buffer.length);    <span class="hljs-comment">// 4.接收数据</span>    socket.receive(packet);    <span class="hljs-comment">// 5.将接收的数据打印到控制台</span>    System.out.println(<span class="hljs-keyword">new</span> String(packet.getData(),<span class="hljs-number">0</span>,packet.getLength()));    <span class="hljs-comment">// 6.关闭socket</span>    socket.close();&#125;</code></pre><h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;        HttpURLConnection con = <span class="hljs-keyword">null</span>;        InputStream is = <span class="hljs-keyword">null</span>;        FileOutputStream fo = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 创建URL对象</span>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"http://localhost:8888/index.html"</span>);            <span class="hljs-comment">// 创建连接对象</span>            con = (HttpURLConnection) url.openConnection();            <span class="hljs-comment">// 创建连接</span>            con.connect();            <span class="hljs-comment">// 创建输入流，用于读取数据</span>            is = con.getInputStream();            <span class="hljs-comment">// 创建文件输出流，将读取的数据写到本地</span>            fo = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"index.html"</span>));            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];            <span class="hljs-keyword">int</span> len;            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;                fo.write(buffer, <span class="hljs-number">0</span>, len);            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;        &#125;        <span class="hljs-keyword">if</span> (fo != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                fo.close();            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;            <span class="hljs-keyword">if</span> (is != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    is.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (con != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">try</span> &#123;                    con.disconnect();                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I/O流</title>
    <link href="/2020/03/11/java-08/"/>
    <url>/2020/03/11/java-08/</url>
    
    <content type="html"><![CDATA[<h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><p>1、File类的一个对象，代表一个文件或一个文件目录<br>2、File类声明在java.io包下<a id="more"></a><br><strong>File类对象常用方法：</strong></p><pre><code class="hljs java">  <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"src/IO/hello.txt"</span>);<span class="hljs-comment">// public String getAbsolutePath()：获取绝对路径</span>        System.out.println(file1.getAbsoluteFile());<span class="hljs-comment">// public String getPath() ：获取路径</span>        System.out.println(file1.getParent());<span class="hljs-comment">// public String getName() ：获取名称</span>        System.out.println(file1.getName());<span class="hljs-comment">// public String getParent()：获取上层文件目录路径。若无，返回null</span>        System.out.println(file1.getParent());<span class="hljs-comment">// public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span>        System.out.println(file1.length());<span class="hljs-comment">// public long lastModified() ：获取最后一次的修改时间，毫秒值</span><span class="hljs-comment">// public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span><span class="hljs-comment">// public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span><span class="hljs-comment">//public boolean renameTo(File dest):把文件重命名为指定的文件路径</span>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);        file1.renameTo(file2);<span class="hljs-comment">// public boolean isDirectory()：判断是否是文件目录</span><span class="hljs-comment">// public boolean isFile() ：判断是否是文件</span><span class="hljs-comment">// public boolean exists() ：判断是否存在</span><span class="hljs-comment">// public boolean canRead() ：判断是否可读</span><span class="hljs-comment">// public boolean canWrite() ：判断是否可写</span><span class="hljs-comment">// public boolean isHidden() ：判断是否隐藏</span>        System.out.println(file2.exists());<span class="hljs-comment">// true</span>        System.out.println(file1.exists());<span class="hljs-comment">// false</span><span class="hljs-comment">// public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span><span class="hljs-comment">// public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span><span class="hljs-comment">// public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span><span class="hljs-comment">// public boolean delete()：删除文件或者文件夹</span>        File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test1.txt"</span>);        file3.createNewFile();        file3.delete();    &#125;</code></pre><h2 id="I-O流原理及流的分类"><a href="#I-O流原理及流的分类" class="headerlink" title="I/O流原理及流的分类"></a>I/O流原理及流的分类</h2><p>按数据流向分为：输入流，输出流<br>按操作的数据单位分为：字节流，字符流<br>按流的角色分为：节点流，处理流<br>四个抽象基类：<br>字节流：InputStream，OutputStream<br>字符流：Reader，Writer<br>节点流：<br>操作字节：FileInputStream，FileOutputStream<br>操作字符：FileReader，FileWiter<br>缓冲流（处理流的一种）：<br>操作字节：BufferedInputStream，BufferedOutput<br>操作字符：BufferedReader，BufferedWriter</p><h2 id="使用FileReader从硬盘中读取字符数据"><a href="#使用FileReader从硬盘中读取字符数据" class="headerlink" title="使用FileReader从硬盘中读取字符数据"></a>使用FileReader从硬盘中读取字符数据</h2><pre><code class="hljs java"> <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;        FileReader fileReader = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.实例化File类对象</span>            File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);<span class="hljs-comment">// 相对于当前Modul</span>            <span class="hljs-comment">// 2.提供具体的流</span>            fileReader = <span class="hljs-keyword">new</span> FileReader(file1);            <span class="hljs-comment">// 3.读数据</span>            <span class="hljs-comment">// read()返回读入的一个字符的ASCII码，如果到达末尾则返回-1</span>            <span class="hljs-keyword">int</span> data;            <span class="hljs-keyword">while</span> ((data = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;                System.out.print((<span class="hljs-keyword">char</span>) data);            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 防止内存泄漏，必须关闭流</span>            <span class="hljs-comment">// 4.关闭流</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-keyword">null</span>) &#123;                    fileReader.close();                &#125;            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125; <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 调用read(char[] cbuf) 返回每次读入cbuf数组中的字符个数，到达文件末尾返回-1</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileReader fr = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);            fr = <span class="hljs-keyword">new</span> FileReader(file1);            <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">5</span>];            <span class="hljs-keyword">int</span> len;            <span class="hljs-keyword">while</span> ((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//                for (int i = 0; i &lt; cbuf.length; i++) &#123;</span><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><span class="hljs-comment">//                &#125;</span>             <span class="hljs-comment">/*方式一：</span><span class="hljs-comment">               for(int i=0;i&lt;len;i++)&#123;</span><span class="hljs-comment">                    System.out.print(cbuf[i]);</span><span class="hljs-comment">                &#125;*/</span>             <span class="hljs-comment">// 方式二：</span>                String str = <span class="hljs-keyword">new</span> String(cbuf,<span class="hljs-number">0</span>,len);                System.out.print(str);            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (fr != <span class="hljs-keyword">null</span>) &#123;                fr.close();            &#125;        &#125;   &#125;</code></pre><h2 id="使用FileWriter向硬盘中写入字符数据"><a href="#使用FileWriter向硬盘中写入字符数据" class="headerlink" title="使用FileWriter向硬盘中写入字符数据"></a>使用FileWriter向硬盘中写入字符数据</h2><pre><code class="hljs java"> <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 利用输入流向硬盘中写入数据</span>    <span class="hljs-comment">/*</span><span class="hljs-comment">    文件不存在则自动创建；</span><span class="hljs-comment">    new FileWriter(file1,false);    写入时将原来文件的内容覆盖(默认为false)</span><span class="hljs-comment">    new FileWriter(file1,true);     写入时追加到原文件内容后面</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileWriter fw = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.提供File类的对象，指明要写入的文件</span>            File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"test.txt"</span>);            <span class="hljs-comment">// 提供FileWriter对象，用于数据写入</span>            fw = <span class="hljs-keyword">new</span> FileWriter(file1,<span class="hljs-keyword">true</span>);            fw.write(<span class="hljs-string">"哈哈哈哈哈,"</span>);            fw.write(<span class="hljs-string">"歪比巴卜"</span>);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span>(fw!=<span class="hljs-keyword">null</span>)&#123;                fw.close();        &#125;        &#125;    &#125;&#125;</code></pre><h2 id="使用FileInputStream-FileOutputStream对字节文件的处理"><a href="#使用FileInputStream-FileOutputStream对字节文件的处理" class="headerlink" title="使用FileInputStream,FileOutputStream对字节文件的处理"></a>使用FileInputStream,FileOutputStream对字节文件的处理</h2><p><img src="/2020/03/11/java-08/1.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        FileInputStream fi = <span class="hljs-keyword">null</span>;        FileOutputStream fo = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"pic.png"</span>);            File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"pic1.png"</span>);            fi = <span class="hljs-keyword">new</span> FileInputStream(file1);            fo = <span class="hljs-keyword">new</span> FileOutputStream(file2);            <span class="hljs-keyword">byte</span>[] pic = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];            <span class="hljs-keyword">int</span> len;<span class="hljs-comment">// 获取读取的字符长度</span>            <span class="hljs-keyword">while</span>((len = fi.read(pic))!=-<span class="hljs-number">1</span>)&#123;                fo.write(pic,<span class="hljs-number">0</span>,len);            &#125;        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span>(fo!=<span class="hljs-keyword">null</span>)&#123;                    fo.close();                &#125;            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span>(fi!=<span class="hljs-keyword">null</span>)&#123;                    fi.close();                &#125;            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;</code></pre><h2 id="缓冲流的使用"><a href="#缓冲流的使用" class="headerlink" title="缓冲流的使用"></a>缓冲流的使用</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// 内部通过提供一个缓冲区，提高文件的读取，写入速度</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;      BufferedInputStream bis = <span class="hljs-keyword">null</span>;      BufferedOutputStream bos = <span class="hljs-keyword">null</span>;      <span class="hljs-keyword">try</span> &#123;          <span class="hljs-comment">// 1.造文件</span>          File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"pic.png"</span>);          File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"pic2.png"</span>);          <span class="hljs-comment">// 2.造流</span>          FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file1);          FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(file2);          <span class="hljs-comment">// 3.造缓冲流</span>          bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);          bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);          <span class="hljs-comment">// 4.读取和写入</span>          <span class="hljs-keyword">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];          <span class="hljs-keyword">int</span> len;          <span class="hljs-keyword">while</span>((len = bis.read(buff))!=-<span class="hljs-number">1</span>)&#123;              bos.write(buff,<span class="hljs-number">0</span>,len);          &#125;      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;          e.printStackTrace();      &#125; <span class="hljs-keyword">finally</span> &#123;          <span class="hljs-keyword">try</span> &#123;              <span class="hljs-keyword">if</span>(bis!=<span class="hljs-keyword">null</span>)&#123;                  bis.close();              &#125;          &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;              e.printStackTrace();          &#125;          <span class="hljs-keyword">try</span> &#123;              <span class="hljs-keyword">if</span>(bos!=<span class="hljs-keyword">null</span>)&#123;                  bos.close();              &#125;          &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;              e.printStackTrace();          &#125;      &#125;  &#125;</code></pre><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>InputStreamReader：将IntputStream转换为Reader</p><p>OutputStreamWriter：将Writer转化为OutputStream</p><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>序列化：使用ObjectOutputStream类保存基本数据类型数据或对象<br>反序列化：使用ObjectInputStream类读取基本数据类型数据或对象<br><strong>对象的序列化：</strong>允许把内存中的java对象转化为与平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或是通过网络节点将这种二进制流传输到另一个网络节点。当程序获取到这种二进制流后，可以恢复成原来的java对象。<br><strong>对象的序列化与反序列化：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-comment">//序列化</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;       ObjectOutputStream oos = <span class="hljs-keyword">null</span>;       <span class="hljs-keyword">try</span> &#123;           oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"test.dat"</span>));           oos.writeObject(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"哈哈哈哈哈哈哈哈哈"</span>));           oos.flush();           oos.writeObject(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"马老师"</span>,<span class="hljs-number">40</span>));           oos.flush();       &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;           e.printStackTrace();       &#125; <span class="hljs-keyword">finally</span> &#123;           <span class="hljs-keyword">try</span> &#123;               <span class="hljs-keyword">if</span>(oos!=<span class="hljs-keyword">null</span>)&#123;                   oos.close();               &#125;           &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;               e.printStackTrace();           &#125;       &#125;   &#125;   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;       ObjectInputStream ois = <span class="hljs-keyword">null</span>;       <span class="hljs-keyword">try</span> &#123;           ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"test.dat"</span>));           Object o = ois.readObject();           String str = (String) o;           System.out.println(str);<span class="hljs-comment">// 哈哈哈哈哈哈哈哈哈</span>           Person p = (Person) ois.readObject();           System.out.println(p);<span class="hljs-comment">// Person&#123;name='马老师', age=40&#125;</span>       &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;           e.printStackTrace();       &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;           e.printStackTrace();       &#125; <span class="hljs-keyword">finally</span> &#123;           <span class="hljs-keyword">if</span>(ois!=<span class="hljs-keyword">null</span>)&#123;               <span class="hljs-keyword">try</span> &#123;                   ois.close();               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                   e.printStackTrace();               &#125;           &#125;       &#125;   &#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 1、序列化对象需要实现Serializable接口</span><span class="hljs-comment"> *              2、需要提供一个静态的全局常量serialVersionUID</span><span class="hljs-comment"> *              3、保证当前类的所有属性是可序列化的</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-03-12 15:47</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">42256165416L</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person&#123;"</span> +                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", age="</span> + age +                <span class="hljs-string">'&#125;'</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型</title>
    <link href="/2020/03/11/java-07/"/>
    <url>/2020/03/11/java-07/</url>
    
    <content type="html"><![CDATA[<h2 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h2><p>允许在定义类、接口时通过一个标识表示类中某个属性的类型或者时某个方法的返回值及参数类型<a id="more"></a></p><pre><code class="hljs java">    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();        list.add(<span class="hljs-number">111</span>);        list.add(<span class="hljs-number">222</span>);        list.add(<span class="hljs-number">333</span>);<span class="hljs-comment">//        for (Integer num:list)&#123;</span><span class="hljs-comment">//            System.out.println(num);</span><span class="hljs-comment">//        &#125;</span>        Iterator&lt;Integer&gt; iterator = list.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        HashMap&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Integer&gt;();        map.put(<span class="hljs-string">"Tony"</span>,<span class="hljs-number">18</span>);        map.put(<span class="hljs-string">"Troye"</span>,<span class="hljs-number">25</span>);        map.put(<span class="hljs-string">"Taylor"</span>,<span class="hljs-number">20</span>);        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            Map.Entry&lt;String,Integer&gt; entry = iterator.next();            System.out.println(entry .getKey()+<span class="hljs-string">"-----"</span>+entry .getValue());        &#125;    &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2020/03/02/java-06/"/>
    <url>/2020/03/02/java-06/</url>
    
    <content type="html"><![CDATA[<h1 id="集合与数组"><a href="#集合与数组" class="headerlink" title="集合与数组"></a>集合与数组</h1><p><strong>数组：</strong><br>1.一旦初始化，长度就不可修改了；<br>2.一旦定义后，就只能操作指定类型的数据了；<br>3.数组提供的方法非常有限，且效率不高；<a id="more"></a><br>4.获取数组中实际元素的个数，没有现成的属性和方法可调用；<br>5.存储特点：有序，可重复。<br><strong>集合：</strong>Java集合分为Collection和Map两种体系<br><img src="/2020/03/02/java-06/1.jpg" srcset="/img/loading.gif" alt><strong>Collection接口：</strong>单列数据，存储一个一个的对象<br>&lt;1&gt; List接口：元素有序，可重复<br>实现类：<br>ArrayList，作为List接口的主要实现类；线程不安全，效率高；底层使用Object[] elementData存储<br>LinkedList，对于频繁插入，删除效率较高；底层使用双向链表储存<br>Vector，作为List接口的古老实现类；线程安全，效率低；底层使用Object[] elementData存储<br>&lt;2&gt; Set接口：元素无序，不可重复<br>实现类：<br>HashSet，作为Set接口的主要实现类；线程不安全；可以存储null<br>LinkedHashSet，HashSet的子类；遍历时可以按照添加的顺序遍历；对于频繁遍历效率较高<br>TreeSet，要求数据是同一个类型，可按照对象的指定属性进行排序<br><strong>Map接口：</strong>双列数据，存储具有映射关系”key - value对“<br>实现类：<br>HashMap，作为Map的主要实现类；线程不安全，效率高；能存储null的键值对<br>        -&gt; LinkedHashMap，保证在遍历元素时，可以按照添加顺序进行遍历；对于频繁遍历效率较高<br>        -&gt;原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前、后的元素。<br>TreeMap，按照添加的key-value进行排序；底层采用红黑树<br>Hashtable，作为Map的古老实现类；线程安全，效率低；不能存存储null的键值对<br>       -&gt; Properties，常用来处理配置文件。key和value都是String类型</p><h2 id="Collection接口中的方法"><a href="#Collection接口中的方法" class="headerlink" title="Collection接口中的方法"></a>Collection接口中的方法</h2><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();        <span class="hljs-comment">// add(Object e) 将元素e添加到集合中</span>        coll1.add(<span class="hljs-string">"aaa"</span>);        coll1.add(<span class="hljs-number">123</span>);<span class="hljs-comment">//自动装箱</span>        coll1.add(<span class="hljs-keyword">new</span> Date());        <span class="hljs-comment">// size() 获取添加元素的个数</span>        System.out.println(coll1.size());<span class="hljs-comment">// 3</span>        <span class="hljs-comment">// addAll(Collection coll) 将coll的所有元素添加到当前集合中</span>        Collection coll2 = <span class="hljs-keyword">new</span> ArrayList();        coll2.addAll(coll1);        System.out.println(coll2);<span class="hljs-comment">// 自动调用toString() [aaa, 123, Wed Mar 04 15:58:00 CST 2020]</span>        <span class="hljs-comment">// isEmpty() 判断当前集合是否为空</span>        System.out.println(coll1.isEmpty());<span class="hljs-comment">// false</span>        <span class="hljs-comment">// clear() 清空集合元素</span>        coll1.clear();        System.out.println(coll1.isEmpty());<span class="hljs-comment">// true</span>        <span class="hljs-comment">// contains(Object e) 是否包含某个元素</span>        <span class="hljs-comment">// 会调用obj类对象的equals()</span>        Collection coll3 = <span class="hljs-keyword">new</span> ArrayList();        coll3.add(<span class="hljs-number">1</span>);        coll3.add(<span class="hljs-string">"abc"</span>);        coll3.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"hello"</span>));        System.out.println(coll3);<span class="hljs-comment">// [1, abc, hello]</span>        System.out.println(coll3.contains(<span class="hljs-string">"hello"</span>));<span class="hljs-comment">// true</span>        <span class="hljs-comment">// containAll(Collection coll) 判断形参coll中所有的元素是否在当前集合中</span>        Collection coll4 = Arrays.asList(<span class="hljs-string">"abc"</span>, <span class="hljs-number">1</span>);        System.out.println(coll3.containsAll(coll4));<span class="hljs-comment">// true</span>    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();        coll1.add(<span class="hljs-number">1</span>);        coll1.add(<span class="hljs-number">2</span>);        coll1.add(<span class="hljs-number">3</span>);        coll1.add(<span class="hljs-string">"abc"</span>);        System.out.println(coll1);<span class="hljs-comment">// [1, 2, 3, abc]</span>        <span class="hljs-comment">// remove(Object e)</span>        coll1.remove(<span class="hljs-string">"abc"</span>);        System.out.println(coll1);<span class="hljs-comment">// [1, 2, 3]</span>        <span class="hljs-comment">// removeAll(Collection coll) 从当前集合中移除coll中所有的元素</span>        Collection coll2 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);        coll1.removeAll(coll2);        System.out.println(coll1);<span class="hljs-comment">// [3]</span>        <span class="hljs-comment">// retainAll(Collection coll) 返回交集</span>        Collection coll3 = <span class="hljs-keyword">new</span> ArrayList();        coll3.add(<span class="hljs-number">1</span>);        coll3.add(<span class="hljs-number">2</span>);        Collection coll4 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);        coll3.retainAll(coll4);        System.out.println(coll3);<span class="hljs-comment">// [1, 2]</span>        <span class="hljs-comment">// toArray() 集合-&gt;数组</span>        <span class="hljs-comment">// 数组-&gt;集合 Arrays.asList()</span>    &#125;</code></pre><h3 id="迭代器Iterator接口"><a href="#迭代器Iterator接口" class="headerlink" title="迭代器Iterator接口"></a>迭代器Iterator接口</h3><pre><code class="hljs java"> <span class="hljs-meta">@Test</span>  <span class="hljs-comment">//集合元素的遍历，调用迭代器Iterator接口</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();        coll1.add(<span class="hljs-number">1</span>);        coll1.add(<span class="hljs-number">2</span>);        coll1.add(<span class="hljs-number">3</span>);        <span class="hljs-comment">// 实例化迭代器对象</span>        Iterator iterator = coll1.iterator();<span class="hljs-comment">//        for (int i = 0; i &lt; coll1.size(); i++) &#123;</span><span class="hljs-comment">//            System.out.println( iterator.next());</span><span class="hljs-comment">//        &#125;</span>        <span class="hljs-comment">// 起始指针位于第一个元素之前</span>        <span class="hljs-comment">// hasNext() 判断是否还有下一个元素</span>        <span class="hljs-comment">// next() 指针下移，将下移以后的集合位置上的元素返回</span>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            Object obj = iterator.next();            <span class="hljs-keyword">if</span>(obj.equals(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>)))&#123;                iterator.remove();            &#125;        &#125;        iterator = coll1.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;    &#125;&#125;</code></pre><h3 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h3><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;     Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();     coll1.add(<span class="hljs-number">1</span>);     coll1.add(<span class="hljs-number">2</span>);     coll1.add(<span class="hljs-number">3</span>);     coll1.add(<span class="hljs-number">4</span>);     <span class="hljs-comment">// 使用foreach进行遍历  for(集合元素类型 局部变量 : 集合对象)</span>     <span class="hljs-keyword">for</span> (Object obj:coll1) &#123;<span class="hljs-comment">//将coll1的元素依次取出并赋给obj</span>         System.out.println(obj);     &#125; &#125; <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a:arr1) &#123;         a = <span class="hljs-number">6</span>;     &#125;<span class="hljs-comment">// 对原数组没有影响</span>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;         arr1[i] = <span class="hljs-number">6</span>;     &#125;<span class="hljs-comment">// 对原数组的值进行修改</span>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;         System.out.println(arr1[i]);     &#125; &#125;</code></pre><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">//List常用方法</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">// void add(int index, Object ele):在index位置插入ele元素</span>   <span class="hljs-comment">// boolean addAll(int index, Collection eles):从index位置开始将eles中 的所有元素添加进来</span>   <span class="hljs-comment">// Object get(int index):获取指定index位置的元素</span>       ArrayList list1 = <span class="hljs-keyword">new</span> ArrayList();       list1.add(<span class="hljs-number">1</span>);       list1.add(<span class="hljs-number">2</span>);       list1.add(<span class="hljs-number">3</span>);         list1.add(<span class="hljs-number">4</span>);       list1.add(<span class="hljs-number">3</span>);       System.out.println(list1.get(<span class="hljs-number">1</span>));<span class="hljs-comment">// 2</span>   <span class="hljs-comment">// int indexOf(Object obj):返回obj在集合中首次出现的位置</span>       System.out.println(list1.indexOf(<span class="hljs-number">4</span>));<span class="hljs-comment">// 3</span>   <span class="hljs-comment">// int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span>       System.out.println(list1.lastIndexOf(<span class="hljs-number">3</span>));<span class="hljs-comment">// 4</span>   <span class="hljs-comment">// Object remove(int index):移除指定index位置的元素，并返回此元素</span>       System.out.println(<span class="hljs-string">"删除索引为2的元素:"</span>+list1.remove(<span class="hljs-number">2</span>));<span class="hljs-comment">// 删除索引为2的元素:3</span>       System.out.println(list1);<span class="hljs-comment">// [1, 2, 4, 3]</span>   <span class="hljs-comment">// Object set(int index, Object ele):设置指定index位置的元素为ele</span>       list1.set(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);       System.out.println(list1);<span class="hljs-comment">//[1, 5, 4, 3]</span>   <span class="hljs-comment">// List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span>       System.out.println(list1.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">// [5, 4, 3]</span>   &#125;</code></pre><h3 id="LinkedList的可顺序遍历性"><a href="#LinkedList的可顺序遍历性" class="headerlink" title="LinkedList的可顺序遍历性"></a>LinkedList的可顺序遍历性</h3><pre><code class="hljs java">  <span class="hljs-meta">@Test</span> <span class="hljs-comment">// LinkedList可按顺序进行遍历  使用foreach遍历</span>    <span class="hljs-comment">// LinkedList对数据进行储存时添加了两个引用，用于记录前一个元素和后一个元素的位置，</span>    <span class="hljs-comment">// 因此可按元素的添加顺序进行遍历，并且对频繁的遍历效率较高</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        LinkedList linkedList1 = <span class="hljs-keyword">new</span> LinkedList();        linkedList1.add(<span class="hljs-number">1111</span>);        linkedList1.add(<span class="hljs-number">2222</span>);        linkedList1.add(<span class="hljs-number">3333</span>);        <span class="hljs-keyword">for</span>(Object obj : linkedList1)&#123;            System.out.println(obj);        &#125;<span class="hljs-comment">// 1111 2222 3333</span>    &#125;&#125;</code></pre><h3 id="Set常用方法"><a href="#Set常用方法" class="headerlink" title="Set常用方法"></a>Set常用方法</h3><p>HashSet并没有添加新的方法，沿用Collection的方法</p><h3 id="HashSet的添加"><a href="#HashSet的添加" class="headerlink" title="HashSet的添加"></a>HashSet的添加</h3><p>向Set中添加数据一定要重写hashCode()和equals()方法，相等的对象必须具有相同的散列码</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// HashSet 无序性  使用迭代器遍历</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// 无序性：不等于随机性，存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值</span>        <span class="hljs-comment">// 不可重复性：保证添加的元素按equals()进行判断时，不能返回true</span>        <span class="hljs-comment">/*</span><span class="hljs-comment">        添加元素的过程：</span><span class="hljs-comment">        向HashSet中添加元素a,首先调用元素a所在类的hashCode(),计算元素a的哈希值,</span><span class="hljs-comment">        此哈希值通过某种算法计算出在HashSet底层数组中的存放位置,判断此位置上是否有其他元素：</span><span class="hljs-comment">            如果此位置没有其他元素，则元素a添加成功</span><span class="hljs-comment">            如果此位置上有元素b(或以链表形式存在的多个元素),则比较a,b的哈希值：</span><span class="hljs-comment">                如果哈希值不相同，则元素a添加成功(以链表形式,jdk7:元素a指向原来的元素;jdk8:原来的元素指向元素a)</span><span class="hljs-comment">                如果哈希值相同，进而调用元素a所在类的equals()：</span><span class="hljs-comment">                    equals()返回true,则元素a添加失败</span><span class="hljs-comment">                    equals()返回false,则添加成功(以链表形式,jdk7:元素a指向原来的元素;jdk8:原来的元素指向元素a)</span><span class="hljs-comment">         */</span>        HashSet set1 = <span class="hljs-keyword">new</span> HashSet();        set1.add(<span class="hljs-number">111</span>);        set1.add(<span class="hljs-number">222</span>);        set1.add(<span class="hljs-number">333</span>);        Iterator iterator = set1.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;<span class="hljs-comment">// 333 222 111</span>    &#125;</code></pre><h3 id="TreeSet按指定属性进行排序"><a href="#TreeSet按指定属性进行排序" class="headerlink" title="TreeSet按指定属性进行排序"></a>TreeSet按指定属性进行排序</h3><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">//TreeSet按指定属性遍历</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;       TreeSet treeSet1 = <span class="hljs-keyword">new</span> TreeSet();       <span class="hljs-comment">// 按大小排序输出</span>       treeSet1.add(<span class="hljs-number">1</span>);       treeSet1.add(-<span class="hljs-number">1</span>);       treeSet1.add(<span class="hljs-number">0</span>);       Iterator iterator = treeSet1.iterator();       <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;           System.out.println(iterator.next());       &#125;<span class="hljs-comment">// -1 0 1</span>       TreeSet treeSet2 = <span class="hljs-keyword">new</span> TreeSet();       treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">20</span>));       treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"female"</span>,<span class="hljs-number">18</span>));       treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Troye"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">22</span>));       treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Justin"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">22</span>));       Iterator iterator2 = treeSet2.iterator();       <span class="hljs-keyword">while</span>(iterator2.hasNext())&#123;           System.out.println(iterator2.next());       &#125;   &#125;</code></pre><p>Person类实现Comparable接口并重写toCompare()方法</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 按照年龄排序</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;       <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Person) &#123;           Person person = (Person)o;           <span class="hljs-keyword">int</span> compare = <span class="hljs-keyword">this</span>.age-person.age;<span class="hljs-comment">// 从小到大</span>           <span class="hljs-keyword">if</span>(compare==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 年龄相同则按姓名进行排序</span>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.compareTo(person.name);           &#125;           <span class="hljs-keyword">else</span>&#123;               <span class="hljs-keyword">return</span> compare;           &#125;       &#125;       <span class="hljs-keyword">else</span>&#123;           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"输入类型不匹配"</span>);       &#125;   &#125;</code></pre><p>输出结果：<br>                        <img src="/2020/03/02/java-06/result.png" srcset="/img/loading.gif" alt></p><hr><p>使用定制排序</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//定制排序</span>    <span class="hljs-comment">// 实例化Comparator类</span>    Comparator comparator = <span class="hljs-keyword">new</span> Comparator() &#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;            <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> Person &amp;&amp; o1 <span class="hljs-keyword">instanceof</span> Person)&#123;                <span class="hljs-keyword">return</span> ((Person) o1).getAge()-((Person)o2).getAge();            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"传入参数错误"</span>);            &#125;        &#125;    &#125;;    TreeSet treeSet2 = <span class="hljs-keyword">new</span> TreeSet(comparator);<span class="hljs-comment">// 传入comparator参数</span>    treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">20</span>));    treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"female"</span>,<span class="hljs-number">18</span>));    treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Troye"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">22</span>));    treeSet2.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Justin"</span>,<span class="hljs-string">"male"</span>,<span class="hljs-number">15</span>));    Iterator iterator2 = treeSet2.iterator();    <span class="hljs-keyword">while</span>(iterator2.hasNext())&#123;        System.out.println(iterator2.next());    &#125;&#125;</code></pre><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><p><strong>Map的结构：</strong><br>Map中的key：无序，不可重复，使用Set储存所有的key，key所在的类要重写equals()和 hashCode()<br>Map中的value：无序，可重复，使用List存储所有的value，value所在类要重写equals()<br>一个键值对构成一个entry对象<br>Map中的entry：无序，不可重复，使用Set储存所有的entry<br><strong>HashMap的底层实现原理：</strong><br>HashMap map = new HashMap();<br>实例化后，底层创建了一个长度为16的一维数组Entry[] table<br>map.put(key1,value1);<br>在jdk7中，首先调用key1所在类的hashCode()计算key的哈希值，此哈希值通过某种算法后，得到在Entry数组中的存放位置；<br>如果此位置为空，则添加成功，<br>否则将key1的哈希值与此位置上的一个或多个元素(key2,value2)的哈希值比较，<br>如果哈希值不同，则添加成功,<br>否则调用key1所在类的equals()，如果返回false，则添加成功，否则使用value1替换value2。<br>涉及到扩容时，容量扩大为原来的2倍，原有的数据全部被复制过来。</p><p>在jdk8中，没有马上就创建数组，而是在put()时创建Node[]数组</p><h3 id="Map接口中的方法"><a href="#Map接口中的方法" class="headerlink" title="Map接口中的方法"></a>Map接口中的方法</h3><pre><code class="hljs java">  <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//  添加、删除、修改操作：</span><span class="hljs-comment">// Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span>        HashMap map1 = <span class="hljs-keyword">new</span> HashMap();        map1.put(<span class="hljs-string">"A"</span>,<span class="hljs-number">111</span>);        map1.put(<span class="hljs-string">"B"</span>,<span class="hljs-number">222</span>);        map1.put(<span class="hljs-string">"C"</span>,<span class="hljs-number">333</span>);        System.out.println(map1);<span class="hljs-comment">// &#123;A=111, B=222, C=333&#125;</span><span class="hljs-comment">// void putAll(Map m):将m中的所有key-value对存放到当前map中</span>        HashMap map2 = <span class="hljs-keyword">new</span> HashMap();        map2.putAll(map1);        System.out.println(map2);<span class="hljs-comment">// &#123;A=111, B=222, C=333&#125;</span><span class="hljs-comment">// Object remove(Object key)：移除指定key的key-value对，并返回value</span>        Object a = map2.remove(<span class="hljs-string">"A"</span>);        System.out.println(a);<span class="hljs-comment">// 111</span>        System.out.println(map2);<span class="hljs-comment">// &#123;B=222, C=333&#125;</span><span class="hljs-comment">// void clear()：清空当前map中的所有数据</span>        map2.clear();        System.out.println(map2);<span class="hljs-comment">// &#123;&#125;</span><span class="hljs-comment">// 元素查询的操作：</span><span class="hljs-comment">// Object get(Object key)：获取指定key对应的value</span>        Object b = map1.get(<span class="hljs-string">"B"</span>);        System.out.println(b);<span class="hljs-comment">// 222</span><span class="hljs-comment">// boolean containsKey(Object key)：是否包含指定的key</span>        System.out.println(map1.containsKey(<span class="hljs-string">"D"</span>));<span class="hljs-comment">// false</span><span class="hljs-comment">// boolean containsValue(Object value)：是否包含指定的value</span>        System.out.println(map1.containsValue(<span class="hljs-number">222</span>));<span class="hljs-comment">// true</span><span class="hljs-comment">// int size()：返回map中key-value对的个数</span>        System.out.println(map2.size());<span class="hljs-comment">// 0</span>        System.out.println(map1.size());<span class="hljs-comment">// 4</span><span class="hljs-comment">// boolean isEmpty()：判断当前map是否为空</span>        System.out.println(map2.isEmpty());<span class="hljs-comment">// true</span><span class="hljs-comment">// boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span><span class="hljs-comment">// 元视图操作的方法：</span><span class="hljs-comment">// Set keySet()：返回所有key构成的Set集合</span>        Set set1 = map1.keySet();        Iterator iterator = set1.iterator();        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;            System.out.println(iterator.next());        &#125;<span class="hljs-comment">// A B C</span><span class="hljs-comment">// Collection values()：返回所有value构成的Collection集合</span>        Collection coll1 = map1.values();        Iterator iterator1 = coll1.iterator();        <span class="hljs-keyword">while</span>(iterator1.hasNext())&#123;            System.out.println(iterator1.next());        &#125;<span class="hljs-comment">// 111 222 333</span><span class="hljs-comment">// Set entrySet()：返回所有key-value对构成的Set集合</span>        Set set2 = map1.entrySet();        System.out.println(set2);<span class="hljs-comment">// [A=111, B=222, C=333]</span>        Iterator iterator2 = set2.iterator();        <span class="hljs-keyword">while</span>(iterator2.hasNext())&#123;            Object obj = iterator2.next();            Map.Entry entry = (Map.Entry) obj;            System.out.println(entry.getKey() +<span class="hljs-string">"==="</span>+entry.getValue());        &#125;    &#125;</code></pre><h1 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h1><pre><code class="hljs java">    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// 排序操作：（均为static方法）</span><span class="hljs-comment">// reverse(List)：反转List 中元素的顺序</span>        List list = <span class="hljs-keyword">new</span> ArrayList();        list.add(<span class="hljs-number">111</span>);        list.add(<span class="hljs-number">222</span>);        list.add(<span class="hljs-number">333</span>);        list.add(<span class="hljs-number">444</span>);        System.out.println(list);<span class="hljs-comment">// [111, 222, 333, 444]</span>        Collections.reverse(list);        System.out.println(list);<span class="hljs-comment">// [444, 333, 222, 111]</span><span class="hljs-comment">// shuffle(List)：对List 集合元素进行随机排序</span>        Collections.shuffle(list);        System.out.println(list);<span class="hljs-comment">// sort(List)：根据元素的自然顺序对指定List 集合元素按升序排序</span>        Collections.sort(list);        System.out.println(list);<span class="hljs-comment">// [111, 222, 333, 444]</span><span class="hljs-comment">// sort(List，Comparator)：根据指定的Comparator 产生的顺序对List 集合元素进行排序</span><span class="hljs-comment">// swap(List，int，int)：将指定list 集合中的i 处元素和j 处元素进行交换</span>        <span class="hljs-comment">// 查找、替换</span><span class="hljs-comment">// Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span><span class="hljs-comment">// Object max(Collection，Comparator)：根据Comparator 指定的顺序，返回给定集合中的最大元素</span><span class="hljs-comment">// Object min(Collection)</span><span class="hljs-comment">// Object min(Collection，Comparator)</span><span class="hljs-comment">// int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span><span class="hljs-comment">// void copy(List dest,List src)：将src中的内容复制到dest中</span>        <span class="hljs-comment">// boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值</span>    &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用类</title>
    <link href="/2020/02/26/java-05/"/>
    <url>/2020/02/26/java-05/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串相关类：String"><a href="#字符串相关类：String" class="headerlink" title="字符串相关类：String"></a>字符串相关类：String</h2><p>1.String声明为final，不可被继承。<br>2.实现了Serializable接口：表示字符串是支持序列化的;<br>   实现了Comparable接口：表示String是可以比较大小的；<a id="more"></a><br>3.String内部定义了final char[]    value[]用于存储字符串数据；<br>4.String代表不可变的字符序列。<br>        &lt;1&gt;当对字符串重新赋值；<br>        &lt;2&gt;对现有字符串进行连接操作；<br>        &lt;3&gt;当调用replace()修改指定字符或字符串；<br>        _会重新指定内存区域进行赋值。<br>5.通过字面量的方式给一个字符串赋值，此时字符串的值声明在字符串常量池 中。<br><img src="/2020/02/26/java-05/String_1.png" srcset="/img/loading.gif" alt="字面量赋值方式"><br>6.字符串常量池是不会存储相同内容的字符串的。</p><h3 id="String实例化的两种方式："><a href="#String实例化的两种方式：" class="headerlink" title="String实例化的两种方式："></a>String实例化的两种方式：</h3><pre><code class="hljs java"><span class="hljs-comment">// String实例化方式一：字面量赋值  字符串常量存储在堆空间中</span>String st1 = <span class="hljs-string">"abc"</span>;<span class="hljs-comment">// String实例化方式二：new + 构造器  字符串存储在字符串常量池中</span>String st2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);</code></pre><p>内存解析：<br><img src="/2020/02/26/java-05/String_2.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/02/26/java-05/String_3.png" srcset="/img/loading.gif" alt></p><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3> <pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringMethodTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;        String st1 = <span class="hljs-string">"Taylor Swift"</span>;        <span class="hljs-comment">// int length()：返回字符串的长度：return value.length</span>        System.out.println(st1.length());<span class="hljs-comment">// 12</span>        <span class="hljs-comment">// char charAt(int index)：返回某索引处的字符return value[index]</span>        System.out.println(st1.charAt(<span class="hljs-number">0</span>));<span class="hljs-comment">// T</span>        <span class="hljs-comment">// boolean isEmpty()：判断是否是空字符串：return value.length == 0</span>        System.out.println(st1.isEmpty());<span class="hljs-comment">// false</span>        <span class="hljs-comment">// String toLowerCase()：使用默认语言环境，将String 中的所有字符转换为小写</span>        System.out.println(st1.toLowerCase());<span class="hljs-comment">// taylor swift</span>        <span class="hljs-comment">// String toUpperCase()：使用默认语言环境，将String 中的所有字符转换为大写</span>        System.out.println(st1.toUpperCase());<span class="hljs-comment">// TAYLOR SWIFT</span>        <span class="hljs-comment">// String trim()：返回字符串的副本，忽略前导空白和尾部空白</span>        String st2 = <span class="hljs-string">" hello world "</span>;        String st3 = st2.trim();        System.out.println(st3);<span class="hljs-comment">// " hello world "</span>        System.out.println(st2.trim());<span class="hljs-comment">// "hello world"</span>        <span class="hljs-comment">// boolean equals(Object obj)：比较字符串的内容是否相同</span>        System.out.println(st2.equals(<span class="hljs-string">" hello world "</span>));<span class="hljs-comment">// true</span>        System.out.println(st2.equals(st3));<span class="hljs-comment">// false</span>        <span class="hljs-comment">//boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span>        System.out.println(st2.equalsIgnoreCase(<span class="hljs-string">" HELLO world "</span>));<span class="hljs-comment">// true</span>        <span class="hljs-comment">//String concat(String str)：将指定字符串连接到此字符串的结尾。等价于用“+”</span>        String st4 = <span class="hljs-string">"Justin "</span>.concat(<span class="hljs-string">"Bieber"</span>);        System.out.println(st4);<span class="hljs-comment">// Justin Bieber</span>        <span class="hljs-comment">//int compareTo(String anotherString)：比较两个字符串的大小</span>        String st5 = <span class="hljs-string">"abc"</span>;        String st6 = <span class="hljs-string">"abd"</span>;        System.out.println(st5.compareTo(st6));<span class="hljs-comment">// -1  (c-d=&gt;99-100)</span>        <span class="hljs-comment">//String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span>        String st7 = <span class="hljs-string">"学习JAVA高级语法"</span>;        System.out.println(st7.substring(<span class="hljs-number">2</span>));<span class="hljs-comment">// JAVA高级语法</span>        <span class="hljs-comment">//String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span>        System.out.println(st7.substring(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<span class="hljs-comment">//学习JAVA</span>    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span>        String st1 = <span class="hljs-string">"Jim Smith"</span>;        System.out.println(st1.endsWith(<span class="hljs-string">"aaa"</span>));<span class="hljs-comment">// false</span>        System.out.println(st1.endsWith(<span class="hljs-string">"Smith"</span>));<span class="hljs-comment">// true</span>        <span class="hljs-comment">// boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span>        String st2 = <span class="hljs-string">"张伟"</span>;        System.out.println(st2.startsWith(<span class="hljs-string">"张"</span>));<span class="hljs-comment">// true</span>        <span class="hljs-comment">// boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span>        System.out.println(st2.startsWith(<span class="hljs-string">"张"</span>,<span class="hljs-number">0</span> ));<span class="hljs-comment">// true</span>        System.out.println(st2.startsWith(<span class="hljs-string">"张伟dsg"</span>,<span class="hljs-number">0</span> ));<span class="hljs-comment">// false</span>        <span class="hljs-comment">// boolean contains(CharSequence s)：当且仅当此字符串包含指定的char值序列时，返回true</span>        System.out.println(<span class="hljs-string">"hello world"</span>.contains(<span class="hljs-string">"o"</span>));<span class="hljs-comment">// true</span>        <span class="hljs-comment">// int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span>        System.out.println(<span class="hljs-string">"Runnable"</span>.indexOf(<span class="hljs-string">"n"</span>));<span class="hljs-comment">// 2</span>        <span class="hljs-comment">// int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始(包含此索引)</span>        System.out.println(<span class="hljs-string">"hellohello"</span>.indexOf(<span class="hljs-string">"l"</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">// 7</span>        <span class="hljs-comment">// int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span>        System.out.println(<span class="hljs-string">"hello"</span>.lastIndexOf(<span class="hljs-string">"l"</span>));<span class="hljs-comment">// 3</span>        <span class="hljs-comment">// int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span>        System.out.println(<span class="hljs-string">"helloworld"</span>.lastIndexOf(<span class="hljs-string">"o"</span>,<span class="hljs-number">9</span>));<span class="hljs-comment">// 6</span>        <span class="hljs-comment">// 注：indexOf和lastIndexOf方法如果未找到都是返回-1</span>    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用newChar 替换此字符串中出现的所有oldChar得到的。</span>        String st1 = <span class="hljs-string">"aabbccaa"</span>;        String st2 = st1.replace(<span class="hljs-string">'a'</span>,<span class="hljs-string">'A'</span>);        System.out.println(st2);        <span class="hljs-comment">// String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span>        <span class="hljs-comment">// String replaceAll(String regex, String replacement) ：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span>        <span class="hljs-comment">// String replaceFirst(String regex, String replacement) ：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span>        <span class="hljs-comment">// boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span>        <span class="hljs-comment">// String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span>        <span class="hljs-comment">// String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span>    &#125;&#125;</code></pre><h3 id="String-与char-转换"><a href="#String-与char-转换" class="headerlink" title="String 与char[]转换"></a>String 与char[]转换</h3><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// String -&gt; char[]  调用String的toCharArray()</span>        String st1 = <span class="hljs-string">"qwerasdf"</span>;        <span class="hljs-keyword">char</span>[] charArray1 = st1.toCharArray();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charArray1.length; i++) &#123;            System.out.print(charArray1[i]);        &#125;        <span class="hljs-comment">// char[] -&gt; String  调用String()构造器</span>        String st2 = <span class="hljs-keyword">new</span> String(charArray1);        System.out.println(st2);    &#125;</code></pre><h3 id="String与byte-转换"><a href="#String与byte-转换" class="headerlink" title="String与byte[] 转换"></a>String与byte[] 转换</h3><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;        <span class="hljs-comment">// String -&gt; byte[]  调用String的getBytes()</span>        String st1 = <span class="hljs-string">"abc123哈哈"</span>;        <span class="hljs-keyword">byte</span>[] byteArray1 = st1.getBytes();<span class="hljs-comment">// 使用默认编码</span>        System.out.println(Arrays.toString(byteArray1));<span class="hljs-comment">// [97, 98, 99, 49, 50, 51, -27, -109, -120, -27, -109, -120]</span>        <span class="hljs-keyword">byte</span>[] byteArray2 = st1.getBytes(<span class="hljs-string">"gbk"</span>);        System.out.println(Arrays.toString(byteArray2));<span class="hljs-comment">// [97, 98, 99, 49, 50, 51, -71, -2, -71, -2]</span>        <span class="hljs-comment">// byte[] -&gt;String    调用String()构造器</span>        String st2 = <span class="hljs-keyword">new</span> String(byteArray1);        System.out.println(st2);<span class="hljs-comment">// abc123哈哈</span>        String st3 = <span class="hljs-keyword">new</span> String(byteArray2,<span class="hljs-string">"gbk"</span>);        System.out.println(st3);<span class="hljs-comment">// abc123哈哈</span>    &#125;&#125;</code></pre><h2 id="StringBuffer-与-StringBuilder"><a href="#StringBuffer-与-StringBuilder" class="headerlink" title="StringBuffer 与 StringBuilder"></a>StringBuffer 与 StringBuilder</h2><p>String：不可变的字符序列<br>StringBuffer：可变的字符序列；线程安全，效率低<br>StringBuilder：可变的字符系列；线程不安全，效率高<br>底层都是使用char[]存储<br>StringBuffer(StringBuilder)常用方法：</p><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">// StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span>        StringBuffer st1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">"abc"</span>);        st1.append(<span class="hljs-string">"!!!"</span>);<span class="hljs-comment">// abc!!!</span>        System.out.println(st1);        <span class="hljs-comment">// StringBuffer delete(int start,int end)：删除指定位置的内容</span>        st1.delete(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">// 取头不取尾</span>        System.out.println(st1);<span class="hljs-comment">// bc!!!</span>        <span class="hljs-comment">// StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span>        st1.replace(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-string">"de"</span>);        System.out.println(st1);<span class="hljs-comment">// bcde!</span>        <span class="hljs-comment">// StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span>        st1.insert(<span class="hljs-number">4</span>,<span class="hljs-string">"f"</span>);        System.out.println(st1);<span class="hljs-comment">// bcdef!</span>        <span class="hljs-comment">// StringBuffer reverse() ：把当前字符序列逆转</span>        System.out.println(st1.reverse());<span class="hljs-comment">// !fedcb</span>        <span class="hljs-comment">// public int indexOf(String str) 返回指定字符串的索引位置</span>        System.out.println(st1.indexOf(<span class="hljs-string">"b"</span>));<span class="hljs-comment">// 5</span>        <span class="hljs-comment">// public String substring(int start,int end) 截取指定起始位置的字符串</span>        System.out.println(st1.substring(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>));<span class="hljs-comment">// fedc</span>        <span class="hljs-comment">// public int length()</span>        <span class="hljs-comment">// public char charAt(int n )</span>        <span class="hljs-comment">// public void setCharAt(int n ,char ch)</span>    &#125;&#125;</code></pre><h2 id="日期时间API"><a href="#日期时间API" class="headerlink" title="日期时间API"></a>日期时间API</h2><p>Date类</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-comment">// System类中的currentTimeMillis()</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;      <span class="hljs-comment">// 时间戳：返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span>      <span class="hljs-keyword">long</span> time = System.currentTimeMillis();      System.out.println(time);  &#125;  <span class="hljs-meta">@Test</span> <span class="hljs-comment">// util.Date类</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;      <span class="hljs-comment">// 构造器一：Date(),创建一个当前时间的Date对象</span>      Date date1 = <span class="hljs-keyword">new</span> Date();      System.out.println(date1);<span class="hljs-comment">// 默认调用重写的toString()</span>      System.out.println(date1.getTime());<span class="hljs-comment">// getTime()获取当前时间对应的毫秒数</span>      <span class="hljs-comment">// 构造器二：Date(long time)</span>  &#125;</code></pre><p>SimpleDateFormat类</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;       <span class="hljs-comment">// 实例化SimpleDateFormat,使用默认构造器</span>       SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat();       Date date1 = <span class="hljs-keyword">new</span> Date();       <span class="hljs-comment">// 格式化日期 日期-&gt;String</span>       String date2 = sdf.format(date1);       System.out.println(date1);<span class="hljs-comment">// Mon Mar 02 14:15:11 CST 2020</span>       System.out.println(date2);<span class="hljs-comment">// 20-3-2 下午2:15</span>       <span class="hljs-comment">// 解析 String-&gt;日期</span>       String date3 = <span class="hljs-string">"20-3-2 下午2:15"</span>;       Date date4 = sdf.parse(date3);       System.out.println(date4);<span class="hljs-comment">// Mon Mar 02 14:15:00 CST 2020</span>       <span class="hljs-comment">// 使用带参构造器</span>       SimpleDateFormat sdf2 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd hh-mm-ss"</span>);       System.out.println(sdf2.format(<span class="hljs-keyword">new</span> Date()));<span class="hljs-comment">// 2020-03-02 02-24-05</span>   &#125;</code></pre><h2 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h2><p><strong>自然排序：</strong>java.lang.Comparable<br>        实现Comparable接口的类必须实现toCompare()方法</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 按照年龄排序</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Person) &#123;            Person person = (Person)o;            <span class="hljs-comment">// return Integer.compare(this.age,preson.age);</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age-person.age;<span class="hljs-comment">// 从小到大</span>        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"输入类型不匹配"</span>);        &#125;    &#125;&#125;</code></pre><p><strong>定制排序：</strong>java.util.Comparator<br>        需要重写Comparator类中的compare()方法</p><pre><code class="hljs java">Comparator comparator = <span class="hljs-keyword">new</span> Comparator() &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;         <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> Person &amp;&amp; o1 <span class="hljs-keyword">instanceof</span> Person)&#123;              <span class="hljs-keyword">return</span> ((Person) o1).getAge()-((Person)o2).getAge();         &#125;         <span class="hljs-keyword">else</span>&#123;               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"传入参数错误"</span>);         &#125;    &#125;&#125;;</code></pre><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnumTest1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        StudentGrade stu = StudentGrade.ONE;        System.out.println(stu);<span class="hljs-comment">// 自动调用Enum中的toString()</span>        <span class="hljs-comment">// values()返回枚举类型的对象数组</span>        StudentGrade[] values = StudentGrade.values();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;            System.out.println(values[i]);        &#125;        <span class="hljs-comment">// valueOf()把一个字符串转为对应的枚举类对象</span>        StudentGrade stu2 = StudentGrade.valueOf(<span class="hljs-string">"TWO"</span>);        System.out.println(stu2);<span class="hljs-comment">// TWO</span>    &#125;&#125;<span class="hljs-keyword">enum</span> StudentGrade&#123;    <span class="hljs-comment">// 提供当前枚举类的对象</span>    ONE(<span class="hljs-string">"大一"</span>),    TWO(<span class="hljs-string">"大二"</span>),    THREE(<span class="hljs-string">"大三"</span>),    FOUR(<span class="hljs-string">"大四"</span>);    <span class="hljs-comment">// 声明StudentGrade对象的属性</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String grade;    <span class="hljs-comment">// 私有化构造器</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">StudentGrade</span><span class="hljs-params">(String grade)</span></span>&#123;        <span class="hljs-keyword">this</span>.grade = grade;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGrade</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.grade;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="/2020/02/25/linux-02/"/>
    <url>/2020/02/25/linux-02/</url>
    
    <content type="html"><![CDATA[<h2 id="关机-amp-重启命令"><a href="#关机-amp-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><p><strong>shutdown</strong>(默认1分钟后关机)<br>        shutdown -h now : 立即关机<br>        shutdown -h 1 : 1分钟后关机<br>        shutdown -r now : 立即重启</p><a id="more"></a><p><strong>halt:</strong>禁用cpu，相当于直接关机<br><strong>reboot:</strong>立即重启<br><strong>sync:</strong>把内存上的数据同步到磁盘上(关机或重启前应该先执行此指令，防止数据丢失)</p><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p><strong>su 用户名：</strong>切换用户<br><strong>logout：</strong>注销用户，在图形运行级别无效</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>Linux是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须向系统管理员申请一个账号，然后以这个账号的身份进入系统。<br>每个用户至少属于一个组。<br><strong>添加用户：</strong> useradd -r -m -s /bin/bash 用户名<br>-r：建立系统账号<br>-m：自动建立用户的登入目录<br>-s：指定用户登入后所使用的shell<br><strong>指定密码：</strong>passwd 用户名<br><strong>删除用户：</strong><br>userdel 用户名(删除用户保留家目录)<br>userdel -r 用户名 (删除用户及用户主目录)<br><strong>查询用户：</strong>id 用户名<br><strong>查看当前用户：</strong>whoami  /who am I<br><strong>用户组：</strong>系统对有共性的多个用户进行统一的管理<br>添加组：groupadd  组名<br>查看组id：grep 组名 /etc/group<br>修改组账户：groupmod -g[新id] -n[新组名] 组名<br>删除组：groupdel 组名<br>增加用户时直接加上组：useradd -g 用户组 用户<br>修改用户组：usermod -g 用户组 用户<br>相关文件：<br>/etc/passwd：用户的配置文件，记录用户的各种信息<br>用户名：口令：用户标识号：组标识号：注释性描述：登录shell<br>/etc/shadow：口令配置文件<br>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：不活动时间：失效时间：标志<br>/etc/group：组配置文件<br>组名：口令：组标识符</p><h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><p>0：关机<br>        1：单用户（找回丢失密码）<br>        2：多用户状态没有网络服务<br>        3：多用户状态有网络<br>        4：系统未使用保留给用户<br>        5：图形界面<br>        6：系统重启<br>                /etc/inittab文件查看运行级别（ubuntu没有此文件）<br>                修改默认运行级别：init [012356] (然后按ctrl+alt+F1，Ubuntu进入命令界面 )<br><img src="/2020/02/25/linux-02/4.png" srcset="/img/loading.gif" alt></p><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><p>man 指令<br>help 指令</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>​    <strong>pwd：</strong>显示当前目录的绝对路径</p><p>​    <strong>ls [选项] [目录或是文件]：</strong>显示指定目录霞的文件信息<br>​            常用选项：<br>​            -a：显示当前目录的所有文件或目录，包括隐藏文件；<br>​            -l：以列表的方式显示信息。<br>​            <em>ls -a -l 等价于 ll</em></p><p>​    <strong>cd [目录]：</strong>进入指定目录<br>​            绝对路径：从根目录出发定位  /home<br>​            相对路径：从当前路径出发定位 ../home<br>​            cd ~  进入当前用户的家目录<br>​            cd ..  进入当前目录的上一级目录</p><p>​    <strong>mkdir [选项] 目录：</strong>创建目录<br>​            -p：创建多级目录<br>​            rmdir [] 目录：删除目录<br>​            redir 目录：删除的是空目录；rm -rf 目录：删除非空目录</p><p>​    <strong>touch 文件名：</strong>创建一个空文件（可以一次创建多个文件）</p><p>​    <strong>cp [选项] 原文件 指定目录：</strong>拷贝文件到指定目录<br>​            -r：递归复制整个文件夹    </p><p>​    <strong>rm [选项] 要删除的文件夹或目录：</strong>删除指定文件夹<br>​            -r：递归删除整个文件夹<br>​            -f：强制删除不提示    </p><p>​    <strong>mv 原文件名 新文件名：</strong>文件重命名<br>​            <strong>mv 原文件路径 新文件路径：</strong>移动文件    </p><p>​    <strong>cat [选项] 文件路径：</strong>查看文件内容<br>​            -n：显示行号<br>​            管道命令：|，前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）<br>​            |more：分页显示<br>​            |less：效率比more高</p><p>​    <strong>&gt;输出重定向：</strong><br>​            <strong>&gt;&gt;追加：</strong><br>​            ls -l &gt;文件：将列表的内容写入文件中<br>​            ls -l &gt;&gt;文件：将列表的内容追加到文件的末尾</p><p>​    <strong>echo [选项] [输出内容]：</strong>输出内容到控制台</p><p>​    <strong>head 文件名：</strong>查看文件前10行<br>​            head -n 行数：查看文件的前任意行</p><p>​    <strong>tail 文件名：</strong>查看文件尾10行<br>​            tail -n 行数：查看文件尾任意行<br>​            tail -f 文件名：实时监控文件的更新</p><p>​    <strong>ln -s 原文件或目录 软链接：</strong>给文件创建一个软链接，相当于windows中的快捷方式</p><p>​    <strong>history ：</strong>查看或执行(! 编号)已经执行过的指令</p><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><p><strong>date：</strong>显示当前时间日期<br>        date “+%Y-%M-%d %H:%m:%S”：按指定格式显示时间日期<br>        date -s 字符串时间日期：设置时间日期</p><p><strong>cal：</strong>显示当前日历        </p><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><p><strong>find [搜索范围] [选项] ：</strong>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。<br>选项：-name 文件名：按文件名查找<br>            -user 用户名：按用户名查找<br>            -size +/-文件大小：按文件大小查找（+表示大于  -表示小于  默认为等于）</p><p><strong>locate 文件名：</strong>定位文件路径</p><p><strong>grep [选项] 查找内容 源文件：</strong><br>    选项：-n：匹配行号<br>                -i：忽略大小写</p><h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><p><strong>gzip 文件名：</strong>压缩文件</p><p><strong>gunzip 文件名：</strong>解压文件</p><p><strong>zip [选项] 文件名.zip 将要压缩的内容：</strong>压缩文件<br>        选项：-r：递归压缩，即压缩目录</p><p><strong>unzip [选项] 文件名.zip：</strong>解压缩文件<br>        选项：-d：指定解压后文件的存放目录</p><p><strong>tar [选项] 文件名.tar.gz 打包的内容</strong><br>        选项：<br>        -c：产生.tar打包文件<br>        -v：显示详细信息<br>        -f：指定压缩后的文件<br>        -z：打包同时压缩<br>        -x：解包.tar文件<br>        tar -zcvf xxx.tar.gz 要压缩的文件或目录：压缩文件<br>        tar -zxvf xxx.tar.gz -C 路径：解压到指定路径</p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>在linux中的每一个用户都必须属于一个组们不能独立于组外。<br>        在linux中每个文件有所有者，所在组，其他组。<br>        <strong>文件/目录的所有者：</strong>一般为文件的创建者<br>        查看文件的所有者：ls -ahl<br>        chown 文件名 用户：更改文件所有者<br>        chgrp 组名 文件名：修改文件所在组<br>        chown 新的所有者:新的所在组 文件名：同时改变文件所有者和所在组<br>        -R：如果是目录则使其下所有子文件或目录递归生效</p><p><strong>创建组：groupadd 组名</strong><br>        在组内添加用户：useradd -g 组名 用户名<br>        改变用户所在组：usermod -g 组名 用户名<br>        改变用户登录的初始目录：usermod -d 目录名 用户 </p><p><strong>文件/目录权限：</strong><br><img src="/2020/02/25/linux-02/1.png" srcset="/img/loading.gif" alt>        r：对于文件代表可以读取，查看<br>        w：对于文件代表可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件的目录有写权限。<br>        x：对于文件代表可以执行</p><p>r：对于目录，可以读取，ls查看目录内容<br>        w：对于目录，可以修改，目录内创建，删除，重命名<br>        x：对于目录，可以进入该目录</p><h2 id="文件-目录权限管理"><a href="#文件-目录权限管理" class="headerlink" title="文件/目录权限管理"></a>文件/目录权限管理</h2><p>chmod：修改文件/目录权限<br>        第一种方式：+、-、= 变更权限<br>        u：所有者  g：所有组   o：其他人  a：所有人<br>        chmod u=rwc,g=rx,o=x 文件目录名<br>        chmod o+w 文件目录名<br>        chmod a-x 文件目录名<br>        规定：r=4  w=2  x=1</p><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>crontab [选项]<br>        -e   编辑crontab定时任务<br>        -l     查看crontab任务<br>        -r     删除当前用户所有的crontab任务<br><img src="/2020/02/25/linux-02/2.png" srcset="/img/loading.gif" alt><br><img src="/2020/02/25/linux-02/3.png" srcset="/img/loading.gif" alt></p><h2 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h2><p>分区的方式：</p><p><strong>1) mbr分区:</strong><br>1.最多支持四个主分区<br>2.系统只能安装在主分区<br>3.扩展分区要占一个主分区<br>4.MBR最大只支持2TB，但拥有最好的兼容性</p><p><strong>2) gtp分区:</strong><br>1.支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）<br>2.最大支持18EB的大容量（1EB=1024 PB，1PB=1024 TB ）<br>3.windows7 64位以后支持gtp</p><p>linux的磁盘分区作为文件被挂载(mount)到根目录下的文件夹中，同时也可以将其卸载(umount)。<br>硬盘说明：<br>1.linux硬盘分IDE硬盘和SCSI硬盘，目前使用的基本上是SCSI硬盘。<br>2.对于IDE硬盘，驱动器标识符为 <code>hdx~</code>。<br>3.对于SCSI硬盘则标识符为<code>sdx~</code>。</p><p>查看所有设备的挂载情况：lsblk 或lsblk -f</p><p>分区命令：fdisk /dev/sdb<br>        n 新增分区    w  写入退出<br>        格式化磁盘：mkfs -t ext4 /dev/sdb1<br>        挂载磁盘：mount  设备名称  挂载目录<br>        卸载磁盘：umount   设备名称或挂载目录<br>        永久挂载：通过修改  /etc/fstab   —–&gt;   执行mount -a<br>4.查询磁盘使用情况：<br>查询磁盘整体使用情况：df -lh<br>查询指定目录的磁盘使用情况：du -h 目录<br><strong>工作常用指令：</strong><br>1、统计/home文件夹下文件的个数<br>ls -l /home |grep “^-“|wc -l<br>2、统计/home文件夹下的目录个数<br>ls -l /home | grep “^d” | wc -l<br>3、统计/hom文件夹下文件的个数，包括子文件夹里面的<br>ls -lR /home |grep “^-“|wc -l<br>4、统计/home文件夹下目录的个数，包括子文件夹下的<br>ls -lR /home | grep “^d” | wc -l<br>5、以树状显示文件结构<br>tree 目录</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><strong>查看进程：</strong></p><p>ps -aux [| grep 进程名]：显示当前终端所有的进程信息</p><p>ps  -ef：查看父进程</p><p><strong>终止进程：</strong></p><p>kill [选项] 进程号</p><p>killall 进程名<br>选项：9  强制终止</p><p><strong>service服务管理：</strong></p><p>service   服务名 [start | stop | restart | reload | status]</p><p>ls -l /etc/init.d/     列出系统服务</p><p><strong>动态监控进程：</strong></p><p>top -d 秒数  ：每隔几秒就刷新</p><p><strong>监控网络情况：</strong></p><p>netstat [选项]</p><p>-n 按一定顺序排列输出<br>-p 显示哪个进程在调用</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux目录结构,Xshell,Xftp，vim</title>
    <link href="/2020/02/24/linux-01/"/>
    <url>/2020/02/24/linux-01/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>linux的文件系统采用级层式的树状目录结构，最上层是根目录  /  ，然后在此基础上创建其他目录。<br>                  <img src="/2020/02/24/linux-01/root.png" srcset="/img/loading.gif" alt="层次结构图"></p><a id="more"></a><p><strong>/bin：</strong>Binary的缩写，用于存放最经常使用的命令。<br><strong>/sbin：</strong>s就是Super User 的意思，用于存放系统管理员使用的系统管理程序。<br><strong>/home：</strong>存放普通用户的主目录，每一个用户都用自己的一个目录。<br><strong>/root：</strong>系统管理员的主目录，也称为超级权限者的用户主目录。<br><strong>/lib：</strong>系统开机时需要最基本的动态连接共享库，类似于Windows的DLL文件。几乎所有的程序都要用到这些共享库。<br><strong>/etc：</strong>所有的系统管理所需要的配置文件和子目录。my.conf<br><strong>/usr：</strong>用户的很多程序和文件都存放在此目录下。类似于WIndows的Program Files目录。<br><strong>/boot：</strong>启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<br><strong>/proc：</strong>是一个虚拟的目录，它是系统内存的映射，访问这个目录用来获取系统信息。<br><strong>/srv：</strong>service 的缩写，用于存放一些服务启动之后需要提取的数据。<br><strong>/sys：</strong>安装来了新出现的文件系统sysfs。<br><strong>/tmp：</strong>存放一些临时文件。<br><strong>/dev：</strong>类似于Windows的设备管理器，把所有硬件用文件的形式存储。<br><strong>/media：</strong>linux系统会自动识别一些设备，识别后把设别的设备挂载到这个目录下。<br><strong>/mnt：</strong>让用户临时挂载别的文件系统。<br><strong>/opt：</strong>存放额外的安装程序。<br><strong>/usr/local：</strong>给主机额外安装软件所安装的目录。<br><strong>/var：</strong>将经常被修改的目录放在这个目录下。包括各种日志文件。</p><h2 id="远程登录Linux-Xshell"><a href="#远程登录Linux-Xshell" class="headerlink" title="远程登录Linux-Xshell"></a>远程登录Linux-Xshell</h2><p>1.Linux需要打开sshd服务(<em>openssh的服务端：sshd</em> ; <em>openssh的客户端：ssh</em> )；<br>        sudo service ssh start<br>        若出现Unit ssh.service not found，则需要安装openssh服务：<br>        sudo apt-get install openssh-server<br>        2.打开Xshell，并新建会话，填入需要远程登录的主机的ip地址，保存会话；<br>        3.双击建立的会话，输入用户名以及密码，建立连接。</p><h2 id="远程上传-下载-Xftp"><a href="#远程上传-下载-Xftp" class="headerlink" title="远程上传/下载-Xftp"></a>远程上传/下载-Xftp</h2><p>1.打开Xftp,新建会话，填入需要远程登录的主机的ip地址以及密码，保存会话；<br>        2.双击会话，建立连接。</p><h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><p>__vi : __所有的linux系统都会内建 vi文本编辑器；<br>        __vim : __具有程序编辑功能的文本编辑器。</p><h3 id="vi和vim的三种常见模式"><a href="#vi和vim的三种常见模式" class="headerlink" title="vi和vim的三种常见模式"></a>vi和vim的三种常见模式</h3><p><strong>1.正常模式：</strong><br>        以vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，可以使用『上下左右』按键        来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理        你的文件数据。<br>        <strong>2.插入模式:</strong><br>        按下i, I, o, O, a, A, r, R等任何一个字母之后才会进入编辑模式, 一般来说按i即可。<br>        <strong>3.命令行模式:</strong><br>        在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim 、显示行号等的动作。<br><em>vim模式的三种转换：</em></p><p><img src="/2020/02/24/linux-01/vim.png" srcset="/img/loading.gif" alt="vim模式切换"></p><p>wq : 保存退出<br>        q! : 强制退出不保存</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DQL,常见函数</title>
    <link href="/2020/02/22/mysql-02/"/>
    <url>/2020/02/22/mysql-02/</url>
    
    <content type="html"><![CDATA[<h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><p><strong>语法：</strong><br>        select 查询列表 from 表名<br><strong>特点：</strong><br>        1.查询列表可以是：表中的字段，常量值，表达式，函数；<br>        2.查询的结果是一个虚拟的表格。<a id="more"></a></p><pre><code class="hljs sql"><span class="hljs-comment"># 1.查询表中的单个字段</span><span class="hljs-keyword">SELECT</span> first_name <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 2.查询表中的多个字段</span><span class="hljs-keyword">SELECT</span> first_name,last_name <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 3.查询表中的所有字段</span><span class="hljs-keyword">SELECT</span>  * <span class="hljs-keyword">from</span> employees;<span class="hljs-comment"># 4.查询常量值</span><span class="hljs-keyword">SELECT</span> <span class="hljs-string">'qwer'</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-number">666</span>;<span class="hljs-comment"># 5.查询表达式</span><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span>%<span class="hljs-number">3</span>;<span class="hljs-comment"># 6.查询函数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">VERSION</span>();<span class="hljs-comment"># 7.起别名</span><span class="hljs-comment"># 方式一：使用AS</span><span class="hljs-keyword">SELECT</span> <span class="hljs-number">9</span>/<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> 结果;<span class="hljs-keyword">SELECT</span> first_name <span class="hljs-keyword">AS</span> 名,last_name <span class="hljs-keyword">AS</span> 姓 <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 方式二：使用空格</span><span class="hljs-keyword">SELECT</span> salary 薪水 <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 8.去重:使用DISTINCT</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 9.+号的作用：只能作运算符</span><span class="hljs-keyword">SELECT</span> <span class="hljs-string">'22'</span>+<span class="hljs-number">33</span>; <span class="hljs-comment">-- 55</span><span class="hljs-keyword">SELECT</span> <span class="hljs-string">'qwer'</span>+<span class="hljs-number">333</span>; <span class="hljs-comment">-- 333</span><span class="hljs-keyword">SELECT</span> <span class="hljs-literal">null</span>+<span class="hljs-number">333</span>; <span class="hljs-comment">-- NULL</span><span class="hljs-comment"># 字符串连接函数CONCAT(str1,str2,...)</span><span class="hljs-keyword">SELECT</span>  <span class="hljs-keyword">CONCAT</span>(last_name, first_name) <span class="hljs-keyword">AS</span> 全名 <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 10.使用IFNULL(expr,expr为null时需要返回的值)对结果为null的数据进行处理</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(salary,<span class="hljs-string">','</span>,<span class="hljs-keyword">IFNULL</span>(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> <span class="hljs-string">'月薪,年奖金率'</span> <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 11.ISNULL(expr) expr为null 返回0，否则返回1</span></code></pre><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p><strong>语法：</strong><br>        select 查询列表 from 表名 where 筛选条件<br>        <strong>分类：</strong><br>        1.按条件表达式进行筛选<br>        条件运算符：&gt; &lt; != &lt;&gt; &gt;= &lt;=<br>        2.按逻辑表达式<br>        &amp;&amp; || ! and or not<br>        3.模糊查询<br>         <em>like：</em><br>                1.一般与通配符搭配使用<br>                2.通配符(使用\转义)：<br>                     %：表示0个或任意多个字符;<br>                     _ ：表示任意单个字符;<br>         <em>(not) between and：</em> 包含边界值<br>        <em>in：</em> 判断某字段的值是否属于in列表中的某一项<br>        in列表中的元素类型要相同或兼容<br>        _is null / is not null：_只能判断是否为null;<br>        &lt;=&gt; : 安全等于，既能判断是否为null也能判断数字;<br>        = 和 &lt;&gt;不能判断null</p><pre><code class="hljs sql"><span class="hljs-comment"># 1.按条件表达式筛选</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary&gt;<span class="hljs-number">15000</span>;<span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span>  employees <span class="hljs-keyword">WHERE</span> department_id&lt;&gt;<span class="hljs-number">90</span>;<span class="hljs-comment"># 2.按逻辑表达式筛选</span><span class="hljs-keyword">SELECT</span> last_name,salary,commission_pct <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary&gt;=<span class="hljs-number">10000</span> <span class="hljs-keyword">and</span> salary&lt;=<span class="hljs-number">15000</span>;<span class="hljs-comment"># 查询部门编号不是在90到110之间，或者工资高于12000的员工的信息</span><span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(department_id&gt;=<span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> department_id&lt;=<span class="hljs-number">110</span>) <span class="hljs-keyword">OR</span> salary&gt;<span class="hljs-number">12000</span>;<span class="hljs-comment"># 3.模糊筛选</span><span class="hljs-comment"># 查询员工名中包含字符a的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%a%'</span> ;<span class="hljs-comment"># 查询员工名中第三个字符为a,第四个字符为n的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'__an%'</span>;<span class="hljs-comment"># 查询员工编号在100~200之间的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">100</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">200</span>;<span class="hljs-comment"># 查询员工的工种编号是IT_PROG,IT_VP,AD_PRES中的一个员工的员工名和工种编号</span><span class="hljs-keyword">SELECT</span> first_name,job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">where</span> job_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">'IT_PROG'</span>,<span class="hljs-string">'IT_VP'</span>,<span class="hljs-string">'AD_PRES'</span>);<span class="hljs-comment"># 查询没有奖金的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">where</span> commission_pct = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">-- 查询不到结果</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;</code></pre><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>语法：select 查询列表 from 表 where 查询条件  order by 排序列表 asc/desc;<br>特点：1.asc:升序；desc:降序；如果不写，默认为升序<br>            2.order by 子句支持单个字段，多个字段，表达式，函数，别名<br>            3.order by 子句一般放在查询语句的最后面，limit子句除外</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">ASC</span>; <span class="hljs-comment">-- 升序</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary; <span class="hljs-comment">-- 省略时默认为升序排列</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- 降序</span><span class="hljs-comment"># 查询部门编号&gt;=90的员工信息，按入职时间的先后顺序进行排序</span><span class="hljs-keyword">SELECT</span> *  <span class="hljs-keyword">FROM</span> employees  <span class="hljs-keyword">WHERE</span> department_id&gt;=<span class="hljs-number">90</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hiredate;<span class="hljs-comment"># 按年薪的高低显示员工的信息和年薪（按表达式排序）</span><span class="hljs-keyword">SELECT</span> * ,salary*<span class="hljs-number">12</span>*(<span class="hljs-number">1</span>+<span class="hljs-keyword">IFNULL</span>(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary*<span class="hljs-number">12</span>*(<span class="hljs-number">1</span>+<span class="hljs-keyword">IFNULL</span>(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-keyword">DESC</span>;<span class="hljs-comment"># 按别名排序</span><span class="hljs-keyword">SELECT</span> * ,salary*<span class="hljs-number">12</span>*(<span class="hljs-number">1</span>+<span class="hljs-keyword">IFNULL</span>(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> <span class="hljs-string">'年薪'</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'年薪'</span> <span class="hljs-keyword">DESC</span>;<span class="hljs-comment"># 按姓名的长度显示员工的姓名和工资（按函数值进行排序）</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(last_name,first_name) <span class="hljs-keyword">AS</span> <span class="hljs-string">'姓名'</span> ,<span class="hljs-keyword">LENGTH</span>(<span class="hljs-keyword">CONCAT</span>(last_name,first_name)),salary <span class="hljs-keyword">AS</span> <span class="hljs-string">'工资'</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">LENGTH</span>(姓名);<span class="hljs-comment"># 查询员工信息，要求先按工资的升序，再按员工编号的降序（按多个字段排序）</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">ASC</span>,employee_id <span class="hljs-keyword">DESC</span>;</code></pre><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><p>概念：类似于java中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名<br>好处：隐藏了实现细节；提高了代码的复用性<br>调用：select 函数名() from 表名;<br>分类： 1.单行函数：作用于单行数据，返回一个结果<br>            2.分组函数：作用于一组数据，并对一组数据返回一个值</p><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><h4 id="一、字符函数"><a href="#一、字符函数" class="headerlink" title="一、字符函数"></a>一、字符函数</h4><pre><code class="hljs sql"><span class="hljs-comment"># 1.LENGTH(str) 获取参数值的字节个数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LENGTH</span>(<span class="hljs-string">'哈哈hh'</span>); <span class="hljs-comment">-- 8</span><span class="hljs-comment"># 2.CONCAT(str1,str2,...) 拼接字符串</span><span class="hljs-comment"># 3.UPPER(str),LOWER(str)</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CONCAT</span>(<span class="hljs-keyword">upper</span>(last_name),<span class="hljs-string">' '</span>,<span class="hljs-keyword">lower</span>(first_name)) <span class="hljs-keyword">AS</span> <span class="hljs-string">'姓名'</span><span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 4.SUBSTR(str FROM pos FOR len),substring()截取字符串(索引从1开始)</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SUBSTR</span>(last_name,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 5.INSTR(str,substr) 返回子串在母串第一次出现的索引位置，如果找不到就返回0</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSTR</span>(<span class="hljs-string">'helloworld'</span>,<span class="hljs-string">'world'</span>); <span class="hljs-comment">-- 6</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSTR</span>(<span class="hljs-string">'helloworld'</span>,<span class="hljs-string">'word'</span>); <span class="hljs-comment">-- 0</span><span class="hljs-comment"># 6.TRIM([remstr FROM] str) 去掉首尾空格或指定字符串</span><span class="hljs-comment"># 7.LPAD(str,len,padstr) /RPAD(str,len,padstr)用指定的字符实现左/右填充指定长度</span><span class="hljs-comment"># REPLACE(str,from_str,to_str) 替换</span></code></pre><h4 id="二、数学函数"><a href="#二、数学函数" class="headerlink" title="二、数学函数"></a>二、数学函数</h4><pre><code class="hljs sql"><span class="hljs-comment"># 1.ROUND(X) 四舍五入</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ROUND</span>(<span class="hljs-number">-1.55</span>); <span class="hljs-comment">-- -2</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ROUND</span>(<span class="hljs-number">-1.566</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">-- -1.57</span><span class="hljs-comment"># 2.CEIL(X) 向上取整，返回&gt;=该参数的最小整数</span><span class="hljs-comment"># 3.FLOOR(X) 向下取整，返回&lt;=该参数的最大整数</span><span class="hljs-comment"># 4.TRUNCATE(X,D) 从小数点后D位截断</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">TRUNCATE</span>(<span class="hljs-number">1.29</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">-- 1.2</span><span class="hljs-comment"># 5.MOD(N,M) 取余:符号与被除数相同</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MOD</span>(<span class="hljs-number">-10</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">-- -1</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MOD</span>(<span class="hljs-number">10</span>,<span class="hljs-number">-3</span>); <span class="hljs-comment">-- 1</span></code></pre><h4 id="三、日期函数"><a href="#三、日期函数" class="headerlink" title="三、日期函数"></a>三、日期函数</h4><pre><code class="hljs sql"><span class="hljs-comment"># NOW() 返回当前系统日期+时间</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NOW</span>(); <span class="hljs-comment">-- 2020-02-23 11:27:48</span><span class="hljs-comment"># CURDATE() 返回当前系统的日期</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CURDATE</span>(); <span class="hljs-comment">-- 2020-02-23</span><span class="hljs-comment"># CURTIME() 返回当前系统的事件</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CURTIME</span>(); <span class="hljs-comment">-- 11:30:11</span><span class="hljs-comment"># 获取指定的年，月，日，时，分，秒</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-keyword">NOW</span>()) <span class="hljs-keyword">AS</span> 年份;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-string">'1999-2-2'</span>); <span class="hljs-comment">-- 1999</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(<span class="hljs-keyword">NOW</span>()) <span class="hljs-keyword">AS</span> 月;<span class="hljs-keyword">SELECT</span> MONTHNAME(<span class="hljs-keyword">NOW</span>()); <span class="hljs-comment">-- February</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span>(<span class="hljs-keyword">NOW</span>()) <span class="hljs-keyword">AS</span>  日;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">HOUR</span>(<span class="hljs-keyword">CURTIME</span>()) <span class="hljs-keyword">AS</span> 时; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(<span class="hljs-keyword">CURTIME</span>()) <span class="hljs-keyword">AS</span> 分;<span class="hljs-comment"># STR_TO_DATE(str,format) 将字符通过指定的格式转换成日期</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">STR_TO_DATE</span>(<span class="hljs-string">'1999-2-29'</span>,<span class="hljs-string">'%Y-%c-%d'</span>); <span class="hljs-comment">-- 1999-02-29</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">STR_TO_DATE</span>(<span class="hljs-string">'99-02-29'</span>,<span class="hljs-string">'%y-%m-%d'</span>);<span class="hljs-comment">#  DATE_FORMAT(date,format) 将日期转换成字符</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATE_FORMAT</span>(<span class="hljs-keyword">now</span>(),<span class="hljs-string">'%Y年%m月%d日'</span>);<span class="hljs-comment">-- 2020年02月23日</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATE_FORMAT</span>(<span class="hljs-keyword">now</span>(),<span class="hljs-string">'%y年%c月%d日'</span>); <span class="hljs-comment">-- 20年2月23日</span><span class="hljs-comment"># 查询有奖金的员工名和入职日期(xx月/xx日 xx年)</span><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">AS</span> 姓名,<span class="hljs-keyword">DATE_FORMAT</span>(hiredate,<span class="hljs-string">'%m月/%d日 %y年'</span>) <span class="hljs-keyword">AS</span> 入职日期 <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre><h4 id="四、其他函数"><a href="#四、其他函数" class="headerlink" title="四、其他函数"></a>四、其他函数</h4><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">VERSION</span>();<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATABASE</span>();<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>();</code></pre><h4 id="五、流程控制函数"><a href="#五、流程控制函数" class="headerlink" title="五、流程控制函数"></a>五、流程控制函数</h4><pre><code class="hljs sql"><span class="hljs-comment"># IF(expr1,expr2,expr3)</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">IF</span>(<span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'true'</span>,<span class="hljs-string">'false'</span>);<span class="hljs-comment"># case 用法一：相当于java中的switch()</span><span class="hljs-comment">/*</span><span class="hljs-comment">CASE 要判断的字段或表达式</span><span class="hljs-comment">WHEN 常量1 THEN</span><span class="hljs-comment">要显示的值1(或语句1;)</span><span class="hljs-comment">ELSE</span><span class="hljs-comment">要显示的值n(或语句n;)</span><span class="hljs-comment">END;</span><span class="hljs-comment">*/</span><span class="hljs-comment">/*查询员工工资，要求：</span><span class="hljs-comment">部门号=30，显示工资为1.1倍；</span><span class="hljs-comment">部门号=40，显示工资为1.2倍；</span><span class="hljs-comment">部门号=50，显示工资为1.3倍；</span><span class="hljs-comment">*/</span><span class="hljs-keyword">SELECT</span> salary<span class="hljs-keyword">AS</span> 原始工资,department_id <span class="hljs-keyword">AS</span> 部门号,<span class="hljs-keyword">CASE</span> department_id<span class="hljs-keyword">WHEN</span> <span class="hljs-number">30</span> <span class="hljs-keyword">THEN</span>salary *<span class="hljs-number">1.1</span><span class="hljs-keyword">WHEN</span> <span class="hljs-number">40</span> <span class="hljs-keyword">THEN</span>salary*<span class="hljs-number">1.2</span><span class="hljs-keyword">WHEN</span> <span class="hljs-number">50</span> <span class="hljs-keyword">THEN</span>salary*<span class="hljs-number">1.3</span><span class="hljs-keyword">ELSE</span> salary<span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 最终工资 <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># case用法二：相当于java中if()  else if() else </span><span class="hljs-comment">/*</span><span class="hljs-comment">CASE </span><span class="hljs-comment">WHEN 条件1 THEN</span><span class="hljs-comment">要显示的值1(或语句1;)</span><span class="hljs-comment">WHEN 条件2 THEN</span><span class="hljs-comment">要显示的值2(或语句2;)</span><span class="hljs-comment">ELSE</span><span class="hljs-comment">要显示的值n(或语句n;)</span><span class="hljs-comment">END CASE;</span><span class="hljs-comment">*/</span><span class="hljs-comment">/*查询员工的工资情况</span><span class="hljs-comment">如果工资&gt;20000,显示A级别；</span><span class="hljs-comment">如果工资&gt;15000,显示B级别；</span><span class="hljs-comment">如果工资&gt;10000,显示C级别；</span><span class="hljs-comment">其余的显示D级别</span><span class="hljs-comment">*/</span><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">AS</span> <span class="hljs-string">'工资'</span>,<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> salary&gt;<span class="hljs-number">20000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'A'</span><span class="hljs-keyword">WHEN</span> salary&gt;<span class="hljs-number">15000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'B'</span><span class="hljs-keyword">WHEN</span> salary&gt;<span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'C'</span><span class="hljs-keyword">ELSE</span> <span class="hljs-string">'D'</span><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">'工资等级'</span> <span class="hljs-keyword">FROM</span> employees;</code></pre><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><p><strong>作用：</strong>用作统计使用，又称聚合函数，统计函数，组函数<br>        <strong>特点：</strong><br>        1.sum，avg一般处理数值型数据；max，min，count可以处理任何类型<br>        2.以上分组函数都忽略null值<br>        3.可以和discount()搭配使用实现去重<br>        4.一般使用count(*)统计行数<br>        5.和分组函数一起查询的字段必须是group by后面的字段</p><pre><code class="hljs sql"><span class="hljs-comment"># sum() 求和</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">sum</span>(salary) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># avg() 求平均值</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># max() 求最大值;min() 求最小值</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(salary) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># count() 计算个数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(employee_id) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 查询员工表中最大入职时间和最小入职时间的相差天数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATEDIFF</span>(<span class="hljs-keyword">MAX</span>(hiredate),<span class="hljs-keyword">MIN</span>(hiredate)) <span class="hljs-keyword">FROM</span> employees;<span class="hljs-comment"># 查询部门编号为60的员工个数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id = <span class="hljs-number">60</span>;</code></pre><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p><strong>语法：</strong><br>        select 分组函数,列(要求出现在group by的后面)<br>        from 表<br>        where 筛选条件<br>        group by 分组的列表<br>        order by 子句<br>        特点：分组查询中的筛选条件分为两类<br>            分组前筛选：数据源在原始表中，位于group by子句前面，使用where关键字；<br>            分组后筛选：数据源在分组后的结果集中，位于group by子句后面，使用having关键字<br>            1.分组函数作条件肯定放在having后<br>            2.能分组前筛选尽量放在group by前面</p><pre><code class="hljs sql"><span class="hljs-comment"># 查询每个工种的最高工资</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(salary),job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<span class="hljs-comment"># 查询每个位置上的部门个数</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*),location_id <span class="hljs-keyword">FROM</span> departments <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> location_id;<span class="hljs-comment"># 查询邮箱中包含a字符的，每个部门的平均工资</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary),department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">"%a%"</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id;<span class="hljs-comment"># 查询员工数&gt;2的部门</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*),department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*)&gt;<span class="hljs-number">2</span>;<span class="hljs-comment"># 查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MAX</span>(salary),job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">MAX</span>(salary)&gt;<span class="hljs-number">12000</span>;<span class="hljs-comment"># 查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪一个，以及最低工资</span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(salary),manager_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> manager_id&gt;<span class="hljs-number">102</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">MIN</span>(salary)&gt;<span class="hljs-number">5000</span> <span class="hljs-comment"># 查询每个部门每个工种的员工的平均工资，并按平均工资的高低显示 </span><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary),job_id,department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id,department_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">AVG</span>(salary) <span class="hljs-keyword">DESC</span>;</code></pre><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><strong>sql92语法：</strong></p><pre><code class="hljs sql"><span class="hljs-comment"># 1.等值连接</span><span class="hljs-comment"># 查询员工名对应的部门名</span><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> employees,departments<span class="hljs-keyword">WHERE</span> employees.department_id=departments.department_id;<span class="hljs-comment"># 查询有奖金的员工名、部门名</span><span class="hljs-keyword">SELECT</span> last_name,department_name,commission_pct <span class="hljs-keyword">FROM</span> employees e,departments d<span class="hljs-keyword">WHERE</span> e.department_id=d.department_id <span class="hljs-keyword">AND</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment"># 查询城市名中第二个字符为o的部门名和城市名</span><span class="hljs-keyword">SELECT</span> department_name,city <span class="hljs-keyword">from</span> departments d,locations l<span class="hljs-keyword">WHERE</span> d.location_id = l.location_id <span class="hljs-keyword">AND</span> city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">"_o%"</span>;<span class="hljs-comment"># 查询每个城市的部门个数</span><span class="hljs-keyword">SELECT</span> city,<span class="hljs-keyword">COUNT</span>(*) 个数 <span class="hljs-keyword">FROM</span> departments d,locations l <span class="hljs-keyword">WHERE</span> d.location_id=l.location_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<span class="hljs-comment"># 查询有奖金的每个部门的部门名和部门领导编号和该部门的最低工资</span><span class="hljs-keyword">SELECT</span> department_name,d.manager_id,<span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span> departments d,employees e<span class="hljs-keyword">WHERE</span> d.department_id = e.department_id <span class="hljs-keyword">AND</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_name,d.manager_id;<span class="hljs-comment"># 查询每个工种的工种名和员工个数，并按员工个数排序</span><span class="hljs-keyword">SELECT</span> job_title 工种名,<span class="hljs-keyword">count</span>(*) 员工个数 <span class="hljs-keyword">FROM</span> jobs j,employees e<span class="hljs-keyword">WHERE</span>  j.job_id=e.job_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_title <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">count</span>(*);<span class="hljs-comment">#2.非等值连接</span><span class="hljs-comment"># 查询员工的工资级别和等级</span><span class="hljs-keyword">SELECT</span> salary,grade_level <span class="hljs-keyword">FROM</span> employees,job_grades<span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">BETWEEN</span> lowest_sal <span class="hljs-keyword">AND</span> highest_sal<span class="hljs-comment"># 3.自连接</span><span class="hljs-comment"># 查询员工名和上级编号</span><span class="hljs-keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name<span class="hljs-keyword">FROM</span> employees e,employees m <span class="hljs-keyword">WHERE</span> e.manager_id = m.employee_id;</code></pre><p><strong>sql99语法：</strong></p><pre><code class="hljs sql"><span class="hljs-comment"># 一、内连接</span><span class="hljs-comment">/*</span><span class="hljs-comment">语法：</span><span class="hljs-comment">select 查询列表</span><span class="hljs-comment">from 表1 别名</span><span class="hljs-comment">inner join 表2 别名</span><span class="hljs-comment">on 连接条件</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 1.等值</span><span class="hljs-comment"># 查询员工名、部门名</span><span class="hljs-keyword">SELECT</span> last_name,department_name <span class="hljs-keyword">FROM</span> departments d <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> employees e<span class="hljs-keyword">ON</span> d.department_id = e.department_id;<span class="hljs-comment"># 查询名字中包含e的员工名和工种名</span><span class="hljs-keyword">SELECT</span> last_name,job_title <span class="hljs-keyword">from</span> employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs j<span class="hljs-keyword">ON</span> e.job_id= j.job_id <span class="hljs-keyword">where</span> e.last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">"%e%"</span>;<span class="hljs-comment"># 查询部门个数&gt;3的城市名和部门个数</span><span class="hljs-keyword">SELECT</span> city,<span class="hljs-keyword">COUNT</span>(*) 部门个数 <span class="hljs-keyword">FROM</span> locations l <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> l.location_id=d.location_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*)&gt;<span class="hljs-number">3</span>; <span class="hljs-comment"># 查询哪个部门的部门员工个数&gt;3的部门名和员工个数，并按个数降序排序</span><span class="hljs-keyword">SELECT</span> department_name,<span class="hljs-keyword">COUNT</span>(*) 部门员工个数 <span class="hljs-keyword">FROM</span> departments d <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> employees e<span class="hljs-keyword">ON</span> d.department_id = e.department_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_name <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*)&gt;<span class="hljs-number">3</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">DESC</span>;<span class="hljs-comment"># 2.非等值</span><span class="hljs-comment"># 查询员工的工资等级</span><span class="hljs-keyword">SELECT</span> salary,grade_level <span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> job_grades j <span class="hljs-keyword">ON</span> salary <span class="hljs-keyword">BETWEEN</span> j.lowest_sal <span class="hljs-keyword">AND</span> j.highest_sal;<span class="hljs-comment">#3.自连接</span><span class="hljs-comment"># 查询员工名、上级的名字</span><span class="hljs-keyword">SELECT</span> e.last_name,m.last_name <span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> employees m<span class="hljs-keyword">ON</span> e.manager_id = m.employee_id;</code></pre><pre><code class="hljs sql"><span class="hljs-comment"># 二、外连接</span><span class="hljs-comment">/*</span><span class="hljs-comment">用于查询一个表中有，另一个表中没有的字段</span><span class="hljs-comment">特点：</span><span class="hljs-comment">1.外连接的查询结果为主表中的所有记录</span><span class="hljs-comment">如果从表中有和它匹配的，则显示匹配的值</span><span class="hljs-comment">否则显示null</span><span class="hljs-comment">外连接的查询结果=内连接的结果+主表中有 而 从表中没有的记录</span><span class="hljs-comment">2.左外连接，left [outer] join   左边的是主表</span><span class="hljs-comment">  右外连接，right [outer] join  右边的是主表</span><span class="hljs-comment">3.全外连接=内连接的结果+表1中有单表2中没有的+表2中有的而表1中没有的</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 查询没有员工的部门信息</span><span class="hljs-keyword">SELECT</span> d.* <span class="hljs-keyword">FROM</span> departments d <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> employees e<span class="hljs-keyword">ON</span> d.department_id=e.department_id <span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><pre><code class="hljs sql"><span class="hljs-comment"># 子查询</span><span class="hljs-comment">/*</span><span class="hljs-comment">出现在其他语句内部的select语句，称为子查询</span><span class="hljs-comment">*/</span><span class="hljs-comment"># where或having后面</span><span class="hljs-comment"># 查询工资比 Abel高的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary&gt;(<span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name=<span class="hljs-string">"Abel"</span>);<span class="hljs-comment"># 查询最低工资大于50号部门最低工资的部门id和其最低工资</span><span class="hljs-keyword">SELECT</span> department_id,<span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span>  employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">MIN</span>(salary)&gt;(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id=<span class="hljs-number">50</span>);<span class="hljs-comment"># 查询location_id在1400或1700的部门中的所有员工的姓名</span><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span>departments  <span class="hljs-keyword">WHERE</span> location_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1400</span>,<span class="hljs-number">1700</span>));<span class="hljs-comment"># select后面</span><span class="hljs-comment"># 查询每个部门的人数</span><span class="hljs-keyword">SELECT</span> d.*,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">WHERE</span> e.department_id = d.department_id) 个数<span class="hljs-keyword">FROM</span> departments d;<span class="hljs-comment"># from后面</span><span class="hljs-comment"># 查询每个部门的平均工资的等级</span><span class="hljs-keyword">SELECT</span> ag_dep.*,g.grade_level <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary) ag,department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id) ag_dep <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job_grades g <span class="hljs-keyword">ON</span>  ag_dep.ag <span class="hljs-keyword">BETWEEN</span> lowest_sal <span class="hljs-keyword">AND</span> highest_sal;<span class="hljs-comment"># 子查询</span><span class="hljs-comment">/*</span><span class="hljs-comment">出现在其他语句内部的select语句，称为子查询</span><span class="hljs-comment">*/</span><span class="hljs-comment"># where或having后面</span><span class="hljs-comment"># 查询工资比 Abel高的员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary&gt;(<span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name=<span class="hljs-string">"Abel"</span>);<span class="hljs-comment"># 查询最低工资大于50号部门最低工资的部门id和其最低工资</span><span class="hljs-keyword">SELECT</span> department_id,<span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span>  employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">MIN</span>(salary)&gt;(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id=<span class="hljs-number">50</span>);<span class="hljs-comment"># 查询location_id在1400或1700的部门中的所有员工的姓名</span><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span>departments  <span class="hljs-keyword">WHERE</span> location_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1400</span>,<span class="hljs-number">1700</span>));<span class="hljs-comment"># select后面</span><span class="hljs-comment"># 查询每个部门的人数</span><span class="hljs-keyword">SELECT</span> d.*,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">WHERE</span> e.department_id = d.department_id) 个数<span class="hljs-keyword">FROM</span> departments d;<span class="hljs-comment"># from后面</span><span class="hljs-comment"># 查询每个部门的平均工资的等级</span><span class="hljs-keyword">SELECT</span> ag_dep.*,g.grade_level <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary) ag,department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id) ag_dep <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job_grades g <span class="hljs-keyword">ON</span>  ag_dep.ag <span class="hljs-keyword">BETWEEN</span> lowest_sal <span class="hljs-keyword">AND</span> highest_sal;</code></pre><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><pre><code class="hljs sql"><span class="hljs-comment"># 分页查询</span><span class="hljs-comment">/*</span><span class="hljs-comment">分页提交sql请求</span><span class="hljs-comment">select 查询列表 from 表名 limit 起始索引，结果的数目</span><span class="hljs-comment">limit语句放在查询语句的最后 </span><span class="hljs-comment">要显示的页数 page , 每页的条目数size</span><span class="hljs-comment">select 查询列表 from 表名 limit (page-1)*size,size;</span><span class="hljs-comment">*/</span><span class="hljs-comment"># 查询前5条员工信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span>employees<span class="hljs-keyword">LIMIT</span> <span class="hljs-number">5</span>;<span class="hljs-comment"># 查询第11条~第25条的信息</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">11</span>,<span class="hljs-number">15</span>;<span class="hljs-comment"># 查询有奖金的员工信息，并且工资较高的前10名显示出来</span><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span>commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary<span class="hljs-keyword">DESC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;</code></pre><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>将多条查询语句的结果合并在一起<br>语法：<br>select 查询列表1 from 表名 union select 查询列表2 from 表名<br>特点：<br>1、要查询的结果来自多个表，且多个表之间没有联系<br>2、要求查询列表1与查询列表2的列数相等<br>3、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>4、union关键字默认去重，使用union all 可以包含重复项</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL概述</title>
    <link href="/2020/02/20/mysql-01/"/>
    <url>/2020/02/20/mysql-01/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><p>1.实现数据是持久化<br>2.可以实现结构化查询，方便管理</p><a id="more"></a><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>1.DB : 数据库，用于保存一组有组织的数据的容器；<br>2.DBMS : 数据库管理系统，用于管理DB中的数据；<br>3.SQL : 结构化查询语言，用来与数据库通信。</p><h2 id="数据库储存数据的特点"><a href="#数据库储存数据的特点" class="headerlink" title="数据库储存数据的特点"></a>数据库储存数据的特点</h2><p>1.将数据放到表中，表在放到库中；<br>2.一个数据库有多张表，表名具有唯一性，用于表示自己；<br>3.表中有一些特性，这些特性决定了数据在表中如何储存，类似于java中“类”的设计；<br>4.表由列组成，也称为字段。所有表都是由一个或多个列组成，每一列类似于java类中            的“属性”；<br>5.表中的数据是按行储存的，每一行类似于java中的”对象”。</p><h2 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h2><p>方式一：计算机—右击管理—服务<br>方式二：通过管理员身份运行cmd<br>启动服务 ：net start 服务名；<br>停止服务：net stop 服务名。</p><h2 id="MySQL服务的登录与退出"><a href="#MySQL服务的登录与退出" class="headerlink" title="MySQL服务的登录与退出"></a>MySQL服务的登录与退出</h2><p>方式一：通过mysql自带的客户端，只限于root客户<br>方式二：通过window自带的客户端<br>登录：mysql -h主机名 -P端口号 -u用户名 -p密码<br>退出：exit 或 ctrl+c</p><h2 id="MySQL常见命令"><a href="#MySQL常见命令" class="headerlink" title="MySQL常见命令"></a>MySQL常见命令</h2><p>1.查看当前所有的数据库：<br>            show databases;<br>2.打开指定的数据库：<br>            use 库名;<br>3.查看当前库的所有表：<br>            show tables;<br>4.查看其他库的所有表：<br>            show tabkes from 库名;<br>5.创建表：<br>            create table(<br>            列名 列类型,<br>            列名 列类型,<br>            …….<br>            )；<br>6.查看表结构：<br>        desc 表名;<br>7.查看服务器版本：<br>        方式一：登录到mysql服务端：<br>        select version();<br>        方式二：没有登录<br>        mysql –version 或 mysql -V     </p><h2 id="MySQL语法规范"><a href="#MySQL语法规范" class="headerlink" title="MySQL语法规范"></a>MySQL语法规范</h2><p>1.不区分大小写，但建议关键字大写，表名、列名小写；<br>2.每条命令最好用  分号结尾；<br>3.每条命令可根据需要进行缩进或换行；<br>4.单行注释：# 注释文字 或 – 注释文字<br>   多行注释：<code>/*注释文字*/</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程</title>
    <link href="/2020/02/17/java-04/"/>
    <url>/2020/02/17/java-04/</url>
    
    <content type="html"><![CDATA[<h2 id="程序、进程、线程的概念"><a href="#程序、进程、线程的概念" class="headerlink" title="程序、进程、线程的概念"></a>程序、进程、线程的概念</h2><p><img src="/2020/02/17/java-04/program,process,thread.png" srcset="/img/loading.gif" alt><a id="more"></a><br>        <strong>并行：</strong>多个CPU同时执行多个任务。<br>        <strong>并发：</strong>一个CPU(采用时间片)”同时“执行多个任务。</p><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><p><strong>创建方式一：继承Thread类</strong></p><pre><code class="hljs java"><span class="hljs-comment">// 1.创建一个继承于Thread类的子类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;    <span class="hljs-comment">// 2.重写Thread类的run()方法-&gt;将此线程执行的操作声明在run()中</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;                System.out.println(i);            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 3.在主线程中创建Thread类的子类的对象</span>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();        <span class="hljs-comment">// 4.通过此对象调用start()方法：&lt;1&gt;启动当前线程;&lt;2&gt;调用当前线程的run()</span>        t1.start();        <span class="hljs-comment">// 以下操作在主线程中执行</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)&#123;                System.out.println(i);            &#125;        &#125;    &#125;&#125;</code></pre><p>子线程的创建和启动过程：<br><img src="/2020/02/17/java-04/thread1.png" srcset="/img/loading.gif" alt="子线程的创建和启动过程"></p><p><strong>创建方式二：实现Runnable接口</strong></p><pre><code class="hljs java"><span class="hljs-comment">// 1.创建子类实现Runnable接口</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-comment">// 2.实现Runnable接口中的run()方法</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(Thread.currentThread().getName()+i);        &#125;    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest2</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 3.创建Runnable实现类的对象</span>        MyThread2 mThread = <span class="hljs-keyword">new</span> MyThread2();        <span class="hljs-comment">// 4.将此对象作为参数传入Thread类的构造器中，创建Thread()类对象</span>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mThread);        <span class="hljs-comment">// 5.通过Thread类对象调用start()方法</span>        t2.start();        <span class="hljs-comment">// 再启动一个线程 不需要再造实现类对象</span>        Thread t3 = <span class="hljs-keyword">new</span> Thread(mThread);        t3.start();    &#125;&#125;</code></pre><p><strong>两种创建方式的比较：</strong><br>        开发中：优先选择实现Runnable接口的方式。<br>        原因 ：1.没有类的单继承性的局限性；2.更适合处理多个线程有共享数据的情况。<br>        相同点：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中；启动线程都是调用Thread类中的start()方法</p><h2 id="Thread类中常用方法"><a href="#Thread类中常用方法" class="headerlink" title="Thread类中常用方法"></a>Thread类中常用方法</h2><p><strong>void start()：</strong> 启动线程，并执行对象的run()方法<br><strong>void run()：</strong>线程在被调度时执行的操作<br><strong>String getName()：</strong> 返回线程的名称<br><strong>void setName(String name)：</strong>设置该线程名称<br><strong>static Thread currentThread()：</strong> 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类<br><strong>static void yield()：</strong>线程让步<br>       &lt;1&gt; 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程<br>       &lt;2&gt; 若队列中没有同优先级的线程，忽略此方法<br><strong>join()：</strong>在线程a中调用线程b的 join() 方法时，线程a将被阻塞，直到线程b执行完为止 ;低优先级的线程也可以获得执行<br><strong>static void sleep(long millis)：</strong>(指定时间:毫秒)<br>&lt;1&gt; 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队<br>&lt;2&gt; 抛出InterruptedException异常<br><strong>stop()：</strong>强制线程生命期结束，不推荐使用<br><strong>boolean isAlive()：</strong>返回boolean，判断线程是否还活着</p><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p><strong>调度的策略：</strong>时间片；抢占式。<br>        <strong>Java的调度方法：</strong><br>        &lt;1&gt; 同优先级线程组成先进先出队列(先到先服务)，使用时间片策略；<br>        &lt;2&gt; 对高优先级，使用抢占式策略，高优先级的线程抢占CPU.<br>        <strong>线程的优先级等级：</strong><br>        MAX_PRIORITY : 10<br>        MIN_PRIORITY : 1<br>        NORM_PRIORITY : 5<br>        <strong>涉及的方法：</strong><br>        getPriority() : 返回线程优先级；<br>        setPriority(int newPriority) : 重新设置线程的优先级。<br>        <strong>说明：</strong><br>        线程创建时继承父线程的优先级；<br>        低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/2020/02/17/java-04/threadLift.png" srcset="/img/loading.gif" alt="线程生命周期"></p><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>多个线程执行的不确定性会引起结果的不稳定性；<br>多个线程对数据的共享，会造成操作的不完整性。<br><strong>方式一：同步代码块</strong></p><pre><code class="hljs java">synchronize(<span class="hljs-comment">/*同步监视器*/</span>)&#123;    <span class="hljs-comment">// 需要同步的代码</span>&#125;</code></pre><p>需要同步的代码：操作共享数据(多个线程共同操作的变量)的代码。<br>同步监视器：俗称：锁。任何一个类的对象都可以充当锁。<br>要求：多个要求必须要共用同一把锁。</p><pre><code class="hljs java">** * <span class="hljs-meta">@author</span> zyz * <span class="hljs-meta">@description</span> 测试三个窗口同时卖票，采用同步代码块解决线程安全问题 * <span class="hljs-meta">@create</span> <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">57</span> */<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketTest1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Ticket t = <span class="hljs-keyword">new</span> Ticket();        Thread t1 = <span class="hljs-keyword">new</span> Thread(t);        t1.setName(<span class="hljs-string">"窗口1"</span>);        Thread t2 = <span class="hljs-keyword">new</span> Thread(t);        t2.setName(<span class="hljs-string">"窗口2"</span>);        Thread t3 = <span class="hljs-keyword">new</span> Thread(t);        t3.setName(<span class="hljs-string">"窗口3"</span>);                t1.start();        t2.start();        t3.start();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNum = <span class="hljs-number">100</span>;<span class="hljs-comment">// 采用实现Runnable接口方式实现多线程，共享变量无需声明为static</span>    Object obj = <span class="hljs-keyword">new</span> Object();<span class="hljs-comment">// 保证多个线程共用一把锁</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;            <span class="hljs-keyword">synchronized</span>(obj)&#123;                <span class="hljs-keyword">if</span>(ticketNum&gt;<span class="hljs-number">0</span>)&#123;                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">" 票号："</span>+ticketNum);                    ticketNum--;                &#125;                <span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p><strong>方式二：同步方法</strong><br>        1.不需要显式声明同步监视器；<br>        2.非静态的同步方法：同步监视器是this;（采用实现Runnable接口实现多线程）<br>            静态的同步方法：同步监视器是当前类。（采用继承Thread类方法实现多线程）</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> multithread;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 采用同步方法解决线程安全问题</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-22 16:08</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketTest2</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Ticket1 t1 = <span class="hljs-keyword">new</span> Ticket1();        Thread t4 = <span class="hljs-keyword">new</span> Thread(t1);        t4.setName(<span class="hljs-string">"窗口1"</span>);        Thread t5 = <span class="hljs-keyword">new</span> Thread(t1);        t5.setName(<span class="hljs-string">"窗口2"</span>);        Thread t6 = <span class="hljs-keyword">new</span> Thread(t1);        t6.setName(<span class="hljs-string">"窗口3"</span>);        t4.start();        t5.start();        t6.start();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNum = <span class="hljs-number">100</span>;<span class="hljs-comment">// 采用实现Runnable接口方式实现多线程，共享变量无需声明为static</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;            threadRun();        &#125;    &#125;    <span class="hljs-comment">// 将可能出现线程安全问题的代码块封装成一个同步方法</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadRun</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 采用继承Thread类实现多线程时，需要将此方法声明为static</span>            <span class="hljs-keyword">if</span>(ticketNum&gt;<span class="hljs-number">0</span>)&#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">" 票号："</span>+ticketNum);                ticketNum--;            &#125;    &#125;&#125;</code></pre><p><strong>死锁：</strong>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。<br>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。<br><strong>方式三：Lock</strong><br>        通过显式定义同步锁对象，即Lock对象，来实现同步。<br>        ReentrantLock类实现了Lock，以及创建锁的lock()方法，释放锁的unlock()方法。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 采用Lock解决线程安全问题</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-23 14:36</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketTest3</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Ticket2 t = <span class="hljs-keyword">new</span> Ticket2();        Thread th1 = <span class="hljs-keyword">new</span> Thread(t);        th1.setName(<span class="hljs-string">"线程1："</span>);        Thread th2 = <span class="hljs-keyword">new</span> Thread(t);        th2.setName(<span class="hljs-string">"线程2："</span>);        Thread th3 = <span class="hljs-keyword">new</span> Thread(t);        th3.setName(<span class="hljs-string">"线程3："</span>);        th1.start();        th2.start();        th3.start();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticketNum = <span class="hljs-number">100</span>;    <span class="hljs-comment">// 1.实例化ReentrantLock</span>    ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;            <span class="hljs-keyword">try</span>&#123;                <span class="hljs-comment">// 2.调用锁定方法lock()</span>                lock.lock();                <span class="hljs-keyword">if</span>(ticketNum&gt;<span class="hljs-number">0</span>)&#123;                    System.out.println(Thread.currentThread().getName()+ticketNum);                    ticketNum--;                &#125;                <span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;<span class="hljs-keyword">finally</span>&#123;                <span class="hljs-comment">// 3.调用解锁方法unlock()</span>                lock.unlock();            &#125;        &#125;    &#125;&#125;</code></pre><p><em>synchronized 与  Lock 的不同点：</em><br>1.synchronized机制再执行完相应的同步代码后，自动释放同步监视器；<br>    Lock需要手动的启动同步(lock())，同时也需要手动的结束同步(unlock())。<br>2.Lock只有代码块锁，synchronized有代码块锁和方法锁<br>3.使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）<br><strong>优先使用顺序：</strong><br>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt;同步方法（在方法体之外）</p><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><p><strong>wait()：</strong>一旦线程执行此方法，当前线程就会进入阻塞状态，并释放同步监视器(锁)。<br><strong>notify()：</strong>一旦执行此方法就会唤醒被wait的一个线程。若有多个线程被wait，则唤醒优先级高的。<br><strong>notifyAll()：</strong>唤醒所有被wait的线程。<br>        <em>三个方法必须使用在同步代码块或同步方法中。<br>        三个方法的调用者必须是同步代码块或是同步代码块中的同步监视器。<br>        三个方法定义在Object类中。</em></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 使用两个线程打印1-100。线程1, 线程2 交替打印</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-23 17:30</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadCommunicate</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Number n = <span class="hljs-keyword">new</span> Number();        Thread th1 = <span class="hljs-keyword">new</span> Thread(n);        th1.setName(<span class="hljs-string">"线程1："</span>);        Thread th2 = <span class="hljs-keyword">new</span> Thread(n);        th2.setName(<span class="hljs-string">"线程2："</span>);        th1.start();        th2.start();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;                notify();<span class="hljs-comment">// 唤醒线程</span>                <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">100</span>) &#123;                    System.out.println(Thread.currentThread().getName() + num);                    num++;                    <span class="hljs-comment">// 线程执行完后就阻塞</span>                    <span class="hljs-keyword">try</span> &#123;                        wait();<span class="hljs-comment">// 执行完wait()后释放锁</span>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p><em>sleep()与wait()的异同点：</em><br>1.相同点：一旦执行后。线程都会进入阻塞状态<br>2.不同点：<br>&lt;1&gt;声明的位置不同：sleep()声明在Thread类中，wait()声明在Object类中；<br>&lt;2&gt;调用要求不同，wait()只能在同步代码块或同步方法中使用；<br>&lt;3&gt;sleep()不会释放锁。</p><h2 id="JDK5-0新增的线程创建方式"><a href="#JDK5-0新增的线程创建方式" class="headerlink" title="JDK5.0新增的线程创建方式"></a>JDK5.0新增的线程创建方式</h2><p><strong>方式三：实现Callable接口</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 线程创建方式三</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-26 14:11</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest3</span>  </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 创建子线程1</span>        <span class="hljs-comment">// 创建Callable实现类的对象</span>        MyThread3 t = <span class="hljs-keyword">new</span> MyThread3();        <span class="hljs-comment">// 实例化FutureTask类，将Callable实现类的对象作为参数传入</span>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(t);        FutureTask futureTask1 = <span class="hljs-keyword">new</span> FutureTask(t);        <span class="hljs-comment">// Thread(Runnable target)需要传入一个Runnable实现类的对象</span>        <span class="hljs-comment">// 而FutureTask类不仅实现了Future接口，同时也实现了Runnable接口</span>        <span class="hljs-comment">// 因此可将FutureTask类的对象作为参数传入</span>        Thread th3 = <span class="hljs-keyword">new</span> Thread(futureTask);        th3.setName(<span class="hljs-string">"子线程1："</span>);        th3.start();        <span class="hljs-comment">// get()返回Callable实现类的对象重写的call()的返回值</span>        <span class="hljs-keyword">try</span> &#123;            Object threadName = futureTask.get();            System.out.println(threadName);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-comment">// 创建子线程2</span>        Thread th4 = <span class="hljs-keyword">new</span> Thread(futureTask1);        th4.setName(<span class="hljs-string">"子线程2："</span>);        th4.start();         &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.out.println(Thread.currentThread().getName()+i);        &#125;        <span class="hljs-keyword">return</span> Thread.currentThread().getName();    &#125;&#125;</code></pre><p><strong>方式四：使用线程池</strong><br>好处：<br>1.提高响应速度(减少了创建新线程的时间)<br>2.降低资源消耗(重复利用线程池中的线程，不需要每次都创建)<br>3.便于线程管理：<br>corePoolSize：核心池的大小<br>maxinumPoolSize：最大线程数<br>keepAliveTime：线程没有任务是最多保持多长时间后会终止</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zyz</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 线程的创建方式四</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-26 16:03</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest4</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 创建线程池 提供指定线程数量</span>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);        <span class="hljs-comment">// 创建线程并开始线程</span>        service.submit(<span class="hljs-keyword">new</span> MyThread4());        <span class="hljs-comment">//service.execute(new MyThread4());</span>        service.execute(<span class="hljs-keyword">new</span> MyThread5());        <span class="hljs-comment">// 关闭连接池</span>        service.shutdown();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">":"</span>+i);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">":"</span>+i);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常处理</title>
    <link href="/2020/02/11/java-03/"/>
    <url>/2020/02/11/java-03/</url>
    
    <content type="html"><![CDATA[<h2 id="异常概述与异常体系结构"><a href="#异常概述与异常体系结构" class="headerlink" title="异常概述与异常体系结构"></a>异常概述与异常体系结构</h2><p><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。<br>比如 ：StackOverflowError和OutOfMemory。一般不编写针对性的代码进行处理。<br><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。<br>例如：空指针访问，试图读取不存在的文件，网络连接中断，数组角标越界。</p><a id="more"></a><p>异常分类：<br>编译时异常，CheckException及它的子类；<br>运行时异常，RuntimeException类及它的子类。</p><h2 id="异常处理机制一"><a href="#异常处理机制一" class="headerlink" title="异常处理机制一"></a>异常处理机制一</h2><p>异常的处理：抓抛模型<br><strong>抛出异常：</strong>程序在正常执行的过程中，如果出现异常，就会生成一个异常类的对象，并将此对象提交给java运行时系统。<br><strong>捕获异常：</strong>如果一个方法抛出异常，该异常就会抛出给调用者方法中处理。如果异常没有在调用者方法中处理，继续抛给上层方法，直到<font color="red">异常被处理</font>。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">try</span>&#123;    <span class="hljs-comment">// 可能出现异常的代码    </span>&#125;<span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">1</span> 变量名<span class="hljs-number">1</span>)&#123;    <span class="hljs-comment">// 处理异常的方式1</span>&#125;<span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">2</span> 变量名<span class="hljs-number">2</span>)&#123;    <span class="hljs-comment">// 处理异常的方式2</span>&#125;...finally&#123;    <span class="hljs-comment">// 不论在try代码块中是否发生了异常事件，catch语句是否执行，是否有异常，是否有return，</span>    <span class="hljs-comment">// finally块中的语句都会被执行。</span>&#125;</code></pre><h2 id="异常处理机制二"><a href="#异常处理机制二" class="headerlink" title="异常处理机制二"></a>异常处理机制二</h2><p>throws + 异常类型<br>1.写在方法的声明处，指明可能抛出的异常类型。一旦方法体执行出现异常时，就会将生成的异常类对象抛给调用者。异常代码后续的代码不再执行。<br>2.只是将异常抛给了调用者，并<font color="red">没有将异常处理掉</font>。</p><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><p>throw + new Exception(“提示信息”)，必须在方法声明时用throws出指明可能抛出的异常。<br>throw : 生成一个异常对象。声明在方法体内。<br>throws : 处理异常。声明在方法的声明处。</p><h2 id="用户自定义异常类"><a href="#用户自定义异常类" class="headerlink" title="用户自定义异常类"></a>用户自定义异常类</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户自定义异常类MyException，用于描述数据取值范围错误信息。</span><span class="hljs-comment"> *              用户自己的异常类必须继承现有的异常类。 </span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年2月13日下午3:15:59</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">703489719074899L</span>;<span class="hljs-comment">// 序列号</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-comment">// 异常种类</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String msg,<span class="hljs-keyword">int</span> id)</span> </span>&#123;<span class="hljs-keyword">super</span>(msg);<span class="hljs-keyword">this</span>.id = id;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id;&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">regist</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span><span class="hljs-keyword">throws</span> MyException</span>&#123;<span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">"人为负数，不合理"</span>,<span class="hljs-number">1</span>);&#125;<span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">"登记人数："</span>+num);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">manager</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;regist(-<span class="hljs-number">100</span>);&#125;<span class="hljs-keyword">catch</span>(MyException e) &#123;System.out.println(<span class="hljs-string">"登记错误，出错种类："</span>+e.getId());&#125;System.out.println(<span class="hljs-string">"本次登记操作结束"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;MyExceptionTest my1 = <span class="hljs-keyword">new</span> MyExceptionTest();my1.manager();&#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2020/01/18/java-02/"/>
    <url>/2020/01/18/java-02/</url>
    
    <content type="html"><![CDATA[<h1 id="Java面向对象学习的三条主线："><a href="#Java面向对象学习的三条主线：" class="headerlink" title="Java面向对象学习的三条主线："></a>Java面向对象学习的三条主线：</h1><p>1.Java类的成员：属性、方法、构造器；代码块，内部类<br>2.面向对象的三大特征：封装性、继承性、多态性、（抽象性）<br>3.关键字：this , super , static , final , abstract , interface , package , import</p><a id="more"></a><p>类：抽象的，概念上的内容。<br>对象：实实在在的个体。<br>对象是由类派生出来的，是类的实例化。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> </span><span class="hljs-comment"> * 一、设计类，其实就是设计类的成员</span><span class="hljs-comment"> * 属性 = 成员变量 = field = 域、字段</span><span class="hljs-comment"> * 方法 = 成员方法 = 函数 = method</span><span class="hljs-comment"> * 创建类的对象 = 类的实例化 = 实例化对象</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 二、类和对象的使用（面向对象思想落地的实现）</span><span class="hljs-comment"> * 1、创建类，设计类的成员</span><span class="hljs-comment"> * 2、创建类的对象</span><span class="hljs-comment"> * 3、通过"对象.属性"或"对象.方法"调用对象的结构</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 三、如果创建一个类的多个对象，则每个类都独立的拥有一套类的属性。（非static）</span><span class="hljs-comment"> * 修改一个对象的属性a，则不影响另外一个对象的属性a的值</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月18日下午2:12:14</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 对象实例化，创建Person对象</span>Person p1 = <span class="hljs-keyword">new</span> Person();<span class="hljs-comment">// 调用对象的结构：属性、方法</span><span class="hljs-comment">// 调用属性："对象.属性"</span>p1.name = <span class="hljs-string">"Taylor"</span>;p1.isMale = <span class="hljs-keyword">false</span>;System.out.println(p1.name);<span class="hljs-comment">// 调用方法："对象.方法"</span>p1.eat();p1.sleep();p1.study(<span class="hljs-string">"Java"</span>);<span class="hljs-comment">// 创建另外一个对象</span>Person p2 = <span class="hljs-keyword">new</span> Person();p2.name = <span class="hljs-string">"Tony"</span>;System.out.println(<span class="hljs-string">"p2.name: "</span> + p2.name);<span class="hljs-comment">// p2.name: Tony</span>System.out.println(<span class="hljs-string">"p1.name: "</span> + p1.name);<span class="hljs-comment">// p1.name: Taylor</span>&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<span class="hljs-comment">// 属性</span>String name;<span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<span class="hljs-keyword">boolean</span> isMale;<span class="hljs-comment">// 方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"吃饭"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">"睡觉"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">(String language)</span> </span>&#123;System.out.println(<span class="hljs-string">"学习"</span> + language);&#125;&#125;</code></pre><p><img src="/2020/01/18/java-02/oop_1.png" srcset="/img/loading.gif" alt="对象的内存解析"></p><h2 id="属性（成员变量）与局部变量"><a href="#属性（成员变量）与局部变量" class="headerlink" title="属性（成员变量）与局部变量"></a>属性（成员变量）与局部变量</h2><p><strong>相同点：</strong><br>            1.定义变量的格式：数据类型 变量名 = 变量值<br>            2.先声明，后使用<br>            3.变量都有其对应的作用域<br><strong>不同点:</strong><br>1.声明的位置不同<br>        属性：直接定义在类的一对{}内<br>        局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量<br>2.权限修饰符不同<br>        属性：声明时可以使用权限修饰符指明其权限<br>                   常见的权限修饰符：private , protected , public ,缺省<br>         局部变量：不可使用权限修饰符<br>3.默认初始化值不同<br>        属性：类的属性根据其类型都<strong>有默认的初始化值</strong><br>                  <em>基本数据类型：</em><br>                        整型（byte , short , int , long）:0<br>                        浮点型（float , double）:0.0<br>                        字符型（char）:0（或’\u0000’）<br>                        布尔型（boolean）:false<br>                  _引用数据类型（类、数组、接口）：_null<br>        局部变量：没有初始化值，<strong><font color="red">调用局部变量之前必须进行初始化</font></strong><br><strong>类中实例变量可以不用初始化，使用相应类型的默认值即可；方法中的定义的局部变量必须初始化，否则编译不通过</strong></p><p>4.在内存中加载的位置不同<br>        属性：加载到堆空间中（非static）<br>        局部变量：加载到栈空间中<br><strong>属性赋值顺序</strong>：1.默认初始化<br>                           2.显式初始化/代码块中赋值<br>                           3.构造器初始化<br>                           4.通过“对象.方法”或“对象.属性“初始化<br><strong>JavaBean:</strong> 符合下列标准的Java类：类是公共的，一个无参的构造器，属性以及对应的get,set方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>方法的声明：</strong></p><pre><code class="hljs java">权限修饰符 返回值类型 方法名(参数列表)&#123;方法体&#125;</code></pre><p><strong>方法的使用</strong>：可以调用当前类的属性和方法 ，方法中不可以定义方法<br>        <strong>方法的封装：</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> </span><span class="hljs-comment"> * 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩</span><span class="hljs-comment">score(int)。 创建20个学生对象，学号为1到20，年级(1~6)和成绩(0~100)都由随机数确定。</span><span class="hljs-comment">问题一：打印出3年级(state值为3）的学生信息。</span><span class="hljs-comment">问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><span class="hljs-comment">提示：</span><span class="hljs-comment">1) 生成随机数：Math.random()，返回值类型double; </span><span class="hljs-comment">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月20日下午3:40:47</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 创建StudentTest对象，用来调用封装好的方法</span>StudentTest test = <span class="hljs-keyword">new</span> StudentTest();<span class="hljs-comment">// 创建并初始化对象数组</span>Student[] stuArr = test.bulidStuArr(<span class="hljs-number">20</span>);<span class="hljs-comment">// 遍历输出</span>test.print(stuArr);System.out.println(<span class="hljs-string">"*****************************"</span>);<span class="hljs-comment">// 找出年级为3的学生</span>test.searchState(stuArr, <span class="hljs-number">3</span>);System.out.println(<span class="hljs-string">"****************************"</span>);<span class="hljs-comment">// 使用冒泡排序按学生成绩排序，并遍历所有学生信息</span>test.bubleSort(stuArr);test.print(stuArr);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 创建并初始化对象数组</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月20日下午5:15:19</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> num</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> Student[] bulidStuArr(<span class="hljs-keyword">int</span> num) &#123;Student[] stuArr = <span class="hljs-keyword">new</span> Student[num];<span class="hljs-comment">// 创建对象数组</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; num;i++) &#123;stuArr[i] = <span class="hljs-keyword">new</span> Student();<span class="hljs-comment">// 给数组元素赋值</span><span class="hljs-comment">// 给Student对象的属性赋值</span>stuArr[i].number = i + <span class="hljs-number">1</span>;stuArr[i].state = (<span class="hljs-keyword">int</span>)(Math.random()*(<span class="hljs-number">6</span>-<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">// Math.random()*(b-a+1)+a</span>stuArr[i].score = (<span class="hljs-keyword">int</span>)(Math.random()*(<span class="hljs-number">100</span>-<span class="hljs-number">0</span>+<span class="hljs-number">1</span>));&#125;<span class="hljs-keyword">return</span> stuArr;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 遍历并输出数组</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月20日下午5:03:40</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stuArr</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Student[] stuArr)</span> </span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; stuArr.length;i++) &#123;System.out.println(stuArr[i].display());&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 根据年级查找学生</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月20日下午4:58:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stuArr</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> state</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">searchState</span><span class="hljs-params">(Student[] stuArr,<span class="hljs-keyword">int</span> state)</span></span>&#123;<span class="hljs-comment">// 遍历学生数组  打印出3年级(state值为3）的学生信息。</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; stuArr.length;i++) &#123;<span class="hljs-keyword">if</span>(stuArr[i].state == state) &#123;System.out.println(stuArr[i].display());&#125;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 使用冒泡排序按学生成绩排序</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月20日下午5:02:08</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> stuArr</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubleSort</span><span class="hljs-params">(Student[] stuArr)</span> </span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; stuArr.length-<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; stuArr.length - <span class="hljs-number">1</span> - i;j++) &#123;<span class="hljs-keyword">if</span>(stuArr[j].score &gt; stuArr[j+<span class="hljs-number">1</span>].score) &#123;Student temp = stuArr[j];stuArr[j] = stuArr[j+<span class="hljs-number">1</span>];stuArr[j+<span class="hljs-number">1</span>] = temp;&#125;&#125;&#125;&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<span class="hljs-comment">// 学号number(int)，年级state(int)，成绩score(int)</span><span class="hljs-keyword">int</span> number;<span class="hljs-keyword">int</span> state;<span class="hljs-keyword">int</span> score;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">"学号："</span> + number + <span class="hljs-string">" 年级："</span> + state + <span class="hljs-string">" 成绩："</span> + score;&#125;&#125;</code></pre><p><img src="/2020/01/18/java-02/oop_2.png" srcset="/img/loading.gif" alt="对象数组内存解析"></p><pre><code class="hljs java">stus[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Student();<span class="hljs-comment">// 引用类型变量stus[0],stus[1],stus[2]...只能存储null 或地址值 ,不能存储对象的属性。必须new一个对象用来存放该对象的属性，且这个引用类型的变量存放着指向该对象的首地址值。</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">// 匿名对象：创建的一个对象没有显式地赋给一个变量。只能调用一次。</span><span class="hljs-keyword">new</span> Student().display();</code></pre><p><strong>方法的重载：</strong>在同一个类中，允许存在一个以上的同名方法，只需参数个数或参数类型不同即可<br>        <strong>可变个数的形参：</strong>方法名(参数的类型名 … 参数名)<br>        <strong>方法参数的值传递机制：</strong><br>                形参：方法定义时，声明在小括号中的参数<br>                实参：方法调用时，实际传递给形参的数据<br>        <strong>方法参数传递的方式：</strong><font color="red">值传递</font>。即将实际参数值的副本(复制品)传入方法内，而参数本身不受影响。<br>                形参是基本数据类型：将实参基本数据类型变量的“<strong>数据值</strong>”传递给形参<br>                形参是引用数据类型：将实参引用数据类型变量的“<strong>地址值</strong>”传递给形参（含变量的数据类型）</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 基本数据类型的参数传递测试</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月21日下午6:42:36</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CanshuTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">"修改前：x = "</span> + x);<span class="hljs-comment">// 1</span>change(x);<span class="hljs-comment">// 在栈空间中的change()中对变量的值进行了修改，调用完成后change()中的变量出栈，并没有影响到主函数中的变量的值</span>System.out.println(<span class="hljs-string">"修改后：x = "</span> + x);<span class="hljs-comment">// 1</span>&#125;<span class="hljs-comment">// 声明为静态方法，便于主类直接调用，无需实例化对象</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;System.out.println(<span class="hljs-string">"调用方法前：x = "</span> + x);<span class="hljs-comment">// 1</span>x = <span class="hljs-number">2</span>;System.out.println(<span class="hljs-string">"调用方法后：x = "</span> + x);<span class="hljs-comment">// 2</span>&#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 引用类型参数传递测试</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月21日下午7:11:18</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CanshuTest1</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Person1 obj = <span class="hljs-keyword">new</span> Person1();obj.age = <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">"修改前：age = "</span> + obj.age);<span class="hljs-comment">// 1</span>change(obj);<span class="hljs-comment">// obj指向的在堆空间中的对象的值被修改，影响了最终结果</span>System.out.println(<span class="hljs-string">"修改后：age = "</span> + obj.age);<span class="hljs-comment">// 2</span>&#125;    <span class="hljs-comment">// 将实参中存储的地址值传递给形参，形参和实参指向堆空间中的同一个对象</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(Person1 obj)</span> </span>&#123;System.out.println(<span class="hljs-string">"调用方法前：age = "</span> + obj.age);<span class="hljs-comment">// 1</span>obj.age = <span class="hljs-number">2</span>;System.out.println(<span class="hljs-string">"调用方法后：age = "</span> + obj.age);<span class="hljs-comment">// 2</span>&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person1</span></span>&#123;<span class="hljs-keyword">int</span> age;&#125;</code></pre><h2 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h2><p><strong>封装性的体现：</strong><br>        1.将类的属性私有化(private)，提供公共的(public)方法来获取(get)和设置(set)属性值<br>        2.不对外暴露的私有方法<br>        3.单例模式<br>        封装性的体现，需要权限修饰符的配合<br>        Java中的4种权限修饰符（从小到大）：private , 缺省 ，protected , public<br><img src="/2020/01/18/java-02/oop_3.png" srcset="/img/loading.gif" alt="权限修饰符的访问权限"></p><p>4种权限均可以用来修饰类的内部结构：属性(成员变量)，方法，构造器，内部类<br>        修饰外部类：缺省，public<br>        局部内部类，局部变量：不能被权限修饰符修饰</p><p>1.一个java文件里，public 的类只能出现一个，只能出现一个，只能出现一个，否则，不管你用哪一个类名命名文件名编译器都会报错</p><p>2.关于多态。子类继承了父类的所有成员，包括private权限的成员变量，但是继承的子类具有私有变量的拥有权但是没有使用权。</p><p>3.private的成员变量，根据权限修饰符的访问控制范围，只有在类内部才能被访问，就算是他的子类，也不能访问。</p><h2 id="构造器（构造方法）"><a href="#构造器（构造方法）" class="headerlink" title="构造器（构造方法）"></a>构造器（构造方法）</h2><p>作用：创建对象 new + 构造器<br>        1.若没有显示的定义类的构造器，则系统默认提供一个空参的构造器。<br>        2.定义构造器的格式：</p><pre><code class="hljs java">权限修饰符 类名(形参列表)&#123;    &#125;</code></pre><p>3.一个类中可以定义多个构造器，彼此构成重载</p><p><font color="red"><strong>4.构造函数不能被继承，只能被显式或隐式的调用</strong></font></p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>1.this可修饰或调用：属性，方法，构造器。<br>        2.this修饰属性和方法：this表示当前对象。<br>            在类的方法中，使用“ this.属性 ” 或 “ this.方法 ”  ，调用当前对象的属性或方法，通常可以省略。<br>            方法的形参与类的属性重名时必须使用” this.变量 “显式调用。<br>        3.this调用构造器：<br>            在构造器中通过 this(参数列表) 调用本类其他构造器，不能调用自己。</p><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>1.更好地实现项目中类的管理<br>        2.声明在源文件的首行。声明类或接口所属的包<br>        3.属于标识符，遵循标识符的定义规范</p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>1.在源文件中导入指定的包或接口<br>        2.声明在包的声明和类的声明之间<br>        3.“ xxx.* ”表示导入xxx包下的所有结构<br>        4.如果使用的类或接口在java.lang包下定义的，则可以省略<br>        5.使用本包下定义的类或接口，可以省略</p><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>好处：<br>        1.减少了代码的冗余，提高了代码的复用性。<br>        2.便于功能的扩展<br>        3.为多态的使用提供了前提<br>        格式：class A extends B{}<br>        A:子类，派生类，subclass<br>        B:父类，超类，基类，superclass<br>        1.一旦子类A继承父类B以后，子类A中就获取了父类B中的结构中所有的属性和方法。<br>        父类中的private属性和方法仍然被子类所继承，只是由于封装性的原因使得子类不能直接调用父类的结构而        已。<br>        2.子类继承父类后，还可以声明自己特有的属性和方法，实现功能的拓展。<br>        子类和父类的关系不等同于集合与子集的关系。<br>        <strong>Java中继承的规定：</strong><br>        1.一个类可以被多个子类继承。<br>        2.单继承：一个类只允许有一个父类。<br>        3.子父类的关系是相对的。（直接父类，间接父类）。<br>        4.子类一旦继承了父类后，就获取了直接父类以及所有间接父类的属性和方法</p><p><strong>Object类：</strong><br>        1.如果我们没有显式地声明一个类的父类，则此类继承于java.lang.Object类。<br>        2.所有java类(除java.lang.Object类外)都直接或间接地继承于java.lang.Object类。<br>        3.所有java类都具有java.lang.Object类声明的功能。<br>        <strong>Object类中的主要方法：</strong>equal()，toString()<br>        <font color="red">equals()与==的区别:</font><br>        ==：运算符，<br>        1.可以使用在基本数据类型变量和引用数据类型之间(除了boolean类型);<br>        2.如果比较的是基本数据类型的变量，比较两个变量保存的值是否相等(不一定要类型相等)；<br>        例如：2 == 2.0；’2’ == 2；’A’ ==65<br>        3.如果比较的是引用数据类型的变量，比较两个变量存储的地址值是否相等。<br>        equals()：方法,<br>        1.通过对象来调用，只能适用于引用数据类型的变量；<br>        2.Object类中定义的equals()与 == 相同:    </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>&#123;     rerturn (<span class="hljs-keyword">this</span> == obj);&#125;</code></pre><p>3.String , Date , File , 包装类等都重写了Object类中的equal()方法。比较的不是两个引用的地址，而是比较两        个对象的“实体内容”是否相等；<br>        <font color="red">toString():</font><br>        1.输出一个对象的引用时，自动调用；<br>        2.在Object类中的定义：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">"@"</span> + Integer.toHexString(hashCode());    &#125;<span class="hljs-comment">// 返回类名和内存地址</span></code></pre><p>3.String， Date , File , 包装类等都重写了Object类中的toString()方法。调用对象时返回的时对象的实体内         容。</p><p><strong>方法的重写：</strong><br>​子类继承父类以后，可以对父类中同名同参数方法进行覆盖操作。<br>​应用：重写之后，通过子类对象调用父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。<br>​要求：<br>​1.子类中重写的方法名和形参列表必须与父类中被重写的方法的方法名和形参列表相同。<br>​2.子类中重写的方法的权限修饰符不小于父类中被重写的权限修饰符。(父类中声明为private的方法不能被重        写)<br>​3.返回值类型：</p><ul><li><p>父类中被重写的方法的返回类型为void或基本数据类型时，子类中的重写方法的返回类型也必须为void或基本数据类型。</p></li><li><p>父类中被重写的方法的返回类型为A类型，子类中重写的方法的返回值类型可以是A类或A的子类。</p></li></ul><p>4.子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>1.在子类的方法或构造器中，通过“super.属性”或“super.方法”的方式 ，显示地调用父类中的属性或方                       法，通常省略，子类和父类出现同名的属性时不可省略。<br>​        2.在子类构造器的首行显示使用“super(形参列表)”调用父类中指定的构造器，且不能与“this(形参列表)”同时存        在。<br>​        3.在子类构造器的首行如果没有显示地声明“super(形参列表)”或“this(形参列表)”，默认调用父类中空参的构造        器。<br>​        4.在子类的多个构造器中至少有一个类的构造器中使用了“super(形参列表)”来调用父类构造器。</p><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><p>1.对象的多态性：父类的引用指向子类对象。<br>​        2.多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法。(虚拟方法调用)<br>​        在编译期只能调用父类中声明的方法，在运行期实际执行的是子类重写父类的方法。(动态绑定)</p><pre><code class="hljs java">Person p1 = <span class="hljs-keyword">new</span> Student;<span class="hljs-comment">// 父类引用指向子类对象</span>p1.getInfo();<span class="hljs-comment">// 调用Student类发getInfo()方法</span></code></pre><p>3.使用前提：类的继承关系，方法的重写。<br>        4.对象的多态性只使用于方法，不使用于属性。<br><strong>重载与重写的区别：</strong><br>        重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为<font color="red">“早绑定”或“静态绑定”</font>；<br>        重写，体现了多态性，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为<font color="red">“晚绑定”或“动态绑定”</font>。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>a instanceof A :判断对象a是否是类A的实例或子类。若是则返回true，否则返回false.<br>使用：</p><pre><code class="hljs java">Person p1 = <span class="hljs-keyword">new</span> Man();<span class="hljs-comment">// 声明一个父类Person对象，并指向子类Man对象</span><span class="hljs-comment">// 向下转型：使用强转符()</span><span class="hljs-comment">// 向下转型目的：</span><span class="hljs-comment">//有了对象的多态性以后，内存中实际加载了子类特有的属性和方法，但是变量声明为父类类型，在编译时只能调用父类中声明的属性和方法,</span><span class="hljs-comment">//为了调用子类对象中特有的属性和方法,使用向下转型</span><span class="hljs-comment">//Women w1 = (Women)p1;// 抛出异常</span><span class="hljs-keyword">if</span>(p1 <span class="hljs-keyword">instanceof</span> Man)&#123;    Man m1 = (Man)p1;    m1.earnMoney();<span class="hljs-comment">// 调用子类Man中特有的方法(父类Person没有的方法)时，编译前不会报错</span>&#125;</code></pre><p><img src="/2020/01/18/java-02/oop_6.png" srcset="/img/loading.gif" alt></p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>Java提供了8种基本数据类型的包装类，使得基本数据类型的变量具有类的特征<br><img src="/2020/01/18/java-02/oop_4.png" srcset="/img/loading.gif" alt="8种包装类"></p><p><img src="/2020/01/18/java-02/oop_5.png" srcset="/img/loading.gif" alt="基本类型、包装类与String类间的转换"></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 基本类型、包装类与String类间的转换</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang </span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年2月3日下午2:21:04</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WrapperTest</span> </span>&#123;<span class="hljs-meta">@Test</span><span class="hljs-comment">// 基本数据类型-&gt;包装类 </span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> num1 = <span class="hljs-number">20</span>;Integer num1_Object = <span class="hljs-keyword">new</span> Integer(num1);<span class="hljs-comment">// 调用包装类的构造器</span>Integer num2_Object = <span class="hljs-number">666</span>;<span class="hljs-comment">// 自动装箱</span>System.out.println(num2_Object.toString());System.out.println(num1_Object.toString());&#125;<span class="hljs-meta">@Test</span><span class="hljs-comment">// 包装类-&gt;基本数据类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;Integer num3_Object = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<span class="hljs-keyword">int</span> num3 = num3_Object.intValue();<span class="hljs-comment">// 调用xxxValue()</span><span class="hljs-keyword">int</span> num4 = num3_Object;<span class="hljs-comment">// 自动拆箱</span>System.out.println(num3+<span class="hljs-number">1</span>);System.out.println(num4+<span class="hljs-number">1</span>);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// 基本数据类型，包装类-&gt;String类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 方式一：连接运算</span><span class="hljs-keyword">int</span> num5 = <span class="hljs-number">6</span>;String str1 = num5 + <span class="hljs-string">""</span>;System.out.println(str1);<span class="hljs-comment">// 方式二：调用String重载的valueOf()方法</span><span class="hljs-keyword">float</span> num6 = <span class="hljs-number">6.6f</span>;String str2 = String.valueOf(num6);System.out.println(str2);&#125;<span class="hljs-meta">@Test</span> <span class="hljs-comment">// String类型-&gt;基本数据类型，包装类</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 调用 包装类的parseXxx()方法</span>String str3 = <span class="hljs-string">"1432132"</span>;<span class="hljs-keyword">int</span> num7 = Integer.parseInt(str3);System.out.println(str3);&#125;&#125;</code></pre><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>1.可以修饰：属性，方法，代码块，内部类。<br>2.使用 static 修饰属性：<br><font color="red"><strong>静态变量只能在类主体中定义，不能在方法中定义。 静态变量属于类所有而不属于方法。</strong></font><br>按是否使用static修饰分为<strong>静态属性(类变量)</strong>和<strong>非静态属性(实例变量)</strong>;<br><strong>非静态属性</strong>：如果创建多个对象，每个对象都独立拥有一套类中的非静态属性。修改其中一个对象中的非静态属性时，不会导致其他对象中的相同属性发生变化。<br><strong>静态属性</strong>：多个对象共享一个静态属性。当其中一个对象修改静态属性时，会导致其他对象调用此静态属性时，是修改过了的。<br><font color="red">注意</font>：<br>&lt;1&gt;.静态变量随着类的加载而加载，可以通过”类名.静态变量”的方式进行调用。<br>&lt;2&gt;.静态变量的加载早于对象的创建。<br>&lt;3&gt;.由于类只会加载一次，则静态变量在内存中也只会存在一份(存在方法区的静态域中)。<br>&lt;4&gt;.类能调用类变量，但不能调用实例变量；对象既能调用类变量，又能调用实例变量。</p><p><img src="/2020/01/18/java-02/oop_7.png" srcset="/img/loading.gif" alt="类变量与实例变量内存解析"></p><p>3.使用 static 修饰方法：<br>        &lt;1&gt;.静态方法随着类的加载而加载，可 通过”类名.静态方法”的方式进行调用。<br>        &lt;2&gt;.类可以调用静态方法，但不能调用非静态方法；对象既可以调用静态方法，又能调用非静态方法。<br>        &lt;3&gt;.静态方法中只能调用静态属性或静态方法；非静态方法中既能调用静态属性又能调用静态方法。<br>        &lt;4&gt;.静态方法中不能使用this,super关键字。</p><p>4.如何确定一个属性是否要声明为static<br>        &lt;1&gt;.属性可以被多个对象所共享，不会随着对象的不同而不同。<br>        &lt;2&gt;.类中的常量常常声明为static</p><p>5.如何确定一个方法是否要声明为static<br>        &lt;1&gt;.操作静态属性的方法通常设置为static;<br>        &lt;2&gt;.工具类中的方法，习惯上声明为static,例如Math,Arrays,Collections</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>作用：初始化类或对象<br>        <strong>静态代码块</strong>：static{}<br>        &lt;1&gt; 内部可以有输出语句<br>        &lt;2&gt; 随着类的加载而执行，而且只执行一次<br>        &lt;3&gt; 作用：初始化类的信息<br>        &lt;4&gt; 如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行<br>        &lt;5&gt; 静态代码块的执行优先于非静态代码块的执行<br>        &lt;6&gt; 静态代码块内只能调用静态的属性和方法，不可以调用非静态的属性和方法<br>        <strong>非静态代码块</strong>：{}<br>        &lt;1&gt;  内部可以有输出语句<br>        &lt;2&gt; 随着类的创建而执行<br>        &lt;3&gt; 每创建一个对象，就执行一次非静态代码块<br>        &lt;4&gt; 作用：可以在创建对象时，对对象的属性进行初始化<br>        &lt;5&gt;非静态代码块内既能调用静态的属性和方法，又能调用非静态的属性和方法</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>1.修饰类：表明该类不能被继承。例如：String类，System类，StringBuffer类<br>2.修饰方法：表明该方法不能被重写。例如：Object类中的getClass()方法<br>3.修饰变量：此时的“变量”就称为一个常量<br>    &lt;1&gt; final修饰成员变量：显式初始化，声明时直接赋值；代码块中初始化；构造器中初始化。<br>    &lt;2&gt; 修饰局部变量：修饰形参时，表明此形参是一个常量。调用此方法时，给常量形参赋一个实参，以后只            能在方法体内使用此形参，但不能重新赋值。<br>修饰基本数据类型时，在赋值之后就无法改变；<br>修饰引用数据类型时，在赋值后指向的地址无法改变，但是对象的内容可以改变。</p><p>static final 修饰属性：全局常量</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><p>1.abstract修饰类：抽象类<br>        &lt;1&gt; 此类不能实例化<br>        &lt;2&gt; 抽象类中一定有构造器，便于子类实例化调用<br>        &lt;3&gt; 通过提供抽象类的子类，通过实例化子类完成相应的操作<br>2.abstract修饰方法：抽象方法(<strong>默认权限为default</strong>)<br>        &lt;1&gt; 只有方法的声明，没有方法体<br>        &lt;2&gt; 包含抽象方法的类一定是抽象类；抽象类中可以没有抽象方法<br>        &lt;3&gt; 若子类重写了父类的所有抽象方法，此子类可以实例化；否则，此子类必须声明为抽象类</p><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>1.在java中，接口与类是并列的两个结构。(<strong>默认权限为public</strong>)<br>2.接口中的成员：</p><ul><li>JDK7及以前：只能定义全局常量(public static final 可以省略)和抽象方法(<strong>默认为public abstract</strong> )</li><li>JDK8：还可以定义静态方法(public static 只能通过接口来调用)，<strong>此时被修饰的方法必须带有方法体</strong>。</li></ul><p>3.接口中不能定义构造器</p><p>4.<strong>非抽象类</strong>实现接口必须重写该接口中的所有抽象方法</p><p>5.Java通过实现多个接口，弥补单继承的局限性<br>  <code>class A extends B implements C,D,E{}</code><br> 6.接口之间可以继承，而且可以多继承</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>Java中允许一个类A声明在另一个类B中，则类A就是内部类，类B就是外部类。<br>        1.非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员<br>        内部类中才可声明static成员。<br>        2.外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式<br>        3.<strong>成员内部类可以直接使用外部类的所有成员，包括私有的数据</strong><br>        4.当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的        </p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据类型，运算符，数组</title>
    <link href="/2020/01/09/java-01/"/>
    <url>/2020/01/09/java-01/</url>
    
    <content type="html"><![CDATA[<h1 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h1><p>1.变量必须先声明后使用。<br>2.变量都定义在其作用域内，在作用域内有效，出了作用域就失效了。<br>3.同一个作用域内不能声明两个同名变量。</p><a id="more"></a><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="/2020/01/09/java-01/1.jpg" srcset="/img/loading.gif" alt></p><p><strong>基本数据类型(primitive type)</strong><br>        整型  byte(1字节) -128~127 , short (2字节), int(4字节) , long(8字节) l或L结尾<br>        浮点型  float(4字节) 定义时要以f或F结尾 , double(8字节)<br>        字符型  char(2字节)<br>        布尔型  boolean 只能取两个值之一 ：true , false<br><em>7种基本数据类型之间的计算（不包括布尔类型）:</em><br>        1.自动类型提升：<br>               容量小的数据类型变量与容量大的数据类型做运算时，运算结果自动装换为容量大的。<br>               byte , char , short –&gt; int –&gt; long –&gt; float –&gt; double<br><strong>所有的byte , short , char 类型的值将被提升为int型；</strong><br><strong>被final 修饰的变量不会自动提升其类型</strong></p><p>​        2.强制类型转换：<br>​        使用强转符 () ，可能造成精度损失<br><strong>引用数据类型(reference type)</strong><br>​        类 class<br>​        String类型：  声明时使用一对””，可以与8种基本数据类型做运算，+ 只能表示连接<br>​        接口 interfere<br>​        数组 [ ]</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>​    <strong>算术运算符</strong><br>​            <strong>逻辑运算符</strong><br>​            <strong>&amp;&amp;与&amp;的区别：</strong><br>​            &amp; : 左边无论真假，右边进行运算<br>​            &amp;&amp; ： 左边为真，右边参与运算；左边为假，右边不参与运算<br>​            <strong>|与||的区别：</strong><br>​            ||：左边为真，右边不参与运算<br>​            <strong>位运算：</strong><br>​         <img src="/2020/01/09/java-01/1.png" srcset="/img/loading.gif" alt></p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p><strong>顺序结构</strong><br>        <strong>分支结构</strong><br>        <strong>循环结构</strong><br>        break :  结束当前循环<br>        continue :  结束当次循环</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组的特点:</strong><br>            1.数组是有序排列的<br>            2.数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型的变量<br>            3.创建数组对象时会在内存中开辟一整块连续的内存空间<br>            4.数组的长度一旦确定就不能修改 </p><p><strong>一维数组的使用:</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[] nums;<span class="hljs-comment">// 声明</span><span class="hljs-comment">// 静态初始化:数组的初始化和数组元素的初始化同时进行</span>nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;    <span class="hljs-comment">// int[] nums = &#123;1,2,3,4,5,6&#125;</span>        <span class="hljs-comment">// 动态初始化:数组的初始化和数组元素的初始化分开进行</span>String[] names = <span class="hljs-keyword">new</span> String[<span class="hljs-number">6</span>];<span class="hljs-comment">// 通过角标的方式调用指定位置的元素</span>names[<span class="hljs-number">0</span>] = <span class="hljs-string">"Tom"</span>;names[<span class="hljs-number">1</span>] = <span class="hljs-string">"Justin"</span>;<span class="hljs-comment">// 获取数组长度： length</span>System.out.println(names.length);<span class="hljs-comment">// 遍历数组</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.length;i++) &#123;System.out.println(nums[i]);&#125;&#125;&#125;</code></pre><p><strong>一维数组元素的默认初始值</strong><br><em>基本数据类型：</em><br>整形：0<br>浮点型：0.0<br> char型：0（ASCII码值） 而非’0’<br> boolean型：false<br> _引用数据类型：_null</p><p><strong>一维数组的内存解析:</strong></p><p>在栈空间中申请一个变量用来存储堆空间中数组的首地址值<br>        在堆空间中申请一个数组用来存放数组元素</p><p><strong>多维数组的使用：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest1</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 静态初始化</span><span class="hljs-keyword">int</span>[][] arr =  <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>&#125;&#125;;<span class="hljs-comment">//动态初始化</span>String [][] arr1 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];String [][] arr2 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][];<span class="hljs-comment">// 调用数组指定位置的元素</span>System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">// 2</span>System.out.println(arr1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">// null</span><span class="hljs-comment">// 获取数组的长度</span>System.out.println(arr.length);<span class="hljs-comment">// 3</span><span class="hljs-comment">// 遍历二维数组</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; arr.length;i++) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; arr[i].length;j++)&#123;System.out.print(arr[i][j] + <span class="hljs-string">" "</span>);&#125;System.out.println();&#125;&#125;&#125;</code></pre><p><strong>二维数组元素的默认初始值:</strong><br>针对初始化方式一：<code>String [][] arr1 = new String[3][2];</code><br>外层元素的初始化值为：地址值<br>内层元素的初始化值为：与一维数组的初始化情况相同<br>针对初始化方式二：<code>String [][] arr1 = new String[3][];</code><br>外层元素的初始化值为：null<br>内层元素的初始化值为：<font color="red">不能调用，否则报错 </font></p><p><strong>二位数组的内存解析:</strong><br>在栈空间中申请一个变量用来存储堆空间中数组的首地址值<br>在堆空间中申请一个数组用来存放二维数组的外层元素，外层元素中存放着指向存储内层元素数组的首地址<br>在堆空间中申请一个数组用来存储内层元<br><img src="/2020/01/09/java-01/Array_02.png" srcset="/img/loading.gif" alt></p><h2 id="数组中涉及的常见算法"><a href="#数组中涉及的常见算法" class="headerlink" title="数组中涉及的常见算法"></a>数组中涉及的常见算法</h2><p><strong>数组元素的赋值</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 打印10行杨辉三角</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月13日上午11:26:21</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YangHui_Test</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">// 声明并动态初始化二位数组</span><span class="hljs-keyword">int</span> [][] yangHui = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][];<span class="hljs-comment">// 10行，列数不确定</span><span class="hljs-comment">// 给元素赋值</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; yangHui.length;i++) &#123;yangHui[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[i+<span class="hljs-number">1</span>];<span class="hljs-comment">// 第i行有i+1个元素</span><span class="hljs-comment">// 给首末元素赋值</span>yangHui[i][<span class="hljs-number">0</span>] =yangHui[i][i] = <span class="hljs-number">1</span>;<span class="hljs-comment">//首末元素为1</span><span class="hljs-comment">// 给其余元素赋值</span><span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt; yangHui[i].length-<span class="hljs-number">1</span>;j++) &#123;yangHui[i][j] = yangHui[i-<span class="hljs-number">1</span>][j] + yangHui[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];&#125;&#125;&#125;<span class="hljs-comment">// 遍历输出</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; yangHui.length;i++) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; yangHui[i].length;j++) &#123;System.out.print(yangHui[i][j] + <span class="hljs-string">" "</span>);&#125;System.out.println();&#125;&#125;&#125;</code></pre><p><strong>求数值型数组中元素的最大值、最小值、平均数、总和等</strong></p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定义一个int型的一维数组，包含10个元素，分别赋一些随机整数，</span><span class="hljs-comment">然后求出所有元素的最大值，最小值，和值，平均值，并输出出来。</span><span class="hljs-comment">要求：所有随机数都是两位数。</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sweetboyZhang</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年1月13日下午2:13:41</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest2</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<span class="hljs-keyword">int</span> min = <span class="hljs-number">100</span>;<span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> average = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; arr.length;i++) &#123;<span class="hljs-comment">// 获取[a,b]范围内的随机数，(int)(Math.random()*(b-a+1)+a)</span>arr[i] = (<span class="hljs-keyword">int</span>)(Math.random()*(<span class="hljs-number">99</span>-<span class="hljs-number">10</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">10</span>);System.out.print(arr[i]+ <span class="hljs-string">" "</span>);<span class="hljs-keyword">if</span>(min&gt;arr[i]) &#123;min = arr[i];&#125;<span class="hljs-keyword">if</span>(max&lt;arr[i]) &#123;max = arr[i];&#125;sum+=arr[i];average = sum/arr.length;&#125;System.out.println();System.out.println(<span class="hljs-string">"最大值："</span> + max);System.out.println(<span class="hljs-string">"最小值："</span> + min);System.out.println(<span class="hljs-string">"和值："</span> + sum);System.out.println(<span class="hljs-string">"平均值："</span> + average);&#125;&#125;</code></pre><p><strong><font color="red">赋值与复制</font></strong></p><p>赋值：<code>array2 = array1;// array1指向堆空间的地址赋给array2,不能称为数组的复制</code><br>            对array2修改就是对array1进行修改<br>        复制：<code>for(int i = 0;i &lt; array2.length;i++) {            array2[i] = array1[i];        }</code><br>            对array2修改不会影响到array1</p><p><strong>数组的反转</strong></p><pre><code class="hljs java">String[] array1 = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"Justin"</span>,<span class="hljs-string">"Troye"</span>,<span class="hljs-string">"Swift"</span>&#125;;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; array1.length/<span class="hljs-number">2</span>;i++) &#123;String temp = array1[i];array1[i] = array1[array1.length-<span class="hljs-number">1</span>-i];array1[array1.length-<span class="hljs-number">1</span>-i] = temp;&#125;</code></pre><p><strong>查找</strong></p><ol><li>线性查找</li></ol><pre><code class="hljs java">String[] array1 = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"Taylor"</span>,<span class="hljs-string">"Justin"</span>,<span class="hljs-string">"Troye"</span>,<span class="hljs-string">"Swift"</span>&#125;;String dest = <span class="hljs-string">"Justin"</span>;<span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">true</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; array1.length;i++) &#123;<span class="hljs-keyword">if</span>(dest.equals(array1[i])) &#123;System.out.println(<span class="hljs-string">"元素Justin的位置为："</span> + i);isFlag = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span>(isFlag) &#123;System.out.println(<span class="hljs-string">"没有找到！"</span>);&#125;</code></pre><ol start="2"><li>二分查找</li></ol><pre><code class="hljs java"><span class="hljs-keyword">int</span> [] array3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<span class="hljs-keyword">int</span> number = <span class="hljs-number">6</span>;<span class="hljs-keyword">int</span> head = array3[<span class="hljs-number">0</span>];<span class="hljs-comment">// 初始的首索引</span><span class="hljs-keyword">int</span> end = array3[array3.length -<span class="hljs-number">1</span>];<span class="hljs-comment">// 初始的尾索引</span><span class="hljs-keyword">int</span> middle = (head + end)/<span class="hljs-number">2</span>;<span class="hljs-comment">// 二分</span><span class="hljs-keyword">boolean</span> isFlag1 = <span class="hljs-keyword">true</span>;<span class="hljs-comment">// 设置标志位，找到元素后置false</span><span class="hljs-keyword">while</span>(head &lt;= end) &#123;<span class="hljs-keyword">if</span>(number == array3[middle]) &#123;System.out.println(<span class="hljs-string">"元素6的位置为："</span> + middle);isFlag1 = <span class="hljs-keyword">false</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(number &lt; array3[middle]) &#123;end = middle - <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> &#123;head = middle + <span class="hljs-number">1</span>;&#125;&#125;   <span class="hljs-keyword">if</span>(isFlag1) &#123;System.out.println(<span class="hljs-string">"没有找到该元素！"</span>);&#125;</code></pre><p><strong>排序</strong></p><p><strong>冒泡排序</strong></p><p>排序思想：</p><ol><li>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步<br>做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要<br>比较为止。</li></ol><pre><code class="hljs java"><span class="hljs-keyword">int</span> [] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">33</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; array.length-<span class="hljs-number">1</span>;i++) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; array.length-<span class="hljs-number">1</span>-i;j++) &#123;<span class="hljs-keyword">if</span>(array[j]&gt;array[j+<span class="hljs-number">1</span>]) &#123;<span class="hljs-keyword">int</span> temp = array[j];array[j] = array[j+<span class="hljs-number">1</span>];array[j+<span class="hljs-number">1</span>] = temp;&#125;&#125;&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; array.length;i++) &#123;System.out.print(array[i] + <span class="hljs-string">" "</span>);&#125;</code></pre><p><strong>Arrays工具类</strong></p><p>java.util.Arrays ：操作数组的工具类，定义了许多操作数组的方法</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">// 1.boolean equals(int[] a,int[] b) 判断两个数组是否相等。</span><span class="hljs-keyword">boolean</span> isEqual =Arrays.equals(arr1, arr2);System.out.println(isEqual);<span class="hljs-comment">// false</span><span class="hljs-comment">// 2.String toString(int[] a) 输出数组信息</span>String arr1Info = Arrays.toString(arr1);System.out.println(arr1Info);<span class="hljs-comment">// [1,2,3,4]</span><span class="hljs-comment">// 3.void fill(int[] a,int val) 将指定值填充到数组之中。</span>Arrays.fill(arr1,<span class="hljs-number">6</span>);System.out.println(Arrays.toString(arr1));<span class="hljs-comment">// [6,6,6,6]</span><span class="hljs-comment">// 4.void sort(int[] a) 对数组进行排序。</span>Arrays.sort(arr2);System.out.println(Arrays.toString(arr2));<span class="hljs-comment">// [1,2,3,4,5]</span><span class="hljs-comment">// 5.int binarySearch(int[] a,int key) 对排序后的数组进行二分法检索指定的值。</span><span class="hljs-keyword">int</span> index = Arrays.binarySearch(arr2, <span class="hljs-number">4</span>);<span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span> ) &#123;System.out.println(<span class="hljs-string">"元素4的索引为："</span>+ index);&#125;<span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">"未找到该元素！"</span>);&#125;&#125;</code></pre><p><strong>数组使用的常见异常</strong></p><p>1.数组脚标越界异常<br>    ArrayIndexOutOfBoundsException：访问到了数组中的不存在的脚标时发生。<br>    合理范围：[0,array.length-1]</p><p>2.空指针异常<br>    NullPointerException：array引用没有指向实体，却在操作实体中的元素时。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
