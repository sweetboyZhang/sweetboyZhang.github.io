[{"title":"C#面向对象","url":"/2021/08/04/csharp-02/","content":"<h1 id=\"访问修饰符与字段修饰符\"><a href=\"#访问修饰符与字段修饰符\" class=\"headerlink\" title=\"访问修饰符与字段修饰符\"></a>访问修饰符与字段修饰符</h1><p><strong>访问修饰符</strong></p>\n<ul>\n<li><p>修饰类主要有2个，即 <code>internal</code> 和 <code>public</code>，如果省略了访问修饰符，即为<code>internal</code>。</p>\n</li>\n<li><p>修饰成员变量有 4 个，具体用法如下：<a id=\"more\"></a></p>\n<p>( 1) public</p>\n<p>成员可以被任何代码访问。</p>\n<p>(2) internal</p>\n<p>成员仅能被同一个项目中的代码访问。</p>\n<p>(3) protected</p>\n<p>成员只能由类或派生类中的代码访问。</p>\n<p>(4) private</p>\n<p>成员仅能被同一个类中的代码访问，如果在类成员前未使用任何访问修饰符，则默认为 <code>private</code>。</p>\n</li>\n</ul>\n<p><strong>字段修饰符</strong></p>\n<p>主要有2个，<code>readonly</code>和<code>static</code></p>\n<ul>\n<li><p>使用 <code>readonly</code>修饰字段意味着只能读取该字段的值而不能给字段赋值。</p>\n</li>\n<li><p>使用 <code>static</code>修饰的字段是静态字段，可以直接通过类名访问该字段。<strong>常量不能使用<code>static</code>修饰符修饰</strong>。</p>\n</li>\n</ul>\n<p>字段在类中定义完成后，在类加载时，会自动为字段赋值，不同数据类型的字段默认值不同， 如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">int</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">float、double</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td>空值</td>\n</tr>\n<tr>\n<td align=\"left\">char</td>\n<td>a</td>\n</tr>\n<tr>\n<td align=\"left\">bool</td>\n<td>False</td>\n</tr>\n<tr>\n<td align=\"left\">其他引用类型</td>\n<td>空值</td>\n</tr>\n</tbody></table>\n<h1 id=\"方法参数\"><a href=\"#方法参数\" class=\"headerlink\" title=\"方法参数\"></a>方法参数</h1><p>方法中的参数除了定义数据类型外，还可以定义<strong>引用参数</strong>和<strong>输出参数</strong>。引用参数使用 <code>ref</code>关键字定义，输出参数使用 <code>out</code> 关键字定义。</p>\n<ul>\n<li>引用参数在方法使用时，必须是由变量赋予的值，不能是常量或表达式；</li>\n<li>在需要在每一个参数前面加上 <code>ref</code> 关键字修饰。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span><span class=\"params\">(ref <span class=\"keyword\">int</span> num1, ref <span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用时</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1 = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num2 = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = Add(ref num1,ref num2);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用输出参数时，必须在方法操作结束前为带输出参数的形式参数赋值；</li>\n<li>在调用含有带输出参数的方法时，必须在传递参数时使用 <code>out</code> 关键字，但不必给输出参数赋值。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2, out <span class=\"keyword\">int</span> sum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sum = num1 + num2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用时</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = Add(<span class=\"number\">1</span>, <span class=\"number\">1</span>, sum);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"partial部分类\"><a href=\"#partial部分类\" class=\"headerlink\" title=\"partial部分类\"></a>partial部分类</h1><p>用于表示一个类中的一部分，一个类可以由多个部分类构成，定义部分类的语法形式如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">访问修饰符 修饰符   partial class 类名&#123;……&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> TestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    partial <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> gender;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"built_in\">get</span> =&gt; name; <span class=\"built_in\">set</span> =&gt; name = value; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">char</span> Gender &#123; <span class=\"built_in\">get</span> =&gt; gender; <span class=\"built_in\">set</span> =&gt; gender = value; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"built_in\">get</span> =&gt; age; <span class=\"built_in\">set</span> =&gt; age = value; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    partial <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Name: \"</span>+ name);</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Gender: \"</span>+ gender);</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Age: \"</span>+ age);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建类并调用类方法</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> TestClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">               person.Name = <span class=\"string\">\"zhangyuzhen\"</span>;</span><br><span class=\"line\">            person.Gender = <span class=\"string\">'男'</span>;</span><br><span class=\"line\">            person.Age = <span class=\"number\">21</span>;</span><br><span class=\"line\">            person.Print();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在“不同”的部分类中可以直接互相访问其成员，相当于所有的代码都写到一个类中。</p>\n<h1 id=\"sealed\"><a href=\"#sealed\" class=\"headerlink\" title=\"sealed\"></a>sealed</h1><p>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</p>\n<h1 id=\"virtual\"><a href=\"#virtual\" class=\"headerlink\" title=\"virtual\"></a>virtual</h1><p>虚方法是使用关键字 <strong>virtual</strong> 声明的。</p>\n<p>虚方法可以在不同的继承类中有不同的实现。</p>\n<p>对虚方法的调用是在运行时发生的。</p>\n<ul>\n<li><p>动态多态性是通过 <strong>抽象类</strong>(abstract) 和 <strong>虚方法</strong>(virtual) 实现的。</p>\n</li>\n<li><p>静态多态性通过<strong>方法重载</strong>和<strong>运算符重载</strong>实现</p>\n</li>\n</ul>\n<blockquote>\n<p>重载运算符是具有特殊名称的函数，是通过关键字 <strong>operator</strong> 后跟运算符的符号来定义的。与其他函数一样，重载运算符有返回类型和参数列表。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Box <span class=\"keyword\">operator</span>+ (Box b, Box c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Box box = <span class=\"keyword\">new</span> Box();</span><br><span class=\"line\">   box.length = b.length + c.length;</span><br><span class=\"line\">   box.<span class=\"built_in\">height</span> = b.<span class=\"built_in\">height</span> + c.<span class=\"built_in\">height</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"异常类\"><a href=\"#异常类\" class=\"headerlink\" title=\"异常类\"></a>异常类</h1><p>C# 异常是使用类来表示的。C# 中的异常类主要是直接或间接地派生于 <strong>System.Exception</strong> 类。<strong>System.ApplicationException</strong> 和 <strong>System.SystemException</strong> 类是派生于 System.Exception 类的异常类。<strong>System.ApplicationException</strong> 类支持由应用程序生成的异常。所以程序员定义的异常都应派生自该类。<strong>System.SystemException</strong> 类是所有预定义的系统异常的基类。</p>\n","categories":["C#"],"tags":["C#"]},{"title":"C#反射","url":"/2021/10/03/csharp-03/","content":"<p>反射就是操作C#代码编译后的dll文件，可以获取程序集中的所有数据，并调用运行时类的方法。<a id=\"more\"></a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方式一：通过加载dll文件获取指定Type</span></span><br><span class=\"line\">    Assembly assembly = Assembly.LoadFrom(<span class=\"string\">\"Library.dll\"</span>);</span><br><span class=\"line\">    Type type = assembly.GetType(<span class=\"string\">\"Libaray.Student\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取所有Type</span></span><br><span class=\"line\">    var types = assembly.GetTypes();</span><br><span class=\"line\">    foreach (Type t in types)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(t.Name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 方式二：通过typeof() 获取Type </span></span><br><span class=\"line\">    Type type1 = typeof(Libaray.Student);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用无参构造</span></span><br><span class=\"line\">    object student = Activator.CreateInstance(type);</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(student);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用有参构造</span></span><br><span class=\"line\">    object student1 = Activator.CreateInstance(type, <span class=\"keyword\">new</span> object[] &#123; <span class=\"string\">\"2017001\"</span>, <span class=\"string\">\"zhangyuzhen\"</span>, <span class=\"number\">22</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(student1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用私有构造</span></span><br><span class=\"line\">    object student2 = Activator.CreateInstance(type, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(student2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">    var method = type.GetMethod(<span class=\"string\">\"Print\"</span>, BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class=\"line\">    method.Invoke(student2,<span class=\"keyword\">new</span> object[] &#123; <span class=\"string\">\"zyz\"</span>,<span class=\"number\">22</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用泛型方法</span></span><br><span class=\"line\">    var method1 = type.GetMethod(<span class=\"string\">\"Func\"</span>, BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class=\"line\">    var genericMethod = method1.MakeGenericMethod(<span class=\"keyword\">new</span> Type[] &#123; typeof(<span class=\"keyword\">int</span>) &#125;);</span><br><span class=\"line\">    genericMethod.Invoke(student2, <span class=\"keyword\">new</span> object[] &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取所有属性并设置值</span></span><br><span class=\"line\">    var properties = type.GetProperties();</span><br><span class=\"line\">    foreach(var property in properties)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property.Name == <span class=\"string\">\"Id\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            property.SetValue(student, <span class=\"string\">\"001\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (property.Name == <span class=\"string\">\"Name\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            property.SetValue(student, <span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            property.SetValue(student, <span class=\"number\">18</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(student);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["C#"],"tags":["C#"]},{"title":"AWS基础","url":"/2021/11/18/aws/","content":"<h1 id=\"五大支柱\"><a href=\"#五大支柱\" class=\"headerlink\" title=\"五大支柱\"></a>五大支柱</h1><h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>采用<strong>零信任</strong>模式，所有应用程序组件和服务都被是为离散和潜在的恶意实体。包括基础网络结构、有权访问资源的代理以及服务中运行的软件。<a id=\"more\"></a><br><img src=\"/2021/11/18/aws/7.jpg\" style=\"zoom:30%;\"></p>\n<h3 id=\"IAM\"><a href=\"#IAM\" class=\"headerlink\" title=\"IAM\"></a>IAM</h3><p>Identity and Access Management，负责跟踪系统中身份和访问的服务。</p>\n<p>IAM策略三个方面：</p>\n<ul>\n<li><strong>主体</strong>指定向谁授予权限</li>\n<li><strong>操作</strong>指定要执行的操作</li>\n<li><strong>资源</strong>指定要访问的属性</li>\n</ul>\n<h3 id=\"网络安全\"><a href=\"#网络安全\" class=\"headerlink\" title=\"网络安全\"></a>网络安全</h3><p>保障网络和网络可访问资源的访问和可用性。</p>\n<p>AWS 中基本的网络级基元是 <a href=\"https://aws.amazon.com/vpc/\" target=\"_blank\" rel=\"noopener\">Amazon Virtual Private Cloud (VPC)</a>。这是一个逻辑网络，可以定义该逻辑网络并将为其预置资源。为了保护 VPC 中的流量，可以将资源分为面向公众的资源和内部资源。</p>\n<ul>\n<li>子网：VPC 中的一个 IP 地址范围</li>\n<li>路由表：一组决定流量导向哪里的规则</li>\n<li>互联网网关：允许 VPC 内部资源与互联网之间进行通信的组件</li>\n</ul>\n<p><strong>安全组</strong>：充当EC2实例的虚拟防火墙，用于控制传入和传出流量。EC2启动后可以</p>\n<h3 id=\"数据加密\"><a href=\"#数据加密\" class=\"headerlink\" title=\"数据加密\"></a>数据加密</h3><p>对信息进行编码的过程，经过该过程后，任何不具备解密数据所必需的密钥的第三方都无法理解这些数据。</p>\n<h2 id=\"性能效率\"><a href=\"#性能效率\" class=\"headerlink\" title=\"性能效率\"></a>性能效率</h2><p>性能效率支柱关注如何在云中高效、可扩展地运行服务。尽管云为您提供了处理任何大小流量的方法，但它要求您在<strong>选择</strong>和配置服务时要考虑到规模<strong>扩展</strong>。</p>\n<h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><p>服务类别：</p>\n<ul>\n<li><p><strong>计算</strong>是处理数据的服务（例如，虚拟机）</p>\n<img src=\"/2021/11/18/aws/4.jpg\" style=\"zoom:30%;\">\n\n<ul>\n<li><p><strong>EC2</strong> 可以做任何事，可以安装任何软件，可以是一个web server，也可以是一个database server。可以随时增加，减少实例。</p>\n</li>\n<li><p><strong>Elastic Beanstalk</strong> 是一个web server，不能安装其他软件。</p>\n</li>\n<li><p><strong>Lambda</strong> 只做后端处理。不需要任何配置，可直接运行后端代码</p>\n</li>\n<li><p><strong>ELB</strong> 负载均衡服务器 </p>\n</li>\n<li><p><strong>Auto Scaling</strong> 与ELB一起工作，监视流量，可设置cpu使用率的阈值，增加或减少服务器数量</p>\n</li>\n<li><p><strong>ECR</strong> 弹性注册表，存储，管理和发布docker容器</p>\n</li>\n<li><p><strong>ECS</strong> 运行docker容器</p>\n</li>\n</ul>\n</li>\n<li><p><strong>存储</strong>是数据的静态存储（例如，对象存储）</p>\n<img src=\"/2021/11/18/aws/5.jpg\" style=\"zoom:30%;\">\n\n<ul>\n<li><strong>S3</strong> 对象存储，容忍失败，保证可用性</li>\n<li><strong>Glacier</strong> 备份服务</li>\n<li><strong>EFS</strong> 文件存储</li>\n<li><strong>Storage Gateway</strong>连接本地系统和AWS</li>\n</ul>\n</li>\n<li><p><strong>数据库</strong>是数据的有组织存储（例如，关系数据库）</p>\n<img src=\"/2021/11/18/aws/6.jpg\" style=\"zoom:30%;\">\n\n<ul>\n<li><strong>RDS</strong> 用于大多数关系数据库</li>\n<li><strong>DynamoDB</strong> 用于NoSQL数据库</li>\n<li><strong>Redshift</strong> 数据仓库</li>\n<li><strong>ElasticCache</strong> 缓存</li>\n</ul>\n</li>\n<li><p>网络处理您的数据的移动（例如，内容交付网络）</p>\n</li>\n</ul>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><ul>\n<li>纵向拓展 ：将底层计算升级为更大的实例类型。</li>\n<li>横向拓展：增加底层实例数量。</li>\n</ul>\n<h2 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h2><p>关注如何构建可抵御服务和基础设施中断的服务</p>\n<h2 id=\"卓越运营\"><a href=\"#卓越运营\" class=\"headerlink\" title=\"卓越运营\"></a>卓越运营</h2><p>关注如何不断提高运行系统、创建更好的程序并获得见解的能力</p>\n<h3 id=\"基础设施及代码\"><a href=\"#基础设施及代码\" class=\"headerlink\" title=\"基础设施及代码\"></a>基础设施及代码</h3><h3 id=\"可观测性\"><a href=\"#可观测性\" class=\"headerlink\" title=\"可观测性\"></a>可观测性</h3><p>可观测性是衡量系统内部状态的过程。通常这样做是为了将其优化到某个所需的最终状态。</p>\n<p>实现可观测性的三个步骤：<br>1.收集：评估系统状态时汇总所有必要指标的过程。</p>\n<ul>\n<li>基础设施指标<ul>\n<li>这些指标由 AWS 服务自动发出，并由 <a href=\"https://docs.aws.amazon.com/cloudwatch/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">CloudWatch</a> 服务收集</li>\n<li>某些服务还会发出可通过 <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Logs</a> 启用和收集的结构化日志。</li>\n</ul>\n</li>\n<li>应用程序级指标<ul>\n<li>这些指标由您的软件生成，可以由 <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\" target=\"_blank\" rel=\"noopener\">CloudWatch 自定义指标</a> 收集</li>\n<li>可以使用 CloudWatch Logs 存储软件日志或将其上传到 S3</li>\n</ul>\n</li>\n<li>账户级指标<ul>\n<li>这些指标由您的 AWS 账户记录，可以由 <a href=\"https://docs.aws.amazon.com/cloudtrail/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">CloudTrail</a> 服务收集</li>\n</ul>\n</li>\n</ul>\n<p>2.分析：分析收集的指标</p>\n<ul>\n<li>要分析存储在 CloudWatch Logs 中的日志，可考虑使用 <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Logs Insight</a>，该服务可让您交互式地搜索和分析 Cloudwatch 日志数据。</li>\n<li>要分析存储在 S3 中的日志，可考虑使用 <a href=\"https://aws.amazon.com/athena/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">Athena</a>（一种无服务器查询服务）</li>\n<li>要分析结构化数据，可考虑使用 <a href=\"https://docs.aws.amazon.com/rds/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">RDS</a>（一种托管的关系数据库服务）</li>\n<li>要分析大量结构化数据，可考虑使用 <a href=\"https://docs.aws.amazon.com/redshift/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">RedShift</a>（一种托管的 PB 级数据仓库服务）</li>\n<li>要分析基于日志的数据，可考虑使用 <a href=\"https://docs.aws.amazon.com/elasticsearch-service/?id=docs_gateway\" target=\"_blank\" rel=\"noopener\">Elasticsearch Service</a>，这是流行的开源分析引擎 Elasticsearch 的托管版本。</li>\n</ul>\n<p>3.行动：在收集并分析了指标之后，可以使用它们来实现特定的结果或流程。</p>\n<ul>\n<li>监控与警报<ul>\n<li>您可以使用 <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Alarms</a> 在系统超出特定指标的安全阈值时获得通知</li>\n<li>此警报可以触发手动或自动缓解措施。</li>\n</ul>\n</li>\n<li>控制面板<ul>\n<li>您可以使用 <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Dashboards.html\" target=\"_blank\" rel=\"noopener\">Cloudwatch 控制面板</a>创建指标的控制面板</li>\n<li>您可以使用这些控制面板跟踪和改善服务性能。</li>\n</ul>\n</li>\n<li>数据驱动型决策<ul>\n<li>您可以跟踪绩效和业务 KPI 来制定数据驱动的产品决策</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"成本优化\"><a href=\"#成本优化\" class=\"headerlink\" title=\"成本优化\"></a>成本优化</h2><p>在最小化成本的同时实现业务成果。<br><img src=\"/2021/11/18/aws/8.jpg\" style=\"zoom:30%;\"></p>\n<h1 id=\"Cloud-Watch\"><a href=\"#Cloud-Watch\" class=\"headerlink\" title=\"Cloud Watch\"></a>Cloud Watch</h1><p>本质就是一个指标存储库，可根据这些指标来检索统计数据。<br><img src=\"/2021/11/18/aws/1.jpg\" style=\"zoom:50%;\"></p>\n<p>核心术语和概念：</p>\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>命名空间是用于 CloudWatch 指标的容器。不同命名空间中的指标彼此独立，因此来自不同应用程序的指标不会被错误地聚合到相同的统计信息中。</p>\n<h2 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h2><p>指标表示一个发布到 CloudWatch 并按时间排序的数据点集。</p>\n<ul>\n<li>时间戳</li>\n</ul>\n<p>每个指标数据点必须与一个时间戳关联。时间戳最长可以为过去的两周和将来的两小时。如果不提供时间戳，CloudWatch 会根据收到数据点的时间创建一个时间戳。</p>\n<ul>\n<li>指标保留</li>\n</ul>\n<p>CloudWatch 将保留指标数据，如下所示：</p>\n<ul>\n<li>时间段短于 60 秒的数据点的可用时间为 3 小时。这些数据点是高精度自定义指标。</li>\n<li>时间段为 60 秒 (1 分钟) 的数据点可用 15 天</li>\n<li>时间段为 300 秒 (5 分钟) 的数据点可用 63 天</li>\n<li>时间段为 3600 秒 (1 小时) 的数据点可用 455 天 (15 个月)</li>\n</ul>\n<h2 id=\"Dimensions\"><a href=\"#Dimensions\" class=\"headerlink\" title=\"Dimensions\"></a>Dimensions</h2><p>维度是一个名称/值对，它是指标标识的一部分。</p>\n<h2 id=\"Resolution\"><a href=\"#Resolution\" class=\"headerlink\" title=\"Resolution\"></a>Resolution</h2><p>每个指标均为以下类型之一：</p>\n<ul>\n<li>标准精度，数据粒度为一分钟</li>\n<li>高精度，数据粒度为一秒</li>\n</ul>\n<h2 id=\"Statistics\"><a href=\"#Statistics\" class=\"headerlink\" title=\"Statistics\"></a>Statistics</h2><p>统计数据是指定时间段内的指标数据汇总。</p>\n<h2 id=\"Units\"><a href=\"#Units\" class=\"headerlink\" title=\"Units\"></a>Units</h2><p>所有统计数据都有度量单位。示例单位包括 <code>Bytes</code>、<code>Seconds</code>、<code>Count</code> 和 <code>Percent</code>。</p>\n<h2 id=\"Periods\"><a href=\"#Periods\" class=\"headerlink\" title=\"Periods\"></a>Periods</h2><p><em>时间段</em>是与特定 Amazon CloudWatch 统计数据关联的时间的长度。</p>\n<h2 id=\"Aggregation\"><a href=\"#Aggregation\" class=\"headerlink\" title=\"Aggregation\"></a>Aggregation</h2><p>Amazon CloudWatch 将根据您在检索统计数据时指定的时间段长度聚合统计数据。</p>\n<h2 id=\"Percentiles\"><a href=\"#Percentiles\" class=\"headerlink\" title=\"Percentiles\"></a>Percentiles</h2><p>百分位数指示某个值在数据集中的相对位置。</p>\n<h2 id=\"Alarms\"><a href=\"#Alarms\" class=\"headerlink\" title=\"Alarms\"></a>Alarms</h2><p>警报代表自动发起操作。警报在指定的时间段内监控单个指标，并根据指标值相对于阈值的变化情况执行一项或多项指定操作。操作是一个发送到 Amazon SNS 主题或 Auto Scaling 策略的通知。</p>\n<h1 id=\"AWS与本地服务\"><a href=\"#AWS与本地服务\" class=\"headerlink\" title=\"AWS与本地服务\"></a>AWS与本地服务</h1><p><img src=\"/2021/11/18/aws/3.jpg\" alt></p>\n<p><img src=\"/2021/11/18/aws/2.jpg\" alt></p>\n","categories":["运维"],"tags":["运维"]},{"title":"委托","url":"/2021/10/04/csharp-04/","content":"<p>委托也是一种类型，初始化时需要一个方法支持。委托是记录方法信息的一种类型，调用委托时就是调用初始化委托的方法。当委托作为函数参数时，就是将方法作为参数传入，而这种方法可通过Lambda表达式对进行改写，可极大加快编程的灵活性。<a id=\"more\"></a></p>\n<h1 id=\"简单委托\"><a href=\"#简单委托\" class=\"headerlink\" title=\"简单委托\"></a>简单委托</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化委托 传入委托方法的方法名 可以不用new</span></span><br><span class=\"line\">        DelegateHello delegateHello = <span class=\"keyword\">new</span> DelegateHello(Hello);</span><br><span class=\"line\">        <span class=\"comment\">// 调用委托</span></span><br><span class=\"line\">        <span class=\"comment\">// delegateHello.Invoke(\"委托调用\");</span></span><br><span class=\"line\">        delegateHello(<span class=\"string\">\"委托调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义委托方法 需要与委托返回值、参数类型相同</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span><span class=\"params\">(<span class=\"built_in\">string</span> msg)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Hello,\"</span>+msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义委托 和定义接口中的方法一样，只需要加上 delagate 关键字</span></span><br><span class=\"line\"><span class=\"function\">delegate <span class=\"keyword\">void</span> <span class=\"title\">DelegateHello</span><span class=\"params\">(<span class=\"built_in\">string</span> msg)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"泛型委托\"><a href=\"#泛型委托\" class=\"headerlink\" title=\"泛型委托\"></a>泛型委托</h1><p>可定义一个委托，用来调用多个方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接传递方法名 不用new</span></span><br><span class=\"line\">        <span class=\"comment\">// DelegateAdd&lt;int&gt; delegateAddInt = new DelegateAdd&lt;int&gt;(Add);</span></span><br><span class=\"line\">        DelegateAdd&lt;<span class=\"keyword\">int</span>&gt; delegateAddInt = Add;</span><br><span class=\"line\">        delegateAddInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        DelegateAdd&lt;<span class=\"keyword\">double</span>&gt; delegateAddDouble = Add;</span><br><span class=\"line\">        delegateAddDouble(<span class=\"number\">1.5</span>, <span class=\"number\">1.6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(num2+num1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">double</span> num1, <span class=\"keyword\">double</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(num2 + num1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义泛型委托</span></span><br><span class=\"line\">delegate <span class=\"keyword\">void</span> DelegateAdd&lt;T&gt;(T num1, T num2);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"预定义委托\"><a href=\"#预定义委托\" class=\"headerlink\" title=\"预定义委托\"></a>预定义委托</h1><p>不用事先定义委托就可以使用方法对委托进行初始化，在.net Core中被大量使用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无返回值 16个</span></span><br><span class=\"line\">        <span class=\"comment\">//Action&lt;string, string&gt; action = new Action&lt;string, string&gt;(ConcatStr);</span></span><br><span class=\"line\">        Action&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; action = ConcatStr;</span><br><span class=\"line\">        action(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 有返回值 17个 前面的string表示输入参数类型 后面最后一个string表示返回结果类型</span></span><br><span class=\"line\">        <span class=\"comment\">//Func&lt;string,string&gt; function = new Func&lt;string,string&gt;(PrintStr);</span></span><br><span class=\"line\">        Func&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">string</span>&gt; function = PrintStr</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(function(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\">        <span class=\"comment\">// Lambda表达式改写</span></span><br><span class=\"line\">        Action&lt;<span class=\"built_in\">string</span>&gt; action1 = <span class=\"keyword\">new</span> Action&lt;<span class=\"built_in\">string</span>&gt;(msg =&gt; <span class=\"built_in\">Console</span>.WriteLine(msg));</span><br><span class=\"line\">        action1(<span class=\"string\">\"Lambda表达改写委托\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConcatStr</span><span class=\"params\">(<span class=\"built_in\">string</span> str1,<span class=\"built_in\">string</span> str2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(str1+str2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">PrintStr</span><span class=\"params\">(<span class=\"built_in\">string</span> str)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["C#"],"tags":["C#"]},{"title":"Linq","url":"/2021/10/05/csharp-05/","content":"<h1 id=\"IEnumerable\"><a href=\"#IEnumerable\" class=\"headerlink\" title=\"IEnumerable\"></a>IEnumerable</h1><p>IEnumerable：可枚举类型，一个方法GetEnumerato()，实现该接口的类就可以对它进行遍历。<br>IEnumerator：枚举器，一个属性Current，两个方法MoveNext()，Reset()。<a id=\"more\"></a></p>\n<h1 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h1><p>在不改变源码的基础上为类添加新的方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> LinqTest</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Caculate</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拓展Caculate类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaculateExt</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">AddExt</span><span class=\"params\">(<span class=\"keyword\">this</span> Caculate caculate,<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> num3)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2 + num3;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Caculate caculate = <span class=\"keyword\">new</span> Caculate();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num1 = caculate.Add(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num2 = caculate.AddExt(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(num1);<span class=\"comment\">// 2</span></span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(num2);<span class=\"comment\">// 3</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linq\"><a href=\"#Linq\" class=\"headerlink\" title=\"Linq\"></a>Linq</h1><ul>\n<li>linq to object 查询内存中的数据</li>\n<li>linq to sql 查询数据库中的数据</li>\n<li>linq to xml 查询xml文件</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始数据</span></span><br><span class=\"line\">List&lt;Student&gt; studentList = <span class=\"keyword\">new</span> List&lt;Student&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">001</span>,Name=<span class=\"string\">\"张三\"</span>,Age=<span class=\"number\">21</span>,ClassId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">002</span>,Name=<span class=\"string\">\"李四\"</span>,Age=<span class=\"number\">18</span>,ClassId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">003</span>,Name=<span class=\"string\">\"王五\"</span>,Age=<span class=\"number\">24</span>,ClassId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">004</span>,Name=<span class=\"string\">\"赵六\"</span>,Age=<span class=\"number\">16</span>,ClassId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">005</span>,Name=<span class=\"string\">\"陈小\"</span>,Age=<span class=\"number\">22</span>,ClassId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Student()&#123;Id=<span class=\"number\">006</span>,Name=<span class=\"string\">\"刘麻子\"</span>,Age=<span class=\"number\">28</span>,ClassId=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">List&lt;StuClass&gt; stuClasses = <span class=\"keyword\">new</span> List&lt;StuClass&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StuClass()&#123;Id=<span class=\"number\">1</span>,ClassName=<span class=\"string\">\"计科1班\"</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StuClass()&#123;Id=<span class=\"number\">2</span>,ClassName=<span class=\"string\">\"计科2班\"</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> StuClass()&#123;Id=<span class=\"number\">3</span>,ClassName=<span class=\"string\">\"计科3班\"</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Where 指定条件查询数据</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Student&gt; students1 = studentList.Where(stu =&gt; stu.Age &gt; <span class=\"number\">18</span>).ToList();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> ForEach 遍历数据</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">students1.ForEach(stu =&gt; <span class=\"built_in\">Console</span>.WriteLine(stu));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Select 投影 将原始类（一般为po）的属性投影到新的类（一般为dto）的属性中</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">var studentsWithIdAndName = studentList.Select(stu =&gt; <span class=\"keyword\">new</span> &#123;Id=stu.Id,Name=stu.Name&#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/10/05/csharp-05/1.png\" style=\"zoom: 60%;\">\n\n<blockquote>\n<p>Join 内连接</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">var studentsWithClass = studentList.Join(stuClasses,stu=&gt;stu.ClassId,clazz =&gt;clazz.Id,</span><br><span class=\"line\">                                         (stu,clazz)=&gt;<span class=\"keyword\">new</span> StudentWithClass()</span><br><span class=\"line\">                                         &#123; </span><br><span class=\"line\">                                             Id=stu.Id,</span><br><span class=\"line\">                                             Name=stu.Name,</span><br><span class=\"line\">                                             Age=stu.Age,</span><br><span class=\"line\">                                             ClassId=stu.ClassId,</span><br><span class=\"line\">                                             ClassName=clazz.ClassName</span><br><span class=\"line\">                                         &#125;).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 表达式写法 用于处理大于2个list的连接查询</span></span><br><span class=\"line\">var studentsWithClass2 = (from s in studentList join c in stuClasses on s.ClassId equals c.Id </span><br><span class=\"line\">                          select <span class=\"keyword\">new</span> StudentWithClass()</span><br><span class=\"line\">                          &#123;</span><br><span class=\"line\">                              Id = s.Id,</span><br><span class=\"line\">                              Name = s.Name,</span><br><span class=\"line\">                              Age = s.Age,</span><br><span class=\"line\">                              ClassId = s.ClassId,</span><br><span class=\"line\">                              ClassName = c.ClassName</span><br><span class=\"line\">                          &#125;).ToList();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/10/05/csharp-05/2.png\" style=\"zoom:70%;\">\n\n<blockquote>\n<p>Take 获取指定数量的数据</p>\n</blockquote>\n<blockquote>\n<p>Skip 跳过指定数量的数据</p>\n</blockquote>\n<blockquote>\n<p>OrderBy 根据指定元素升序排列</p>\n</blockquote>\n<blockquote>\n<p>OrderByDescending 根据指定元素降序排列</p>\n</blockquote>\n<blockquote>\n<p>Where + Contains 模糊查询</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">var students2 = studentList.Where(stu =&gt; stu.Name.Contains(<span class=\"string\">\"张\"</span>)).OrderByDescending(stu =&gt; stu.Age).ToList();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GroupBy 指定属性进行分组</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">IEnumerable&lt;IGrouping&lt;<span class=\"keyword\">int</span>,Student&gt;&gt; items = studentList.GroupBy(s =&gt; s.Age);</span><br><span class=\"line\">foreach(IGrouping&lt;<span class=\"keyword\">int</span>,Student&gt; studentByAge in items)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(studentByAge.Key);</span><br><span class=\"line\">    foreach(Student s in studentByAge)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"*************\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["C#"],"tags":["C#"]},{"title":"C#连接数据库","url":"/2021/10/05/csharp-06/","content":"<h1 id=\"ADO-NET\"><a href=\"#ADO-NET\" class=\"headerlink\" title=\"ADO.NET\"></a>ADO.NET</h1><p>是一组用于和数据源进行交互的面向对象类库<br>1、建立连接；2、打开连接；3、发送sql命令；4、执行命令；5、关闭连接<a id=\"more\"></a><br><img src=\"/2021/10/05/csharp-06/1.png\" style=\"zoom:60%;\"></p>\n<ul>\n<li>DataReader是一个向前的指针，本身并不包含数据，调用一次Read()方法它就向前到下一条记录，一个DataReader必须单独占用一个打开的数据库连接。一般用于大型数据处理。</li>\n<li>DataAdapter象一座桥梁，一头连起数据库表，一头连起一个DataSet或者DataTable，在把数据库中的数据填充到DataSet或DataTable后就可以“过河拆桥”，不用再连接到数据库，而可以直接从DataSet或DataTable中获取数据。一般用于小型数据处理。</li>\n</ul>\n<h1 id=\"连接MySql数据库\"><a href=\"#连接MySql数据库\" class=\"headerlink\" title=\"连接MySql数据库\"></a>连接MySql数据库</h1><p>常用的sql执行函数：</p>\n<ul>\n<li><p><code>ExecuteReader()</code>：用于查询数据库。查询结果是返回<code>MySqlDataReader</code>对象，<code>MySqlDataReader</code>包含sql语句执行的结果，并提供<code>Read()</code>方法从结果中阅读一行。</p>\n</li>\n<li><p><code>ExecuteNonQuery()</code>：用于插入、更新和删除数据。</p>\n</li>\n<li><p><code>ExecuteScalar()</code>：用于查询数据时，返回查询结果集中第一行第一列的值，即只返回一个值。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> TestMysql</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span>   </span><br><span class=\"line\">        <span class=\"comment\">// 连接字符串  用于连接数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> readonly <span class=\"built_in\">string</span> connectionString = <span class=\"string\">\"server=localhost;port=3306;user=root;password=2824199842;database=test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建连接</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> readonly MySqlConnection connection = <span class=\"keyword\">new</span> MySqlConnection(connectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TestSelect</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> sql = <span class=\"string\">\"select * from student\"</span>;</span><br><span class=\"line\">            MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(sql, connection);</span><br><span class=\"line\">            MySqlDataReader reader = cmd.ExecuteReader();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (reader.Read())<span class=\"comment\">// 初始索引为-1 执行读取下一条数据</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 键值对方式获取值</span></span><br><span class=\"line\">                <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"id:&#123;0&#125; name:&#123;1&#125; age:&#123;2&#125;\"</span>, reader.GetInt64(<span class=\"string\">\"id\"</span>), reader.GetString(<span class=\"string\">\"name\"</span>), reader.GetInt32(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TestInsert</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> sql = <span class=\"string\">\"insert into student(id,name,age) values(2017004,'张小伟',34)\"</span>;</span><br><span class=\"line\">            MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(sql, connection);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rows = cmd.ExecuteNonQuery();<span class=\"comment\">// 返回受影响的行数</span></span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"添加成功！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TestUpdate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> sql = <span class=\"string\">\"update student set name='张伟' where id=2017004\"</span>;</span><br><span class=\"line\">            MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(sql, connection);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rows = cmd.ExecuteNonQuery();</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"修改成功！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TestDelete</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> sql = <span class=\"string\">\"delete from student where id=2017004\"</span>;</span><br><span class=\"line\">            MySqlCommand cmd = <span class=\"keyword\">new</span> MySqlCommand(sql, connection);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rows = cmd.ExecuteNonQuery();</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"删除成功！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;           </span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 打开连接</span></span><br><span class=\"line\">                connection.Open();</span><br><span class=\"line\">                <span class=\"comment\">// 执行sql</span></span><br><span class=\"line\">                <span class=\"comment\">// TestSelect();</span></span><br><span class=\"line\">                TestInsert();</span><br><span class=\"line\">                <span class=\"comment\">// TestUpdate();</span></span><br><span class=\"line\">                <span class=\"comment\">// TestDelete();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Console</span>.WriteLine(e.Message);         </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            finally</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">                connection.Close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["C#"],"tags":["ADO.NET"]},{"title":"Attribute","url":"/2021/10/06/csharp-07/","content":"<p>Attribute的作用是为元数据添加内容，即可用来标注一段程序，可以是类，属性，方法等。可利用反射机制获取标注或者获取标注的属性，类或者方法等，用来执行不同的操作，例如数据的校验等。<a id=\"more\"></a></p>\n<h1 id=\"自定义特性\"><a href=\"#自定义特性\" class=\"headerlink\" title=\"自定义特性\"></a>自定义特性</h1><p>类名必须以<code>Attribute</code>结尾，需要继承.NET提供的<code>Attribute</code>抽象类。</p>\n<blockquote>\n<p>C#中的 字段（Field）与属性（Property）</p>\n<ul>\n<li><p>字段是值私有属性。</p>\n</li>\n<li><p>属性是指访问器，含get{}或set{}的代码块的特殊“方法”。</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 定义特性可以使用的目标</span></span><br><span class=\"line\">    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property,AllowMultiple = <span class=\"literal\">true</span>)]</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LengthAttribute</span> :</span> Attribute</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinimumLength &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Maximum &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LengthAttribute</span><span class=\"params\">(<span class=\"keyword\">int</span> minimumLength, <span class=\"keyword\">int</span> maximum)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        MinimumLength = minimumLength;</span><br><span class=\"line\">        Maximum = maximum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证特性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Validate</span><span class=\"params\">(object value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace((<span class=\"built_in\">string</span>)value))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value.ToString().Length&gt;= MinimumLength &amp;&amp; value.ToString().Length &lt;= Maximum)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"验证特性\"><a href=\"#验证特性\" class=\"headerlink\" title=\"验证特性\"></a>验证特性</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validatettribute</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> Validate&lt;T&gt;(T t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有属性</span></span><br><span class=\"line\">        var propertyInfos = typeof(T).GetProperties();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有属性</span></span><br><span class=\"line\">        foreach(var property in propertyInfos)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断特性是否定义（注：多个特性可以继承自一个抽象类，直接判断抽象类是否定义）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (property.IsDefined(typeof(LengthAttribute), <span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取属性上的所有特性</span></span><br><span class=\"line\">                var attributes = property.GetCustomAttributes();</span><br><span class=\"line\">                <span class=\"comment\">// 遍历所有特性</span></span><br><span class=\"line\">                foreach(var attribute in attributes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    LengthAttribute lengthAttribute = (LengthAttribute)attribute;</span><br><span class=\"line\">                    <span class=\"comment\">// 调用特性的验证方法 传入属性的值</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> lengthAttribute.Validate(property.GetValue(t));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用特性\"><a href=\"#使用特性\" class=\"headerlink\" title=\"使用特性\"></a>使用特性</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Id &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\">     [Length(<span class=\"number\">1</span>,<span class=\"number\">50</span>)]<span class=\"comment\">// 字符串长度校验</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Student stu = <span class=\"keyword\">new</span> Student &#123; Name = <span class=\"string\">\"\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(Validatettribute.Validate&lt;Student&gt;(stu));<span class=\"comment\">// False</span></span><br><span class=\"line\">        Student stu1 = <span class=\"keyword\">new</span> Student &#123; Name = <span class=\"string\">\"zhang\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(Validatettribute.Validate&lt;Student&gt;(stu1));<span class=\"comment\">// True</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["C#"],"tags":["C#"]},{"title":"稀疏数组","url":"/2020/04/25/datastructure-01/","content":"<h2 id=\"数据结构概述\"><a href=\"#数据结构概述\" class=\"headerlink\" title=\"数据结构概述\"></a>数据结构概述</h2><p>数据结构包括：线性结构和非线性结构.<a id=\"more\"></a><br><strong>线性结构：</strong><br>1.数据元素之间存在<strong>一对一</strong>的线性关系。<br>2.线性结构有两种不同的存储结构，即<strong>顺序存储结构(数组)</strong>和<strong>链式存储结构(链表)</strong>。<br>3.顺序存储的线性表称为顺序表，存储的元素是<strong>连续的</strong>；<br>&nbsp;&nbsp;&nbsp;链式存储的线性表称为链表，存储的元素<strong>不一定是连续的</strong>，元素节点中存放着数据元素和相邻元素的地址信息。<br>4.线性结构常见的有：数组，队列，链表和栈。<br><strong>非线性结构：</strong><br>非线性结构包括：二维数组，多维数组，广义表，树，图。</p>\n<h2 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h2><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。<br>稀疏数组的处理方法是:<br>1)记录数组一共有几行几列，有多少个不同的非零值。<br>2)把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模。</p>\n<h3 id=\"1、基本介绍：\"><a href=\"#1、基本介绍：\" class=\"headerlink\" title=\"1、基本介绍：\"></a>1、基本介绍：</h3><p><img src=\"/2020/04/25/datastructure-01/1.png\" alt></p>\n<h3 id=\"2、应用实例：\"><a href=\"#2、应用实例：\" class=\"headerlink\" title=\"2、应用实例：\"></a>2、应用实例：</h3><p><img src=\"/2020/04/25/datastructure-01/2.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseArray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建原始的二维数组11*11</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 0：表示没有棋子 1:表示黑色棋子 2：表示蓝色棋子</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> chessArr1[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">\t\tchessArr1[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tchessArr1[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"原始的二维数组：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : chessArr1) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data : row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(data + <span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将二维数组转换为稀疏数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.先遍历二维数组 得到非零数据的个数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chessArr1.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; chessArr1[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (chessArr1[i][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsum++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(sum);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.创建对应的稀疏数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sparseArr[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sum + <span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.给稀疏数组赋值</span></span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = chessArr1.length;</span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = chessArr1[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = sum;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历二维数组将非零值存放到稀疏数组中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 用于记录是第几个非零数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chessArr1.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; chessArr1[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (chessArr1[i][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">2</span>] = chessArr1[i][j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"稀疏数组：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : sparseArr) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data : row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.printf(<span class=\"string\">\"%d\\t\"</span>, data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 稀疏数组转换为二维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.读取稀疏数组的第一行，根据第一行的数据创建原始的二维数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> chessArr2[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.读取其余的几行数据，并赋值给原始的 二维数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> row = sparseArr[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> col = sparseArr[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> value = sparseArr[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\tchessArr2[row][col] = value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"恢复后的二维数组：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : chessArr2) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data : row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(data + <span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"异步编程","url":"/2021/10/10/csharp-08/","content":"<h1 id=\"Thread\"><a href=\"#Thread\" class=\"headerlink\" title=\"Thread\"></a>Thread</h1><p>线程是一个可执行路径，可以独立于其他线程执行。</p>\n<p>线程被抢占：当前线程与另外一个线程执行交织的那一刻。<a id=\"more\"></a></p>\n<h2 id=\"线程的属性\"><a href=\"#线程的属性\" class=\"headerlink\" title=\"线程的属性\"></a>线程的属性</h2><ul>\n<li>IsAlive：线程一旦开始执行，IsAlive就是True，线程结束就变成了False。线程结束的条件，线程构造函数传入的委托方法执行结束。</li>\n<li>线程一旦结束就无法再开启。</li>\n<li>Name：只能设置一次，以后再更改就会抛出异常。</li>\n<li>CurrentThread：返回当前执行的线程。</li>\n</ul>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><ul>\n<li>Join()：等待当前线程执行完成后再开始后续的执行。可设置一个超时时间，执行超时返回False。</li>\n<li>Thread.Sleep()：暂停当前线程，并等待指定的毫秒数。Thread.Sleep(0)会导致当前线程立即放弃当前的时间片，自动将cpu执行权移交给其他线程。</li>\n<li>Thread.Yield()：把当前线程的执行权交给同一处理器上的其他线程</li>\n<li>Sleep()，Join()会让线程处于阻塞状态。</li>\n</ul>\n<h2 id=\"线程执行状态\"><a href=\"#线程执行状态\" class=\"headerlink\" title=\"线程执行状态\"></a>线程执行状态</h2><img src=\"/2021/10/10/csharp-08/1.png\" style=\"zoom: 33%;\">\n\n<p>阻塞（block）：被阻塞的线程会立即将cpu的时间片生成给其他线程，从此不再消耗cpu时间，直到满足其阻塞条件为止才开始继续执行。</p>\n<ul>\n<li><p>阻塞判断：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> blocked = (thread1.ThreadState &amp; ThreadState.WaitSleepJoin) != <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解除阻塞：</p>\n<ul>\n<li>阻塞条件被满足</li>\n<li>操作超时</li>\n<li>Thread.Interrput()</li>\n<li>Thread.Abort()</li>\n</ul>\n</li>\n<li><p>阻塞或接触阻塞，操作系统会执行上下文切换，会产生少量开销，通常为1或2微秒。</p>\n</li>\n<li><p>I/O-bound与Cpu-bound</p>\n<ul>\n<li><p>I/O-bound：花费大部分时间等待某事发生的操作，例如输入输出，Thead.Sleep()。</p>\n</li>\n<li><p>Cpu-bound：花费大部分时间执行cpu密集型工作的操作。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p>本地（Local）与共享（Shared）</p>\n<ul>\n<li><p>Local：CLR为每个线程分配自己的内存栈（Stack），以便使<strong>本地变量</strong>保持独立。</p>\n</li>\n<li><p>Shared：</p>\n<ul>\n<li><p>多个线程引用<strong>同一个对象的实例</strong>，那么他们就共享了数据。</p>\n</li>\n<li><p>被<strong>Lambda表达式或匿名委托</strong>所捕获的<strong>本地变量</strong>，会被编译器转化为字段（field）,所以也会被共享。</p>\n</li>\n<li><p><strong>静态字段</strong>（field）也会在线程间共享数据。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>在读取和写入共享数据的时候，通过使用互斥锁（exclusive lock），来解决线程安全问题。</p>\n<p>C#中使用lock语句来加锁，当两个线程同时竞争一个锁（锁可以基于任何引用对象）时，其中一个线程就会等待或阻塞，直到锁变成可用状态。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadSafe</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> readonly object _lock = <span class=\"keyword\">new</span> object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Go</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        lock (_lock)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!flag)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Console</span>.WriteLine(flag);</span><br><span class=\"line\">                <span class=\"comment\">// Thread.Sleep(1000);</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(Go).Start();</span><br><span class=\"line\">        Go();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前台线程与后台线程\"><a href=\"#前台线程与后台线程\" class=\"headerlink\" title=\"前台线程与后台线程\"></a>前台线程与后台线程</h2><ul>\n<li>默认情况下，手动创建的线程就是前台线程。只要前台线程在运行，应用程序就还在运行；前台线程终止后，其余的后台线程也会全部终止，程序就会退出。</li>\n<li>以在任何时候将前台线程修改为后台线程，方式是设置Thread.IsBackground = true。</li>\n</ul>\n<h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>让线程一直处于等待状态，直到接受到其他线程发来的信号（signaling）,才会继续执行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var signal = <span class=\"keyword\">new</span> ManualResetEvent(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()=&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"等待信号~\"</span>);</span><br><span class=\"line\">            signal.WaitOne();</span><br><span class=\"line\">            signal.Dispose();</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"获取到了信号！\"</span>);</span><br><span class=\"line\">        &#125;).Start();</span><br><span class=\"line\">        Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        signal.Set();<span class=\"comment\">// 打开信号</span></span><br><span class=\"line\">        <span class=\"comment\">// signal.Reset();// 关闭信号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><ul>\n<li>不可以设置线程池的Name</li>\n<li>池线程都是后台线程</li>\n<li>阻塞池线程可使性能降级</li>\n<li>Thread.CurrentThread.IsThreadPoolThread 判断是否执行在池线程上</li>\n</ul>\n<h1 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h1><h2 id=\"Thread的问题\"><a href=\"#Thread的问题\" class=\"headerlink\" title=\"Thread的问题\"></a>Thread的问题</h2><p>线程是用来创建并发的一种低级别工具，它有一些限制。尤其是：</p>\n<ul>\n<li>虽然开始线程的时候可以方便的传入数据，但是当Join的时候，很难从线程中获得返回值。<ul>\n<li>可能需要设置一些共享字段</li>\n<li>如果操作抛出异常，捕获和传播该异常都很麻烦</li>\n</ul>\n</li>\n<li>无法告诉线程在结束时开始做另外的工作，必须进行Join操作（在进程中阻塞当前线程）。</li>\n<li>很难使用较小的并发来组件大型的并发。</li>\n<li>导致了对手动同步的更大依赖以及随之而来的问题。</li>\n</ul>\n<h2 id=\"Task类\"><a href=\"#Task类\" class=\"headerlink\" title=\"Task类\"></a>Task类</h2><p>Task类可以很好的解决Thread的问题。它代表了一个并发操作（可能由Thread支持，或不由Thread支持）。</p>\n<ul>\n<li>Task.Run()开启一个任务</li>\n<li>Task默认使用线程池，也就是后台线程。主线程结束，创建的所有Task都会结束</li>\n<li>Task.Run()返回一个Task对象，可以用来监视其过程</li>\n<li>Task.Wait()会阻塞当前线程，直到Task执行完成</li>\n</ul>\n<p>默认情况下，CLR在线程池中运行Task，这非常适合短时间运行的Cpu-Bound类工作。<br>针对长时间运行的任务或者是阻塞操作，可以不采用线程池的方式来创建任务：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行短时间的任务 采用默认的线程池创建方式</span></span><br><span class=\"line\">        <span class=\"built_in\">Task</span> task = <span class=\"built_in\">Task</span>.Run(() =&gt;  <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"执行Task~\"</span>));</span><br><span class=\"line\">        task.Wait();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行长时间的任务 不采用线程池</span></span><br><span class=\"line\">        <span class=\"built_in\">Task</span> taskLong = <span class=\"built_in\">Task</span>.Factory.StartNew(() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"执行长时间任务~\"</span>);</span><br><span class=\"line\">            Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;, TaskCreationOptions.LongRunning);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果同时运行多个long-running tasks，尤其是由处于阻塞状态的，那么性能就会受到很大的影响，这时可采用：</p>\n<ul>\n<li>如果任务是IO-Bound，等待一个在 <code>async</code> 方法中返回 <code>Task</code> 或 <code>Task&lt;T&gt;</code> 的操作。</li>\n<li>如果任务是Cpu-Bound，等待一个使用 Task.Run方法在后台线程启动的操作。</li>\n</ul>\n<h1 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h1><ul>\n<li>同步操作会在返回调用者之前完成它的工作</li>\n<li>异步操作会在返回调用者之后去做它的（大部分）工作<ul>\n<li>异步方法会启用并发，因为它的工作会与调用者并行执行</li>\n<li>异步方法通常很快就会返回到调用者，所以叫非阻塞方法</li>\n</ul>\n</li>\n<li>异步不会提升单个应用程序的运行速度，但是能提升服务器的并发访问量。</li>\n</ul>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><ul>\n<li>用<code>async</code>关键字修饰的方法称为异步方法。</li>\n<li>异步方法的返回值一般是<code>Task&lt;T&gt;</code>，T是真正的返回值类型。惯例：异步方法名称一般以Async结尾。</li>\n<li>即使异步方法没有返回值，也最好声明为非泛型的<code>Task</code>。</li>\n<li>调用泛型方法时，一般在方法前加上<code>await</code>关键字，这样拿到的返回值直接就是泛型指定的T类型。</li>\n<li>一个方法使用<code>await</code>关键字后，这个方法必须声明使用<code>async</code>修饰。</li>\n</ul>\n<h2 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h2><p>await关键字简化了附加continuation的过程<br><img src=\"/2021/10/10/csharp-08/2.png\" style=\"zoom: 33%;\"></p>\n<p>await关键字后面expression会马上返回，直接执行expression后续的语句，expression执行完成后自动回调。</p>\n<p>await调用的等待期间，.NET会把当前的线程返还给线程池，等异步方法调用执行完毕后，再从线程池中取出一个线程执行后续的代码。</p>\n<h2 id=\"Task-与async-Task\"><a href=\"#Task-与async-Task\" class=\"headerlink\" title=\"Task 与async Task\"></a>Task 与async Task</h2><p>Task：在方法前面加<code>Task</code>或是<code>Task&lt;T&gt;</code>，就是表明方法是可等待的。也是C#中的一种Task异步编程模式，结合<code>await</code>可方便的进行异步并发编程。</p>\n<p>async Task：表明方法就是异步方法。</p>\n","categories":["C#"],"tags":["C#"]},{"title":"队列","url":"/2020/04/28/datastructure-01-2/","content":"<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一个有序列表，可以用数组和链表来实现。<br>遵循<strong>先进先出</strong>原则。<a id=\"more\"></a><br><img src=\"/2020/04/28/datastructure-01-2/3.png\" alt></p>\n<h3 id=\"1、数组模拟队列\"><a href=\"#1、数组模拟队列\" class=\"headerlink\" title=\"1、数组模拟队列\"></a>1、数组模拟队列</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tArrayQueue queue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> key = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"s:显示队列   a:添加数据到队列   g:取出数据  h:查看队列头  e:退出\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"请输入要执行的操作：\"</span>);</span><br><span class=\"line\">\t\t\tkey = in.next().charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"请输入一个数字：\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num = in.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(num);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'g'</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> num1 = queue.getQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"取出的数据为：\"</span>+ num1);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.getMessage();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'h'</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> head = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"队列头为：\"</span>+ head);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.getMessage();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"程序退出\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用数组模拟队列---编写一个ArrayQueue类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">// 表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">// 队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">// 用于存放数据，模拟队列</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建队列的构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [maxSize];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.front = -<span class=\"number\">1</span>;<span class=\"comment\">// 指向队列头部的前一个位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rear = -<span class=\"number\">1</span>;<span class=\"comment\">// 指向队列尾部</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == maxSize-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> front == rear;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 添加数据到队列，入队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否已满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"队列已满！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\trear++; <span class=\"comment\">// 让rear后移</span></span><br><span class=\"line\">\t\t\tarr[rear]=num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取队列数据，出队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"队列为空！\"</span>);<span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfront++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列所有数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"队列为空\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(arr[i]+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的头数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"队列为空！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、环形队列\"><a href=\"#2、环形队列\" class=\"headerlink\" title=\"2、环形队列\"></a>2、环形队列</h3><p>1.目前数组使用一次之后就不能再使用了，没有达到复用的效果。<br>2.将数组使用算法，改进成为一个环形队列&nbsp;&nbsp;&nbsp;取模%<br><img src=\"/2020/04/28/datastructure-01-2/4.png\" alt></p>\n<blockquote>\n<p>循环队列中，由于入队时尾指针向前追赶头指针；出队时头指针向前追赶尾指针，造成队空和队满时头尾指针均相等。因此，无法通过条件front==rear来判别队列是”空”还是”满”。<br>解决这个问题的方法至少有三种：<br>① 另设一布尔变量以区别队列的空和满；<br>② 少用一个元素的空间。约定入队前，测试尾指针在循环意义下加1后是否等于头指针，若相等则认为队满</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleQueue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">// 表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">// 队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">// 用于存放数据，模拟队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\t<span class=\"comment\">// this.front = 0;// 指向队列头部</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// this.rear = 0;// 指向队列尾部的后一个位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % maxSize == front;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == front;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加数据到队列，入队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否已满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"队列已满！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tarr[rear] = num;</span><br><span class=\"line\">\t\t\trear = (rear + <span class=\"number\">1</span>) % maxSize; <span class=\"comment\">// 让rear后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取队列数据，出队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"队列为空！\"</span>);<span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.将front对应的值保存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = arr[front];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.front后移</span></span><br><span class=\"line\">\t\tfront = (front + <span class=\"number\">1</span>) % maxSize;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.返回保存的front对应的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前队列的有效数据个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (rear - front + maxSize) % maxSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列所有数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"队列为空\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 从front开始遍历</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(arr[i % maxSize] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的头数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"队列为空！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["数据结构"],"tags":["数据结构"]},{"title":"双向链表","url":"/2020/05/05/datastructure-03/","content":"<h2 id=\"1-单向链表与双向链表的区别\"><a href=\"#1-单向链表与双向链表的区别\" class=\"headerlink\" title=\"1.单向链表与双向链表的区别\"></a>1.单向链表与双向链表的区别</h2><p>1、单向链表查找方向只能是一个方向，而双向链表可以向前或向后查找。<br>2、单向链表不能自我删除，需要靠赋辅助节点，而双向链表则可以自我删除。<a id=\"more\"></a><br><img src=\"/2020/05/05/datastructure-03/1.png\" alt></p>\n<h2 id=\"2-双向链表的创建、插入、删除和显示\"><a href=\"#2-双向链表的创建、插入、删除和显示\" class=\"headerlink\" title=\"2.双向链表的创建、插入、删除和显示\"></a>2.双向链表的创建、插入、删除和显示</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> linkedlist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedListDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">\t\tHeroNode2 hero1 = <span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">1000</span>, <span class=\"string\">\"wd\"</span>);</span><br><span class=\"line\">\t\tHeroNode2 hero2 = <span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">1001</span>, <span class=\"string\">\"lz\"</span>);</span><br><span class=\"line\">\t\tHeroNode2 hero3 = <span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">1002</span>, <span class=\"string\">\"lp\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建链表</span></span><br><span class=\"line\">\t\tDoubleLinkedList heroList2 = <span class=\"keyword\">new</span> DoubleLinkedList();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加节点到 链表</span></span><br><span class=\"line\">\t\theroList2.add(hero1);</span><br><span class=\"line\">\t\theroList2.add(hero2);</span><br><span class=\"line\">\t\theroList2.add(hero3);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历链表</span></span><br><span class=\"line\">\t\theroList2.list(heroList2.head);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 修改节点</span></span><br><span class=\"line\">\t\theroList2.update(<span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">1002</span>, <span class=\"string\">\"gf\"</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 再次遍历</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"修改后： \"</span>);</span><br><span class=\"line\">\t\theroList2.list(heroList2.head);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除id=1001的节点</span></span><br><span class=\"line\">\t\theroList2.delete(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 再次遍历</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"删除id=1000的节点后： \"</span>);</span><br><span class=\"line\">\t\theroList2.list(heroList2.head);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义HeroNode2 ,每一个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HeroNode2 pre; <span class=\"comment\">// 指向前一个节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HeroNode2 next;<span class=\"comment\">// 指向下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode2</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"HeroNode2 [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个双向链表的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span> </span>&#123;</span><br><span class=\"line\">\tHeroNode2 head = <span class=\"keyword\">new</span> HeroNode2();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 从链表尾添加节点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode2 newNode)</span> </span>&#123;</span><br><span class=\"line\">\t\tHeroNode2 cur = head;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到最后一个节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125; <span class=\"comment\">// 循环结束后cur指向最后一个节点</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将新节点添加到链表中</span></span><br><span class=\"line\">\t\tcur.next = newNode;</span><br><span class=\"line\">\t\tnewNode.pre = cur;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历双向链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(HeroNode2 head)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode2 cur = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(cur);</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据id修改节点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode2 newNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode2 cur = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 遍历完成没有找到</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"没有id相同的节点~\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur.id == newNode.id) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到该节点</span></span><br><span class=\"line\">\t\t\t\tcur.name = newNode.name;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定id的节点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表位空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode2 cur = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"没有找到指定id的节点~\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (cur.id == id) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到该节点 将待删除节点前后的节点链接到一起</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (cur.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 待删除的节点是最后一个节点</span></span><br><span class=\"line\">\t\t\t\t\tcur.pre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcur.pre.next = cur.next;</span><br><span class=\"line\">\t\t\t\t\tcur.next.pre = cur.pre;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"单链表","url":"/2020/04/30/datastructure-02/","content":"<h2 id=\"1、链表介绍\"><a href=\"#1、链表介绍\" class=\"headerlink\" title=\"1、链表介绍\"></a>1、链表介绍</h2><p>链表是有序的列表，在内存中的存储结构：<a id=\"more\"></a><br><img src=\"/2020/04/30/datastructure-02/1.png\" alt></p>\n<p>小结:<br>1)链表是以节点的方式来存储,是链式存储<br>2)每个节点包含 data 域， next 域：指向下一个节点<br>3)如图：发现链表的<strong>各个节点不一定是连续存储</strong>.<br>4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定逻辑结构图：<br><img src=\"/2020/04/30/datastructure-02/2.png\" alt></p>\n<h2 id=\"2、单链表的创建，插入，删除，显示\"><a href=\"#2、单链表的创建，插入，删除，显示\" class=\"headerlink\" title=\"2、单链表的创建，插入，删除，显示\"></a>2、单链表的创建，插入，删除，显示</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> linkedlist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedListDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">\t\tHeroNode hero1 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1000</span>, <span class=\"string\">\"wd\"</span>);</span><br><span class=\"line\">\t\tHeroNode hero2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1001</span>, <span class=\"string\">\"lz\"</span>);</span><br><span class=\"line\">\t\tHeroNode hero3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1002</span>, <span class=\"string\">\"lp\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建链表</span></span><br><span class=\"line\">\t\tSingleLinkedList heroList = <span class=\"keyword\">new</span> SingleLinkedList();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加节点</span></span><br><span class=\"line\"><span class=\"comment\">//\t\theroList.add(hero1);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\theroList.add(hero3);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\theroList.add(hero2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\theroList.addByOrder(hero3);</span><br><span class=\"line\">\t\theroList.addByOrder(hero2);</span><br><span class=\"line\">\t\theroList.addByOrder(hero1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 修改</span></span><br><span class=\"line\">\t\tHeroNode hero4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1002</span>, <span class=\"string\">\"ljb\"</span>);</span><br><span class=\"line\">\t\theroList.update(hero4);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t\theroList.delete(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 显示</span></span><br><span class=\"line\">\t\theroList.list();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义HeroNode ,每一个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HeroNode next;<span class=\"comment\">// 指向下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"HeroNode [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义SingleLinkedList</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化头节点 不存放具体的数据 表示单链表的头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode head = <span class=\"keyword\">new</span> HeroNode();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加节点到单链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// head节点不能动，需要创建一个临时节点</span></span><br><span class=\"line\">\t\tHeroNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.找到当前链表的最后一个节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果没有找到，将temp后移</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当退出while循环时，temp就指向了链表的最后</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.将最后的这个节点指向新的节点</span></span><br><span class=\"line\">\t\ttemp.next = heroNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示当前链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历输出</span></span><br><span class=\"line\">\t\tHeroNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 输出节点信息</span></span><br><span class=\"line\">\t\t\tSystem.out.println(temp);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将temp 后移</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据排名添加节点到指定位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByOrder</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.找到要添加节点的前一个节点</span></span><br><span class=\"line\">\t\tHeroNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标识添加的编号是否 存在</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.next.id &gt; heroNode.id) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 位置找到 就在temp 与 temp.next 之间</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.id == heroNode.id) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 要插入的节点的编号已经存在</span></span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 后移</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断flag的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">\"准备插入的英雄的编号%d已经存在，不能添加！\"</span>, heroNode.id);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.插入到链表中 </span></span><br><span class=\"line\">\t\t\theroNode.next = temp.next;<span class=\"comment\">// 插入节点的next指向原有节点的下一个节点</span></span><br><span class=\"line\">\t\t\ttemp.next = heroNode;<span class=\"comment\">// 原有节点的next指向插入节点</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据编号修改节点信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 判断是否找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.id == heroNode.id) &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\ttemp.name = heroNode.name;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">\"没有找到编号为%d的节点！\"</span>, heroNode.id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据编号删除节点信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.找到待删除节点的前一个节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next.id == id) &#123;</span><br><span class=\"line\">\t\t\t\tflag =<span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.使原有节点的next指向  待删除节点(temp.next)  的下一个节点</span></span><br><span class=\"line\">\t\t\ttemp.next = temp.next.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">\"没有找到编号为%d的节点\"</span>,id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、求单链表有效节点个数\"><a href=\"#3、求单链表有效节点个数\" class=\"headerlink\" title=\"3、求单链表有效节点个数\"></a>3、求单链表有效节点个数</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlength++;</span><br><span class=\"line\">\t\tcur = cur.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、查找倒数第-k-个节点\"><a href=\"#4、查找倒数第-k-个节点\" class=\"headerlink\" title=\"4、查找倒数第 k 个节点\"></a>4、查找倒数第 k 个节点</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">findLastIndexNode</span><span class=\"params\">(HeroNode head, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取链表长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length = <span class=\"keyword\">this</span>.getLength(head);</span><br><span class=\"line\">\t<span class=\"comment\">// 验证 index 是否合法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>||index&gt;length) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// for循环定位到倒数第 index 个节点</span></span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length-index; i++) &#123;</span><br><span class=\"line\">\t\tcur = cur.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、单链表的反转\"><a href=\"#5、单链表的反转\" class=\"headerlink\" title=\"5、单链表的反转\"></a>5、单链表的反转</h2><p><img src=\"/2020/04/30/datastructure-02/3.png\" alt></p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverseList</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || head.next.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空或长度为 1！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tHeroNode cur = head.next;</span><br><span class=\"line\">\t\tHeroNode next = <span class=\"keyword\">null</span>;<span class=\"comment\">// 指向当前节点的下一个节点</span></span><br><span class=\"line\">\t\tHeroNode reverseHead = <span class=\"keyword\">new</span> HeroNode();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历原来的链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnext = cur.next;<span class=\"comment\">// 先暂时保存当前节点的下一个节点</span></span><br><span class=\"line\">\t\t\tcur.next = reverseHead.next;<span class=\"comment\">// 使当前节点指向新链表的第一个节点</span></span><br><span class=\"line\">\t\t\treverseHead.next = cur;<span class=\"comment\">// 使 新链表的头节点指向当前节点</span></span><br><span class=\"line\">\t\t\tcur = next;<span class=\"comment\">// 当前节点后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将新链表的第一个节点连接到原来链表的头节点上</span></span><br><span class=\"line\">\t\thead.next = reverseHead.next;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、逆序打印单链表\"><a href=\"#6、逆序打印单链表\" class=\"headerlink\" title=\"6、逆序打印单链表\"></a>6、逆序打印单链表</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"链表为空！\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个栈</span></span><br><span class=\"line\">\t\tStack&lt;HeroNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;HeroNode&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建一个指针用于遍历</span></span><br><span class=\"line\">\t\tHeroNode cur = head.next;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历单链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tstack.push(cur);<span class=\"comment\">// 将遍历的节点入栈</span></span><br><span class=\"line\">\t\t\tcur = cur.next;<span class=\"comment\">// 后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(stack.size()&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(stack.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"栈","url":"/2020/05/07/datastructure-04/","content":"<p>栈是一个<strong>先进后出</strong>的有序列表，是限制表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。<a id=\"more\"></a></p>\n<h2 id=\"栈的实现\"><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h2><p>数组模拟栈思路分析图：<br><img src=\"/2020/05/07/datastructure-04/1.png\" alt></p>\n<p>1、定义一个top表示栈顶，初始化top=-1;<br>2、入栈，top++;stack[top]=data;<br>3、出栈，int value=stack[top];top–;return value;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStackDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayStack arrayStack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">4</span>);</span><br><span class=\"line\">        String key = <span class=\"string\">\"\"</span>;<span class=\"comment\">// 输入内容</span></span><br><span class=\"line\">        Boolean loop = <span class=\"keyword\">true</span>;<span class=\"comment\">// 控制是否退出菜单</span></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"遍历栈：show  入栈：push   出栈：pop  退出：exit\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入：\"</span>);</span><br><span class=\"line\">            key = scanner.next();</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"show\"</span>:</span><br><span class=\"line\">                    arrayStack.list();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"push\"</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"请输入一个数：\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> num = scanner.nextInt();</span><br><span class=\"line\">                    arrayStack.push(num);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"pop\"</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> value = arrayStack.pop();</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"出栈元素：\"</span> + value);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"exit\"</span>:</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack;<span class=\"comment\">// 数组，用于存放栈中的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器 初始化栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 栈满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 栈空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 栈满？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"栈满！\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        stack[top] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 栈空？</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"栈空！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">        top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从栈顶开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"栈空\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            System.out.println(stack[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"二叉树","url":"/2020/05/09/datastructure-06/","content":"<p>树结构提高了数据的存储、读取速度。<a id=\"more\"></a></p>\n<h2 id=\"二叉树基本概念\"><a href=\"#二叉树基本概念\" class=\"headerlink\" title=\"二叉树基本概念\"></a>二叉树基本概念</h2><p>每个节点最多只能有两个子节点，分别为左节点，右节点。</p>\n<p>满二叉树：节点数=2^n-1，n为层数。</p>\n<p>完全二叉树：如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且<strong>最后一层的叶子节点在左边连续</strong>，<strong>倒数第二层的叶子节点在右边连续</strong>。</p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>前序遍历: <strong>先输出父节点</strong>，再遍历左子树和右子树</p>\n<p>中序遍历: 先遍历左子树，<strong>再输出父节点</strong>，再遍历右子树</p>\n<p>后序遍历: 先遍历左子树，再遍历右子树，<strong>最后输出父节点</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建二叉树</span></span><br><span class=\"line\">        BinaryTree tree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">        <span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">        Node root = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Node node1 = <span class=\"keyword\">new</span> Node(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Node node2 = <span class=\"keyword\">new</span> Node(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Node node3 = <span class=\"keyword\">new</span> Node(<span class=\"number\">4</span> );</span><br><span class=\"line\">        <span class=\"comment\">// 在树中添加节点</span></span><br><span class=\"line\">        tree.setRoot(root);</span><br><span class=\"line\">        root.setLeft(node1);</span><br><span class=\"line\">        root.setRight(node2);</span><br><span class=\"line\">        node1.setLeft(node3);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前序遍历：\"</span>);</span><br><span class=\"line\">        tree.preOrder();<span class=\"comment\">// 1243</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中序遍历：\"</span>);</span><br><span class=\"line\">        tree.midOrder();<span class=\"comment\">// 4213</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后序遍历：\"</span>);</span><br><span class=\"line\">        tree.lastOrder();<span class=\"comment\">// 4231</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryTree</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.preOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"当前二叉树为空！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.midOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"当前二叉树为空！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lastOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.lastOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"当前二叉树为空！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;<span class=\"comment\">// 存储的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node left; <span class=\"comment\">// 左节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node right; <span class=\"comment\">// 右节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(Node left)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(Node right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Node&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"no=\"</span> + no +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印根节点(当前节点)</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.midOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印根节点(当前节点)</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.midOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后续遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lastOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.lastOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.lastOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印根节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树查找指定节点\"><a href=\"#二叉树查找指定节点\" class=\"headerlink\" title=\"二叉树查找指定节点\"></a>二叉树查找指定节点</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前序遍历查找节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">    Node node = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (no == <span class=\"keyword\">this</span>.no) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点的左子节点是否为空，不为空则递归查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 找到后直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前节点的右子节点是否为空，不为空则递归查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前序遍历查找节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"当前二叉树为空！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除指定节点\"><a href=\"#删除指定节点\" class=\"headerlink\" title=\"删除指定节点\"></a>删除指定节点</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除指定节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断左子节点是否为该节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断右子节点是否为该节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果左子节点不是该节点，则对左子树进行递归删除</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left.delete(no);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果右子节点不是该节点，则对右子树进行递归删除</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right.delete(no);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除指定节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.getNo() == no) &#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root.delete(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"当前二叉树为空！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["数据结构"],"tags":["数据结构"]},{"title":"单例模式","url":"/2020/10/09/designmodel-02/","content":"<p>设计模式分为三种类型：创建型模式、结构型模式、行为型模式，共23种。<a id=\"more\"></a></p>\n<h2 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h2><p>单例设计模式属于<strong>创建型模式</strong>，就是采取一定的方法保证整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个获取该对象实例的方法(静态方法)。</p>\n<h3 id=\"单例模式的几种写法\"><a href=\"#单例模式的几种写法\" class=\"headerlink\" title=\"单例模式的几种写法\"></a>单例模式的几种写法</h3><h4 id=\"饿汉式（静态常量）\"><a href=\"#饿汉式（静态常量）\" class=\"headerlink\" title=\"饿汉式（静态常量）\"></a>饿汉式（静态常量）</h4><p>步骤：<br>1、构造器私有化；<br>2、类内部创建一个静态的对象实例并私有化；<br>3、对外暴露一个静态的公共方法getInstance()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton instance2 = Singleton.getInstance();</span><br><span class=\"line\">        System.out.println(instance1==instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建静态实例对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外暴露获取实例的静态方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优点：在类装载时就完成了对象的实例化，避免了线程同步问题。<br>缺点：由于在类加载时就完成了类的实例化，没有达到懒加载的效果，如果这个实例对象一直没有使用过，就会造成内存的浪费。</p>\n<h4 id=\"饿汉式（静态代码块）\"><a href=\"#饿汉式（静态代码块）\" class=\"headerlink\" title=\"饿汉式（静态代码块）\"></a>饿汉式（静态代码块）</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.singleton;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton instance2 = Singleton.getInstance();</span><br><span class=\"line\">        System.out.println(instance1==instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建静态对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在静态代码块中实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对外暴露获取实例的静态方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"懒汉式（线程不安全）\"><a href=\"#懒汉式（线程不安全）\" class=\"headerlink\" title=\"懒汉式（线程不安全）\"></a>懒汉式（线程不安全）</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton instance2 = Singleton.getInstance();</span><br><span class=\"line\">        System.out.println(instance1==instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有化静态变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴露获取实例对象的静态方法，使用该方法才创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对象实例不存在就创建，否则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>达到了懒加载的效果，但是存在线程安全问题，在多线程环境下可能会创建多个对象实例。</p>\n<h4 id=\"懒汉式（线程安全，同步方法）\"><a href=\"#懒汉式（线程安全，同步方法）\" class=\"headerlink\" title=\"懒汉式（线程安全，同步方法）\"></a>懒汉式（线程安全，同步方法）</h4><p>使用<code>synchronized</code>关键字修饰getInstance()方法</p>\n<h4 id=\"双重检查\"><a href=\"#双重检查\" class=\"headerlink\" title=\"双重检查\"></a>双重检查</h4><p>解决了线程安全问题，懒加载问题，同时保证了效率，在实际开发中推荐使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton instance2 = Singleton.getInstance();</span><br><span class=\"line\">        System.out.println(instance1 == instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有化静态变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用volatile保证变量在多个线程之间的可见性，防止指令重排列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴露获取实例对象的静态方法，使用该方法才创建对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 双重检查，对象实例不存在就创建，否则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><p>静态内部类不会自动加载，只有调用静态内部类的方法，静态域，或者构造方法的时候才会加载，并且只加载一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.getInstance();</span><br><span class=\"line\">        Singleton instance2 = Singleton.getInstance();</span><br><span class=\"line\">        System.out.println(instance1 == instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用静态内部类，提供一个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonInstance</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴露获取实例对象的静态方法，使用该方法才加载静态内部类，并返回一个实例对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonInstance.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonTest6</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton instance1 = Singleton.INSTANCE;</span><br><span class=\"line\">        Singleton instance2 = Singleton.INSTANCE;</span><br><span class=\"line\">        System.out.println(instance1 == instance2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Singleton &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单例模式的使用场景\"><a href=\"#单例模式的使用场景\" class=\"headerlink\" title=\"单例模式的使用场景\"></a>单例模式的使用场景</h3><ul>\n<li>需要频繁创建和销毁的对象</li>\n<li>创建对象时耗时过多或耗费资源过多</li>\n<li>工具类对象</li>\n<li>频繁访问数据库或文件的对象（比如数据源、session工厂等）</li>\n</ul>\n","categories":["设计模式"],"tags":["设计模式"]},{"title":"递归","url":"/2020/05/08/datastructure-05/","content":"<p>递归就是方法自己调用自己，每次调用时传入不同的变量。<a id=\"more\"></a></p>\n<p>递归调用规则：<br>1、当程序执行到一个方法时，就会开辟一个独立的空间(栈)<br>2、每个空间的数据(局部变量)，是独立的。<br>3、如果方法中使用的是引用数据类型的变量，就会共享该变量。<br>4、递归必须向退出递归的条件逼近<br>5、当一个方法执行完毕，或者遇到return，就会返回到调用它的那个方法中，继续执行该方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursionTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(factorial(3));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            test(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"n=\"</span> + n);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 阶乘</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factorial(n-<span class=\"number\">1</span>)*n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/08/datastructure-05/1.png\" alt></p>\n<p>输出结果：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">n</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">n</span>=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">n</span>=<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>加入else后输出n=2</p>\n<blockquote>\n<p>斐波那契数列实现</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getFeibo</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"参数非法！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num==<span class=\"number\">1</span>||num==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getFeibo(num-<span class=\"number\">1</span>)+getFeibo(num-<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"设计模式七大原则","url":"/2020/10/07/designmodel-01/","content":"<h2 id=\"设计模式七大原则\"><a href=\"#设计模式七大原则\" class=\"headerlink\" title=\"设计模式七大原则\"></a>设计模式七大原则</h2><h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><p>对一个类来说，一个类应该只负责一项职责。例如dao中的UserDao，OrderDao等等。<a id=\"more\"></a></p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><p>一个类对于另一个类的依赖应该建立在最小接口上，即 将具有多个功能的接口拆分为多个接口。</p>\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><p>高层模块不应该依赖于低层模块，二者都应该依赖其抽象类。<br>依赖倒转的中心思想是面向接口编程。使用接口或抽象类定制号规范，而不涉及具体的操作，将具体的操作交给其实现类去实现。</p>\n<p>依赖关系的三种传递方式：</p>\n<ul>\n<li><p>接口传递</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InternetTV internetTV = <span class=\"keyword\">new</span> InternetTV();</span><br><span class=\"line\">        OpenAndClose openAndClose = <span class=\"keyword\">new</span> OpenAndCloseImpl();</span><br><span class=\"line\">        openAndClose.open(internetTV);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 功能接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(TV tv)</span></span>;<span class=\"comment\">// 接收接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternetTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"InternetTV中的play()被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现功能接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndCloseImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(TV tv)</span> </span>&#123;</span><br><span class=\"line\">        tv.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器传递</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InternetTV internetTV = <span class=\"keyword\">new</span> InternetTV();</span><br><span class=\"line\">        OpenAndClose openAndClose = <span class=\"keyword\">new</span> OpenAndCloseImpl(internetTV);</span><br><span class=\"line\">        openAndClose.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 功能接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternetTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"InternetTV中的play()被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现功能接口</span></span><br><span class=\"line\"><span class=\"comment\">// 通过构造方法接收接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndCloseImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TV tv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OpenAndCloseImpl</span><span class=\"params\">(TV tv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        tv.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>setter方式传递</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InternetTV internetTV = <span class=\"keyword\">new</span> InternetTV();</span><br><span class=\"line\">        OpenAndCloseImpl openAndClose = <span class=\"keyword\">new</span> OpenAndCloseImpl();</span><br><span class=\"line\">        openAndClose.setTv(internetTV);</span><br><span class=\"line\">        openAndClose.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 功能接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现实体接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternetTV</span> <span class=\"keyword\">implements</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"InternetTV中的play()被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现功能接口</span></span><br><span class=\"line\"><span class=\"comment\">// 通过setter方法接收接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndCloseImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OpenAndClose</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TV tv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTv</span><span class=\"params\">(TV tv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        tv.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3></li>\n</ul>\n<p>让原来的子类和父类都继承一个通用的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。</p>\n<h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p>对扩展开放，修改关闭。<br>使用抽象类提供模板，在进行拓展时，继承抽象类实现具体的方法即可。</p>\n<h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><p>一个对象应该对其他对象保持最少的了解，用来降低程序之间的耦合度。</p>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><p>尽量使用合成或聚合关系，少使用继承关系。</p>\n<h2 id=\"类的关系\"><a href=\"#类的关系\" class=\"headerlink\" title=\"类的关系\"></a>类的关系</h2><h3 id=\"依赖关系-Dependency\"><a href=\"#依赖关系-Dependency\" class=\"headerlink\" title=\"依赖关系 Dependency\"></a>依赖关系 Dependency</h3><p>只要是在类中使用到了对方，他们之间就存在依赖关系。<br><img src=\"/2020/10/07/designmodel-01/1.png\" alt></p>\n<p>A依赖于B，A作为箭头的起点，即箭头从主语开始，指向宾语。所有的关系都是这样子的！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceBean</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonDao personDao;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IDCard <span class=\"title\">getIDCard</span><span class=\"params\">(Integer personId)</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Department department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonDao</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDcard</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛化关系-Generalization\"><a href=\"#泛化关系-Generalization\" class=\"headerlink\" title=\"泛化关系 Generalization\"></a>泛化关系 Generalization</h3><p>就是继承关系，它是依赖关系的特例。<br><img src=\"/2020/10/07/designmodel-01/2.png\" alt></p>\n<h3 id=\"实现关系-Realization\"><a href=\"#实现关系-Realization\" class=\"headerlink\" title=\"实现关系 Realization\"></a>实现关系 Realization</h3><p>就是A类实现B类，也是依赖关系的特例<br><img src=\"/2020/10/07/designmodel-01/3.png\" alt></p>\n<h3 id=\"关联关系-Association\"><a href=\"#关联关系-Association\" class=\"headerlink\" title=\"关联关系 Association\"></a>关联关系 Association</h3><p>类与类之间的联系，也是依赖关系的特例。<br>关联具有导航性，即单向或双向。<br>关联具有多重性，一对一或一对多</p>\n<p>单向一对一：<br><img src=\"/2020/10/07/designmodel-01/4.png\" alt></p>\n<p>双向一对一：<br><img src=\"/2020/10/07/designmodel-01/5.png\" alt></p>\n<h3 id=\"聚合关系-Aggregation\"><a href=\"#聚合关系-Aggregation\" class=\"headerlink\" title=\"聚合关系 Aggregation\"></a>聚合关系 Aggregation</h3><p>表示整体和局部之间的关系，整体和局部可以分开，是关联关系的特例。</p>\n<blockquote>\n<p>Moniter、Mouse聚合于Computer<br><img src=\"/2020/10/07/designmodel-01/6.png\" alt></p>\n</blockquote>\n<h3 id=\"组合关系-Composition\"><a href=\"#组合关系-Composition\" class=\"headerlink\" title=\"组合关系 Composition\"></a>组合关系 Composition</h3><p>如果聚合关系中整体和局部是不可分开的，就升级为组合关系。<br><img src=\"/2020/10/07/designmodel-01/7.png\" alt></p>\n","categories":["设计模式"],"tags":["设计模式"]},{"title":".Net Core基础知识","url":"/2021/10/17/dotnetcore-01/","content":"<h1 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h1><h2 id=\"IOC基本介绍\"><a href=\"#IOC基本介绍\" class=\"headerlink\" title=\"IOC基本介绍\"></a>IOC基本介绍</h2><p>IOC的实现方式：</p>\n<ul>\n<li>服务定位器(ServiceLocator)，例如： <code>ServiceLocator.GetService&lt;XXXService&gt;</code></li>\n<li>DI (Dependency Injection)</li>\n</ul>\n<p>IOC中的一些概念：<a id=\"more\"></a></p>\n<ul>\n<li>服务：我们需要容器帮我们创建的对象</li>\n<li>注册服务：将对象注册到容器中</li>\n<li>服务容器：负责管理注册的对象</li>\n<li>查询服务：创建和关联对象</li>\n<li>对象生命周期：<ul>\n<li>Transient：瞬态，用完就销毁，每次获取都是重新创建一个新的对象</li>\n<li>Scoped：范围，用完不销毁，指定范围内获取的都是同一个对象</li>\n<li>Singleton：单例，全局获取的都是同一个对象。建议在创建无状态对象时使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NET-Core中IOC的使用\"><a href=\"#NET-Core中IOC的使用\" class=\"headerlink\" title=\".NET Core中IOC的使用\"></a>.NET Core中IOC的使用</h2><p>.NET控制服务反转组件取名为DependencyInjection，同时包含了ServiceLocator的功能。</p>\n<h3 id=\"ServiceLocator\"><a href=\"#ServiceLocator\" class=\"headerlink\" title=\"ServiceLocator\"></a>ServiceLocator</h3><p>1、Install-Package<br>Microsoft.Extensions.DependencyInjection</p>\n<p>2、获取服务<br>创建<code>ServiceCollection</code>对象，注册服务，调用<code>ServiceCollection</code>中的<code>BuilderServiceProvider()</code>方法，创建<code>ServiceProvider</code>容器，获取服务。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、创建ServiceCollection对象</span></span><br><span class=\"line\">        ServiceCollection services = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">        <span class=\"comment\">// 2、注册服务</span></span><br><span class=\"line\">        services.AddTransient&lt;IUserService,UserService&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 3、创建SerivceProvider容器</span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (ServiceProvider provider = services.BuildServiceProvider())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4、从容器中获取服务</span></span><br><span class=\"line\">            UserInfo user = <span class=\"keyword\">new</span>() &#123; Name=<span class=\"string\">\"zhangyuzhen\"</span>,Age=<span class=\"number\">22</span> &#125;;</span><br><span class=\"line\">            var userInfo = provider.GetService&lt;IUserService&gt;().ShowUserInfo(user);</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(userInfo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h3><p>1.依赖注入是具有传染性的，如果一个类的实例对象是通过DI创建的，那么这个类的构造器中所有声明的服务都将会使用DI创建</p>\n<p>2.默认构造函数注入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> readonly IUserService _userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> readonly ILogService _logService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Core DI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserController</span><span class=\"params\">(IUserService userService, ILogService logService)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _userService = userService;</span><br><span class=\"line\">        _logService = logService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _userService.Print(<span class=\"string\">\"调用userService接口!\"</span>);</span><br><span class=\"line\">        _logService.Log(<span class=\"string\">\"调用LogService接口！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ServiceCollection services = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">        services.AddSingleton&lt;ILogService,LogService&gt;();</span><br><span class=\"line\">        services.AddSingleton&lt;IUserService,UserService&gt;();</span><br><span class=\"line\">        services.AddSingleton&lt;UserController&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (ServiceProvider provider = services.BuildServiceProvider())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            provider.GetService&lt;UserController&gt;().Test();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置系统\"><a href=\"#配置系统\" class=\"headerlink\" title=\"配置系统\"></a>配置系统</h1><h2 id=\"Json文件配置\"><a href=\"#Json文件配置\" class=\"headerlink\" title=\"Json文件配置\"></a>Json文件配置</h2><p>1、Install Package</p>\n<p>Microsoft.Extensions.Configuration</p>\n<p>Microsoft.Extensions.Configuration.Json<br>绑定读取配置，可将配置文件内容封装到类中：Microsoft.Extensions.Configuration.Binder</p>\n<p>2、读取配置文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Name\"</span>: <span class=\"string\">\"张昱侦\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"used\"</span>: <span class=\"string\">\"武汉\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"now\"</span>: <span class=\"string\">\"成都\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"Server\"</span>: &#123;<span class=\"attr\">\"Ip\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,<span class=\"attr\">\"Port\"</span>: <span class=\"number\">8801</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ConfigurationBuilder configurationBuilder = <span class=\"keyword\">new</span> ConfigurationBuilder();</span><br><span class=\"line\">        configurationBuilder.AddJsonFile(<span class=\"string\">\"config.json\"</span>,optional:<span class=\"literal\">true</span>,reloadOnChange:<span class=\"literal\">true</span>);</span><br><span class=\"line\">        IConfigurationRoot <span class=\"built_in\">config</span> = configurationBuilder.Build();</span><br><span class=\"line\">        <span class=\"built_in\">string</span> name = <span class=\"built_in\">config</span>[<span class=\"string\">\"Name\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Name: \"</span>+ name);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = <span class=\"keyword\">int</span>.Parse(<span class=\"built_in\">config</span>[<span class=\"string\">\"Age\"</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"Age: \"</span> + age);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> addressNow = <span class=\"built_in\">config</span>.GetSection(<span class=\"string\">\"Address:now\"</span>).Value;</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(<span class=\"string\">\"AddressNow: \"</span>+ addressNow);</span><br><span class=\"line\">        <span class=\"comment\">// 绑定读取配置</span></span><br><span class=\"line\">        <span class=\"built_in\">Server</span> server = <span class=\"built_in\">config</span>.GetSection(<span class=\"string\">\"Server\"</span>).Get&lt;<span class=\"built_in\">Server</span>&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">Console</span>.WriteLine(server);<span class=\"comment\">// 服务器地址为：127.0.0.1:8801</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Ip &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Port &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">ToString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"string\">\"服务器地址为：&#123;Ip&#125;:&#123;Port&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选项方式读取（推荐使用）\"><a href=\"#选项方式读取（推荐使用）\" class=\"headerlink\" title=\"选项方式读取（推荐使用）\"></a>选项方式读取（推荐使用）</h2><p>1、Install Package<br>Microsoft.Extensions.Options<br>Microsoft.Extensions.Configuration<br>Microsoft.Extensions.Configuration.Json<br>Microsoft.Extensions.Configuration.Binder</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigService</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> readonly IOptionsSnapshot&lt;<span class=\"built_in\">Server</span>&gt; _option;</span><br><span class=\"line\">    <span class=\"comment\">// Core DI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConfigService</span><span class=\"params\">(IOptionsSnapshot&lt;<span class=\"built_in\">Server</span>&gt; option)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _option = option;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">Server</span> <span class=\"title\">GetServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _option.Value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ConfigurationBuilder configurationBuilder = <span class=\"keyword\">new</span> ConfigurationBuilder();</span><br><span class=\"line\">        configurationBuilder.AddJsonFile(<span class=\"string\">\"config.json\"</span>,optional:<span class=\"literal\">true</span>,reloadOnChange:<span class=\"literal\">true</span>);</span><br><span class=\"line\">        IConfigurationRoot <span class=\"built_in\">config</span> = configurationBuilder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">        ServiceCollection services = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">        <span class=\"comment\">// 绑定配置源到指定对象上</span></span><br><span class=\"line\">        services.AddOptions().Configure&lt;<span class=\"built_in\">Server</span>&gt;(s =&gt; <span class=\"built_in\">config</span>.GetSection(<span class=\"string\">\"Server\"</span>).Bind(s));</span><br><span class=\"line\">        services.AddScoped&lt;ConfigService&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">using</span>(ServiceProvider serviceProvider = services.BuildServiceProvider())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Server</span> server = serviceProvider.GetService&lt;ConfigService&gt;().GetServer();</span><br><span class=\"line\">            <span class=\"built_in\">Console</span>.WriteLine(server);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Ip &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Port &#123; <span class=\"built_in\">get</span>; <span class=\"built_in\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">ToString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"string\">\"服务器地址为：&#123;Ip&#125;:&#123;Port&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h1><p>明天再学，累了。</p>\n","categories":[".Net Core"],"tags":[".Net Core"]},{"title":"Dubbo简介","url":"/2020/10/15/dubbo/","content":"<h2 id=\"分布式简介\"><a href=\"#分布式简介\" class=\"headerlink\" title=\"分布式简介\"></a>分布式简介</h2><p>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统。<a id=\"more\"></a></p>\n<h2 id=\"发展的演变\"><a href=\"#发展的演变\" class=\"headerlink\" title=\"发展的演变\"></a>发展的演变</h2><p><img src=\"/2020/10/15/dubbo/1.jpg\" alt></p>\n<blockquote>\n<p>单一应用架构</p>\n</blockquote>\n<p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。<br><img src=\"/2020/10/15/dubbo/2.jpg\" style=\"zoom:80%;\"></p>\n<p>缺点：1、拓展性能比较难；2、协同开发问题；3、不利于升级维护</p>\n<blockquote>\n<p>垂直应用架构</p>\n</blockquote>\n<p>当访问量逐渐增大，单独增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。<br><img src=\"/2020/10/15/dubbo/3.png\" alt></p>\n<p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p>\n<p>缺点： 公用模块无法重复利用，开发性的浪费。</p>\n<blockquote>\n<p>SOA架构</p>\n</blockquote>\n<p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]</strong>是关键。<br><img src=\"/2020/10/15/dubbo/5.png\" alt></p>\n<h2 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h2><p>Remote Procedure Call 是指远程过程调用，是进程之间的一种通讯方式。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即在A服务器中调用B服务器中的代码，本质上编写的调用代码基本相同，RPC框架帮我们屏蔽了调用实现的细节。</p>\n<p>调用的过程：<br><img src=\"/2020/10/15/dubbo/6.png\" alt></p>\n<p>RPC的核心模块是：通讯，序列化。<br>常见的RPC框架：dubbo、gRPC、Thrift、HSF</p>\n<h2 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h2><p>Apache Dubbo 是一个基于Java的高性能，轻量级的RPC框架。Dubbo提供了三个关键功能，包括基于接口的远程呼叫，容错和负载平衡以及自动服务注册和发现。</p>\n<p>Dubbo架构：<br><img src=\"/2020/10/15/dubbo/7.png\" alt></p>\n<p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心<strong>注册</strong>自己提供的服务。</p>\n<p><strong>服务消费者（Consumer）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心<strong>订阅</strong>自己所需的服务，服务消费者从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>\n<p><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者.</p>\n<p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>\n","categories":["分布式中间件"],"tags":["Dubbo"]},{"title":"Springboot整合ElasticSearch","url":"/2020/12/27/elasticsearch-02/","content":"<p>1、创建项目时勾选：<a id=\"more\"></a><br><img src=\"/2020/12/27/elasticsearch-02/1.png\" alt></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建<code>RestHighLevelClient</code>对象并注入容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElasticSearchConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestHighLevelClient <span class=\"title\">elasticsearchClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义客户端配置对象</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class=\"line\">                .connectedTo(<span class=\"string\">\"localhost:9200\"</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 RestClients创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、使用<code>RestHighLevelClient</code>进行crud</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elasticsearch01ApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"李四四\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">29</span>);</span><br><span class=\"line\">        IndexRequest indexRequest = <span class=\"keyword\">new</span> IndexRequest(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"user\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        indexRequest.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class=\"line\">        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(indexResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">        UpdateRequest updateRequest = <span class=\"keyword\">new</span> UpdateRequest(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"user\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class=\"line\">        UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(updateResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelete</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        DeleteRequest deleteRequest = <span class=\"keyword\">new</span> DeleteRequest(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(deleteResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SearchRequest searchRequest = <span class=\"keyword\">new</span> SearchRequest(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 搜索条件</span></span><br><span class=\"line\">        SearchSourceBuilder searchSourceBuilder = <span class=\"keyword\">new</span> SearchSourceBuilder();</span><br><span class=\"line\">        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"张\"</span>))</span><br><span class=\"line\">                .sort(<span class=\"string\">\"age\"</span>, SortOrder.DESC)</span><br><span class=\"line\">                .postFilter(QueryBuilders.rangeQuery(<span class=\"string\">\"age\"</span>).gt(<span class=\"number\">22</span>))</span><br><span class=\"line\">            \t.highlighter(<span class=\"keyword\">new</span> HighlightBuilder().field(<span class=\"string\">\"name\"</span>));    .from(<span class=\"number\">0</span>)</span><br><span class=\"line\">                .size(<span class=\"number\">2</span>);</span><br><span class=\"line\">        searchRequest.source(searchSourceBuilder);</span><br><span class=\"line\">        <span class=\"comment\">// 发起搜索请求</span></span><br><span class=\"line\">        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        TotalHits totalHits = searchResponse.getHits().getTotalHits();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"文档总数：\"</span> + totalHits);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxScore = searchResponse.getHits().getMaxScore();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最高命中得分：\"</span> + maxScore);</span><br><span class=\"line\">        SearchHit[] searchHits = searchResponse.getHits().getHits();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class=\"line\">            System.out.println(searchHit.getSourceAsMap());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、使用<code>ElasticSearchRepository</code>进行简单的crud<br>4.1 在实体类中添加注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"comment\">// 映射文档</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span>(indexName = <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(type = FieldType.Text,analyzer = <span class=\"string\">\"ik_max_word\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span>(type = FieldType.Integer)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.2 添加自定义接口并继承<code>ElasticsearchRepository&lt;T,T&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">ElasticsearchRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.3 使用自定义的接口操作数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUserRepository</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSave</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        <span class=\"comment\">// id不存在保存，存在则更新</span></span><br><span class=\"line\">        user.setId(UUID.randomUUID().toString().replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"张伟\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">10</span>);</span><br><span class=\"line\">        userRepository.save(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelete</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// deleteAll 删除所有</span></span><br><span class=\"line\">        userRepository.deleteById(<span class=\"string\">\"d6d99c19-6a8d-4ab5-bd71-f2586e07b28b\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindOne</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Optional&lt;User&gt; userOptional = userRepository.findById(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        System.out.println(userOptional.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排序</span></span><br><span class=\"line\">        Iterable&lt;User&gt; all = userRepository.findAll(Sort.by(Sort.Order.desc(<span class=\"string\">\"age\"</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// 分页</span></span><br><span class=\"line\">        Page&lt;User&gt; all1 = userRepository.findAll(PageRequest.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">        all1.forEach(user -&gt; System.out.println(user));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["分布式中间件"],"tags":["ElasticSearch"]},{"title":"Docker","url":"/2021/10/26/docker/","content":"<h1 id=\"Docker概述\"><a href=\"#Docker概述\" class=\"headerlink\" title=\"Docker概述\"></a>Docker概述</h1><p>用于构建和发布应用的<strong>容器技术</strong>。</p>\n<ul>\n<li>Docker将程序和运行环境直接打包在一起，可保证一致运行环境，更轻松的迁移。</li>\n<li>对进程进行隔离封装，容器与容器之间互不影响，更高效的利用系统资源。</li>\n<li>通过镜像复制N多个环境一致的容器，方便部署。<a id=\"more\"></a></li>\n</ul>\n<h1 id=\"Linux下安装\"><a href=\"#Linux下安装\" class=\"headerlink\" title=\"Linux下安装\"></a>Linux下安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class=\"line\">sudo sh get-docker.sh --mirror Aliyun</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">service docker status</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sudo service docker start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><blockquote>\n<p> 镜像 image</p>\n</blockquote>\n<p>一个镜像代表一个软件</p>\n<blockquote>\n<p>容器 container</p>\n</blockquote>\n<p>基于某个镜像运行一次就是生成一个容器</p>\n<blockquote>\n<p>仓库 repository</p>\n</blockquote>\n<p>用来存储docker中的所有镜像的具体位置。</p>\n<p>远程仓库：docker在世界范围维护一个唯一的远程仓库</p>\n<p>本地仓库：当前自己机器中下载镜像的存储位置</p>\n<h1 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello-world\"></a>hello-world</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>1、<code>docker run 镜像名</code> 根据run后面的镜像运行一个容器</p>\n<p>2、在运行之前先在自己本地仓库查找对应的镜像直接使用，找不到再去远程仓库下载使用。</p>\n<h1 id=\"Docker相关命令\"><a href=\"#Docker相关命令\" class=\"headerlink\" title=\"Docker相关命令\"></a>Docker相关命令</h1><blockquote>\n<p>docker引擎以及帮助相关</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker info</span><br><span class=\"line\"></span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\">docker --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>images相关</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地仓库的所有镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"comment\"># 查看本地仓库的所有镜像id</span></span><br><span class=\"line\">docker images -q</span><br><span class=\"line\"><span class=\"comment\"># 下载镜像</span></span><br><span class=\"line\">docker pull 镜像名:版本号</span><br><span class=\"line\"><span class=\"comment\"># 搜索镜像版本</span></span><br><span class=\"line\">docker search 镜像名</span><br><span class=\"line\"><span class=\"comment\"># 删除镜像(简写docker rmi) -f强制删除 </span></span><br><span class=\"line\">docker image rm -f 镜像名:版本号或容器名称</span><br><span class=\"line\"><span class=\"comment\"># 清空本地仓库</span></span><br><span class=\"line\">docker rmi -f $(docker images -q)</span><br><span class=\"line\"><span class=\"comment\"># 载入镜像</span></span><br><span class=\"line\">docker load -i 文件名</span><br><span class=\"line\"><span class=\"comment\"># 导出镜像压缩包</span></span><br><span class=\"line\">docker save -o 文件名.tar 镜像名:版本号</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>container相关</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run 镜像名:版本号</span><br><span class=\"line\">docker run 镜像id</span><br><span class=\"line\"><span class=\"comment\"># 查看运行的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\"># 查看所有的容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\"># 查看所有的容器id</span></span><br><span class=\"line\">docker ps -q</span><br><span class=\"line\"><span class=\"comment\">#启动 关闭 重启 容器</span></span><br><span class=\"line\">docker start 容器名或者容器id</span><br><span class=\"line\">docker stop 容器名或者容器id</span><br><span class=\"line\">docker restart 容器名或者容器id</span><br><span class=\"line\"><span class=\"comment\"># 立即停止</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> 容器名或者容器id</span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">docker rm -f 容器名或者容器id</span><br><span class=\"line\"><span class=\"comment\"># 容器日志</span></span><br><span class=\"line\">docker logs -f 容器名或者容器id</span><br><span class=\"line\"><span class=\"comment\"># 容器内进程</span></span><br><span class=\"line\">docker top 容器名或者容器id</span><br><span class=\"line\"><span class=\"comment\"># 容器内部交互</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 容器名或者容器id bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>常见软件的启动</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysql</span></span><br><span class=\"line\">docker run -p 3306:3306 --name mysql  -v /mydata/mysql/<span class=\"built_in\">log</span>:/var/<span class=\"built_in\">log</span>/mysql  -v /mydata/mysql/data:/var/lib/mysql  -v /mydata/mysql/conf:/etc/mysql  -e MYSQL_ROOT_PASSWORD=root  -d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data  -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf  -d redis:7.0 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Docker中的网络\"><a href=\"#Docker中的网络\" class=\"headerlink\" title=\"Docker中的网络\"></a>Docker中的网络</h1><p>Docker允许通过外部访问容器或容器互联的方式来提供网络服务。</p>\n<p>一般在使用docker网桥实现容器与容器之间通信时，都是站在一个应用的角度进行容器通信。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker网桥配置</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\"><span class=\"comment\"># 创建自定义网桥</span></span><br><span class=\"line\">docker create 网桥名称</span><br><span class=\"line\"><span class=\"comment\"># 指定网桥启动</span></span><br><span class=\"line\">docker run --network 网桥名称 --name 容器名称 镜像名:版本</span><br><span class=\"line\"><span class=\"comment\"># 删除网桥</span></span><br><span class=\"line\">docker network rm 网桥名</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h1><p>用于构建自定义镜像</p>\n<p>编写Dockfile文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk </span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> redis_springboot-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"java\"</span>,<span class=\"string\">\"-jar\"</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">  [<span class=\"string\">\"app.jar\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>FROM 基于哪个镜像进行构建</li>\n<li>WORKDIR 定义静进入容器时的默认位置，接下来后续操作的工作空间</li>\n<li>ADD 将上下文中的jar文件复制到工作空间，压缩文件会自动解压，COPY则不会</li>\n<li>EXPOSE 暴露端口</li>\n<li>RUN 创建新的镜像层，用于安装软件包</li>\n<li>ENTRYPOINT 添加启动应用的固定命令，可接受docker run命令的参数</li>\n<li>CMD 执行jar</li>\n</ul>\n<p>项目打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 跳过test进行打包</span></span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>将Dockerfile文件与项目的.jar文件放在同一目录下</p>\n<p>执行构建命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t 镜像名:版本 .</span><br></pre></td></tr></table></figure>\n\n","categories":["容器"],"tags":["Docker"]},{"title":"ElasticSearch基础知识","url":"/2020/12/23/elasticsearch/","content":"<h2 id=\"ElasticSearch的安装与启动\"><a href=\"#ElasticSearch的安装与启动\" class=\"headerlink\" title=\"ElasticSearch的安装与启动\"></a>ElasticSearch的安装与启动</h2><p>配置ElasticSearch支持跨域：config/elasticsearch.yml<a id=\"more\"></a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></span><br></pre></td></tr></table></figure>\n\n<p>下载或在Google Chrome中添加ElasticSearch Head 插件，用于连接ElasticSearch搜索引擎，并提供可视化的操作页面对ElasticSearch搜索引擎进行各种设置和数据检索功能的管理。<br>启动ElasticSearch后，进行连接测试：<br><img src=\"/2020/12/23/elasticsearch/1.png\" alt></p>\n<h2 id=\"ElasticSearch核心概念\"><a href=\"#ElasticSearch核心概念\" class=\"headerlink\" title=\"ElasticSearch核心概念\"></a>ElasticSearch核心概念</h2><p>elasticsearch是面向文档的。<br><strong>indices索引</strong>类似于关系型数据库中的<strong>数据库</strong>，默认将索引划分为多个分片，每个分片可以在集群中的不同的服务器之间进行迁移；一个分片就是一个Lucene索引，一个包含<strong>倒排索引</strong>的文件目录，有利于全文搜索。<br><strong>document文档</strong>类似于关系型数据库中的<strong>行</strong>，索引和搜索的基本单位就是文档，就是一条条json数据；<br><strong>fields</strong>类似于关系型数据库中的<strong>字段</strong>；<br>type类似于数据库中的表 （慢慢被废弃）。</p>\n<h2 id=\"ELK的简介\"><a href=\"#ELK的简介\" class=\"headerlink\" title=\"ELK的简介\"></a>ELK的简介</h2><p>ELK是ElasticSearch、Logstash、Kiban三大开源框架的简称，一般用于日志的分析和收集等场景。<br>ElasticSearch是基于Lucene的分布式搜索引擎。<br>Logstash是ELK的中央数据流引擎，用于从不同目标（文件、MQ）中收集不同格式数据，经过过滤后输出到目的地（文件、MQ、reids、elasticsearch等）。<br>Kibana可将ElasticSearch中的数据进行友好的展示，并提供实时的分析功能。</p>\n<h2 id=\"Kibana的安装启动\"><a href=\"#Kibana的安装启动\" class=\"headerlink\" title=\"Kibana的安装启动\"></a>Kibana的安装启动</h2><p>启动ElasticSearch后，再启动Kibanna后访问<code>http://localhost:5601</code></p>\n<h2 id=\"安装IK分词器\"><a href=\"#安装IK分词器\" class=\"headerlink\" title=\"安装IK分词器\"></a>安装IK分词器</h2><p>下载完成后解压到elasticsearch的plugins目录下即可。</p>\n<p>在kibana的控制台进行测试：</p>\n<blockquote>\n<p>最小切分 ik_smart</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"analyzer\"</span>: <span class=\"string\">\"ik_smart\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"text\"</span>: <span class=\"string\">\"今天是平安夜\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">\"tokens\"</span> : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"今天是\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"平安夜\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">6</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最细粒度划分 ik_max_word</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"analyzer\"</span>: <span class=\"string\">\"ik_max_word\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"text\"</span>: <span class=\"string\">\"今天是平安夜\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"tokens\"</span> : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"今天是\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"今天\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"是\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_CHAR\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"平安夜\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">6</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"平安\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_WORD\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"token\"</span> : <span class=\"string\">\"夜\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"start_offset\"</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"end_offset\"</span> : <span class=\"number\">6</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span> : <span class=\"string\">\"CN_CHAR\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"position\"</span> : <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在ik分词器的config目录下可以自定义字典，并进行配置<br><img src=\"/2020/12/23/elasticsearch/2.png\" style=\"zoom:80%;\"></p>\n<h2 id=\"Restful\"><a href=\"#Restful\" class=\"headerlink\" title=\"Restful\"></a>Restful</h2><p>一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p>一句话描述：<strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p>\n<h2 id=\"ElasticSearch基本操作\"><a href=\"#ElasticSearch基本操作\" class=\"headerlink\" title=\"ElasticSearch基本操作\"></a>ElasticSearch基本操作</h2><p>1、创建索引并添加文档<br><code>PUT /索引名/类型名/文档id {请求体}</code><br><img src=\"/2020/12/23/elasticsearch/3.png\" alt></p>\n<p>发送请求完成后，就创建了一条索引：<br><img src=\"/2020/12/23/elasticsearch/4.png\" alt></p>\n<p>2、设置映射规则（字段类型）<br><img src=\"/2020/12/23/elasticsearch/5.png\" alt></p>\n<p>3、获取索引信息：<code>GET /test2</code></p>\n<p>4、查看所有索引的信息：<code>GET _cat/indices?v</code><br><img src=\"/2020/12/23/elasticsearch/6.png\" alt></p>\n<p>5、修改索引中的文档<br><code>POST /test3/_doc/1/_update {&quot;doc&quot;:{&quot;name&quot;:&quot;zhangyuzhen&quot;}}</code><br><img src=\"/2020/12/23/elasticsearch/7.png\" alt></p>\n<p>6、删除索引：<code>DELETE /test3</code></p>\n<p>7、获取文档<br>创建索引并添加几条文档：<br><img src=\"/2020/12/23/elasticsearch/8.png\" alt></p>\n<p>获取第一条文档数据： <code>GET /test/user/1</code><br><img src=\"/2020/12/23/elasticsearch/9.png\" alt></p>\n<p>指定条件获取数据：<code>GET /test/user_search?q=name:lisi</code></p>\n<p><strong>复杂搜索：</strong></p>\n<p>条件匹配与结果过滤：<img src=\"/2020/12/23/elasticsearch/10.png\" alt></p>\n<p>排序与分页：<br><img src=\"/2020/12/23/elasticsearch/11.png\" alt></p>\n<p>bool多条件查询：<br><img src=\"/2020/12/23/elasticsearch/12.png\" alt></p>\n<p>过滤器：<br><img src=\"/2020/12/23/elasticsearch/13.png\" alt></p>\n<blockquote>\n<ul>\n<li>gt 大于</li>\n<li>gte 大于等于</li>\n<li>lt 小于</li>\n<li>lte 小于等于</li>\n</ul>\n</blockquote>\n<p>精确查询：<br>term，直接通过倒排索引指定的词条进行精确查找。<br>match，使用分词器解析。   </p>\n<blockquote>\n<p>keyword类型不会被分词器解析</p>\n</blockquote>\n<p>查询关键字高亮：<br><img src=\"/2020/12/23/elasticsearch/14.png\" alt></p>\n","categories":["分布式中间件"],"tags":["ElasticSearch"]},{"title":"Git","url":"/2020/08/03/git/","content":"<p>Git是目前最先进的分布式版本控制系统。没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网。相互推送就能看到对方的修改了。<a id=\"more\"></a><br>SVN是集中式版本控制系统，版本库是集中放在中央服务器上的，所以工作时首先要从中央服务器得到最新的版本，然后工作，工作完成后推送给服务器。</p>\n<h2 id=\"查看不同级别的配置\"><a href=\"#查看不同级别的配置\" class=\"headerlink\" title=\"查看不同级别的配置\"></a>查看不同级别的配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统config</span></span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户</span></span><br><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置用户名与邮箱\"><a href=\"#设置用户名与邮箱\" class=\"headerlink\" title=\"设置用户名与邮箱\"></a>设置用户名与邮箱</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"sweetboyZhang\"</span>  <span class=\"comment\"># 名称</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"2824199842@qq.com\"</span>   <span class=\"comment\"># 邮箱</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository），如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。<br><img src=\"/2020/08/03/git/1.png\" style=\"zoom:80%;\"></p>\n<h2 id=\"git项目搭建\"><a href=\"#git项目搭建\" class=\"headerlink\" title=\"git项目搭建\"></a>git项目搭建</h2><p><strong>创建工作目录</strong></p>\n<p>工作目录就是git管理的文件夹，可以是项目目录，也可以是空目录。<br><img src=\"/2020/08/03/git/2.png\" alt></p>\n<p><strong>搭建本地仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录创建一个全新的仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><strong>克隆远程仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆一个项目和它整个代码历史</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git文件操作\"><a href=\"#git文件操作\" class=\"headerlink\" title=\"git文件操作\"></a>git文件操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看文件状态</span></span><br><span class=\"line\">git status [filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有文件状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加所有文件到暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交文件到本地仓库 -m 提交信息</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"[msg]\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目中忽略上传文件\"><a href=\"#项目中忽略上传文件\" class=\"headerlink\" title=\"项目中忽略上传文件\"></a>项目中忽略上传文件</h2><p>.gitignore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*.class</span><br><span class=\"line\">*.log</span><br><span class=\"line\">*.lock</span><br><span class=\"line\"></span><br><span class=\"line\"># Package File </span><br><span class=\"line\">*.jar</span><br><span class=\"line\">*.war</span><br><span class=\"line\">*.ear</span><br><span class=\"line\">target&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"># idea</span><br><span class=\"line\">.idea&#x2F;</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">bin&#x2F;</span><br><span class=\"line\">.settings&#x2F;</span><br><span class=\"line\">.classpath</span><br><span class=\"line\">.project</span><br><span class=\"line\">*.ips</span><br><span class=\"line\">*.iws</span><br><span class=\"line\"></span><br><span class=\"line\">*velocity.log*</span><br><span class=\"line\"></span><br><span class=\"line\"># STS</span><br><span class=\"line\">.apt_generared</span><br><span class=\"line\">.factorypath</span><br><span class=\"line\">.springbean</span><br><span class=\"line\"></span><br><span class=\"line\">*.log</span><br><span class=\"line\">tmp&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定远程仓库\"><a href=\"#绑定远程仓库\" class=\"headerlink\" title=\"绑定远程仓库\"></a>绑定远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成公钥</span></span><br><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器上创建空仓库后，就可以clone到本地仓库了</p>\n<p><img src=\"/2020/08/03/git/4.png\" alt></p>\n<h2 id=\"IDEA中集成git\"><a href=\"#IDEA中集成git\" class=\"headerlink\" title=\"IDEA中集成git\"></a>IDEA中集成git</h2><p>1、创建项目</p>\n<p>2、将远程的git文件目录复制到项目中</p>\n<p><img src=\"/2020/08/03/git/3.png\" alt></p>\n<p>3、使用命令或者是图形界面添加文件，提交文件，上传文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"[提交信息]\"</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git分支\"><a href=\"#git分支\" class=\"headerlink\" title=\"git分支\"></a>git分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch [branch-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b [branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br></pre></td></tr></table></figure>\n\n","categories":["版本管理"],"tags":["Git"]},{"title":"异常处理","url":"/2020/02/11/java-03/","content":"<h2 id=\"异常概述与异常体系结构\"><a href=\"#异常概述与异常体系结构\" class=\"headerlink\" title=\"异常概述与异常体系结构\"></a>异常概述与异常体系结构</h2><p><strong>Throwable：</strong>所有异常都继承于Throwable，分为Exception和Error。<br><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。<br>比如 ：StackOverflowError栈内存溢出和OutOfMemory堆内存溢出。一般不编写针对性的代码进行处理。<br><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。<a id=\"more\"></a><br>例如：空指针访问，试图读取不存在的文件，网络连接中断，数组角标越界。<br>异常分类：<br>编译时异常，CheckException及它的子类，例如IOException，FileNotFoundexception,SQLException等；<br>运行时异常，RuntimeException类及它的子类，例如NullPointerException，ClassCastException，IndexOutOfBoundException等。<br><img src=\"/2020/02/11/java-03/1.jpg\" alt></p>\n<h2 id=\"异常处理机制一\"><a href=\"#异常处理机制一\" class=\"headerlink\" title=\"异常处理机制一\"></a>异常处理机制一</h2><p>异常的处理：抓抛模型<br><strong>抛出异常：</strong>程序在正常执行的过程中，如果出现异常，就会生成一个异常类的对象，并将此对象提交给java运行时系统。<br><strong>捕获异常：</strong>如果一个方法抛出异常，该异常就会抛出给调用者方法中处理。如果异常没有在调用者方法中处理，继续抛给上层方法，直到<font color=\"red\">异常被处理</font>。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可能出现异常的代码    </span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常的方式1</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常的方式2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">finally&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不论在try代码块中是否发生了异常事件，catch语句是否执行，是否有异常，是否有return，</span></span><br><span class=\"line\">    <span class=\"comment\">// finally块中的语句都会被执行。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>( I ) try 代码块：监视代码执行过程 </p>\n<p>旦发现异常则直接跳转至 catch ，如果没有 catch ，则直接跳转至 finally</p>\n<p>( 2 ) catch 代码块：可选执行的代码块，如果没有任何异常发生则不会执行，如果发现异常则进行处理或向上抛出。这一切都在 catch 代码块中执行。</p>\n<p>( 3 ) finally 代码块：必选执行的代码块，不 管是否有异常产 生，即使发生OOM也会执行，通常用于处理善后清理工作。如果 finally 代码块没有执行，那么有三种可能：</p>\n<ul>\n<li><p>没有进入try 代码块。</p>\n</li>\n<li><p>进入try代码块，但是代码运行中出现了死循环或死锁状态。</p>\n</li>\n<li><p>进入 try 代码块，但是执行了<code>System.exit()</code>操作。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意， finally 是在 return 表达式运行后执行的，此时将要return 的结果已经被暂存起来，finally 代码块执行结束后再将<strong>之前暂存的结果</strong>返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">finallyNotWork</span> <span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = <span class=\"number\">10000</span> ; </span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception (); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e ) &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ++temp ;</span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">   \ttemp = <span class=\"number\">99999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法的结果返回10001，而不是99999！<br>不要在finally 代码块中使用 return 语句，否则会覆盖掉 try 或 catch 代码块中return的结果。</p>\n</blockquote>\n<h2 id=\"异常处理机制二\"><a href=\"#异常处理机制二\" class=\"headerlink\" title=\"异常处理机制二\"></a>异常处理机制二</h2><p>throws + 异常类型<br>1.写在<strong>方法的声明处</strong>，指明可能抛出的异常类型。一旦方法体执行出现异常时，就会将生成的异常类对象抛给调用者。异常代码后续的代码不再执行。<br>2.只是将异常抛给了调用者，并<font color=\"red\">没有将异常处理掉</font>。</p>\n<h2 id=\"手动抛出异常\"><a href=\"#手动抛出异常\" class=\"headerlink\" title=\"手动抛出异常\"></a>手动抛出异常</h2><p>throw + new Exception(“提示信息”)，必须在方法声明时用throws出指明可能抛出的异常。<br>throw : 生成一个异常对象。声明在方法体内。<br>throws : 处理异常。声明在方法的声明处。</p>\n<h2 id=\"用户自定义异常类\"><a href=\"#用户自定义异常类\" class=\"headerlink\" title=\"用户自定义异常类\"></a>用户自定义异常类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 用户自定义异常类MyException，用于描述数据取值范围错误信息。</span></span><br><span class=\"line\"><span class=\"comment\"> *              用户自己的异常类必须继承现有的异常类。 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年2月13日下午3:15:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">703489719074899L</span>;<span class=\"comment\">// 序列号</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;<span class=\"comment\">// 异常种类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyException</span><span class=\"params\">(String msg,<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">regist</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span><span class=\"keyword\">throws</span> MyException</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(<span class=\"string\">\"人为负数，不合理\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登记人数：\"</span>+num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">manager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tregist(-<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(MyException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登记错误，出错种类：\"</span>+e.getId());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"本次登记操作结束\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMyExceptionTest my1 = <span class=\"keyword\">new</span> MyExceptionTest();</span><br><span class=\"line\">\t\tmy1.manager();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["JavaSE"]},{"title":"泛型","url":"/2020/03/11/java-07/","content":"<h2 id=\"泛型的概念\"><a href=\"#泛型的概念\" class=\"headerlink\" title=\"泛型的概念\"></a>泛型的概念</h2><p>允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。<a id=\"more\"></a></p>\n<ul>\n<li>类型的参数化，就是可以把类型像方法的参数那样传递。</li>\n<li>泛型使编译器可以在编译期间对类型进行检查以提高类型安全，减少运行时由于对象类型不匹配引发的异常。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        list.add(<span class=\"number\">111</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">222</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">333</span>);</span><br><span class=\"line\"><span class=\"comment\">//        for (Integer num:list)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(num);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"Tony\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"Troye\"</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"Taylor\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class=\"line\">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            Map.Entry&lt;String,Integer&gt; entry = iterator.next();</span><br><span class=\"line\">            System.out.println(entry .getKey()+<span class=\"string\">\"-----\"</span>+entry .getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"List-lt-gt-、List-lt-extends-T-gt-与-List-lt-super-T-gt\"><a href=\"#List-lt-gt-、List-lt-extends-T-gt-与-List-lt-super-T-gt\" class=\"headerlink\" title=\"List&lt;?&gt;、List&lt;? extends T&gt; 与 List&lt;? super T&gt;\"></a>List&lt;?&gt;、List&lt;? extends T&gt; 与 List&lt;? super T&gt;</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> Integer(<span class=\"number\">111</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"aaa\"</span>));</span><br><span class=\"line\">        Object o = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// List&lt;?&gt; 允许get元素，不允许添加元素</span></span><br><span class=\"line\">        List&lt;?&gt; list1 = list;</span><br><span class=\"line\">        list1.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        list1.remove(<span class=\"keyword\">new</span> Integer(<span class=\"number\">111</span>));</span><br><span class=\"line\">        <span class=\"comment\">// list1.add(new String(\"bbb\"));</span></span><br><span class=\"line\">        Object o1 = list1.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        list1.stream().forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;Person&gt; persons = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        persons.add(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">        persons.add(<span class=\"keyword\">new</span> Male());</span><br><span class=\"line\">        persons.add(<span class=\"keyword\">new</span> Female());</span><br><span class=\"line\">        <span class=\"comment\">// List&lt;? extends Person&gt; 允许get元素，不允许添加元素</span></span><br><span class=\"line\">        List&lt;? extends Person&gt; persons1 = persons;</span><br><span class=\"line\">        <span class=\"comment\">// persons1.add(new Person());</span></span><br><span class=\"line\">        <span class=\"comment\">// persons1.add(new Male());</span></span><br><span class=\"line\">        <span class=\"comment\">// persons1.add(new Female());</span></span><br><span class=\"line\">        Person person = persons1.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// List&lt;? super Person&gt; 允许添加元素，不允许get元素</span></span><br><span class=\"line\">        List&lt;? <span class=\"keyword\">super</span> Person&gt; persons2 = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        persons2.add(<span class=\"keyword\">new</span> Male());</span><br><span class=\"line\">        persons2.add(<span class=\"keyword\">new</span> Female());</span><br><span class=\"line\">        persons2.add(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">        <span class=\"comment\">// Person person = persons2.get(0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["JavaSE"]},{"title":"反射","url":"/2020/03/15/java-10/","content":"<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。<a id=\"more\"></a><br><strong>类的加载过程：</strong><br>程序经过javac.exe命令后，会生成一个或多个字节码文件(.class)，接着使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中，即类的加载。加载到内存中的类，我们就成为运行时类，此运行时类就作为Class的一个实例。<br>加载到内存中的运行时类，会缓存一段时间。在此时间内，我们可以通过不同的方式来获取此运行时类。</p>\n<h2 id=\"获取Class实例\"><a href=\"#获取Class实例\" class=\"headerlink\" title=\"获取Class实例\"></a>获取Class实例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 获取Class实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方式一:调用运行类属性：.class</span></span><br><span class=\"line\">    Class class0 = Person<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">    System.out.println(class0);</span><br><span class=\"line\">    <span class=\"comment\">// 方式二：调用运行时类的对象，调用getClass()</span></span><br><span class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    Class class1 = p1.getClass();</span><br><span class=\"line\">    System.out.println(class1);</span><br><span class=\"line\">    <span class=\"comment\">// 方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class=\"line\">    Class class2 = Class.forName(<span class=\"string\">\"reflection.Person\"</span>);</span><br><span class=\"line\">    System.out.println(class2);</span><br><span class=\"line\">    <span class=\"comment\">// 方式四：使用类加载器：Classloader</span></span><br><span class=\"line\">    ClassLoader classLoader = ClassTest<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>()</span>;</span><br><span class=\"line\">    Class class3 = classLoader.loadClass(<span class=\"string\">\"reflection.Person\"</span>);</span><br><span class=\"line\">    System.out.println(class3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用运行时类指定结构\"><a href=\"#调用运行时类指定结构\" class=\"headerlink\" title=\"调用运行时类指定结构\"></a>调用运行时类指定结构</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射创建对应的运行时类</span></span><br><span class=\"line\">    Class&lt;Person&gt; class1 = Person<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建运行时类的对象</span></span><br><span class=\"line\">    Person p1 = class1.newInstance();</span><br><span class=\"line\">    System.out.println(p1);</span><br><span class=\"line\">    <span class=\"comment\">// 获取运行时类的属性getField(String fieldName),只能获取权限为public的属性</span></span><br><span class=\"line\">    Field id = class1.getField(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 通常使用getDeclaredField(String FieldName)获取运行时类的属性</span></span><br><span class=\"line\">    Field name = class1.getDeclaredField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    name.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">// 表示当前属性时可访问的</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置属性值 set(实例对象,属性值)</span></span><br><span class=\"line\">    id.set(p1,<span class=\"number\">10001</span>);</span><br><span class=\"line\">    name.set(p1,<span class=\"string\">\"Tony\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p1_id = (<span class=\"keyword\">int</span>) id.get(p1);</span><br><span class=\"line\">    System.out.println(p1_id);<span class=\"comment\">// 10001</span></span><br><span class=\"line\">    System.out.println(name.get(p1));<span class=\"comment\">// Tony</span></span><br><span class=\"line\">    System.out.println(p1);<span class=\"comment\">// Person&#123;id=10001, name='Tony', age=0&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取运行时类方法 getDeclaredMethod(方法名,指定方法的形参列表)</span></span><br><span class=\"line\">    Method setAge = class1.getDeclaredMethod(<span class=\"string\">\"setAge\"</span>, <span class=\"keyword\">int</span><span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    setAge.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">// 指明该方法可访问</span></span><br><span class=\"line\">    <span class=\"comment\">// 执行运行时类方法 invoke(对象实例,实参列表)</span></span><br><span class=\"line\">    <span class=\"comment\">// invoke()的返回值即为对应类中调用方法的返回值</span></span><br><span class=\"line\">    setAge.invoke(p1,<span class=\"number\">24</span>);</span><br><span class=\"line\">    System.out.println(p1);<span class=\"comment\">// Person&#123;id=10001, name='Tony', age=24&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定构造器</span></span><br><span class=\"line\">    Constructor con = class1.getDeclaredConstructor(<span class=\"keyword\">int</span><span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">String</span>.<span class=\"title\">class</span>,<span class=\"title\">int</span>.<span class=\"title\">class</span>)</span>;</span><br><span class=\"line\">    con.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Person p2 = (Person) con.newInstance(<span class=\"number\">1002</span>,<span class=\"string\">\"Taylor\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">    System.out.println(p2);<span class=\"comment\">// Person&#123;id=1002, name='Taylor', age=18&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"文件的上传和下载","url":"/2020/04/13/javaweb-05/","content":"<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>文件上传的要求：<br>1、要有一个form标签，method=post<br>2、form标签的encType属性值必须为multipart/form-data(表示提交的数据以多段进行拼接(每个表单项分为一段)，然后以二进制流的形式提交给服务器)<br>3、在form标签中使用 input type=file 添加上传的文件<br>4、编写服务器代码接收，处理上传的数据<a id=\"more\"></a><br><img src=\"/2020/04/13/javaweb-05/1.png\" alt></p>\n<p>导入两个第三方的jar包：<br><img src=\"/2020/04/13/javaweb-05/2.png\" alt></p>\n<p>处理文件上传的servlet程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(\"文件上传过来了\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 1.先判断上传的数据是否为多段数据(文件上传)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2.创建FileItemFactory工厂实现类</span></span><br><span class=\"line\">            FileItemFactory fileItemFactory = <span class=\"keyword\">new</span> DiskFileItemFactory();</span><br><span class=\"line\">            <span class=\"comment\">// 3.创建用于解析上传数据的工具类ServletFileUpload类</span></span><br><span class=\"line\">            ServletFileUpload servletFileUpload = <span class=\"keyword\">new</span> ServletFileUpload(fileItemFactory);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 4.解析上传数据，得到每一个表单项FileItem</span></span><br><span class=\"line\">                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class=\"line\">                <span class=\"comment\">// 5.循环判断每一个表单项是普通类型，还是文件类型</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(FileItem fileItem : list)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(fileItem.isFormField())&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 普通表单项</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"表单项的name属性值：\"</span>+fileItem.getFieldName());</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"表单项的value属性值\"</span>+fileItem.getString(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 文件表单项</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"表单项的name属性值：\"</span>+fileItem.getFieldName());</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"上传的文件名：\"</span>+fileItem.getName());</span><br><span class=\"line\">                        fileItem.write(<span class=\"keyword\">new</span> File(<span class=\"string\">\"d://\"</span>+fileItem.getName()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost:8080/07_jsp/uploadServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        头像：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取要下载的文件名</span></span><br><span class=\"line\">        String downloadFileName = <span class=\"string\">\"cat.jpg\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 2.通过servletContext对象 读取要下载的文件内容</span></span><br><span class=\"line\">        ServletContext servletContext = getServletContext();</span><br><span class=\"line\">        InputStream resourceAsStream = servletContext.getResourceAsStream(<span class=\"string\">\"/file/\"</span> + downloadFileName);</span><br><span class=\"line\">        <span class=\"comment\">// 获取响应输出流</span></span><br><span class=\"line\">        OutputStream outputStream = resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// 3.在回传前通过响应头告诉客户端返回的数据类型</span></span><br><span class=\"line\">        String mimeType = servletContext.getMimeType(<span class=\"string\">\"/file/\"</span> + downloadFileName);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"下载的文件类型：\"</span> + mimeType);</span><br><span class=\"line\">        <span class=\"comment\">// 4.以及告诉客户端收到的数据是用于下载使用的</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断浏览器类型</span></span><br><span class=\"line\">        String ua = req.getHeader(<span class=\"string\">\"User-Agent\"</span>);</span><br><span class=\"line\">        String str=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是火狐浏览器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ua.contains(<span class=\"string\">\"Firefox\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用下面的格式进行BASE64 编码后</span></span><br><span class=\"line\">            str = <span class=\"string\">\"=?utf-8?B?\"</span> + <span class=\"keyword\">new</span> BASE64Encoder().encode(<span class=\"string\">\"中文.jpg\"</span>.getBytes(<span class=\"string\">\"utf-8\"</span>)) + <span class=\"string\">\"?=\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把中文名进行UTF-8 编码操作</span></span><br><span class=\"line\">            str = URLEncoder.encode(<span class=\"string\">\"中文.jpg\"</span>, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Content-Disposition响应头，表示收到的数据该怎么处理</span></span><br><span class=\"line\">        <span class=\"comment\">// attachment 附件，表示下载使用</span></span><br><span class=\"line\">        <span class=\"comment\">// filename 表示指定下载的文件名</span></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment;fileName=\"</span> + str);</span><br><span class=\"line\">        <span class=\"comment\">// 5.把要下载的文件内容回传给客户端</span></span><br><span class=\"line\">        <span class=\"comment\">//  读取输入流中的全部数据，复制给输出流，输出给客户端</span></span><br><span class=\"line\">        IOUtils.copy(resourceAsStream, outputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["JavaWeb"]},{"title":"jsp,Listener监听器","url":"/2020/04/11/javaweb-03/","content":"<h2 id=\"jsp定义\"><a href=\"#jsp定义\" class=\"headerlink\" title=\"jsp定义\"></a>jsp定义</h2><p>jsp全称为 java server page，用来代替servlet程序回传html页面的数据。<a id=\"more\"></a></p>\n<p><strong>jsp页面的本质就是一个Servlet程序</strong>，在第一次访问jsp页面时，Tomcat服务器就会把jsp页面翻译成一个java源程序，并对它进行编译成.class字节码文件。</p>\n<h2 id=\"jsp语法\"><a href=\"#jsp语法\" class=\"headerlink\" title=\"jsp语法\"></a>jsp语法</h2><h3 id=\"jsp头部的page指令\"><a href=\"#jsp头部的page指令\" class=\"headerlink\" title=\"jsp头部的page指令\"></a>jsp头部的page指令</h3><p>jsp 的page 指令可以修改jsp 页面中一些重要的属性，或者行为。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>i. language 属性表示jsp 翻译后是什么语言文件。暂时只支持java。<br>ii. contentType 属性表示jsp 返回的数据类型是什么。也是源码中response.setContentType()参数值<br>iii. pageEncoding 属性表示当前jsp 页面文件本身的字符集。<br>iv. import 属性跟java 源代码中一样。用于导包，导类。<br>v. autoFlush 属性设置当out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是true。<br>vi. buffer 属性设置out 缓冲区的大小。默认是8kb<br>vii. errorPage 属性设置当jsp 页面运行时出错，自动跳转去的错误页面路径。</p>\n<h3 id=\"jsp中的常用脚本\"><a href=\"#jsp中的常用脚本\" class=\"headerlink\" title=\"jsp中的常用脚本\"></a>jsp中的常用脚本</h3><p>1、声明脚本<br>作用：可以给jsp 翻译出来的java 类定义属性和方法甚至是静态代码块，内部类等。<br>格式：<code>&lt;%!  java代码%&gt;</code></p>\n<p>2、表达式脚本<br>作用：在jsp页面上输出数据<br>格式：<code>&lt;%= 表达式 %&gt;</code></p>\n<p>3、代码脚本<br>作用：可以在jsp页面中，编写我们需要的功能(java代码)<br>格式：<code>&lt;% java代码 %&gt;</code></p>\n<h2 id=\"jsp九大内置对象\"><a href=\"#jsp九大内置对象\" class=\"headerlink\" title=\"jsp九大内置对象\"></a>jsp九大内置对象</h2><p>jsp在翻译成servlet代码后内部提供的九个对象。<br>request&nbsp;&nbsp;&nbsp;请求对象<br>response&nbsp;&nbsp;&nbsp;响应对象<br>pageContext&nbsp;&nbsp;&nbsp;jsp上下文对象<br>session&nbsp;&nbsp;&nbsp;会话对象<br>application&nbsp;&nbsp;&nbsp;ServletContext对象<br>config&nbsp;&nbsp;&nbsp;ServletConfig对象<br>page&nbsp;&nbsp;&nbsp;当前的jsp对象<br>exception&nbsp;&nbsp;&nbsp;异常对象<br>out 向客户端输出内容常用的对象</p>\n<p><strong>四个域对象：</strong><br>page&nbsp;&nbsp;&nbsp;&nbsp;(PageContextImpl类)&nbsp;&nbsp;&nbsp;&nbsp;当前的jsp页面有效<br>request&nbsp;&nbsp;&nbsp;&nbsp;(HttpServletRequest类)&nbsp;&nbsp;&nbsp;&nbsp;一次请求有效<br>session&nbsp;&nbsp;&nbsp;&nbsp;(HttpSession类)&nbsp;&nbsp;&nbsp;&nbsp;一次会话范围内有效(打开浏览器访问服务器，直到关闭浏览器)<br>application&nbsp;&nbsp;&nbsp;&nbsp;(ServletContext类)&nbsp;&nbsp;&nbsp;&nbsp;整个web工程范围内都有效(只要web工程不停止，数据一直都在)<br>域对象是可以像Map一样存取数据的对象。四个域对象的功能一样，不同的是它们对数据的存取范围。</p>\n<p><strong>jsp中的out输出与response.getWriter()输出的区别：</strong><br><img src=\"/2020/04/11/javaweb-03/1.png\" alt></p>\n<p><font color=\"red\">统一使用out.print()输出</font></p>\n<h2 id=\"jsp常用标签\"><a href=\"#jsp常用标签\" class=\"headerlink\" title=\"jsp常用标签\"></a>jsp常用标签</h2><h3 id=\"静态包含\"><a href=\"#静态包含\" class=\"headerlink\" title=\"静态包含\"></a>静态包含</h3><p>格式：<code>&lt;%@ include file=&quot;/&quot;%&gt;</code><br>file属性指定要包含的页面路径<br>静态包含的特点：<br>1、静态包含不会翻译被包含的jsp 页面。<br>2、静态包含其实是把被包含的jsp 页面的代码拷贝到包含的位置执行输出。</p>\n<h3 id=\"动态包含\"><a href=\"#动态包含\" class=\"headerlink\" title=\"动态包含\"></a>动态包含</h3><p>格式：<code>&lt;jsp:include page=&quot;/&quot;&gt;&lt;/jsp:include&gt;</code><br>动态包含特点：<br>1、动态包含会把包含的jsp页面也翻译成java代码。<br>2、通过调用被包含的jsp页面进行输出。<br>3、动态包含可以传递参数。</p>\n<h3 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h3><p>格式：<code>&lt;jsp:forward page=&quot;/&quot;&gt;&lt;/jsp:forward&gt;</code></p>\n<h2 id=\"Listener监听器\"><a href=\"#Listener监听器\" class=\"headerlink\" title=\"Listener监听器\"></a>Listener监听器</h2><p>1、Listener 监听器是javaweb三大组件之一(Servlet程序，Filter过滤器，Listener监听器)。<br>2、Listener是javaEE接口规范，就是接口。<br>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。ServletContextListener 它可以监听ServletContext 对象的创建和销毁。<br>ServletContext 对象在web 工程启动的时候创建，在web 工程停止的时候销毁。<br>监听到创建和销毁之后都会分别调用ServletContextListener 监听器的方法反馈。</p>\n<p>使用ServletContextListener 监听器监听ServletContext 对象步骤如下：<br>1、编写一个类去实现ServletContextListener<br>2、实现其两个回调方法<br>3、到web.xml 中去配置监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletContextListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建ServletContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"销毁ServletContext\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>listener.ServletContextListenerImpl<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaWeb"]},{"title":"EL表达式，JSTL标签库","url":"/2020/04/12/javaweb-04/","content":"<h2 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h2><p>Express Language：表达式语言。<br>作用：代替jsp页面中的表达式脚本在jsp页面中进行数据的输出。<a id=\"more\"></a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">request.setAttribute</span>(\"<span class=\"attr\">key</span>\",\"<span class=\"attr\">value</span>\");</span></span><br><span class=\"line\"><span class=\"tag\">    %&gt;</span></span><br><span class=\"line\">    jsp表达式输出key的值：<span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">request.getAttribute</span>(\"<span class=\"attr\">key</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">key</span>\")</span></span><br><span class=\"line\"><span class=\"tag\">    %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    EL表达式输出key的值：$&#123;key&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>格式：<code>${表达式}</code><br>EL表达式在输出空值的时候，输出的是空串，而jsp表达式输出的是null字符串。</p>\n<h2 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h2><p>关系运算</p>\n<p>逻辑运算</p>\n<p>算数运算<br>empty运算：判断一个数据是否为空，为空输出truem，否则输出false<br>三元运算<br>“.”点运算和[] 中括号运算符</p>\n<h2 id=\"EL表达式中的11个隐含对象\"><a href=\"#EL表达式中的11个隐含对象\" class=\"headerlink\" title=\"EL表达式中的11个隐含对象\"></a>EL表达式中的11个隐含对象</h2><p><img src=\"/2020/04/12/javaweb-04/1.png\" alt></p>\n<p>pageContext对象的使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> <span class=\"attr\">jsp</span>表达式</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getScheme</span>() 它可以获取请求的协议</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getServerName</span>() 获取请求的服务器<span class=\"attr\">ip</span> 或域名</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getServerPort</span>() 获取请求的服务器端口号</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getContextPath</span>() 获取当前工程路径</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getMethod</span>() 获取请求的方式（<span class=\"attr\">GET</span> 或<span class=\"attr\">POST</span>）</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">request.getRemoteHost</span>() 获取客户端的<span class=\"attr\">ip</span> 地址</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">session.getId</span>() 获取会话的唯一标识</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> <span class=\"attr\">EL</span>表达式<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">pageContext.setAttribute</span>(\"<span class=\"attr\">req</span>\", <span class=\"attr\">request</span>);</span></span><br><span class=\"line\"><span class=\"tag\">%&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">1. 协议：$&#123;req.scheme&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">2. 服务器ip：$&#123;pageContext.request.serverName&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">3. 服务器端口：$&#123;pageContext.request.serverPort&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">4. 获取工程路径：$&#123;pageContext.request.contextPath&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">5. 获取请求方法：$&#123;pageContext.request.method&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">6. 获取客户端ip 地址：$&#123;pageContext.request.remoteHost&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">7. 获取会话的id 编号：$&#123;pageContext.session.id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSTL标签库\"><a href=\"#JSTL标签库\" class=\"headerlink\" title=\"JSTL标签库\"></a>JSTL标签库</h2><p>EL表达式是为了替换jsp中的表达式，而标签库是为了替换jsp中的代码脚本。<br><img src=\"/2020/04/12/javaweb-04/2.png\" alt></p>\n<p>在jsp 标签库中使用taglib 指令引入标签库</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">CORE 标签库</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> %&gt;</span></span><br><span class=\"line\">FMT 标签库</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"fmt\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/fmt\"</span> %&gt;</span></span><br><span class=\"line\">FUNCTIONS 标签库</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"fn\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/functions\"</span> %&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"core核心库使用\"><a href=\"#core核心库使用\" class=\"headerlink\" title=\"core核心库使用\"></a>core核心库使用</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.HashMap\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.Map\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"bean.Student\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.List\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.lang.reflect.Array\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">import</span>=<span class=\"string\">\"java.util.ArrayList\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> <span class=\"attr\">if</span>判断 <span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;1==1&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>1==1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> 多路判断<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> <span class=\"attr\">foreach</span>遍历输出<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">    $&#123;i&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--遍历数组--%</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">request.setAttribute</span>(\"<span class=\"attr\">arr</span>\",<span class=\"attr\">new</span> <span class=\"attr\">String</span>[]&#123;\"<span class=\"attr\">Tom</span>\",\"<span class=\"attr\">Taylor</span>\",\"<span class=\"attr\">Troye</span>\"&#125;);</span></span><br><span class=\"line\"><span class=\"tag\">%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.arr&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    $&#123;item&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> 遍历<span class=\"attr\">Map--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\">    Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class=\"line\">    map.put(\"key1\",\"value1\");</span><br><span class=\"line\">    map.put(\"key2\",\"value2\");</span><br><span class=\"line\">    map.put(\"key3\",\"value3\");</span><br><span class=\"line\">//    for(Map.Entry<span class=\"tag\">&lt;<span class=\"name\">String,String</span>&gt;</span> entry:map.entrySet())&#123;</span><br><span class=\"line\">//</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\">    request.setAttribute(\"map\",map);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.map&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"entry\"</span>&gt;</span></span><br><span class=\"line\">    键：$&#123;entry.key&#125;</span><br><span class=\"line\">    值：$&#123;entry.value&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> 遍历<span class=\"attr\">List--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><br><span class=\"line\">    List&lt;Student&gt; stuList = new ArrayList&lt;Student&gt;();</span><br><span class=\"line\">    for (int i = 0; i <span class=\"tag\">&lt; <span class=\"attr\">5</span>; <span class=\"attr\">i</span>++) &#123;</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">stuList.add</span>(<span class=\"attr\">new</span> <span class=\"attr\">Student</span>(<span class=\"attr\">i</span>,\"<span class=\"attr\">username</span>\"+<span class=\"attr\">i</span>,\"<span class=\"attr\">password</span>\"+<span class=\"attr\">i</span>, <span class=\"attr\">18</span>+<span class=\"attr\">i</span>));</span></span><br><span class=\"line\"><span class=\"tag\">    &#125;</span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">request.setAttribute</span>(\"<span class=\"attr\">students</span>\",<span class=\"attr\">stuList</span>);</span></span><br><span class=\"line\"><span class=\"tag\">%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500px\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1px solid black\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>状态信息<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.students&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"stu\"</span> <span class=\"attr\">varStatus</span>=<span class=\"string\">\"status\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;stu.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;stu.username&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;stu.password&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;stu.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;status.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["JavaWeb"]},{"title":"Filter,ThreadLocal","url":"/2020/05/13/javaweb-07/","content":"<h2 id=\"Filter过滤器的作用\"><a href=\"#Filter过滤器的作用\" class=\"headerlink\" title=\"Filter过滤器的作用\"></a>Filter过滤器的作用</h2><p>作用：拦截请求，过滤响应<br>拦截请求常见的应用场景：1、权限检查 ；2、日志操作；3、事务管理 ……<a id=\"more\"></a><br><img src=\"/2020/05/13/javaweb-07/1.png\" alt></p>\n<h3 id=\"Filter过滤器的使用\"><a href=\"#Filter过滤器的使用\" class=\"headerlink\" title=\"Filter过滤器的使用\"></a>Filter过滤器的使用</h3><p>1.编写一个类去实现Filter接口<br>2.实现过滤  方法doFilter()<br>3.到web.xml中配置Filter的拦截路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">    HttpServletRequest req = (HttpServletRequest) request;</span><br><span class=\"line\">    HttpSession session = req.getSession();</span><br><span class=\"line\">    Object user = session.getAttribute(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">\"/login.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 让程序继续向下访问用户的目标资源</span></span><br><span class=\"line\">        chain.doFilter(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>filter.AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  配置拦截路径  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/admin/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Filter的生命周期\"><a href=\"#Filter的生命周期\" class=\"headerlink\" title=\"Filter的生命周期\"></a>Filter的生命周期</h3><p>Filter生命周期包含的方法：<br>Web工程启动时就创建了：1、构造器方法；2、init 初始化方法<br>每次拦截到请求就开始执行：3、doFilter 过滤方法<br>Web工程停止时：4、destory  销毁方法</p>\n<h3 id=\"FilterConfig类\"><a href=\"#FilterConfig类\" class=\"headerlink\" title=\"FilterConfig类\"></a>FilterConfig类</h3><p>包含了Filter过滤器的配置信息<br>FilterConfig类的作用是获取filter过滤器的配置信息：<br>1、获取Filter的名称filter-name的内容<br>2、获取Filter中配置的init-param的初始化参数<br>3、获取ServletContext对象</p>\n<h3 id=\"FilterChain过滤器链\"><a href=\"#FilterChain过滤器链\" class=\"headerlink\" title=\"FilterChain过滤器链\"></a>FilterChain过滤器链</h3><p><img src=\"/2020/05/13/javaweb-07/2.png\" alt></p>\n<h3 id=\"Filter的拦截路径\"><a href=\"#Filter的拦截路径\" class=\"headerlink\" title=\"Filter的拦截路径\"></a>Filter的拦截路径</h3><p>1、精确匹配，拦截的是指定路径的一个资源，请求地址必须是 : <code>http://ip:port/工程路径/a.jsp</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/admin/a.jsp<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、目录匹配，拦截的是目录下的所有资源</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/admin/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、后缀名匹配，拦截的是指定后缀名的资源</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>AdminFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Filter只关心请求地址是否匹配，不关心资源是否存在。</p>\n<h2 id=\"ThreadLocal的使用\"><a href=\"#ThreadLocal的使用\" class=\"headerlink\" title=\"ThreadLocal的使用\"></a>ThreadLocal的使用</h2><p>作用：解决线程安全问题。<br>ThreadLocal可以给当前线程关联一个数据(普通变量，对象，数组，集合)。<br>ThreadLocald 特点：<br>1、ThreadLocal可以为当前线程关联一个数据；(可以像Map一样存取数据，key为当前线程)；<br>2、每一个ThreadLoacl对象，只能为当前线程关联一个数据；<br>3、每个ThreadLocal对象实例化时，一般都是static类型；<br>4、ThreadLocal中保存的数据，在线程销毁后，JVM自动释放。</p>\n","categories":["Java"],"tags":["JavaWeb"]},{"title":"JVM入门","url":"/2020/09/06/jvm/","content":"<h2 id=\"jvm生命周期\"><a href=\"#jvm生命周期\" class=\"headerlink\" title=\"jvm生命周期\"></a>jvm生命周期</h2><p>1、jvm启动<br>由引导类加载器bootstrap class loader通过创建一个初始类来完成的，这个类是由虚拟机具体的实现指定的。<a id=\"more\"></a></p>\n<p>2、jvm执行<br>执行java程序</p>\n<p>3、jvm退出</p>\n<p>程序正常执行结束；<br>程序在执行过程中出现异常或错误；<br>操作系统出现错误；<br>某线程调用Runtime类中halt()或System类中exit()</p>\n<h2 id=\"内存结构图\"><a href=\"#内存结构图\" class=\"headerlink\" title=\"内存结构图\"></a>内存结构图</h2><p>结构简图：<br><img src=\"/2020/09/06/jvm/1.png\" style=\"zoom:80%;\"></p>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><blockquote>\n<p>三种类加载器：</p>\n</blockquote>\n<p>BootstrapClassLoader  引导类加载器<br>是用C/C++实现的，用来加载java的核心类库，没有父加载器，用来加载拓展类加载器，系统类加载器；<br>出于安全考虑，Bootstrap加载器只加载 java、javax、sun开头的类。 </p>\n<p>ExtClassLoader  拓展类加载器<br>派生于ClassLoader，父类加载器是BootstrapClassLoader;<br>从jre/lib/ext目录加载类库</p>\n<p>AppClassLoader 系统类加载器<br>派生于ClassLoader，父加载器是ExtClassLoader；<br>加载环境变量和系统属性，默认为应用程序的加载类</p>\n<p>类加载过程：<br><img src=\"/2020/09/06/jvm/2.png\" alt></p>\n<blockquote>\n<p>获取加载器的方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前类加载器</span></span><br><span class=\"line\">clazz.getClassLoader();</span><br><span class=\"line\"><span class=\"comment\">// 获取当前线程上下文的ClassLoader</span></span><br><span class=\"line\">Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\"><span class=\"comment\">// 获取系统的ClassLoader</span></span><br><span class=\"line\">ClassLoader.getSystemClassLoader();</span><br><span class=\"line\"><span class=\"comment\">// 获取调用者的ClassLoader</span></span><br><span class=\"line\">DriverManager.getCallerClassLoader();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>双亲委派机制</p>\n</blockquote>\n<p>如果一个类的加载器收到了加载类的请求，并不会马上加载，而是将请求向上委托给父加载器，直到到达引导类加载器；如果父加载器能完成加载类的委托，则成功返回，否则，子加载器才会尝试自己加载。<br><img src=\"/2020/09/06/jvm/3.png\" alt><br>好处：<br>1、安全，避免用户自定义的类动态加载，替换了java的核心类如<code>String</code>;<br>2、避免类的重复加载，JVM区分不同的类，不仅仅是根据类名，相同的类被不同的类加载器加载也是不同的两个类。</p>\n<h2 id=\"本地方法栈-Native-Method-Stack\"><a href=\"#本地方法栈-Native-Method-Stack\" class=\"headerlink\" title=\"本地方法栈(Native Method Stack)\"></a>本地方法栈(Native Method Stack)</h2><p>线程私有，native方法用来调用C/C++程序，在内存中专门开辟了一块区域处理标记为native的代码。</p>\n<h2 id=\"程序寄存器-Program-Counter-Register\"><a href=\"#程序寄存器-Program-Counter-Register\" class=\"headerlink\" title=\"程序寄存器(Program Counter Register)\"></a>程序寄存器(Program Counter Register)</h2><p>线程私有，存储指向下一条指令的地址。</p>\n<h2 id=\"方法区-Method-Stack\"><a href=\"#方法区-Method-Stack\" class=\"headerlink\" title=\"方法区(Method Stack)\"></a>方法区(Method Stack)</h2><p>各个线程共享，它存储了每个类的结构信息：字段和方法数据、构造方法和普通方法的字节码内容、常量池（jdk1.8在堆中的元空间中）。<br>方法区是规范，不同虚拟机的实现不同。（类似于接口的不同实现）</p>\n<h2 id=\"虚拟机栈-JVM-Stack\"><a href=\"#虚拟机栈-JVM-Stack\" class=\"headerlink\" title=\"虚拟机栈(JVM Stack)\"></a>虚拟机栈(JVM Stack)</h2><p>主管程序的运行，在线程创建时创建，它的生命周期跟随线程的生命周期，线程结束时释放，对于栈来说不存在垃圾回收问题，是线程私有的。<br><font color=\"red\">8种基本数据类型，对象的引用变量，实例方法都是在栈内存中分配的。</font><br>栈帧中主要存储3类数据：<br>本地变量：输入、输出参数，方法中的变量<br>栈操作：记录进栈、出栈<br>栈帧数据：运行时数据、方法等<br><img src=\"/2020/09/06/jvm/4.png\" alt></p>\n<p>栈+堆+方法区的关系：<br><img src=\"/2020/09/06/jvm/5.png\" alt=\" \"></p>\n<h2 id=\"堆-Heap\"><a href=\"#堆-Heap\" class=\"headerlink\" title=\"堆(Heap)\"></a>堆(Heap)</h2><p>主管数据的存储，一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。<br>类加载器读取了类文件后，需要把类，方法，常、变量放入堆内存中，保存所有引用类型的真实信息。<br>逻辑上分为三个部分：新生区、养老区、元空间<br>物理上分为两个部分：新生区、养老区<br><img src=\"/2020/09/06/jvm/6.png\" style=\"zoom:70%;\"></p>\n<blockquote>\n<p>垃圾回收过程</p>\n</blockquote>\n<p>Eden区满了，触发第一次GC，称为Minor GC，将存活数据复制到From区，清空Eden区，</p>\n<blockquote>\n<p>GC过程（复制 -&gt; 清空 -&gt; 互换），<br><img src=\"/2020/09/06/jvm/7.png\" style=\"zoom: 67%;\"></p>\n</blockquote>\n<p>当Eden区再次触发GC时，会扫描Eden区和From区，对两个区域进行垃圾回收，经过这次回收还存活的对象直接复制到To区，同时把这些数据的年龄加1，清空Eden区和From区，清空后的From区成为下次GC的To区，完成交换，如此交换15次，若数据还有存活则存入养老区。</p>\n<p>养老区满了，开启Full GC，FGC多次，养老区也无法腾出空间了，抛出OOM</p>\n<blockquote>\n<p>永久代</p>\n</blockquote>\n<p>是一个常驻内存区域，用于存放jdk自身携带的Class,Interface元数据，即运行环境必需的类信息，存放的数据不会被垃圾回收器回收，关闭JVM才会释放。</p>\n<h2 id=\"GC判断对象可以被回收的两种方式\"><a href=\"#GC判断对象可以被回收的两种方式\" class=\"headerlink\" title=\"GC判断对象可以被回收的两种方式\"></a>GC判断对象可以被回收的两种方式</h2><ul>\n<li><p>引用计数法：每个对象有一个引用计数属性，新增一个引用计数加一，减少一个引用计数减一，当计数为零时可以被回收。可能存在循环引用的问题，比如A对象引用B对象，而B对象中又引用了A对象，当他们都不再使用后，因为相互引用，引用计数=1，永远无法回收。</p>\n</li>\n<li><p>可达性分析：从GC Roots向下搜索，搜索的路径称为引用链。当一个对象到GC Roots没用任何引用链相连时，说明该对象可回收。</p>\n<p>GC Roots的对象有：</p>\n<ul>\n<li>虚拟机栈中的引用的对象</li>\n<li>方法区中的静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈中引用的对象</li>\n</ul>\n</li>\n</ul>\n","categories":["Java"],"tags":["JVM"]},{"title":"Linux目录结构,Xshell,Xftp，vim","url":"/2020/02/24/linux-01/","content":"<h2 id=\"Linux目录结构\"><a href=\"#Linux目录结构\" class=\"headerlink\" title=\"Linux目录结构\"></a>Linux目录结构</h2><p>linux的文件系统采用级层式的树状目录结构，最上层是根目录  /  ，然后在此基础上创建其他目录。<a id=\"more\"></a><br>                  <img src=\"/2020/02/24/linux-01/root.png\" alt=\"层次结构图\"><br><strong>/bin：</strong>Binary的缩写，用于存放最经常使用的命令。<br><strong>/sbin：</strong>s就是Super User 的意思，用于存放系统管理员使用的系统管理程序。<br><strong>/home：</strong>存放普通用户的主目录，每一个用户都用自己的一个目录。<br><strong>/root：</strong>系统管理员的主目录，也称为超级权限者的用户主目录。<br><strong>/lib：</strong>系统开机时需要最基本的动态连接共享库，类似于Windows的DLL文件。几乎所有的程序都要用到这些共享库。<br><strong>/etc：</strong>所有的系统管理所需要的配置文件和子目录。my.conf<br><strong>/usr：</strong>用户的很多程序和文件都存放在此目录下。类似于WIndows的Program Files目录。<br><strong>/boot：</strong>启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<br><strong>/proc：</strong>是一个虚拟的目录，它是系统内存的映射，访问这个目录用来获取系统信息。<br><strong>/srv：</strong>service 的缩写，用于存放一些服务启动之后需要提取的数据。<br><strong>/sys：</strong>安装来了新出现的文件系统sysfs。<br><strong>/tmp：</strong>存放一些临时文件。<br><strong>/dev：</strong>类似于Windows的设备管理器，把所有硬件用文件的形式存储。<br><strong>/media：</strong>linux系统会自动识别一些设备，识别后把设别的设备挂载到这个目录下。<br><strong>/mnt：</strong>让用户临时挂载别的文件系统。<br><strong>/opt：</strong>存放额外的安装程序。<br><strong>/usr/local：</strong>给主机额外安装软件所安装的目录。<br><strong>/var：</strong>将经常被修改的目录放在这个目录下。包括各种日志文件。</p>\n<h2 id=\"远程登录Linux-Xshell\"><a href=\"#远程登录Linux-Xshell\" class=\"headerlink\" title=\"远程登录Linux-Xshell\"></a>远程登录Linux-Xshell</h2><p>1.Linux需要打开sshd服务(<em>openssh的服务端：sshd</em> ; <em>openssh的客户端：ssh</em> )；<br>        sudo service ssh start<br>        若出现Unit ssh.service not found，则需要安装openssh服务：<br>        sudo apt-get install openssh-server<br>        2.打开Xshell，并新建会话，填入需要远程登录的主机的ip地址，保存会话；<br>        3.双击建立的会话，输入用户名以及密码，建立连接。</p>\n<h2 id=\"远程上传-下载-Xftp\"><a href=\"#远程上传-下载-Xftp\" class=\"headerlink\" title=\"远程上传/下载-Xftp\"></a>远程上传/下载-Xftp</h2><p>1.打开Xftp,新建会话，填入需要远程登录的主机的ip地址以及密码，保存会话；<br>        2.双击会话，建立连接。</p>\n<h2 id=\"vi和vim编辑器\"><a href=\"#vi和vim编辑器\" class=\"headerlink\" title=\"vi和vim编辑器\"></a>vi和vim编辑器</h2><p>__vi : __所有的linux系统都会内建 vi文本编辑器；<br>        __vim : __具有程序编辑功能的文本编辑器。</p>\n<h3 id=\"vi和vim的三种常见模式\"><a href=\"#vi和vim的三种常见模式\" class=\"headerlink\" title=\"vi和vim的三种常见模式\"></a>vi和vim的三种常见模式</h3><p><strong>1.正常模式：</strong><br>        以vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，可以使用『上下左右』按键        来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理        你的文件数据。<br>        <strong>2.插入模式:</strong><br>        按下i, I, o, O, a, A, r, R等任何一个字母之后才会进入编辑模式, 一般来说按i即可。<br>        <strong>3.命令行模式:</strong><br>        在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim 、显示行号等的动作。<br><em>vim模式的三种转换：</em></p>\n<p><img src=\"/2020/02/24/linux-01/vim.png\" alt=\"vim模式切换\"></p>\n<p>wq : 保存退出<br>        q! : 强制退出不保存</p>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Maven","url":"/2020/06/01/maven/","content":"<h2 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h2><p>Maven是一款自动化构建工具，专注服务于java平台的项目构建和依赖管理。<a id=\"more\"></a><br>1、maven可以管理jar包及其各个版本，并且可以自动下载和引入项目中<br>2、maven可以把jar包依赖的包自动下载并引入项目中<br>3、maven可以编译代码，测试代码<br>4、打包文件，形成jar文件，或是war文件<br>5、部署项目<br>项目的构建：构建是面向过程的，包括项目的编译，测试，运行，打包，部署等等<br>Maven支持的构建包括：<br>1、清理，把之前项目编译的东西删除，为新的编译代码做准备<br>2、编译，把程序的源代码编译成可执行文件。（批量进行）<br>3、测试，maven可以执行测试程序代码，验证所需的功能是否正确。（批量进行）<br>4、报告，生成测试结果文件<br>5、打包，把项目中的所有class文件，配置文件等所有资源文件放到一个压缩文件中。<br>6、安装，把打包好的文件jar，war安装到本机仓库<br>7、部署，把程序安装好可以执行</p>\n<h2 id=\"Maven核心概念\"><a href=\"#Maven核心概念\" class=\"headerlink\" title=\"Maven核心概念\"></a>Maven核心概念</h2><p>1、POM：一个文件pom.xml，项目对象模型，把一个项目当作一个模型来使用。控制maven构建项目的过程，管理jar依赖。<br>2、约定的目录结构：maven项目的目录和文件的位置都是规定的。<br>3、坐标：是一个唯一的字符串，用来表示资源。<br>4、依赖管理：管理项目中的jar包<br>5、仓库管理：资源存放的位置<br>6、生命周期：maven构建项目的过程<br>7、插件和目标：执行maven构建的时候用的 工具<br>8、继承<br>9、聚合</p>\n<h2 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h2><p>1、下载解压<br>2、配置环境变量<br>MAVEN_HOME=d:/apache-maven-3.3.9<br>path=%MAVEN_HOME%/bin;<br>3、验证是否安装成功<br>mvn -v<br><img src=\"/2020/06/01/maven/1.jpg\" alt></p>\n<h2 id=\"Maven工程约定的目录结构\"><a href=\"#Maven工程约定的目录结构\" class=\"headerlink\" title=\"Maven工程约定的目录结构\"></a>Maven工程约定的目录结构</h2><p><img src=\"/2020/06/01/maven/2.jpg\" alt></p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>存放maven使用的jar包和我们项目使用的jar包<br>仓库的分类：<br>本地仓库：个人计算机上的一个文件夹，存放jar包<br>远程仓库：在互联网上使用网络才能使用的仓库。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、中央仓库：最权威的，所有开发人员都共享使用的一个集中仓库<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、中央仓库的镜像：就是中央仓库的备份，分布在各大州，重要城市。减轻中央仓库的压力<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、私人服务器：在公司内部，局域网中使用，不对外使用<br>仓库的使用：<br>maven仓库的使用不需要认为参与<br>maven首先查本地仓库—&gt;私服—&gt;镜像—&gt;中央仓库</p>\n<h2 id=\"POM文件\"><a href=\"#POM文件\" class=\"headerlink\" title=\"POM文件\"></a>POM文件</h2><p>项目对象模型，Maven 把一个项目的结构和内容抽象成一个模型，在xml 文件中进行声明，以方便进行构建和描述，pom.xml 是Maven 的灵魂。<br>1、坐标，唯一值，在互联网中唯一标识一个项目</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 公司域名的倒写--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ch01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> <span class=\"comment\">&lt;!-- 自定义项目的名称--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> <span class=\"comment\">&lt;!-- 自定义版本号--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、packaging：打包后压缩文件的扩展名，默认为jar，web应用是war<br>3、依赖dependencies和dependency，相当于java中的import</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、设置属性properties<br>5、build：与构建相关的配置信息</p>\n<h2 id=\"IDEA集成Maven\"><a href=\"#IDEA集成Maven\" class=\"headerlink\" title=\"IDEA集成Maven\"></a>IDEA集成Maven</h2><p><img src=\"/2020/06/01/maven/3.jpg\" alt></p>\n<p><img src=\"/2020/06/01/maven/4.jpg\" alt></p>\n<p>选择Settings for New Projects再次设置<br><img src=\"/2020/06/01/maven/5.jpg\" alt></p>\n<h2 id=\"创建Maven版的普通的java项目\"><a href=\"#创建Maven版的普通的java项目\" class=\"headerlink\" title=\"创建Maven版的普通的java项目\"></a>创建Maven版的普通的java项目</h2><p>使用模板创建：<br><img src=\"/2020/06/01/maven/6.jpg\" alt></p>\n<p>项目结构：<br><img src=\"/2020/06/01/maven/7.jpg\" alt></p>\n<h2 id=\"创建Maven版的web项目\"><a href=\"#创建Maven版的web项目\" class=\"headerlink\" title=\"创建Maven版的web项目\"></a>创建Maven版的web项目</h2><p><img src=\"/2020/06/01/maven/8.jpg\" alt></p>\n<p>项目结构：<br><img src=\"/2020/06/01/maven/9.jpg\" alt></p>\n<p>添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个Servlet程序<br><img src=\"/2020/06/01/maven/10.jpg\" alt></p>\n<p>再运行环境中添加Tomcat服务器：<br><img src=\"/2020/06/01/maven/11.jpg\" alt></p>\n","categories":["构建工具"],"tags":["Maven"]},{"title":"MongoDB基础","url":"/2021/08/27/mongodb/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>MongoDB是由C++编写，基于分布式文件存储的开源数据库管理系统。<br>由多节点实现负载均衡，保证服务器性能。<br>旨在为web应用提供可拓展的高性能数据存储方案。<br>将数据存储为一个文档，数据结构由键值对构成。类似json对象。字段可以包含其他文档，数据和文档数据。<a id=\"more\"></a></p>\n<p>MongoDB是一个介于关系数据库（mysql，oracle，sqlserver）和非关系数据库（redis，Memrcache）之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库。</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>默认端口：27017</p>\n<p>collection：数据库表、集合，类似于关系型数据库中的表。</p>\n<ul>\n<li>没有固定的结构，可以插入不同格式和不同类型的数据。</li>\n<li>当第一个文档插入时，集合就会被创建。</li>\n</ul>\n<p>document：数据记录行、文档</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>String</p>\n<p>Integer</p>\n<p>Boolean</p>\n<p>Double</p>\n<p>Array</p>\n<p>Timestamp</p>\n<p>ObjectId</p>\n<p>Date</p>\n<p>BinaryData</p>\n<h1 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h1><p>1.创建数据库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use databaseName</span><br><span class=\"line\"><span class=\"comment\">// 创建集合才会创建数据库</span></span><br><span class=\"line\">db.createCollection(tableName)</span><br></pre></td></tr></table></figure>\n\n<p>2.删除数据库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">use databaseName</span><br><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n\n<p>3.删除集合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.drop()</span><br></pre></td></tr></table></figure>\n\n<p>4.插入数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.insert(&#123;<span class=\"string\">\"\"</span>:<span class=\"string\">\"\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>5.查询所有数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.find()</span><br></pre></td></tr></table></figure>\n\n<p>6.更新数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.update(&#123;查询参数&#125;,&#123;<span class=\"attr\">$set</span>:&#123;更新数据&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>7.不存在就插入，存在就替换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.save()</span><br></pre></td></tr></table></figure>\n\n<p>8.条件查询</p>\n<p>小于：{“Key”:{$lt:”Value”}}</p>\n<p>大于：{“Key”:{$gt:”Value”}}</p>\n<p>小于等于：{“Key”:{$lte:”Value”}}</p>\n<p>大于等于：{“Key”:{$gte:”Value”}}</p>\n<p>不等于：{“Key”:{$ne:”Value”}}</p>\n<p>and条件：,连接即可</p>\n<p>or条件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.find(&#123;<span class=\"attr\">$or</span>:[&#123;<span class=\"attr\">key1</span>:value1&#125;,&#123;<span class=\"attr\">key2</span>:value2&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分页：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.find().limit(pageSize).skip((pageNum<span class=\"number\">-1</span>)*pageSize)</span><br></pre></td></tr></table></figure>\n\n<p>排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1:升序   -1:降序</span></span><br><span class=\"line\">db.collectionName.find().sort(&#123;<span class=\"attr\">key</span>:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><p>创建索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key:索引字段  options: 1 升序创建 -1逆序创建</span></span><br><span class=\"line\">db.collectionName.createIndex(key,options)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.dropIndex(key,options)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有索引</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.collectionName.dropIndexs()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ul>\n<li>千万级数据存储</li>\n<li>日志记录</li>\n<li>搜索的历史记录</li>\n<li>时刻需要修改的数据</li>\n</ul>\n","categories":["分布式中间件"],"tags":["MongDB"]},{"title":"MyBatis全局配置文件","url":"/2020/05/25/mybatis-02/","content":"<p>便于在编写xml文件时有提示信息<a id=\"more\"></a><br><img src=\"/2020/05/25/mybatis-02/1.jpg\" alt></p>\n<p><img src=\"/2020/05/25/mybatis-02/2.jpg\" alt></p>\n<h2 id=\"properties属性\"><a href=\"#properties属性\" class=\"headerlink\" title=\"properties属性\"></a>properties属性</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">2824199842</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- properties标签引入properties配置文件</span></span><br><span class=\"line\"><span class=\"comment\">     resource 引入类路径下的资源</span></span><br><span class=\"line\"><span class=\"comment\">     url 引入网络或磁盘路径下的文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"dbConfig.properties\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"setting属性\"><a href=\"#setting属性\" class=\"headerlink\" title=\"setting属性\"></a>setting属性</h2><p>setting包含一些重要的设置，会改变MyBatis运行时行为</p>\n<p><img src=\"/2020/05/25/mybatis-02/3.jpg\" alt></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  settings标签包含很多重要的设置项  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"typeAliases别名处理器\"><a href=\"#typeAliases别名处理器\" class=\"headerlink\" title=\"typeAliases别名处理器\"></a>typeAliases别名处理器</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--typeAliases 别名处理器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;typeAlias type=\"bean.Employee\" alias=\"emp\"/&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- package 为某个包下的所有类批量起别名</span></span><br><span class=\"line\"><span class=\"comment\">             name:指定包名 为当前包下的所有后代包的每一个类起一个默认别名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bean\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/25/mybatis-02/4.jpg\" alt></p>\n<h2 id=\"typeHandlers类型处理器\"><a href=\"#typeHandlers类型处理器\" class=\"headerlink\" title=\"typeHandlers类型处理器\"></a>typeHandlers类型处理器</h2><p>无论是MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java 类型。<br><img src=\"/2020/05/25/mybatis-02/5.jpg\" alt></p>\n<h2 id=\"plugins插件\"><a href=\"#plugins插件\" class=\"headerlink\" title=\"plugins插件\"></a>plugins插件</h2><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。<br><img src=\"/2020/05/25/mybatis-02/6.jpg\" alt></p>\n<h2 id=\"environment环境配置\"><a href=\"#environment环境配置\" class=\"headerlink\" title=\"environment环境配置\"></a>environment环境配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  配置多个环境  default快速指定环境</span></span><br><span class=\"line\"><span class=\"comment\">      id  唯一标识环境</span></span><br><span class=\"line\"><span class=\"comment\">      transactionManager  事务管理器</span></span><br><span class=\"line\"><span class=\"comment\">      dataSource  数据源</span></span><br><span class=\"line\"><span class=\"comment\">                自定义数据源：实现DataSourceFactory接口--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</strong></p>\n<h2 id=\"databaseIdProvider环境\"><a href=\"#databaseIdProvider环境\" class=\"headerlink\" title=\"databaseIdProvider环境\"></a>databaseIdProvider环境</h2><p>MyBatis 可以根据不同的数据库厂商执行不同的语句。<br><img src=\"/2020/05/25/mybatis-02/7.jpg\" alt></p>\n<p><img src=\"/2020/05/25/mybatis-02/8.jpg\" alt></p>\n<h2 id=\"mapper映射\"><a href=\"#mapper映射\" class=\"headerlink\" title=\"mapper映射\"></a>mapper映射</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 将写好的sql映射文件注册到全局配置文件中--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- &lt;mapper resource=\"EmployeeMapper.xml\"/&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  批量注册    xml文件必须与接口文件名相同且在同一个包下  --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dao\"</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["ORM框架"],"tags":["MyBatis"]},{"title":"MyBatis简介及测试","url":"/2020/05/24/mybatis-01/","content":"<h2 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h2><p>MyBatis是一个半自动化的持久层框架。<br>sql与java编码分开，功能边界清晰，一个专注业务，一个专注数据。<a id=\"more\"></a><br><img src=\"/2020/05/24/mybatis-01/1.jpg\" alt></p>\n<h2 id=\"MyBatis的使用\"><a href=\"#MyBatis的使用\" class=\"headerlink\" title=\"MyBatis的使用\"></a>MyBatis的使用</h2><p><strong>创建测试的数据库mybatis，再创建一个student表</strong></p>\n<p><img src=\"/2020/05/24/mybatis-01/1.png\" alt></p>\n<h3 id=\"1、导入MyBatis-jar等相应的数据库连接驱动等相应的包\"><a href=\"#1、导入MyBatis-jar等相应的数据库连接驱动等相应的包\" class=\"headerlink\" title=\"1、导入MyBatis.jar等相应的数据库连接驱动等相应的包\"></a>1、导入MyBatis.jar等相应的数据库连接驱动等相应的包</h3><p>log4j.jar用于打印数据库日志（需要编写相应的.xml配置文件）<br><img src=\"/2020/05/24/mybatis-01/2.jpg\" alt></p>\n<h3 id=\"2、创建对应于数据库中表的javaBean对象\"><a href=\"#2、创建对应于数据库中表的javaBean对象\" class=\"headerlink\" title=\"2、创建对应于数据库中表的javaBean对象\"></a>2、创建对应于数据库中表的javaBean对象</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(Integer id, String name, String gender, String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gender = gender;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getGender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGender</span><span class=\"params\">(String gender)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gender = gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Employee&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", gender='\"</span> + gender + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", email='\"</span> + email + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写全局配置文件\"><a href=\"#3、编写全局配置文件\" class=\"headerlink\" title=\"3、编写全局配置文件\"></a>3、编写全局配置文件</h3><p>mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2824199842\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 将写好的sql映射文件注册到全局配置文件中--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"EmployeeMapper.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写sql映射文件-采用面向接口的方式\"><a href=\"#4、编写sql映射文件-采用面向接口的方式\" class=\"headerlink\" title=\"4、编写sql映射文件(采用面向接口的方式)\"></a>4、编写sql映射文件(采用面向接口的方式)</h3><p>创建dao层，并添加EmployeeDao接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EmployeeMapper.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;!-- namespace  名称空间  <span class=\"number\">1</span>.通过 namespace.id 来确定要执行的sql语句</span><br><span class=\"line\">                         <span class=\"number\">2</span>.指定为接口的全类名，用于绑定接口(一般使用这种方式)</span><br><span class=\"line\">     id  唯一标识   用于唯一标识一条sql语句</span><br><span class=\"line\">     result  返回值类型</span><br><span class=\"line\">     #&#123;id&#125;  从传递过来的参数中取出id值</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"dao.EmployeeDao\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 将接口中的函数与sql语句绑定--&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"getEmpById\"</span> resultType=<span class=\"string\">\"bean.Employee\"</span>&gt;</span><br><span class=\"line\">        select * from employee where id = #&#123;id&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、测试是否成功\"><a href=\"#5、测试是否成功\" class=\"headerlink\" title=\"5、测试是否成功\"></a>5、测试是否成功</h3><p>MybaitTest.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">getSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"comment\">// 根据 xml 配置文件创建一个SqlSessionFactory对象</span></span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SqlSession sqlSession = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1.获取SqlSessionFactory对象</span></span><br><span class=\"line\">            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class=\"line\">            <span class=\"comment\">// 2.获取sqlSession对象 用于执行sql语句</span></span><br><span class=\"line\">            sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">            <span class=\"comment\">// 3.获取接口实现类对象</span></span><br><span class=\"line\">            <span class=\"comment\">// 会为接口自动创建一个代理对象  代理对象去执行增删改查方法</span></span><br><span class=\"line\">            EmployeeDao mapper = sqlSession.getMapper(EmployeeDao<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            System.out.println(mapper.getClass());<span class=\"comment\">// 代理对象</span></span><br><span class=\"line\">            <span class=\"comment\">// 4.使用接口实现类对象调用接口中的方法</span></span><br><span class=\"line\">            Employee emp = mapper.getEmpById(<span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.println(emp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sqlSession!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                sqlSession.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["ORM框架"],"tags":["MyBatis"]},{"title":"MyBatis动态SQL","url":"/2020/05/30/mybatis-04/","content":"<p>动态SQL可以极大的简化拼装SQL的操作。类似于JSTL。<a id=\"more\"></a></p>\n<h2 id=\"if标签\"><a href=\"#if标签\" class=\"headerlink\" title=\"if标签\"></a>if标签</h2><p>动态传入查询所需要的条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapperDynamicSQL</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getEmpByConditionIf</span><span class=\"params\">(Employee emp)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"dao.EmployeeMapperDynamicSQL\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 查询某些条件没带上可能会出现sql拼接问题</span></span><br><span class=\"line\"><span class=\"comment\">        1.给where后面加上1=1,以后的条件都and xxx</span></span><br><span class=\"line\"><span class=\"comment\">        2.去掉where,使用&lt;where&gt;&lt;/where&gt;标签将所有查询条件包括在内</span></span><br><span class=\"line\"><span class=\"comment\">            只会去掉前面的多余的and或or--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByConditionIf\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        select * from employee</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"id!=null\"</span>&gt;</span>id=#&#123;id&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"name!=null and name.trim()!=''\"</span>&gt;</span>and name like #&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"email!=null and email.trim()!=''\"</span>&gt;</span>and email=#&#123;email&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"deptId!=null\"</span>&gt;</span> and dept_id=#&#123;deptId&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"gender==0 or gender==1\"</span>&gt;</span>gender=#&#123;gender&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"choose标签\"><a href=\"#choose标签\" class=\"headerlink\" title=\"choose标签\"></a>choose标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByConditionChoose\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">    select * from employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 如果带了id就用id查，如果带了name就用name查；只会进入其中一个--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"id!=null\"</span>&gt;</span>id=#&#123;id&#125;<span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"name!=null\"</span>&gt;</span>name like #&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"email!=null\"</span>&gt;</span> emial=#&#123;email&#125;<span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span>gender=0<span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"set标签\"><a href=\"#set标签\" class=\"headerlink\" title=\"set标签\"></a>set标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateEmp\"</span>&gt;</span></span><br><span class=\"line\">    update employee</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"name!=null and name.trim()!=''\"</span>&gt;</span> name=#&#123;name&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"email!=null and email.trim()!=''\"</span>&gt;</span>email=#&#123;email&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"deptId!=null\"</span>&gt;</span>dept_id=#&#123;deptId&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"gender==0 or gender==1\"</span>&gt;</span>gender=#&#123;gender&#125;<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    where id=#&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"foreach标签\"><a href=\"#foreach标签\" class=\"headerlink\" title=\"foreach标签\"></a>foreach标签</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询员工 id在给定集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getEmpByConditionForeach</span><span class=\"params\">( @Param(<span class=\"string\">\"ids\"</span>)</span> List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByConditionForeach\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">    select  * from employee where id in</span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- collection 指定要遍历的集合  list类型的参数会被封装成map</span></span><br><span class=\"line\"><span class=\"comment\">                    item  将当前遍历出的元素赋值给指定变量</span></span><br><span class=\"line\"><span class=\"comment\">                    separator  每个元素之间的分割符</span></span><br><span class=\"line\"><span class=\"comment\">                    #&#123;变量名&#125;  取出遍历的值</span></span><br><span class=\"line\"><span class=\"comment\">                    open 遍历出所有的结果拼接一个起始字符</span></span><br><span class=\"line\"><span class=\"comment\">                    close 遍历出所有的结果拼接一个结束字符</span></span><br><span class=\"line\"><span class=\"comment\">                    index 遍历list时是索引  遍历map时是key--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"ids\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"item_id\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span> <span class=\"attr\">open</span>=<span class=\"string\">\"(\"</span> <span class=\"attr\">close</span>=<span class=\"string\">\")\"</span>&gt;</span></span><br><span class=\"line\">        #&#123;item_id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; employeeList = mapper.getEmpByConditionForeach(Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Employee emp:employeeList)&#123;</span><br><span class=\"line\">    System.out.println(emp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"foreach批量添加数据\"><a href=\"#foreach批量添加数据\" class=\"headerlink\" title=\"foreach批量添加数据\"></a>foreach批量添加数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEmps</span><span class=\"params\">(@Param(<span class=\"string\">\"emps\"</span>)</span> List&lt;Employee&gt; emps)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addEmps\"</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO employee(name,email,gender,dept_id)</span><br><span class=\"line\">    VALUES</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"emps\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"emp\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">        (#&#123;emp.name&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.deptId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; emps = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">emps.add(<span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,<span class=\"string\">\"wd123\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"wd123@qq.com\"</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> Department()));</span><br><span class=\"line\">emps.add(<span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,<span class=\"string\">\"lz123\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"lz123@qq.com\"</span>,<span class=\"number\">2</span>,<span class=\"keyword\">new</span> Department()));</span><br><span class=\"line\">mapper.addEmps(emps);</span><br><span class=\"line\">sqlSession.commit();</span><br></pre></td></tr></table></figure>","categories":["ORM框架"],"tags":["MyBatis"]},{"title":"MyBatis缓存机制","url":"/2020/05/31/mybatis-05/","content":"<p>MyBatis系统中默认定义了两级缓存。<br>一级缓存和二级缓存：<br>1、默认情况下，只有一级缓存开启。(SqlSession级别的缓存，也称本地缓存)<br>2、二级缓存需要手动开启和配置。(namespace级别全局缓存)<br>3、MyBatis定义了缓存接口Cache，可以通过实现Cache接口自定义二级缓存<a id=\"more\"></a></p>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>与数据库<font color=\"red\">同一次会话期间</font>查询到的数据会存放在本地缓存中；<br>以后如果需要获取相同的数据，会从缓存中查找，不会访问数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFirstLevelCache</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class=\"line\">    SqlSession sqlSession = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        Employee empById1 = mapper.getEmpById(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(empById1);</span><br><span class=\"line\">        <span class=\"comment\">// 再次查询相同的数据</span></span><br><span class=\"line\">        Employee empById2 = mapper.getEmpById(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(empById2);</span><br><span class=\"line\">        System.out.println(empById1==empById2);<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sqlSession!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/31/mybatis-05/1.jpg\" alt></p>\n<p>可以看见在两次查询中，sql语句只向数据库发送了一次，并且第二次查询得到的对象与第一次完全相同，说明第二次查询访问的是内存中的缓存。</p>\n<p><strong>一级缓存失效的情况：</strong><br>1、不同的SqlSession对应不同的一级缓存；<br>2、同一个SqlSession但是查询条件不同；<br>3、同一个SqlSession两次查询期间执行了任何一次增删改操作；<br>4、同一个SqlSession两次查询期间手动清空了缓存。sqlSession.clearCache()</p>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>工作机制：<br>1、一个会话，查询一条数据，这个数据就会被保存在当前会话的一级缓存中；<br>2、<strong>如果会话关闭</strong>，一级缓存中的数据就会保存到二级缓存中。新的会话就会参照二级缓存。<br>3、不同的namespace查出的数据会放在自己对应的缓存中(map)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlSession——–EmployeeMapper——-Employee<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——–DepartmentMapper——-Department<br>使用：<br>1、开启全局二级缓存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  开启全局缓存--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在sql映射文件mapper.xml中配置使用二级缓存<br>只需在mapper标签的第一行添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- cache参数：</span></span><br><span class=\"line\"><span class=\"comment\">          eviction 缓存回收策略  默认LRU 最近最少使用</span></span><br><span class=\"line\"><span class=\"comment\">          flushInterval 缓存刷新间隔  默认不刷新</span></span><br><span class=\"line\"><span class=\"comment\">          readOnly  是否只读 默认flase</span></span><br><span class=\"line\"><span class=\"comment\">          size 缓存大小</span></span><br><span class=\"line\"><span class=\"comment\">          type 自定义缓存全类名(实现Cache接口)--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、JavaBean对象需要实现序列化Serializable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSecondLevelCache</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class=\"line\">    SqlSession sqlSession1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    SqlSession sqlSession2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        sqlSession1 = sqlSessionFactory.openSession();</span><br><span class=\"line\">        sqlSession2 = sqlSessionFactory.openSession();</span><br><span class=\"line\">        EmployeeMapper mapper1 = sqlSession1.getMapper(EmployeeMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        EmployeeMapper mapper2 = sqlSession2.getMapper(EmployeeMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 使用不同的sqlSession 查询相同的数据</span></span><br><span class=\"line\">        Employee empById1 = mapper1.getEmpById(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(empById1);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭会话，数据才会存入二级缓存  从一级缓存转移到二级缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession1.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Employee empById2 = mapper2.getEmpById(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(empById2);</span><br><span class=\"line\">        System.out.println(empById1 == empById2);<span class=\"comment\">// false empById1是一级缓存里面的 empById2是从二级缓存中获取的 故地址值不相同</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession2.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/31/mybatis-05/2.jpg\" alt></p>\n<h2 id=\"关闭缓存\"><a href=\"#关闭缓存\" class=\"headerlink\" title=\"关闭缓存\"></a>关闭缓存</h2><p>1、cacheEnabled=false：关闭二级缓存，一级缓存还可以使用<br>2、每一个select标签都有useCache = “true”（默认）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useCache = “false”：关闭二级缓存，一级缓存还可以使用<br>3、每一个增删改标签默认flushCache=”true”，查询标签默认flushCache=”false”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增删改操作执行完后就会清空缓存<br>4、sqlSession.clearCache()：只是清空当前sqlSession的一级缓存</p>\n<h2 id=\"缓存原理图\"><a href=\"#缓存原理图\" class=\"headerlink\" title=\"缓存原理图\"></a>缓存原理图</h2><p><img src=\"/2020/05/31/mybatis-05/3.jpg\" alt></p>\n","categories":["ORM框架"],"tags":["MyBatis"]},{"title":"MySQL概述","url":"/2020/02/20/mysql-01/","content":"<h2 id=\"数据库的好处\"><a href=\"#数据库的好处\" class=\"headerlink\" title=\"数据库的好处\"></a>数据库的好处</h2><p>1.实现数据是持久化<br>2.可以实现结构化查询，方便管理<a id=\"more\"></a></p>\n<h2 id=\"数据库相关概念\"><a href=\"#数据库相关概念\" class=\"headerlink\" title=\"数据库相关概念\"></a>数据库相关概念</h2><p>1.DB : 数据库，用于保存一组有组织的数据的容器；<br>2.DBMS : 数据库管理系统，用于管理DB中的数据；<br>3.SQL : 结构化查询语言，用来与数据库通信。</p>\n<h2 id=\"数据库储存数据的特点\"><a href=\"#数据库储存数据的特点\" class=\"headerlink\" title=\"数据库储存数据的特点\"></a>数据库储存数据的特点</h2><p>1.将数据放到表中，表在放到库中；<br>2.一个数据库有多张表，表名具有唯一性，用于表示自己；<br>3.表中有一些特性，这些特性决定了数据在表中如何储存，类似于java中“类”的设计；<br>4.表由列组成，也称为字段。所有表都是由一个或多个列组成，每一列类似于java类中            的“属性”；<br>5.表中的数据是按行储存的，每一行类似于java中的”对象”。</p>\n<h2 id=\"MySQL服务的启动和停止\"><a href=\"#MySQL服务的启动和停止\" class=\"headerlink\" title=\"MySQL服务的启动和停止\"></a>MySQL服务的启动和停止</h2><p>方式一：计算机—右击管理—服务<br>方式二：通过管理员身份运行cmd<br>启动服务 ：net start 服务名；<br>停止服务：net stop 服务名。</p>\n<h2 id=\"MySQL服务的登录与退出\"><a href=\"#MySQL服务的登录与退出\" class=\"headerlink\" title=\"MySQL服务的登录与退出\"></a>MySQL服务的登录与退出</h2><p>方式一：通过mysql自带的客户端，只限于root客户<br>方式二：通过window自带的客户端<br>登录：mysql -h主机名 -P端口号 -u用户名 -p密码<br>退出：exit 或 ctrl+c</p>\n<h2 id=\"MySQL常见命令\"><a href=\"#MySQL常见命令\" class=\"headerlink\" title=\"MySQL常见命令\"></a>MySQL常见命令</h2><p>1.查看当前所有的数据库：</p>\n<p>​            show databases;<br>2.打开指定的数据库：<br>​            use 库名;<br>3.查看当前库的所有表：<br>​            show tables;<br>4.查看其他库的所有表：<br>​            show tabkes from 库名;<br>5.创建表：<br>​            create table(<br>​            列名 列类型,<br>​            列名 列类型,<br>​            …….<br>​            )；<br>6.查看表结构：<br>​        desc 表名;<br>7.查看服务器版本：<br>​        方式一：登录到mysql服务端：<br>​        select version();<br>​        方式二：没有登录<br>​        mysql –version 或 mysql -V     </p>\n<h2 id=\"MySQL语法规范\"><a href=\"#MySQL语法规范\" class=\"headerlink\" title=\"MySQL语法规范\"></a>MySQL语法规范</h2><p>1.不区分大小写，但建议关键字大写，表名、列名小写；<br>2.每条命令最好用  分号结尾；<br>3.每条命令可根据需要进行缩进或换行；<br>4.单行注释：# 注释文字 或 – 注释文字<br>   多行注释：<code>/*注释文字*/</code></p>\n<h2 id=\"数据库三范式\"><a href=\"#数据库三范式\" class=\"headerlink\" title=\"数据库三范式\"></a>数据库三范式</h2><p>第一范式：列不可分<br>第二范式：要有主键<br>第三范式：不可存在传递依赖<br>比如商品表里面关联商品类别表，那么只需要一个关联字段product_type_id即可，其他字段信息可以通过表关联查询即可得到<br><strong>如果商品表还存在一个商品类别名称字段，如product_type_name，那就属于存在传递依赖的情况，第三范式主要是从空间的角度来考虑，避免产生冗余信息，浪费磁盘空间</strong>。</p>\n","categories":["数据库"],"tags":["MySQL"]},{"title":"DML,DDL","url":"/2020/03/19/mysql-03/","content":"<h1 id=\"数据库操作语言DML\"><a href=\"#数据库操作语言DML\" class=\"headerlink\" title=\"数据库操作语言DML\"></a>数据库操作语言DML</h1><h2 id=\"一、插入语句\"><a href=\"#一、插入语句\" class=\"headerlink\" title=\"一、插入语句\"></a>一、插入语句</h2><p>语法：<br>方式一：insert into 表名(列名,…) value(值1,…);<br>方式二：insert into 表名 set 列名=值,列名=值,…<a id=\"more\"></a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> beauty(<span class=\"keyword\">id</span>,<span class=\"keyword\">name</span>,sex,borndate,phone,photo,boyfriend_id)</span><br><span class=\"line\"> <span class=\"keyword\">VALUES</span>(<span class=\"number\">13</span>,<span class=\"string\">'Taylor'</span>,<span class=\"string\">'女'</span>,<span class=\"string\">'1990-1-1'</span>,<span class=\"string\">'123456789'</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> beauty <span class=\"keyword\">SET</span> <span class=\"keyword\">id</span> =<span class=\"number\">14</span>,<span class=\"keyword\">name</span>=<span class=\"string\">'刘涛'</span>,phone=<span class=\"string\">'987654321'</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、修改语句\"><a href=\"#二、修改语句\" class=\"headerlink\" title=\"二、修改语句\"></a>二、修改语句</h2><p>修改单表：<br>语法：update 表名 set 列=新值,….where 筛选条件;<br>修改多表：<br>语法：update 表1 别名,表2 别名 set 列=值,…where 连接条件;<br>update 表1 别名inner join表2 别名 on 连接条件 set 列=值,…where 筛选条件;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> beauty <span class=\"keyword\">SET</span> phone=<span class=\"string\">'123456'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> <span class=\"keyword\">LIKE</span><span class=\"string\">\"周%\"</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三、删除语句\"><a href=\"#三、删除语句\" class=\"headerlink\" title=\"三、删除语句\"></a>三、删除语句</h2><p>删除单表：<br>语法：delete from 表名 where 条件;<br>删除多表：<br>语法：delete 表1的别名,表2的别名 from 表1 别名，表2 别名where 连接条件 and 筛选条件;<br>            delete 表1的别名,表2的别名 from 表1 别名 inner join表2 别名 on 连接条件    where 筛选条件;</p>\n<p>删除整表：truncate table 表名;<br>1、如果要删除的表有自增长列，<br>用delete删除后再插入数据自增长值从断点开始<br>用truncate删除后再插入数据自增长的值从1开始<br>2、truncate没有返回值<br>3、truncate删除不能回滚，delete删除可以回滚</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> beauty <span class=\"keyword\">WHERE</span> phone <span class=\"keyword\">LIKE</span> <span class=\"string\">\"%9\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据定义语言DDL\"><a href=\"#数据定义语言DDL\" class=\"headerlink\" title=\"数据定义语言DDL\"></a>数据定义语言DDL</h1><h2 id=\"库的管理\"><a href=\"#库的管理\" class=\"headerlink\" title=\"库的管理\"></a>库的管理</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.库的创建</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：create database [if not exists]库名;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> book;</span><br><span class=\"line\"><span class=\"comment\"># 2.库的修改</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">一般不作修改</span></span><br><span class=\"line\"><span class=\"comment\">更改字符集：alter database 库名  character set 字符集;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 3.库的删除</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：drop [if exists]database 库名;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> book;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表的管理\"><a href=\"#表的管理\" class=\"headerlink\" title=\"表的管理\"></a>表的管理</h2><h3 id=\"创建：create\"><a href=\"#创建：create\" class=\"headerlink\" title=\"创建：create\"></a>创建：create</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">create table 表名(</span></span><br><span class=\"line\"><span class=\"comment\">\t列名 列的类型[(长度)约束],</span></span><br><span class=\"line\"><span class=\"comment\">\t列名 列的类型[(长度)约束],</span></span><br><span class=\"line\"><span class=\"comment\">\t....</span></span><br><span class=\"line\"><span class=\"comment\">\t列名 列的类型[(长度)约束],</span></span><br><span class=\"line\"><span class=\"comment\">);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">USE</span> book;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> book(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,<span class=\"comment\"># 编号</span></span><br><span class=\"line\">\tbname <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),<span class=\"comment\"># 书名</span></span><br><span class=\"line\">\tprice <span class=\"keyword\">DOUBLE</span>,<span class=\"comment\"># 价格</span></span><br><span class=\"line\">\tauthor <span class=\"built_in\">INT</span>,<span class=\"comment\"># 作者id</span></span><br><span class=\"line\">\tpublishDate DATETIME <span class=\"comment\"># 出版日期</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">DESC book; <span class=\"comment\"># 查看表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> author(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">\tau_name <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\tnation <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">DESC author;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 表的复制</span></span><br><span class=\"line\"><span class=\"comment\"># 仅仅复制表的结构</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> copy <span class=\"keyword\">LIKE</span> book;</span><br><span class=\"line\"><span class=\"comment\"># 复制表的结构和数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> copy1 <span class=\"keyword\">select</span> * <span class=\"keyword\">FROM</span> book;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改：alter\"><a href=\"#修改：alter\" class=\"headerlink\" title=\"修改：alter\"></a>修改：alter</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改列名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>\tbook <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> publishDate pubdate DATETIME;</span><br><span class=\"line\"><span class=\"comment\"># 修改列的类型和约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> book <span class=\"keyword\">MODIFY</span> <span class=\"keyword\">COLUMN</span> pubDate <span class=\"built_in\">TIMESTAMP</span></span><br><span class=\"line\"><span class=\"comment\"># 添加新列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> author <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> annual <span class=\"keyword\">DOUBLE</span>;</span><br><span class=\"line\"><span class=\"comment\"># 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> author <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> annual;</span><br><span class=\"line\"><span class=\"comment\"># 修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> author <span class=\"keyword\">RENAME</span> book_author;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除：drop\"><a href=\"#删除：drop\" class=\"headerlink\" title=\"删除：drop\"></a>删除：drop</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> book_author;</span><br></pre></td></tr></table></figure>\n\n","categories":["数据库"],"tags":["MySQL"]},{"title":"MySQL数据类型，约束，标识列","url":"/2020/03/21/mysql-04/","content":"<h2 id=\"一、数值型\"><a href=\"#一、数值型\" class=\"headerlink\" title=\"一、数值型\"></a>一、数值型</h2><p><strong>整型：</strong><br>Tinyint：1个字节，有符号：-128到127 ，无符号(unsigned)：0到255<br>Smallint：2个字节，有符号：-32768到32767，无符号数：0到65535<br>Mediumint：3个字节<br>int/Integer：4个字节<br>Bigint：8个字节<a id=\"more\"></a><br><strong>小数：</strong>M：整数位+小数位，D：小数位<br>定点数：（精度较高）<br>dec(M,D)<br>decimal(M,D)<br>浮点数：<br>float(M,D)：4个字节<br>double(M,D)：8个字节</p>\n<h2 id=\"二、字符型\"><a href=\"#二、字符型\" class=\"headerlink\" title=\"二、字符型\"></a>二、字符型</h2><p><strong>较短的文本：</strong>最多的字符数M<br>char(M)：固定长度，M为0到255  可以省略  默认为1，比较耗费空间，效率较高<br>varchar(M)：可变长度，M为0到65535  不可以省略，节省空间，效率低</p>\n<h2 id=\"三、日期型\"><a href=\"#三、日期型\" class=\"headerlink\" title=\"三、日期型\"></a>三、日期型</h2><p>date：4字节<br>datetime：8字节<br>timestamp：4字节<br>time：3字节<br>year：1字节</p>\n<h2 id=\"常见约束\"><a href=\"#常见约束\" class=\"headerlink\" title=\"常见约束\"></a>常见约束</h2><p>NOT NULL：非空，保证该字段的值不能为空。比如姓名，学号等<br>DEFAULT：默认，保证该字段有默认值。比如性别<br>PRIMARITY：主键，保证该字段具有唯一性，且不为空。比如学号，员工编号<br>UNIQUE：唯一，保证该字段具有唯一性。比如座位号<br>CHECK：检查约束（mysql不支持）。比如性别<br>FOREIGN KEY：外键，用于限制两个表的关系，保证该字段的值必须来自主表的关联的值。在从表添加外键约束，用于引用主表中某一列的值。比如学生表的专业编号，员工表的部门编号，员工表的工种编号    </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加列级约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stuinfo(</span><br><span class=\"line\">\t\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,<span class=\"comment\"># 主键</span></span><br><span class=\"line\">\t\tstuname <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,<span class=\"comment\"># 非空</span></span><br><span class=\"line\">\t\tgender <span class=\"built_in\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">CHECK</span> (gender=<span class=\"string\">'男'</span> <span class=\"keyword\">OR</span> gender=<span class=\"string\">'女'</span>),<span class=\"comment\"># 检查   不支持</span></span><br><span class=\"line\">\t\tseatid <span class=\"built_in\">INT</span>  <span class=\"keyword\">UNIQUE</span>,<span class=\"comment\"># 唯一</span></span><br><span class=\"line\">\t\tage <span class=\"built_in\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">18</span>,<span class=\"comment\"># 默认约束</span></span><br><span class=\"line\">\t\tmajorid <span class=\"built_in\">INT</span> <span class=\"keyword\">REFERENCES</span> major(<span class=\"keyword\">id</span>)<span class=\"comment\"># 外键 不支持</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> major(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">\tmajorname <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">INDEX</span> <span class=\"keyword\">FROM</span> stuinfo;<span class=\"comment\"># 查看所有的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.添加表级约束</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> stuinfo;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stuinfo(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">stuname <span class=\"built_in\">char</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">gender <span class=\"built_in\">char</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">age <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">seatid <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">majorid <span class=\"built_in\">INT</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> pk PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>),<span class=\"comment\"># 主键</span></span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> ck <span class=\"keyword\">CHECK</span>(gender=<span class=\"string\">'男'</span><span class=\"keyword\">or</span><span class=\"string\">'女'</span>),<span class=\"comment\"># 检查  不支持</span></span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> uq <span class=\"keyword\">UNIQUE</span>(seatid),<span class=\"comment\"># 唯一</span></span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> fk_stuinfo_major <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (majorid) <span class=\"keyword\">REFERENCES</span> major(<span class=\"keyword\">id</span>) <span class=\"comment\"># 外键</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\"># 修改表时添加约束</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.添加列级约束</span></span><br><span class=\"line\"><span class=\"comment\">alter table 表名 modify column 字段名 字段类型 新约束;</span></span><br><span class=\"line\"><span class=\"comment\">2.添加表级约束</span></span><br><span class=\"line\"><span class=\"comment\">alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键的引用]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.标识列必须与key（主键，外键，unique）搭配</span></span><br><span class=\"line\"><span class=\"comment\">2.一个表至多有一个标识列</span></span><br><span class=\"line\"><span class=\"comment\">3.标识列的类型只能是数值型</span></span><br><span class=\"line\"><span class=\"comment\">4.可通过set auto_increment_increment=数字;设置步长</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 创建表时设置标识列</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> stuinfo(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT,</span><br><span class=\"line\">stuname <span class=\"built_in\">char</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">gender <span class=\"built_in\">char</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">age <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">seatid <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">majorid <span class=\"built_in\">INT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\"># 修改表时设置标识列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> stuinfo <span class=\"keyword\">MODIFY</span>  <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["数据库"],"tags":["MySQL"]},{"title":"事务,视图,索引","url":"/2020/03/21/mysql-05/","content":"<p><strong>事务：</strong>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。<a id=\"more\"></a><br><strong>事务的属性：</strong><br>原子性：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生；<br>一致性：事务必须使数据库从一个一致状态变换到另外一个一致状态；<br>隔离性：一个事务的执行不受其他事务的干扰；<br>持久性：一个事务一旦被提交，它对数据库的改变就是永久的。</p>\n<h2 id=\"事务的创建\"><a href=\"#事务的创建\" class=\"headerlink\" title=\"事务的创建\"></a>事务的创建</h2><p>隐式事务：事务没有明显的开启和结束。<br>显式事务：设置提交功能为禁用，事务具有明显的开启和结束的标记<br>步骤1：开启事务<br>set autocommit=0;<br>start transaction;# 可以省略<br>步骤2：编写事务中的sql语句<br>语句1;<br>语句2;<br>步骤3：结束事务<br>commit;或者rollback;</p>\n<h2 id=\"数据库的隔离级别\"><a href=\"#数据库的隔离级别\" class=\"headerlink\" title=\"数据库的隔离级别\"></a>数据库的隔离级别</h2><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采用必要的隔离机制，就会导致各种并发问题：<br><strong>脏读：</strong>对于两个事务T1、T2，T1读取了已经被T2更新但还没有被提交的字段。之后，若T2回滚，T1读取的内容就是临时且无效的。<br><strong>不可重复读：</strong>对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段。之后，T1再次读取同一个字段，值就不同了。<br><strong>幻读：</strong>对于两个事务T1、T2，T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行。之后，若T1再次读取同一个表，就会多出几行。<br><img src=\"/2020/03/21/mysql-05/1.png\" alt></p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>从mysql5.0.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果。</p>\n<p><strong>创建视图：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">create view 视图名</span></span><br><span class=\"line\"><span class=\"comment\">as</span></span><br><span class=\"line\"><span class=\"comment\">查询语句;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 查询邮箱中包含a字符的员工名、部门名和工种信息</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> myview1 </span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,department_name,job_title <span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> departments d <span class=\"keyword\">ON</span> e.department_id=d.department_id</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> jobs j <span class=\"keyword\">ON</span> e.job_id=j.job_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> myview1 <span class=\"keyword\">WHERE</span> last_name <span class=\"keyword\">LIKE</span> <span class=\"string\">\"%a%\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>好处：</strong><br>1.重用sql语句<br>2.简化复杂的sql操作，不必知道它的查询细节<br>3.保护数据，提高安全性</p>\n<p><strong>删除视图：</strong>drop view 视图名1,视图名2,…<br>视图与表的区别：<br>视图只是保留了sql逻辑，没有保存数据，虽然可以增删改查，但是一般只作查询使用。</p>\n<h2 id=\"索引的分类\"><a href=\"#索引的分类\" class=\"headerlink\" title=\"索引的分类\"></a>索引的分类</h2><p>索引是帮助数据库高效获取数据的数据结构。建立索引时会将数据排序，类似于图书的目录，根据目录中的索引查找到对应的页码。<br>分为：</p>\n<ul>\n<li>主键索引（primary key）<ul>\n<li>唯一的标识，主键不可重复，只能由一个列作为主键</li>\n</ul>\n</li>\n<li>唯一索引（unique key）<ul>\n<li>避免重复列的出现，唯一索引可以重复，多个列都可以标识为唯一索引</li>\n</ul>\n</li>\n<li>常规索引 (key/index)<ul>\n<li>默认的</li>\n</ul>\n</li>\n<li>全文索引(fulltext)<ul>\n<li>特定的数据库引擎才有</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>创建索引的三种方式</p>\n</blockquote>\n<p>方式一：创建表的时候</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    age <span class=\"built_in\">TINYINT</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">    <span class=\"keyword\">UNiQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`UX_name`</span> (<span class=\"string\">`name`</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式二：使用alter table命令，创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (column_list);</span><br></pre></td></tr></table></figure>\n\n<p>方式三：使用create index命令，增加普通索引或unique索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name (column_list);</span><br></pre></td></tr></table></figure>\n\n<p>索引在数据小的时候，作用不大，但是在数据大时，区别十分明显</p>\n<h2 id=\"索引原则\"><a href=\"#索引原则\" class=\"headerlink\" title=\"索引原则\"></a>索引原则</h2><ul>\n<li>索引不是越多越好</li>\n<li>不要对经常变动的数据添加索引</li>\n<li>小数据不需要添加索引</li>\n<li>索引一般加在常用来查询的字段上</li>\n</ul>\n","categories":["数据库"],"tags":["MySQL"]},{"title":"MySQL变量,存储过程,流程结构","url":"/2020/03/22/mysql-06/","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><strong>系统变量：</strong>由系统提供，属于服务层面<a id=\"more\"></a><br>_全局变量：_服务器每次启动将为所有全局变量赋初值。针对所有会话(连接)有效，但不能跨重启。<br>_会话变量：_仅仅针对于当前的会话(连接)有效。<!--more--><br>查看所有的系统变量：show global | [ session] variable;<br>查看满足条件的系统变量：show global | [session] variable  like ‘%char%’;<br>查看指定系统变量：select @@global | [session].系统变量名;<br>为某个系统变量赋值：<br>set global | [session] 系统变量名=值;<br>set @@global \\ [session].系统变量名=值;</p>\n<p><strong>自定义变量：</strong>用户自定义<br>_用户变量：_针对于当前会话(连接)有效<br>1.声明并初始化<br>set @用户变量名=值;<br>set @用户变量名:=值;<br>select @用户变量名:=值;<br>2.赋值<br>set @用户变量名=值;<br>set @用户变量名:=值;<br>select @用户变量名:=值;<br>select into select 字段  into 变量名 from 表;<br>_局部变量：_仅仅在定义它的begin end中有效<br>1.声明<br>declare 变量 类型 [default 值];<br>2.赋值<br>与用户变量相同</p>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><p>事先经过编译并存储在数据库中一组完成特定功能的sql语句的集合。就是数据库 SQL 语言层面的代码封装与重用。<br>好处：<br>1.提高了代码的重用性；<br>2.简化操作；<br>3.减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">一、创建存储过程</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">create procedure 存储过程名(参数列表)</span></span><br><span class=\"line\"><span class=\"comment\">begin</span></span><br><span class=\"line\"><span class=\"comment\">\t存储过程体</span></span><br><span class=\"line\"><span class=\"comment\">end</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">1、参数列表分为：参数模式  参数名 参数类型</span></span><br><span class=\"line\"><span class=\"comment\">参数模式：</span></span><br><span class=\"line\"><span class=\"comment\">in：该参数可以作为输入，也就是说该参数需要调用方传入值</span></span><br><span class=\"line\"><span class=\"comment\">out：该参数可以作为输出，也就是说该参数可以作为返回值</span></span><br><span class=\"line\"><span class=\"comment\">inout：该参数既可以作为输入也可以作为输入</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">二、调用存储过程</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">call  储存过程名(实参列表);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myp1()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span>  <span class=\"keyword\">INTO</span> <span class=\"keyword\">admin</span>(username,<span class=\"string\">`password`</span>)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"123456\"</span>),(<span class=\"string\">\"Tom\"</span>,<span class=\"string\">\"123456\"</span>),(<span class=\"string\">\"Jerry\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myp1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建带in模式参数的储存过程</span></span><br><span class=\"line\"><span class=\"comment\"># 创建存储过程判断用户是否登录成功</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myp2(<span class=\"keyword\">IN</span> username <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>),<span class=\"keyword\">IN</span> <span class=\"string\">`password`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">DECLARE</span> <span class=\"keyword\">result</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> <span class=\"keyword\">result</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">FROM</span> <span class=\"keyword\">admin</span> <span class=\"keyword\">WHERE</span> admin.username=username <span class=\"keyword\">AND</span> admin.<span class=\"string\">`password`</span>=<span class=\"string\">`password`</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">IF</span>(<span class=\"keyword\">result</span>&gt;<span class=\"number\">0</span>,<span class=\"string\">\"成功\"</span>,<span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myp2(<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建带out模式参数的储存过程</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myp3(<span class=\"keyword\">IN</span> username <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>),<span class=\"keyword\">IN</span> <span class=\"string\">`password`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>),<span class=\"keyword\">OUT</span> <span class=\"keyword\">result</span> <span class=\"built_in\">char</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">DECLARE</span> result1 <span class=\"built_in\">INT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> result1</span><br><span class=\"line\">\t\t<span class=\"keyword\">FROM</span> <span class=\"keyword\">admin</span> <span class=\"keyword\">WHERE</span> admin.username=username <span class=\"keyword\">AND</span> admin.<span class=\"string\">`password`</span>=<span class=\"string\">`password`</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">SET</span> <span class=\"keyword\">result</span> = <span class=\"keyword\">IF</span>(result1&gt;<span class=\"number\">0</span>,<span class=\"string\">\"true\"</span>,<span class=\"string\">\"false\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> myp3(<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"123456\"</span>,@<span class=\"keyword\">result</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @<span class=\"keyword\">result</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三、删除储存过程</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> myp3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 四、查看储存过程</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> myp2;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>与储存过程的区别：<br>储存过程：可以有0个或多个返回值，适合批量插入、批量更新<br>函数：有且仅有一个返回值，适合处理数据后返回一个结果。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建函数</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">create function 函数名(参数列表) returns  返回类型</span></span><br><span class=\"line\"><span class=\"comment\">begin</span></span><br><span class=\"line\"><span class=\"comment\">\t函数体  </span></span><br><span class=\"line\"><span class=\"comment\">end</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程控制结构\"><a href=\"#流程控制结构\" class=\"headerlink\" title=\"流程控制结构\"></a>流程控制结构</h2><p><strong>if函数：</strong><br>if(表达式1，表达式2，表达式3)：如果表达式1成立，返回表达式2的值，否则返回表达式3的值。</p>\n<p><strong>case结构：</strong><br>case 变量|表达式|字段<br>when条件1或值 then 要返回的值或要执行的语句;<br>when条件2或值 then 要返回的值或要执行的语句;<br>when条件3或值 then 要返回的值或要执行的语句;<br>……<br>else  要返回的值或要执行的语句;<br> end case;</p>\n<p><strong>if结构：</strong><br>if 条件1 then 语句1；<br>elif 条件2 then 语句2；<br>……<br>else then 语句n；<br>end if;</p>\n<p><strong>循环结构：</strong><br>分类：while , loop  , repeat<br>循环控制：<br>iterate  类似于  continue  ,继续，结束本次循环继续下一次<br>leavele  类似于 break   ,跳出  ，结束当前所在循环<br>1.while</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[标签:]while 循环条件 <span class=\"keyword\">do</span></span><br><span class=\"line\">\t循环体;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">while</span> [标签];</span><br></pre></td></tr></table></figure>\n\n<p>2.loop</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[标签:]loop </span><br><span class=\"line\">\t循环体;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">loop</span> [标签]</span><br></pre></td></tr></table></figure>\n\n<p>3.repeat</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[标签:]repeat</span><br><span class=\"line\">\t循环体;</span><br><span class=\"line\">until 结束循环的条件</span><br><span class=\"line\"> <span class=\"keyword\">end</span> <span class=\"keyword\">repeat</span> [标签];</span><br></pre></td></tr></table></figure>\n\n","categories":["数据库"],"tags":["MySQL"]},{"title":"连接查询和索引","url":"/2020/09/09/mysql-senior/","content":"<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>查看所有引擎以及当前使用的引擎：<a id=\"more\"></a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">engines</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%storage_engine%'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>主要分为MyISAM与InnoDB<br><img src=\"/2020/09/09/mysql-senior/1.png\" style=\"zoom:70%;\"></p>\n<h2 id=\"性能下降的原因\"><a href=\"#性能下降的原因\" class=\"headerlink\" title=\"性能下降的原因\"></a>性能下降的原因</h2><p>1、查询语句写的烂</p>\n<p>2、索引失效</p>\n<p>3、关联查询太多的join</p>\n<p>4、服务器调优及各个参数的设置（缓冲、线程数等）</p>\n<h2 id=\"常见的join查询\"><a href=\"#常见的join查询\" class=\"headerlink\" title=\"常见的join查询\"></a>常见的join查询</h2><p>查询顺序：<br>手写：<br><img src=\"/2020/09/09/mysql-senior/2.png\" style=\"zoom:80%;\"></p>\n<p>机读：<br><img src=\"/2020/09/09/mysql-senior/3.png\" alt></p>\n<p><img src=\"/2020/09/09/mysql-senior/4.png\" alt></p>\n<p>七种连接的情况：<br><img src=\"/2020/09/09/mysql-senior/5.png\" style=\"zoom:80%;\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 内连接 左、右表共有</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_emp e <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左外 左表独有+左、右表共有</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_emp e <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左表有，右表没有</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_emp e <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id </span><br><span class=\"line\"><span class=\"keyword\">where</span> d.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全有 左表独有+左、右表共有+右表独有</span></span><br><span class=\"line\"><span class=\"comment\"># mysql不支持全外</span></span><br><span class=\"line\"><span class=\"comment\"># select * from  t_emp e full out join t_dept d on e.deptid=d.id;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用union联合查询 union:联合加去重</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>  t_emp e <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id <span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>  t_emp e <span class=\"keyword\">right</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左、右表各自独有 左表独有+右表独有</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>  t_emp e <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id </span><br><span class=\"line\"><span class=\"keyword\">where</span> d.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>  t_emp e <span class=\"keyword\">right</span> <span class=\"keyword\">join</span> t_dept d <span class=\"keyword\">on</span> e.deptid=d.id</span><br><span class=\"line\"><span class=\"keyword\">where</span> e.deptid <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"索引简介\"><a href=\"#索引简介\" class=\"headerlink\" title=\"索引简介\"></a>索引简介</h3><p>索引就是帮助mysql高速获取数据的一种<strong>数据结构</strong>，目的在于提高查找效率，类比字典，如果查询mysql这个词，首先定位到m字母，然后依次定位到之后的字母，直到找到为止。</p>\n<p><font color=\"red\"><strong>简单的理解为 ” 排好序的快速查找数据结构 “ 。</strong></font><br><img src=\"/2020/09/09/mysql-senior/6.png\" alt></p>\n<p>为了加快Col2的查找，数据库维护了一个查找二叉树（B树），每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在快速获取相应的数据。</p>\n<p>索引也很大，不能完全存储在内存中，一般以索引文件的形式存储在磁盘中。</p>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><blockquote>\n<p>单值索引(主键索引)</p>\n</blockquote>\n<p>一个索引只包含单个列，一个表可以有多个单值索引。（建议不超过5个）</p>\n<blockquote>\n<p>normal索引</p>\n</blockquote>\n<blockquote>\n<p>全文索引</p>\n</blockquote>\n<blockquote>\n<p>唯一索引</p>\n</blockquote>\n<p>索引列的值必须唯一，但允许有空值</p>\n<blockquote>\n<p>复合索引</p>\n</blockquote>\n<p>一个索引包含了多个列</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p>创建</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> [<span class=\"keyword\">unique</span>] <span class=\"keyword\">index</span> indexname <span class=\"keyword\">on</span> <span class=\"keyword\">table</span>(cloumnname(<span class=\"keyword\">length</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"keyword\">add</span> [<span class=\"keyword\">unique</span>] <span class=\"keyword\">index</span> [indexname] <span class=\"keyword\">on</span> (columnname(<span class=\"keyword\">length</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>删除</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> [indexname] <span class=\"keyword\">on</span> <span class=\"keyword\">table</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引适用的条件\"><a href=\"#索引适用的条件\" class=\"headerlink\" title=\"索引适用的条件\"></a>索引适用的条件</h3><ul>\n<li>主键自动建立唯一索引；</li>\n<li>频繁作为查询条件的字段应该创建索引</li>\n<li>查询中与其它表关联的字段，外键关系建立索引</li>\n<li>单键/组合索引的选择问题，组合索引性价比更高</li>\n<li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n</ul>\n<h3 id=\"索引不适用的条件\"><a href=\"#索引不适用的条件\" class=\"headerlink\" title=\"索引不适用的条件\"></a>索引不适用的条件</h3><ul>\n<li>表记录太少</li>\n<li>经常增删改的表或者字段</li>\n<li>Where 条件里用不到的字段不创建索引</li>\n<li>过滤性不好的不适合建索引</li>\n</ul>\n<h3 id=\"索引失效的情况\"><a href=\"#索引失效的情况\" class=\"headerlink\" title=\"索引失效的情况\"></a>索引失效的情况</h3><p>索引失效分析工具：</p>\n<p>可以使用explain命令加在要分析的sql语句前面，在执行结果中查看key这一列的值，如果为NULL，说明没有使用索引</p>\n<ul>\n<li>在使用<code>like“%字段%”</code>进行查询时，是进行全表扫描的，不会使用索引，因为索引是遵循最左匹配的原则的，所以说当扫描到第一个是“%”时，并不会使用索引进行查询。</li>\n<li><code>or</code>语句前后没有同时使用索引</li>\n<li>查询时没有用到联合索引的第一个字段</li>\n<li>在索引字段上使用<code>not</code>，<code>&lt;&gt;</code>，<code>!=</code>。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： <code>key&lt;&gt;0</code> 改为 <code>key&gt;0 or key&lt;0</code></li>\n<li>对索引字段进行计算操作、字段上使用函数</li>\n</ul>\n<h2 id=\"sql优化\"><a href=\"#sql优化\" class=\"headerlink\" title=\"sql优化\"></a>sql优化</h2><ul>\n<li>正确使用索引</li>\n<li>select不要带<code>*</code></li>\n<li>where后面接索引字段，or两边接索引字段</li>\n<li>join条件要有索引字段</li>\n<li>减少子查询，连表查询</li>\n</ul>\n","categories":["数据库"],"tags":["MySQL"]},{"title":"Nginx学习笔记","url":"/2021/02/21/nginx/","content":"<h2 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h2><p>Nginx是一个高性能的Http和反向代理服务器，特点是占有内存少，并发性能强。<a id=\"more\"></a></p>\n<h3 id=\"正向代理与反向代理\"><a href=\"#正向代理与反向代理\" class=\"headerlink\" title=\"正向代理与反向代理\"></a>正向代理与反向代理</h3><p><strong>正向代理：</strong>例如用户通过浏览器访问Google，直接访问是访问不到的，我们所使用的科学上网工具访问Google，就是一种正向代理：用户通过科学上网工具访问代理服务器，然后代理服务器去访问Google，将获取到的数据再返回给用户。</p>\n<p><strong>反向代理：</strong>用户通过访问反向代理服务器，由反向代理服务器将请求分发给不同的服务器。用户对真正提供服务的服务器是无感知的，暴露给用户的是反向代理服务器，隐藏了真正提供服务的服务器。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>随着访问网站访问并发量的增大，可以将原来的单体架构进行拆分，增加多台服务器，在用户访问服务器之前先访问反向代理服务器，由反向代理服务器将多个请求分发到多台服务器上，将负载分发到不同的服务单元，既保证了服务发可用性，也加快了请求的响应时间。</p>\n<h3 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析的速度，降低原来单个服务器的压力。</p>\n<h2 id=\"Windows下安装与启动\"><a href=\"#Windows下安装与启动\" class=\"headerlink\" title=\"Windows下安装与启动\"></a>Windows下安装与启动</h2><p>下载完成后直接解压，命令行进入<code>nginx.exe</code>所在的文件路径，使用命令行执行相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭服务</span></span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载服务</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>启动后直接访问<code>localhost:80</code></p>\n<h2 id=\"Nginx配置文件\"><a href=\"#Nginx配置文件\" class=\"headerlink\" title=\"Nginx配置文件\"></a>Nginx配置文件</h2><blockquote>\n<p>全局块：从配置文件开始到<code>events</code>之间的内容，主要影响<code>nginx</code>服务器整体运行的配置指令</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 表示可以支持的最大并发量</span></span><br><span class=\"line\">worker_processes 1;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>events块：主要影响<code>nginx</code>服务器与用户的网络连接</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 表示支持的最大连接数</span></span><br><span class=\"line\">worker_connections 1024;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>http</code>块：配置最频繁的部分，nginx的主要功能就是在这里配置，包括<code>http</code>全局块和<code>server</code>块</p>\n</blockquote>\n<p><strong>在Nginx上部署前端项目，并通过反向代理的方式，实现跨域</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\"><span class=\"code\">\t# 监听的IP和端口</span></span><br><span class=\"line\"><span class=\"code\">\tlisten       8080; </span></span><br><span class=\"line\"><span class=\"code\">\tserver_name  localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">\tlocation / &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\t# 前端项目，这里直接放在了nginx根目录下面，可以设置为代理服务器</span></span><br><span class=\"line\"><span class=\"code\">\t\troot   wms_front; </span></span><br><span class=\"line\"><span class=\"code\">\t\tindex  index.html index.htm;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">\tlocation ~ /wms/ &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tproxy_pass  http://localhost:8081; # 配置自己后台访问的ip端口或域名</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在访问<code>http://localhost:8080</code>时，实际访问的是<code>Nginx</code>根目录下的<code>wms_front/index.html</code>；<br><code>http://localhost:8080/wms/</code>下的所有请求都会转发到<code>http://localhost:8081/wms/</code></p>\n<p><strong>负载均衡配置：</strong></p>\n<p>在<code>http</code>块添加：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream myserver&#123;</span><br><span class=\"line\">ip_hash;</span><br><span class=\"line\">server 192.168.1.1 weight=1;</span><br><span class=\"line\">server 192.168.1.2 weight=1;</span><br><span class=\"line\">fair;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\"><span class=\"code\">\tproxy_pass  http://myserver;</span></span><br><span class=\"line\"><span class=\"code\">\tproxy_connection_timeout 10;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>nginx分配策略：</p>\n<p>1、轮询<br>每个请求按照时间顺序逐一分配到不同的服务器，如果后端服务器宕机，则自动剔除。</p>\n<p>2、权重<br><code>weight</code>表示权重，默认为1，权重越高被分配的客户端越多 。</p>\n<p>3、ip_hash<br>每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个<code>ip</code>固定访问一个服务器，可解决<code>session</code>问题。</p>\n<p>4、fair<br>按后端服务器的响应时间分配，响应时间短的，优先分配。</p>\n</blockquote>\n<h2 id=\"Nginx原理\"><a href=\"#Nginx原理\" class=\"headerlink\" title=\"Nginx原理\"></a>Nginx原理</h2><p>在<code>nginx</code>启动后，会有一个<code>master</code>进程和多个<code>worker</code>进程，<code>master</code>进程主要用来管理<code>worker</code>进程，包括：接受信号，将信号分发给<code>worker</code>进程，监听<code>worker</code>进程工作状态，当<code>worker</code>进程退出时(非正常)，启动新的<code>worker</code>进程。基本的网络事件会交给<code>worker</code>进程处理。多个<code>worker</code>进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。<br><img src=\"/2021/02/21/nginx/1.jpg\" style=\"zoom:72%;\"></p>\n<p><img src=\"/2021/02/21/nginx/2.jpg\" alt></p>\n","categories":["运维"],"tags":["Ngnix"]},{"title":"Oracle基础","url":"/2021/08/23/oracle/","content":"<p>默认端口：1521</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>char(length)：存储固定长度，默认1位，不超过2000位</p>\n<p>varchar2(length)：存储可变长度，默认1位，不超过4000位<a id=\"more\"></a></p>\n<p>number(p,s)：既可以存储整型，又可以存储浮点型，p表示数字的最大位数，s表示小数位数</p>\n<p>date</p>\n<p>timestamp</p>\n<h1 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">INTO</span> Student <span class=\"keyword\">VALUES</span>(<span class=\"string\">'zhangyuzhen1'</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">INTO Student <span class=\"keyword\">VALUES</span>(<span class=\"string\">'zhangyuzhen2'</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h1><p>两个查询条件：</p>\n<ul>\n<li>条件1，rownum&lt;=pageNum*pageSize</li>\n<li>条件2，rn&gt;=(pageNum-1)*pageSize+1</li>\n<li>查询过程：<ul>\n<li>首先查询指定页数以及指定页数前的所有记录（包含数据和行号rownum） <code>where rownum&lt;=pageNum*pageSize</code></li>\n<li>然后对查询到的记录进行子查询，查询到指定页数的所有记录<code>where rn&gt;=(pageNum-1)*pageSize+1</code></li>\n</ul>\n</li>\n<li><strong>注意：第二次查询需要使用别名rn进行查询</strong></li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分页查询 pageNum:1  pageSize:5</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">rownum</span> rn,Student.* <span class=\"keyword\">FROM</span> Student <span class=\"keyword\">WHERE</span> <span class=\"keyword\">rownum</span>&lt;=<span class=\"number\">1</span>*<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> rn&gt;= (<span class=\"number\">1</span><span class=\"number\">-1</span>)*<span class=\"number\">5</span>+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单引号与双引号\"><a href=\"#单引号与双引号\" class=\"headerlink\" title=\"单引号与双引号\"></a>单引号与双引号</h1><ul>\n<li>单引号：1.引用字符串常量；2.转义符</li>\n<li>双引号：修饰关键字，对象名，字段名和别名</li>\n</ul>\n<h1 id=\"null值处理\"><a href=\"#null值处理\" class=\"headerlink\" title=\"null值处理\"></a>null值处理</h1><p>nvl(value1,value2)：value1为null时取value2</p>\n","categories":["数据库"],"tags":["Oracle"]},{"title":"Redis事务","url":"/2020/08/08/redis-04/","content":"<p>Redis事务：是一个单独的隔离操作。一个事务中的所有命令都会被序列化、按顺序执行。事务在执行的过程中不会被其他命令打断。主要作用就是串联多个命令，防止其他命令插队。<a id=\"more\"></a></p>\n<h2 id=\"Redis事务流程\"><a href=\"#Redis事务流程\" class=\"headerlink\" title=\"Redis事务流程\"></a>Redis事务流程</h2><ul>\n<li>开启事务 （multi）</li>\n<li>命令入队</li>\n<li>执行事务（exec）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">4) <span class=\"string\">\"v2\"</span></span><br><span class=\"line\">5) OK</span><br></pre></td></tr></table></figure>\n\n<p>放弃事务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; discard</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>组队的时候发生异常，事务中的所用命令都不会执行。</p>\n<p>运行时发生异常，其他命令正常执行，异常命令抛出异常。</p>\n<h2 id=\"监控（使用watch实现乐观锁）\"><a href=\"#监控（使用watch实现乐观锁）\" class=\"headerlink\" title=\"监控（使用watch实现乐观锁）\"></a>监控（使用watch实现乐观锁）</h2><blockquote>\n<p> 悲观锁</p>\n</blockquote>\n<ul>\n<li>认为任何时候都会出现问题，无论做什么都加锁。</li>\n</ul>\n<blockquote>\n<p>乐观锁</p>\n</blockquote>\n<ul>\n<li>认为什么时候都不会出问题，所以不会上锁，更新数据时去判断一下，在此期间是否有人修改过这个数据。<ul>\n<li>获取version</li>\n<li>更新的时候比较version</li>\n</ul>\n</li>\n</ul>\n<p>测试监视功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100  </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> out 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视money对象</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 20</span><br></pre></td></tr></table></figure>\n\n<p>测试多线程修改值，使用watch可以当作redis的乐观锁操作</p>\n<p>客户端1：对money对象进行监视，并开启事务，先不执行事务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; watch money</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby out 20</span><br><span class=\"line\">QUEUED</span><br></pre></td></tr></table></figure>\n\n<p>再打开一个客户端2，对money对象的值进行修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get money</span><br><span class=\"line\"><span class=\"string\">\"80\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>在客户端1中执行事务，因为监视的值发生了改变，所以事务执行失败！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自旋锁</p>\n</blockquote>\n<p>执行失败后，放弃监视（解锁），再重新监视（加锁），获取监视对象的最新值，再执行事务，直到成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; unwatch</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 40</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reids事务特性\"><a href=\"#Reids事务特性\" class=\"headerlink\" title=\"Reids事务特性\"></a>Reids事务特性</h2><ul>\n<li>单独的隔离操作<ul>\n<li>事务中的所有命令都会被序列化、按顺序执行。在事务执行的过程中不会被其他客户端发送过来的命令请求所打断。</li>\n</ul>\n</li>\n<li>不保证原子性<ul>\n<li>事务中如果有一条命令执行失败，其后的命令仍然会执行，没有回滚。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testRedis\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisTestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/secKill\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">secKill</span><span class=\"params\">(String userId, String productId)</span> </span>&#123;</span><br><span class=\"line\">        Assert.notNull(userId, <span class=\"string\">\"用户id不能为空！\"</span>);</span><br><span class=\"line\">        Assert.notNull(productId, <span class=\"string\">\"产品id不能为空！\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 秒杀成功用户key</span></span><br><span class=\"line\">        String successUserKey = <span class=\"string\">\"sk:successUser\"</span> + productId;</span><br><span class=\"line\">        <span class=\"comment\">// 商品库存key</span></span><br><span class=\"line\">        String productKey = <span class=\"string\">\"sk:product:\"</span> + productId;</span><br><span class=\"line\">        <span class=\"comment\">// 监视库存的key</span></span><br><span class=\"line\">        redisTemplate.watch(productKey);</span><br><span class=\"line\">        <span class=\"comment\">// 获取库存</span></span><br><span class=\"line\">        Integer stock = (Integer) redisTemplate.opsForValue().get(productKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stock == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"秒杀没有开始！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断用户是否重复秒杀</span></span><br><span class=\"line\">        Long count = redisTemplate.opsForSet().add(successUserKey, userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"keyword\">null</span> || count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"已经秒杀成功，不可重复参与！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断秒杀是否结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stock &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"秒杀结束！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        redisTemplate.multi();</span><br><span class=\"line\">        <span class=\"comment\">// 秒杀成功 库存减1</span></span><br><span class=\"line\">        redisTemplate.opsForValue().decrement(productKey);</span><br><span class=\"line\">        <span class=\"comment\">// 将userId添加到秒杀成功的set中</span></span><br><span class=\"line\">        redisTemplate.opsForSet().add(successUserKey, userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redisTemplate.exec().size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"秒杀失败！\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"秒杀成功！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Redis入门","url":"/2020/08/04/redis-01/","content":"<p>随着数据量的爆发式增加，数据变化率的急剧增加，MySQL等关系型数据库不够用了，就需要使用NoSQL了。<a id=\"more\"></a></p>\n<h2 id=\"什么是Nosql\"><a href=\"#什么是Nosql\" class=\"headerlink\" title=\"什么是Nosql\"></a>什么是Nosql</h2><p>NoSQL=Not Only SQL</p>\n<p>关系型数据库：表格</p>\n<p>非关系型数据库：</p>\n<ul>\n<li>方便拓展，数据之间没有关系</li>\n<li>大数据高性能（Redis一秒写8万次，读取11万，NoSQL的缓存是一种细粒度的缓存，性能会比较高）</li>\n<li>数据类型是多样型的（不需要事先设计数据库，随取随用！）</li>\n<li>没有固定的查询语言</li>\n<li>键值对存储，列存储，文档存储，图形数据库</li>\n</ul>\n<h2 id=\"NoSQL的四大分类\"><a href=\"#NoSQL的四大分类\" class=\"headerlink\" title=\"NoSQL的四大分类\"></a>NoSQL的四大分类</h2><ul>\n<li>KV键值对：redis</li>\n<li>文档型数据库（bson格式）：MongoDB</li>\n<li>列存储：HBase（用于分布式文件系统）</li>\n<li>图关系型数据库：Neo4J（存放关系：社交网络，广告推荐）</li>\n</ul>\n<h2 id=\"Redis概述\"><a href=\"#Redis概述\" class=\"headerlink\" title=\"Redis概述\"></a>Redis概述</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>数据缓存<ul>\n<li>将一些频繁访问且短时间内不会发生变化的数据放入缓存中，提高用户的请求是速度和降低网站的负载。</li>\n</ul>\n</li>\n<li>会话缓存<ul>\n<li>保存web会话信息</li>\n</ul>\n</li>\n<li>排行榜、计数器</li>\n<li>消息队列</li>\n</ul>\n<h2 id=\"Window下安装\"><a href=\"#Window下安装\" class=\"headerlink\" title=\"Window下安装\"></a>Window下安装</h2><p>1、下载压缩包解压即可：<br><a href=\"https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a><br>2、运行服务redis-server.exe<br><img src=\"/2020/08/04/redis-01/1.png\" alt></p>\n<p>3、运行客户端redis-cli.exe来连接redis，使用ping命令测试是否连接成功<br><img src=\"/2020/08/04/redis-01/2.png\" alt></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>默认端口号：6379</p>\n<p>选择数据库，默认数据库是0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">select [0~15]</span><br></pre></td></tr></table></figure>\n\n<p>查看当前数据库的大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbsize</span><br></pre></td></tr></table></figure>\n\n<p>设置键值对，name为key的值，zyz为value的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> name zyz</span><br></pre></td></tr></table></figure>\n\n<p>获取指定key的value</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">get name</span><br></pre></td></tr></table></figure>\n\n<p>移除key，1表示当前数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">move name 1</span><br></pre></td></tr></table></figure>\n\n<p>查看数据库的所有key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">keys *</span><br></pre></td></tr></table></figure>\n\n<p>判断指定的key是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">exists name</span><br></pre></td></tr></table></figure>\n\n<p>设置key的有效期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">expire name [秒数]</span><br></pre></td></tr></table></figure>\n\n<p>查看剩余多少秒过期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ttl name</span><br></pre></td></tr></table></figure>\n\n<p>查看key的类型</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span> name</span><br></pre></td></tr></table></figure>\n\n<p>清空当前数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">flushdb</span><br></pre></td></tr></table></figure>\n\n<p>清空全部数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>\n\n<p><strong>Redis是单线程的，基于内存操作，CPU不是Redis的性能瓶颈，Redis的性能是根据机器的内存和网络带宽决定的。</strong></p>\n<p>Redis将全部数据存放于内存，所以说使用单线程效率最高，多线程cpu上下文切换耗时，对于内存系统来说，如果没有上下文切换，效率就是最高的。</p>\n<ul>\n<li>单线程不需要内存切换开销</li>\n<li>没有锁的竞争</li>\n<li>IO多路复用，让单个线程高效的处理多个连接请求，减少网络IO的耗时</li>\n</ul>\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Redis三种特殊类型","url":"/2020/08/08/redis-03/","content":"<h2 id=\"geospatial地理位置\"><a href=\"#geospatial地理位置\" class=\"headerlink\" title=\"geospatial地理位置\"></a>geospatial地理位置</h2><p>添加地理数据</p>\n<ul>\n<li>有效的经度从-180度到180度。</li>\n<li>有效的纬度从-85.05112878度到85.05112878度。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可通过java程序一次性道路</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 113.16 30.65 tianmen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 112.19 30.35 jinzhou</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 112.19 31.23 shanghai</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<p>获取指定的经纬度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geopos china:city beijing</span><br><span class=\"line\">1) 1) <span class=\"string\">\"116.39999896287918\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"39.900000091670925\"</span></span><br></pre></td></tr></table></figure>\n\n<p>返回两个给定位置之间的距离</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">geodist china:city beijing shanghai km <span class=\"comment\"># 两地的直线距离</span></span><br></pre></td></tr></table></figure>\n\n<p>以给定的经纬度为中心， 找出某一半径内的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km</span><br><span class=\"line\">1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"shanghai\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"tianmen\"</span></span><br><span class=\"line\"> georadius china:city 110 30 500 km withdist</span><br><span class=\"line\">1) 1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"214.1425\"</span></span><br><span class=\"line\">2) 1) <span class=\"string\">\"shanghai\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"250.3140\"</span></span><br><span class=\"line\">3) 1) <span class=\"string\">\"tianmen\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"311.8670\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km withcoord</span><br><span class=\"line\">1) 1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"112.18999832868576\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"30.349999617100856\"</span></span><br><span class=\"line\">2) 1) <span class=\"string\">\"shanghai\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"112.18999832868576\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"31.229999039757836\"</span></span><br><span class=\"line\">3) 1) <span class=\"string\">\"tianmen\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"113.15999776124954\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"30.649999074635581\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km count 2</span><br><span class=\"line\">1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"shanghai\"</span></span><br></pre></td></tr></table></figure>\n\n<p>底层是zset，可以使用zset的一些操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"shanghai\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"tianmen\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city tianmen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"jinzhou\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"shanghai\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"beijing\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hyperloglog\"><a href=\"#hyperloglog\" class=\"headerlink\" title=\"hyperloglog\"></a>hyperloglog</h2><p> 主要用于基数统计</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pfadd mykey q w e r t y</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount mykey</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><p>位存储，一般用于用户是否登录，统计用户是否活跃，统计打卡</p>\n<p>使用bitmap记录一周的打卡：周一：1 周二：0 ……</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>查看是否打卡</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign 0 <span class=\"comment\"># 查看星期一是否打卡</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<p>统计打卡天数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign  <span class=\"comment\"># 统计一周的打卡次数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Redis主从复制，集群","url":"/2021/10/24/redis-07/","content":"<p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master以写为主，Slave以读为主</strong>。</p>\n<p>好处：</p>\n<ul>\n<li>读写分离，性能扩展</li>\n<li>容灾快速恢复<a id=\"more\"></a></li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>复制延迟<ul>\n<li>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</li>\n</ul>\n</li>\n</ul>\n<p>指定主机命令：<code>slaveof 主机ip 主机端口</code><br><img src=\"/2021/10/24/redis-07/1.png\" alt></p>\n<ul>\n<li><p>一主二仆</p>\n<ul>\n<li>从服务器挂掉后重启时，变为主服务器</li>\n<li>从服务器挂掉后重启时，再加入从服务器中，会把主服务器中的数据从头到尾复制一遍</li>\n<li>主服务器挂掉后，从服务器不会变成主服务器</li>\n<li>主服务器挂掉后重启，还是主服务器</li>\n</ul>\n</li>\n<li><p>薪火相传</p>\n<ul>\n<li>上一个Slave可以是下一个Slave的Master，Slave同样可以接收其他 slaves的连接和同步请求， 可以有效减轻master的写压力,去中心化降低风险。</li>\n</ul>\n</li>\n<li><p>反客为主</p>\n<ul>\n<li><code>slaveof no one</code> 当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"复制原理\"><a href=\"#复制原理\" class=\"headerlink\" title=\"复制原理\"></a>复制原理</h1><p>1、从服务器连接上主服务器之后，就会发送进行数据同步的消息。</p>\n<p>2、主服务器收到从服务器发送过来的消息后，把主服务器中的数据进行持久化为RDB文件，把RDB文件发送给从服务器。</p>\n<p>3、每次主服务器写操作时，主动和从服务器同步。</p>\n<h1 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h1><p><strong>反客为主的自动版</strong>，能够后台监控主机，如果主机挂掉了根据投票数自动将从服务器转换为主服务器。<br>sentinel.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 其中mymaster为监控对象起的服务器名称， 1 表示至少有多少个哨兵同意重新选取主机。</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n\n<p>运行哨兵</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>\n\n<p>选取主机原则：</p>\n<ul>\n<li>优先级最高的 ，replica-priority 值越小优先级越高</li>\n<li>偏移量最大 ，即优先选择同步数据最全的从机</li>\n<li>runid最小的</li>\n</ul>\n<h1 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h1><p>Redis 集群实现了对Redis的水平<strong>扩容</strong>，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p>\n<p>Redis 集群通过分区（partition）来提供一定程度的<strong>可用性</strong>（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>\n<p>无中心化配置，任何一台主机或从机都能成为集群的入口，它们之间都能相互通信。</p>\n<p>集群配置：</p>\n<p><code>cluster-enabled yes</code> 打开集群模式</p>\n<p><code>cluster-config-file nodes-6379.conf</code> 设定节点配置文件名</p>\n<p><code>cluster-node-timeout 15000</code>  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换</p>\n<p>reids6179.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">include /home/bigdata/redis.conf <span class=\"comment\"># 公共配置</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\">pidfile <span class=\"string\">\"/var/run/redis_6379.pid\"</span></span><br><span class=\"line\">dbfilename <span class=\"string\">\"dump6379.rdb\"</span></span><br><span class=\"line\">dir <span class=\"string\">\"/home/bigdata/redis_cluster\"</span></span><br><span class=\"line\">logfile <span class=\"string\">\"/home/bigdata/redis_cluster/redis_err_6379.log\"</span></span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">cluster-config-file nodes-6379.conf</span><br><span class=\"line\">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>\n\n<p>合并：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/redis-6.2.1/src</span><br><span class=\"line\"></span><br><span class=\"line\"> redis-cli --cluster  create --cluster-replicas 1 192.168.11.101:6379 192.168.11.101:6380  192.168.11.101:6381 192.168.11.101:6389 192.168.11.101:6390  192.168.11.101:6391</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用实际ip !</strong></p>\n<ul>\n<li><p>通过插槽slot来实现数据分布存储</p>\n</li>\n<li><p>主节点下线，从节点自动升为主节点</p>\n</li>\n<li><p>某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</p>\n<h1 id=\"应用问题解决\"><a href=\"#应用问题解决\" class=\"headerlink\" title=\"应用问题解决\"></a>应用问题解决</h1></li>\n</ul>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>查询存储层中根本不存在的数据，导致每次请求都要到存储层去查询。</p>\n<p>解决方案：</p>\n<ul>\n<li><p>缓存空对象，并设置过期时间</p>\n</li>\n<li><p>采用布隆过滤器</p>\n<ul>\n<li><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p>\n<p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><p>短时间内查询大量key集中过期，大量请求直接指向数据库，最终请求到数据库，造成数据库崩溃。</p>\n<p>解决方案：</p>\n<ul>\n<li>将缓存过期时间设置为随机数</li>\n</ul>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p>缓存层宕机或者支撑不了当前的并发，导致整个系统崩溃。</p>\n<p>解决方案：</p>\n<ul>\n<li><p>保证缓存层的高可用，使用哨兵、主从架构</p>\n</li>\n<li><p>限流熔断</p>\n</li>\n</ul>\n<h1 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h1><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p>\n<p>分布式锁主流的实现方案：</p>\n<ol>\n<li><p>基于数据库实现分布式锁</p>\n</li>\n<li><p>基于缓存（Redis等）</p>\n</li>\n<li><p>基于Zookeeper</p>\n</li>\n</ol>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<ol>\n<li>性能：redis最高</li>\n<li>可靠性：zookeeper最高</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/testLock\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置锁 通过uuid标识应用 防止误删</span></span><br><span class=\"line\">    String uuid = UUID.randomUUID().toString();</span><br><span class=\"line\">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(<span class=\"string\">\"lock\"</span>,uuid ,<span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    <span class=\"comment\">//2获取锁成功、查询num的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lock!=<span class=\"keyword\">null</span>&amp;&amp; lock)&#123;</span><br><span class=\"line\">        Object value =  redisTemplate.opsForValue().get(<span class=\"string\">\"num\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断num为空return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ObjectUtils.isEmpty(value))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//有值就转成成int</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = Integer.parseInt(value+<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把redis的num加1</span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">\"num\"</span>, ++num);</span><br><span class=\"line\">        <span class=\"comment\">//释放锁，del</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(uuid.equals((String) redisTemplate.opsForValue().get(<span class=\"string\">\"lock\"</span>)))&#123;</span><br><span class=\"line\">            redisTemplate.delete(<span class=\"string\">\"lock\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取锁失败、每隔0.1秒再获取</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            testLock();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h1><ul>\n<li><p>惰性删除</p>\n<p>数据到达超时时间的，不立即处理，等下次访问该数据的时候，再去删除。</p>\n</li>\n<li><p>定时删除</p>\n<p>当 key设置过期时间的时候，创建一个定时器事件，当 key 过期时间到达时，由定时器任务立即执行对 key 的删除操作，删除操作先删除存储空间，再移除掉过期的key。</p>\n</li>\n<li><p>定期删除</p>\n<p>周期性轮询 Redis 库中的时效性数据，采取随机抽取的策略，利用过期数据占比的方式控制删除频度。</p>\n</li>\n</ul>\n<h1 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h1><p>加入键的时候如果过限时采用淘汰策略删除键：</p>\n<ul>\n<li>LRU 最近最少使用</li>\n<li>LFU 使用频率最少</li>\n</ul>\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Redis持久化","url":"/2020/08/10/redis-06/","content":"<p>Redis是内存数据库，如果不能将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。<a id=\"more\"></a></p>\n<h2 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h2><p>在指定时间间隔内将内存中的数据集快照写入磁盘dump.rdb文件，恢复时将快照直接读到内存。</p>\n<p>Redis会单独创建一个子进程来进行持久化，会将数据写入到一个临时文件中，等持久化过程结束了，再将这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行IO操作的，保证了极高的性能。</p>\n<p>如果需要进行大规模数据的恢复，且对数据的完整性不是特别敏感，那么RDB将比AOF的效率更高。默认为RDB方式。</p>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><p>将所有命令都记录下来，恢复时将命令全部执行一遍。</p>\n<p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据库。</p>\n<p>默认不开启AOF操作<br><img src=\"/2020/08/10/redis-06/3.png\" alt></p>\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Spring事务","url":"/2020/06/19/spring-04/","content":"<p>spring提供一种处理事务的统一模型，能使用统一的步骤，完成多种不同数据库访问技术的事务处理。<a id=\"more\"></a><br><img src=\"/2020/06/19/spring-04/1.png\" alt></p>\n<h2 id=\"spring管理事务的三个方面\"><a href=\"#spring管理事务的三个方面\" class=\"headerlink\" title=\"spring管理事务的三个方面\"></a>spring管理事务的三个方面</h2><p>1、事务管理器<br>事务管理器是一个接口和它的众多实现类，由事务管理器对象完成事务的提交和回滚。<br>实现类：spring将每一种数据库访问技术对应的事务处理类都创建好了<br>mybatis访问数据库——-DateSourceTransactionManager<br>hibernate访问数据库———HibernateTransactionManager<br>使用方法：告诉spring你使用的那种数据库的访问方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"  \"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"  ...DateSourceTransaction\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、事务的类型<br>（1）事务的隔离级别<br><img src=\"/2020/06/19/spring-04/2.jpg\" alt><br>(2)事务的超时时间<br>表示一个方法的最长执行时间，如果方法执行超过了该时间，事务就回滚<br>(3)常用的事务传播行为</p>\n<ul>\n<li><strong>REQUIRED</strong>（Spring默认)：内外层方法共用外层方法的事务，要么都成功，要么都不成功。</li>\n<li><strong>REQUIRES_NEW</strong>：内外层方法相互独立，互不影响。</li>\n<li><strong>NESTED</strong>：内层方法不会影响外层，外层回滚时内层也会回滚。</li>\n</ul>\n<blockquote>\n<p>注： 使用代理对象调用当前类中的另外一个事务方法，不然事务会失效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> ServiceA proxy =（ServiceA）AopContext.currentProxy（）;</span><br><span class=\"line\"><span class=\"number\">2</span> proxy.b();</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>3、spring提交事务，回滚事务的时机<br>(1)业务方法执行成功，没有异常抛出，spring会在方法指向后提交事务<br>(2)业务方法抛出运行时异常，spring执行回滚<br>运行时异常定义：RuntimeException和它的子类都是运行时异常，NullPointException，NumberFormatException<br>(3)业务方法抛出非运行时异常，受查异常时，提交事务。<br>受查异常：写代码时必须处理的异常，IOException，SQLException</p>\n<h2 id=\"事务应用——购买商品项目\"><a href=\"#事务应用——购买商品项目\" class=\"headerlink\" title=\"事务应用——购买商品项目\"></a>事务应用——购买商品项目</h2><p>实现购买商品，模拟用户下订单，向订单中添加销售记录，从商品表中减少库存。</p>\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>1、在spring配置文件添加事务管理器和事务注解驱动</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明事务管理器   --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  连接的数据库，指定数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 开启事务注解驱动 告诉spring使用注解管理事务，创建代理对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在需要使用事务的方法上添加Transactional注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyGoodsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BuyGoodsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SaleDao saleDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GoodsDao goodsDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSaleDao</span><span class=\"params\">(SaleDao saleDao)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.saleDao = saleDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGoodsDao</span><span class=\"params\">(GoodsDao goodsDao)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goodsDao = goodsDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*@Transactional(</span></span><br><span class=\"line\"><span class=\"comment\">            propagation = Propagation.REQUIRED,// 传播行为(默认)</span></span><br><span class=\"line\"><span class=\"comment\">            isolation = Isolation.DEFAULT,// 隔离级别(默认)</span></span><br><span class=\"line\"><span class=\"comment\">            readOnly = false,</span></span><br><span class=\"line\"><span class=\"comment\">            rollbackFor = &#123; // 发生指定异常时回滚</span></span><br><span class=\"line\"><span class=\"comment\">                    RuntimeException.class</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    )*/</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">(Integer gid, Integer nums)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"buy开始\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 记录销售信息，向sale表中添加记录</span></span><br><span class=\"line\">        saleDao.insertSale(<span class=\"keyword\">new</span> Sale(<span class=\"keyword\">null</span>, gid, nums));</span><br><span class=\"line\"></span><br><span class=\"line\">        Goods goods = goodsDao.selectGoodsById(gid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (goods == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"商品不存在！\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(goods.getAmount()&lt;nums)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"商品不足\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新库存</span></span><br><span class=\"line\">        goodsDao.updateGoods(<span class=\"keyword\">new</span> Goods(gid,<span class=\"keyword\">null</span>,nums,<span class=\"keyword\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"buy结束\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用aspectj完成事务配置\"><a href=\"#使用aspectj完成事务配置\" class=\"headerlink\" title=\"使用aspectj完成事务配置\"></a>使用aspectj完成事务配置</h3><p>1、添加aspectj依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、声明事务管理器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明事务管理器   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  连接的数据库，指定数据源 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、声明业务方法及事务属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  声明业务方法及事务属性（隔离级别、传播行为、超时时间）  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span><span class=\"comment\">&lt;!-- name 方法名称  可使用通配符--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"buy\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"java.lang.RuntimeException\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--修改方法  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--删除方法  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--查询方法  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、配置aop</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置aop  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置切入点表达式：指定哪些包中的类需要使用事务</span></span><br><span class=\"line\"><span class=\"comment\">        id:切入点表达式的名称，唯一值</span></span><br><span class=\"line\"><span class=\"comment\">        expression:切入点表达式，指定哪些类需要使用事务，aspectj会自动创建代理对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"servicePt\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* *..service..*.*(..))\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置增强器  关联advice和pointcut</span></span><br><span class=\"line\"><span class=\"comment\">                    advice-ref  通知,tx:advice的id值</span></span><br><span class=\"line\"><span class=\"comment\">                    pointcut-ref  切入点表达式aop:pointcut的id值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"myAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"servicePt\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":["Spring"],"tags":["Spring"]},{"title":"Web项目环境搭建","url":"/2020/06/20/spring-05/","content":"<h1 id=\"实现一个简单的注册功能\"><a href=\"#实现一个简单的注册功能\" class=\"headerlink\" title=\"实现一个简单的注册功能\"></a>实现一个简单的注册功能</h1><p>项目整体结构：<a id=\"more\"></a><br><img src=\"/2020/06/20/spring-05/2.jpg\" alt></p>\n<h2 id=\"1、使用maven创建web项目\"><a href=\"#1、使用maven创建web项目\" class=\"headerlink\" title=\"1、使用maven创建web项目\"></a>1、使用maven创建web项目</h2><p><img src=\"/2020/06/20/spring-05/1.jpg\" alt></p>\n<h2 id=\"2、添加依赖和插件\"><a href=\"#2、添加依赖和插件\" class=\"headerlink\" title=\"2、添加依赖和插件\"></a>2、添加依赖和插件</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    Spring事务--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    MyBatis依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- servlet依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- jsp依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1-b03<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 监听器依赖--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span><span class=\"comment\">&lt;!--所在的目录--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span><span class=\"comment\">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将spring-mybatis整合的代码复制到src下</p>\n<h2 id=\"3、编写页面\"><a href=\"#3、编写页面\" class=\"headerlink\" title=\"3、编写页面\"></a>3、编写页面</h2><p>index.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;注册页面&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;员工注册&lt;/h1&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">\"registerServlet\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">        &lt;table&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;input type=\"text\" name=\"name\"&gt;&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;性别&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"gender\"</span> value=<span class=\"string\">\"1\"</span>&gt;男</span><br><span class=\"line\">                &lt;input type=\"radio\" name=\"gender\" value=\"0\"&gt;女&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;电子邮件&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;input type=\"text\" name=\"email\"&gt;&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td&gt;部门编号&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&lt;input type=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"deptId\"</span> value=<span class=\"string\">\"1\"</span>&gt;<span class=\"number\">1</span></span><br><span class=\"line\">                &lt;input type=\"radio\" name=\"deptId\" value=\"2\"&gt;2&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;td colspan=<span class=\"string\">\"2\"</span>&gt;</span><br><span class=\"line\">                    &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"注册提交\"</span>&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>registerSuccess.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;注册成功页面&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;注册成功&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、编写servlet\"><a href=\"#4、编写servlet\" class=\"headerlink\" title=\"4、编写servlet\"></a>4、编写servlet</h2><h3 id=\"1-在web-xml中注册servlet和listener\"><a href=\"#1-在web-xml中注册servlet和listener\" class=\"headerlink\" title=\"1.在web.xml中注册servlet和listener\"></a>1.在web.xml中注册servlet和listener</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>RegisterServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.zyz.controller.RegisterServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>RegisterServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/registerServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注册监听器ContextLoaderListener  自动创建容器对象，并放入全局作用域ServletContext中</span></span><br><span class=\"line\"><span class=\"comment\">                                       用户发起请求时可以直接使用对象，不需要再创建容器--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--自定义配置文件路径  创建容器对象时需要读取配置文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、编写servlet程序\"><a href=\"#2、编写servlet程序\" class=\"headerlink\" title=\"2、编写servlet程序\"></a>2、编写servlet程序</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String name = request.getParameter(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        String gender = request.getParameter(<span class=\"string\">\"gender\"</span>);</span><br><span class=\"line\">        String email = request.getParameter(<span class=\"string\">\"email\"</span>);</span><br><span class=\"line\">        String deptId = request.getParameter(<span class=\"string\">\"deptId\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        WebApplicationContext webApplicationContext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">/*// 从ServletContext中获取容器对象</span></span><br><span class=\"line\"><span class=\"comment\">        String key = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;</span></span><br><span class=\"line\"><span class=\"comment\">        Object attribute = getServletContext().getAttribute(key);</span></span><br><span class=\"line\"><span class=\"comment\">        if(attribute!=null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            webApplicationContext = (WebApplicationContext) attribute;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 使用框架提供的工具类直接从ServletContext中获取创建好容器对象</span></span><br><span class=\"line\">        ServletContext servletContext = getServletContext();</span><br><span class=\"line\">        webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取service</span></span><br><span class=\"line\">        EmployeeService employeeService = (EmployeeService) webApplicationContext.getBean(<span class=\"string\">\"employeeService\"</span>);</span><br><span class=\"line\">        Employee employee = <span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,name,gender,email,Integer.parseInt(deptId));</span><br><span class=\"line\">        employeeService.addEmp(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册成功 页面跳转</span></span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">\"/registerSuccess.jsp\"</span>).forward(request,response);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java项目"],"tags":["Spring"]},{"title":"Springboot简介、自动装配原理","url":"/2020/07/09/springboot-01/","content":"<p>springboot是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处：简化开发，约定大于配置，能迅速的开发web应用，几行代码开发一个http接口。<a id=\"more\"></a></p>\n<h2 id=\"springboot-helloworld\"><a href=\"#springboot-helloworld\" class=\"headerlink\" title=\"springboot-helloworld\"></a>springboot-helloworld</h2><p>1、使用IDEA创建一个springboot 项目<br><img src=\"/2020/07/09/springboot-01/1.png\" alt></p>\n<p>2、修改项目名称后添加web依赖<br><img src=\"/2020/07/09/springboot-01/2.png\" alt></p>\n<p>3、整理项目结构<br><img src=\"/2020/07/09/springboot-01/3.png\" alt></p>\n<p>4、在controller包下添加处理请求的程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原理：自动装配</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span>  <span class=\"comment\">// 无法返回视图 相当于@Controller + @ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接口  http://localhost:8080/hello</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello,world!\"</span>;<span class=\"comment\">// 在当前页面打印字符串</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个过程非常的简单，无需像SpringMVC那样进行过多的配置，只需编写处理业务逻辑的代码，即向前端提供接口。</p>\n<p>当然，这都源自springboot的自动装配原理。我们所编写的一个个controller不过是一个个组件，springboot已经帮我们装配好了。</p>\n<p><strong>在application.properties中可以修改项目的端口号</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更改项目端口号</span></span><br><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8081</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动装配原理\"><a href=\"#自动装配原理\" class=\"headerlink\" title=\"自动装配原理\"></a>自动装配原理</h2><h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><p><strong>父项目依赖，管理项目的资源过滤及插件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>web模块正常运行所依赖的组件</strong>：tomcat，springmvc等等</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主启动类\"><a href=\"#主启动类\" class=\"headerlink\" title=\"主启动类\"></a>主启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标注这是一个springboot的应用</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloworldApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(HelloworldApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<p>Springboot的所有自动配置都是在启动的时候扫描并加载：<br><img src=\"/2020/07/09/springboot-01/5.png\" alt></p>\n<p>spring.factories：所有的配置文件都在里面，但是不一定生效，要判断条件成立，只要导入了对应的<strong>启动器</strong>，自动装配才会成功。</p>\n<p>自动配置核心注解：</p>\n<p>1、@SpringBootApplication；</p>\n<p>2、@EnableAutoConfifiguration； </p>\n<p>3、@AutoConfifigurationPackage：这个组合注解主要是@Import(AutoConfigurationPackages.Registrar.class)，它通过将Registrar类导入到容器中，而Registrar类作用是扫描主配置类同级目录以及子包，并将相应的组件导入到Spring容器中；</p>\n<p>4、@Import(AutoConfigurationImportSelector.class)：它通过将AutoConfigurationImportSelector类导入到容器中，AutoConfigurationImportSelector类作用是通过selectImports方法执行的过程中，会使用内部工具类SpringFactoriesLoader，<strong>查找classpath上所有jar包中的META-INF/spring.factories进行加载</strong>，实现将配置类信息交给SpringFactory加载器进行一系列的容器创建过程。（spring.factory记录了需要加载的自动配置类的全限定名）</p>\n<blockquote>\n<p>SpringApplication.run(HelloworldApplication.class, args);</p>\n<p>一共做了两件事，创建SpringApplication对象，在进行初始化的时候找到spring.factories文件中配置的事件监听器并保存；调用run()方法，刚刚保存的监听器根据当前时机触发不同的事件，比如容器的初始化，容器创建完成等。同时也会刷新容器，进行组件的扫描、创建、加载等工作。</p>\n</blockquote>\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"Springboot Web开发","url":"/2020/07/11/springboot-03/","content":"<h2 id=\"静态资源的导入\"><a href=\"#静态资源的导入\" class=\"headerlink\" title=\"静态资源的导入\"></a>静态资源的导入</h2><p>resources目录下存放静态资源。<br><img src=\"/2020/07/11/springboot-03/1.png\" alt></p>\n<h2 id=\"模板引擎Thymeleaf\"><a href=\"#模板引擎Thymeleaf\" class=\"headerlink\" title=\"模板引擎Thymeleaf\"></a>模板引擎Thymeleaf</h2><p>就是将后端的数据渲染到前端的页面上去显示，例如 jsp 就是一个模板引擎。<br><img src=\"/2020/07/11/springboot-03/2.png\" alt></p>\n<p><strong>thymeleaf 的使用</strong></p>\n<p>首先导入它的依赖，在springboot中要添加其他组件，没有什么是一个starter解决不了的！</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--thymeleaf--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将测试页面放在templates目录下，编写conntroller跳转页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"test1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>thmeleaf 语法</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>test1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--所有的html元素都可以被thymeleaf替换接管  th:元素名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;msg&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--循环--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"val:$&#123;arr&#125;\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;val&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--传递参数--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/toUpdate/&#125;+$&#123;emp.getId()&#125;\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/delete/&#125;+$&#123;emp.getId()&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--引入公共组件--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"~&#123;common/common::topbar&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--日期格式化--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(emp.getBirth(),'yyyy-MM-dd')&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接管SpringMVC\"><a href=\"#接管SpringMVC\" class=\"headerlink\" title=\"接管SpringMVC\"></a>接管SpringMVC</h2><p>创建config目录，在config目录下编写类，用来接管、扩展SpringMVC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">// 配置页面映射关系</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/\"</span>).setViewName(<span class=\"string\">\"/index\"</span>);</span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/index.html\"</span>).setViewName(<span class=\"string\">\"/index\"</span>);</span><br><span class=\"line\">    registry.addViewController(<span class=\"string\">\"/main.html\"</span>).setViewName(<span class=\"string\">\"/dashboard\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">// 配置拦截器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">\"/*\"</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">\"/index.html\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/user/login\"</span>,<span class=\"string\">\"/static/**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写拦截器的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 登录成功后有user的session</span></span><br><span class=\"line\">        Object loginUser = request.getSession().getAttribute(<span class=\"string\">\"loginUser\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(loginUser==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 没有登录</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"没有权限，请登录！\"</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">\"/index.html\"</span>).forward(request,response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理器接收页面传参\"><a href=\"#处理器接收页面传参\" class=\"headerlink\" title=\"处理器接收页面传参\"></a>处理器接收页面传参</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/delete/&#125;+$&#123;emp.getId()&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delete/&#123;id&#125;\"</span>)<span class=\"comment\">// @PathVarable 接收路径中占位符的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delete</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span>Integer id)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目配置文件\"><a href=\"#项目配置文件\" class=\"headerlink\" title=\"项目配置文件\"></a>项目配置文件</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭thymeleaf 缓存</span></span><br><span class=\"line\"><span class=\"meta\">spring.thymeleaf.cache</span>=<span class=\"string\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目路径  localhost:8080/zyz</span></span><br><span class=\"line\"><span class=\"meta\">server.servlet.context-path</span>=<span class=\"string\">/springboot_web</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 国际化</span></span><br><span class=\"line\"><span class=\"comment\"># spring.messages.basename=i18n.login</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 时间日期格式化</span></span><br><span class=\"line\"><span class=\"meta\">spring.mvc.format.date</span>=<span class=\"string\">yyyy-MM-dd</span></span><br></pre></td></tr></table></figure>","categories":["微服务"],"tags":["SpringBoot"]},{"title":"Springboot配置","url":"/2020/07/10/springboot-02/","content":"<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>SpringBoot使用一个全局配置文件，用于修改默认配置，文件名固定。</p>\n<ul>\n<li>application.properties：语法结构：key=value</li>\n<li>application.yml，springboot推荐使用：语法结构：key: &nbsp;value </li>\n</ul>\n<p>两个文件同时存在时，先加载application.properties</p>\n<h2 id=\"yaml概述\"><a href=\"#yaml概述\" class=\"headerlink\" title=\"yaml概述\"></a>yaml概述</h2><p>1、空格不能省略，key:空格value</p>\n<p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p>\n<p>3、属性和值的大小写都是十分敏感的。</p>\n<h2 id=\"yaml注入配置文件\"><a href=\"#yaml注入配置文件\" class=\"headerlink\" title=\"yaml注入配置文件\"></a>yaml注入配置文件</h2><p><img src=\"/2020/07/10/springboot-02/6.png\" alt></p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Cat cat;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person person;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(cat);</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cat&#123;<span class=\"attribute\">name</span>=<span class=\"string\">'小白'</span>, <span class=\"attribute\">age</span>=3&#125;</span><br><span class=\"line\">Person&#123;<span class=\"attribute\">name</span>=<span class=\"string\">'zyz'</span>, <span class=\"attribute\">age</span>=22, <span class=\"attribute\">happy</span>=<span class=\"literal\">true</span>, <span class=\"attribute\">birth</span>=Fri Jul 10 00:00:00 CST 2020, maps=&#123;<span class=\"attribute\">k1</span>=v1, <span class=\"attribute\">k2</span>=v2&#125;, lists=[1, 2, 3], <span class=\"attribute\">cat</span>=Cat&#123;<span class=\"attribute\">name</span>=<span class=\"string\">'小花'</span>, <span class=\"attribute\">age</span>=2&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定随机uuid:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">zyz$&#123;random.uuid&#125;</span> <span class=\"comment\"># 随机uuid</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"properties注入\"><a href=\"#properties注入\" class=\"headerlink\" title=\"properties注入\"></a>properties注入</h2><p>@PropertySource 手动加载配置文件<br>@Value 基于反射来实现注入，不依赖于setter方法<br><img src=\"/2020/07/10/springboot-02/7.png\" style=\"zoom:70%;\"></p>\n<h2 id=\"配置文件的加载顺序\"><a href=\"#配置文件的加载顺序\" class=\"headerlink\" title=\"配置文件的加载顺序\"></a>配置文件的加载顺序</h2><p>yml  &gt; yaml &gt; properties  后面加载的会覆盖掉前面的<br><img src=\"/2020/07/10/springboot-02/1.jpg\" style=\"zoom:60%;\"></p>\n<h2 id=\"JSR303校验\"><a href=\"#JSR303校验\" class=\"headerlink\" title=\"JSR303校验\"></a>JSR303校验</h2><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p>\n<p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Validated</span>  <span class=\"comment\">// 数据校验</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span>(message=<span class=\"string\">\"邮箱格式不合法\"</span>)<span class=\"comment\">// 使name只能支持Email格式</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/2020/07/10/springboot-02/8.png\" alt></p>\n<p> <strong>常见参数</strong></p>\n<p>空检查<br>@Null       验证对象是否为null<br>@NotNull    验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</p>\n<p>Booelan检查<br>@AssertTrue     验证 Boolean 对象是否为 true<br>@AssertFalse    验证 Boolean 对象是否为 false </p>\n<p>长度检查<br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  @Length(min=, max=) string is between min and max included</p>\n<p>日期检查<br>@Past       验证 Date 和 Calendar 对象是否在当前时间之前<br>@Future     验证 Date 和 Calendar 对象是否在当前时间之后<br>@Pattern    验证 String 对象是否符合正则表达式的规则</p>\n<h2 id=\"多环境切换\"><a href=\"#多环境切换\" class=\"headerlink\" title=\"多环境切换\"></a>多环境切换</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Springboot多环境配置</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span> <span class=\"comment\"># 默认环境</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\"># 指定环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"整合MyBatis","url":"/2020/07/26/springboot-05/","content":"<p>首先创建一个sprinboot项目，并引入web,jbdc,mysql驱动依赖。</p>\n<h2 id=\"1、添加springboot整合myBatis的依赖\"><a href=\"#1、添加springboot整合myBatis的依赖\" class=\"headerlink\" title=\"1、添加springboot整合myBatis的依赖\"></a>1、添加springboot整合myBatis的依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、配置数据库连接信息\"><a href=\"#2、配置数据库连接信息\" class=\"headerlink\" title=\"2、配置数据库连接信息\"></a>2、配置数据库连接信息</h2><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、测试是否能连接成功\"><a href=\"#3、测试是否能连接成功\" class=\"headerlink\" title=\"3、测试是否能连接成功\"></a>3、测试是否能连接成功</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot05MybatisApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、创建实体类，导入lombok\"><a href=\"#4、创建实体类，导入lombok\" class=\"headerlink\" title=\"4、创建实体类，导入lombok\"></a>4、创建实体类，导入lombok</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>User.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String pwd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、创建mapper目录，以及对应的mapper接口\"><a href=\"#5、创建mapper目录，以及对应的mapper接口\" class=\"headerlink\" title=\"5、创建mapper目录，以及对应的mapper接口\"></a>5、创建mapper目录，以及对应的mapper接口</h2><p>UserMapper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span><span class=\"comment\">// 表示这是一个mybatis的mapper类</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\">List&lt;User&gt; <span class=\"title\">listAllUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\">User <span class=\"title\">queryUserById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、创建对应的sql映射文件UserMapper.xml<br><img src=\"/2020/07/26/springboot-05/1.png\" alt></p>\n<p>在项目配置文件中添加mybatis配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mybatis配置</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">    <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.zyz.bean</span> <span class=\"comment\"># 设置别名 默认为类名</span></span><br><span class=\"line\">    <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span> <span class=\"comment\"># mapper文件位置</span></span><br><span class=\"line\">    <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 输出sql</span></span><br><span class=\"line\">    \t<span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 开启驼峰命名规则</span></span><br><span class=\"line\">    \t<span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>UserMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listAllUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select * from user</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select * from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addUser\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        insert into user(name,pwd)values(#&#123;name&#125;,#&#123;password&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteUser\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span>&gt;</span></span><br><span class=\"line\">        delete from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、创建controller目录，添加UserController类\"><a href=\"#6、创建controller目录，添加UserController类\" class=\"headerlink\" title=\"6、创建controller目录，添加UserController类\"></a>6、创建controller目录，添加UserController类</h2><p>UserController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/listAllUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.listAllUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/queryUserById/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">query</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.queryUserById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/addUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        userMapper.addUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,<span class=\"string\">\"马老师\"</span>,<span class=\"string\">\"123456\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"add success\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/deleteUser/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delete</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>&#123;</span><br><span class=\"line\">        userMapper.deleteUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"delete success\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/updateUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        userMapper. updateUser(<span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">\"qwer\"</span>,<span class=\"string\">\"123456\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"update success\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此为止，MyBatis整合完毕。</p>\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"异步任务，邮件发送","url":"/2020/08/03/springboot-07/","content":"<h2 id=\"异步任务\"><a href=\"#异步任务\" class=\"headerlink\" title=\"异步任务\"></a>异步任务</h2><p>1、在启动类添加<code>@EnableAsync</code> ，表示 开启异步注解功能</p>\n<p>2、在方法上添加<code>@Async</code>，表示异步方法<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用注解表示异步任务</span></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"数据正在处理......\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在Controller中直接调用即可</p>\n<h2 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h2><p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、打开邮箱的POP3/SMTP服务获取授权码，设置-&gt;账户-&gt;开启pop3和smtp服务</p>\n<p><img src=\"/2020/08/03/springboot-07/1.png\" alt></p>\n<p>3、编写配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JavaMailSenderImpl mailSender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/sendMail\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMail</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        SimpleMailMessage mailMessage = <span class=\"keyword\">new</span> SimpleMailMessage();</span><br><span class=\"line\">        mailMessage.setSubject(<span class=\"string\">\"通知\"</span>);</span><br><span class=\"line\">        mailMessage.setText(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        mailMessage.setTo(<span class=\"string\">\"2824199842@qq.com\"</span>);</span><br><span class=\"line\">        mailMessage.setFrom(<span class=\"string\">\"2824199842@qq.com\"</span>);</span><br><span class=\"line\">        mailSender.send(mailMessage);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"send ok\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/sendMail2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMail2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class=\"line\">        MimeMessageHelper helper = <span class=\"keyword\">new</span> MimeMessageHelper(mimeMessage,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        helper.setSubject(<span class=\"string\">\"通知\"</span>);</span><br><span class=\"line\">        helper.setText(<span class=\"string\">\"&lt;p style='color:red'&gt;hello~&lt;/p&gt;\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        helper.addAttachment(<span class=\"string\">\"1.jpg\"</span>,<span class=\"keyword\">new</span> File(<span class=\"string\">\"C:\\\\Users\\\\28241\\\\Pictures\\\\Saved Pictures\\\\1.jpg\"</span>));<span class=\"comment\">// 附件</span></span><br><span class=\"line\">        helper.setTo(<span class=\"string\">\"2824199842@qq.com\"</span>);</span><br><span class=\"line\">        helper.setFrom(<span class=\"string\">\"2824199842@qq.com\"</span>);</span><br><span class=\"line\">        mailSender.send(mimeMessage);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"send ok\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"SpringMVC简介","url":"/2020/06/20/springmvc-01/","content":"<p>SpringMVC是Spring框架的一部分。相当于servlet的一个升级。SpringMVC创建控制器对象，放入SpringMVC容器中。<a id=\"more\"></a></p>\n<h2 id=\"SpringMVC使用\"><a href=\"#SpringMVC使用\" class=\"headerlink\" title=\"SpringMVC使用\"></a>SpringMVC使用</h2><h3 id=\"1、在web工程中添加依赖\"><a href=\"#1、在web工程中添加依赖\" class=\"headerlink\" title=\"1、在web工程中添加依赖\"></a>1、在web工程中添加依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在web-xml文件中注册中央处理对象DispacherServlet\"><a href=\"#2、在web-xml文件中注册中央处理对象DispacherServlet\" class=\"headerlink\" title=\"2、在web.xml文件中注册中央处理对象DispacherServlet\"></a>2、在web.xml文件中注册中央处理对象DispacherServlet</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册springMVC核心依赖DispatcherServlet</span></span><br><span class=\"line\"><span class=\"comment\">   tomcat服务器启动后创建DispatcherServlet实例对象，同时读取配置文件创建容器对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--自定义读取配置文件的位置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在tomcat启动后，创建Servlet对象  数值越小创建越早--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、在springmvc配置文件中注册组件扫描器\"><a href=\"#3、在springmvc配置文件中注册组件扫描器\" class=\"headerlink\" title=\"3、在springmvc配置文件中注册组件扫描器\"></a>3、在springmvc配置文件中注册组件扫描器</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- 声明组件扫描器 创建Controller对象  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.controller\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写MyController处理请求\"><a href=\"#4、编写MyController处理请求\" class=\"headerlink\" title=\"4、编写MyController处理请求\"></a>4、编写MyController处理请求</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理some.do请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 请求处理完成后，返回用户的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)<span class=\"comment\">// 请求映射，将请求地址与请求方法绑定</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doSome</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">// 添加数据 框架请求的最后将数据放入Request域中</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hello,SpringMVC\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 指定视图 框架对视图执行forward操作</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"/show.jsp\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回modelAndView</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、页面\"><a href=\"#5、页面\" class=\"headerlink\" title=\"5、页面\"></a>5、页面</h3><p>请求页面：index.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第一个springMVC程序<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"some.do\"</span>&gt;</span>发起some.do请求<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>跳转页面：show.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>show.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>msg数据：$&#123;msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SpringMVC请求的处理过程\"><a href=\"#SpringMVC请求的处理过程\" class=\"headerlink\" title=\"SpringMVC请求的处理过程\"></a>SpringMVC请求的处理过程</h2><p><img src=\"/2020/06/20/springmvc-01/1.png\" alt></p>\n<p>SpringMVC内部执行流程：<br><img src=\"/2020/06/20/springmvc-01/4.png\" alt></p>\n<h2 id=\"使用视图解析器\"><a href=\"#使用视图解析器\" class=\"headerlink\" title=\"使用视图解析器\"></a>使用视图解析器</h2><p>在springmvc配置文件中声明视图解析器：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  声明springmvc框架中的视图解析器  帮助开发人员设置视图文件的路径  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--前缀  视图文件的路径--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/view/\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--后缀  视图文件的拓展名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置视图解析器后,可直接使用文件名指定视图</span></span><br><span class=\"line\">modelAndView.setViewName(<span class=\"string\">\"show\"</span>);</span><br></pre></td></tr></table></figure>\n","categories":["Spring"],"tags":["SpringMVC"]},{"title":"Swagger简介与使用","url":"/2020/08/02/swagger/","content":"<p>背景：前后端分离时代的来临  Vue+Springboot</p>\n<p>后端时代：前端至负责管理静态页面；html==&gt;后端。模板引擎jsp=&gt;后端是主力</p>\n<p>前后端分离时代：<a id=\"more\"></a></p>\n<ul>\n<li>后端：后端控制层，服务层，数据访问层</li>\n<li>前端：前端控制层，视图层<ul>\n<li>伪造后端数据，json。不需要后端，前端工程依然能够跑起来</li>\n</ul>\n</li>\n<li>前后端交互：API</li>\n<li>前后端相互独立，松耦合</li>\n<li>前后端甚至可以分布在不同的服务器上</li>\n</ul>\n<p>产生的一个问题：</p>\n<ul>\n<li>前后端集成联调，前后端人员无法做到“及时协商，尽早解决”，最终导致问题爆发。</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>首先指定schema，实时更新最新的API，降低集成的风险</li>\n<li>早些年：<ul>\n<li>指定word计划文档；</li>\n<li>前端测试后端接口：postman</li>\n<li>后端提供接口，需要实时更新最新的消息及改动</li>\n</ul>\n</li>\n<li>Swagger产生 ！</li>\n</ul>\n<h2 id=\"Swagger简介\"><a href=\"#Swagger简介\" class=\"headerlink\" title=\"Swagger简介\"></a>Swagger简介</h2><ul>\n<li>号称世界上最流行的API框架</li>\n<li>ReatFul API 文档在线自动生成工具=&gt;API文档与API自动更新</li>\n<li>直接运行，可以在线测试API接口</li>\n<li>支持多种语言</li>\n</ul>\n<h2 id=\"Springboot集成Swagger\"><a href=\"#Springboot集成Swagger\" class=\"headerlink\" title=\"Springboot集成Swagger\"></a>Springboot集成Swagger</h2><p>1、创建springboot项目并导入web依赖</p>\n<p>2、导入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写一个hellworld</p>\n<p>4、编写Swagger配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2  <span class=\"comment\">// 开启Swagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、测试访问：<a href=\"http://localhost:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/swagger-ui.html</a><br><img src=\"/2020/08/02/swagger/1.png\" alt></p>\n<h2 id=\"配置Swagger\"><a href=\"#配置Swagger\" class=\"headerlink\" title=\"配置Swagger\"></a>配置Swagger</h2><p>Swagger的bean实例 Docket</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2  <span class=\"comment\">// 开启Swagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置Swagger的Docket的bean实例</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket( <span class=\"keyword\">new</span> DocumentationType(<span class=\"string\">\"swagger\"</span>, <span class=\"string\">\"2.0\"</span>))</span><br><span class=\"line\">                .apiInfo(apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置Swagger的apiInfo</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Contact contact = <span class=\"keyword\">new</span> Contact(<span class=\"string\">\"sweetboyZhang\"</span>, <span class=\"string\">\"https://sweetboyZhang.github.io\"</span>, <span class=\"string\">\"2824199842@qq.com\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfo(</span><br><span class=\"line\">                <span class=\"string\">\"My Swagger API 文档\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"这是一个Swagger测试\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"https://sweetboyZhang.github.io\"</span>,</span><br><span class=\"line\">                contact,</span><br><span class=\"line\">                <span class=\"string\">\"Apache 2.0\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"http://www.apache.org/licenses/LICENSE-2.0\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ArrayList&lt;VendorExtension&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Swagger扫描路径\"><a href=\"#配置Swagger扫描路径\" class=\"headerlink\" title=\"配置Swagger扫描路径\"></a>配置Swagger扫描路径</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket( <span class=\"keyword\">new</span> DocumentationType(<span class=\"string\">\"swagger\"</span>, <span class=\"string\">\"2.0\"</span>))</span><br><span class=\"line\">            .apiInfo(apiInfo())</span><br><span class=\"line\">            .select()</span><br><span class=\"line\">            <span class=\"comment\">// RequestHandlerSelectors配置要扫描接口的方式</span></span><br><span class=\"line\">            <span class=\"comment\">// basePackage 指定要扫描的包</span></span><br><span class=\"line\">            <span class=\"comment\">// any() 扫描全部</span></span><br><span class=\"line\">            <span class=\"comment\">// none() 不扫描</span></span><br><span class=\"line\">            <span class=\"comment\">// withClassAnnotation(xxx.class)扫描类上的注解</span></span><br><span class=\"line\">            <span class=\"comment\">// withMethodAnnotation(xxx.class)扫描方法上的注解</span></span><br><span class=\"line\">            .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.zyz.controller\"</span>))</span><br><span class=\"line\">            <span class=\"comment\">// .paths 过滤路径</span></span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据环境是否开启Swagger\"><a href=\"#根据环境是否开启Swagger\" class=\"headerlink\" title=\"根据环境是否开启Swagger\"></a>根据环境是否开启Swagger</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket</span><span class=\"params\">(Environment environment)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置要显示的Swagger环境</span></span><br><span class=\"line\">    Profiles profiles = Profiles.of(<span class=\"string\">\"dev\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取项目环境</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket( <span class=\"keyword\">new</span> DocumentationType(<span class=\"string\">\"swagger\"</span>, <span class=\"string\">\"2.0\"</span>))</span><br><span class=\"line\">            .apiInfo(apiInfo())</span><br><span class=\"line\">            .enable(flag)<span class=\"comment\">// 设置是否启动Swagger</span></span><br><span class=\"line\">            .select()</span><br><span class=\"line\">            <span class=\"comment\">// RequestHandlerSelectors配置要扫描接口的方式</span></span><br><span class=\"line\">            <span class=\"comment\">// basePackage 指定要扫描的包</span></span><br><span class=\"line\">            <span class=\"comment\">// any() 扫描全部</span></span><br><span class=\"line\">            <span class=\"comment\">// none() 不扫描</span></span><br><span class=\"line\">            <span class=\"comment\">// withClassAnnotation(xxx.class)扫描类上的注解</span></span><br><span class=\"line\">            <span class=\"comment\">// withMethodAnnotation(xxx.class)扫描方法上的注解</span></span><br><span class=\"line\">            .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">\"com.zyz.controller\"</span>))</span><br><span class=\"line\">            <span class=\"comment\">// .paths 过滤路径</span></span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>application-dev.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8080</span></span><br></pre></td></tr></table></figure>\n\n<p>application-pro.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上线环境</span></span><br><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8081</span></span><br></pre></td></tr></table></figure>\n\n<p>application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 激活生产环境</span></span><br><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置分组\"><a href=\"#配置分组\" class=\"headerlink\" title=\"配置分组\"></a>配置分组</h2><p>方便多人协同开发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">.groupName(<span class=\"string\">\"zyz\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">docket3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置实体类\"><a href=\"#配置实体类\" class=\"headerlink\" title=\"配置实体类\"></a>配置实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只要接口中的返回值有实体类，Swagger就会扫描到</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(<span class=\"string\">\"user控制方法\"</span>)<span class=\"comment\">// 方法注释</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">user</span><span class=\"params\">(@ApiParam(<span class=\"string\">\"用户名\"</span>)</span>String name,@<span class=\"title\">ApiParam</span><span class=\"params\">(<span class=\"string\">\"密码\"</span>)</span> String password)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(name,password);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel</span>(<span class=\"string\">\"用户实体类\"</span>)<span class=\"comment\">// 注释</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(<span class=\"string\">\"用户名\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(<span class=\"string\">\"密码\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/2020/08/02/swagger/2.png\" alt></p>\n","categories":["Java"],"tags":["Swagger"]},{"title":"Vue Cli的使用","url":"/2020/10/30/vue-cli/","content":"<p>vue cli是一个用于构建基于vue.js项目（类似于java后端像maven那样）的构建工具。<a id=\"more\"></a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><p>安装node.js</p>\n</li>\n<li><p>配置 npm（类似于maven中的仓库）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换为淘宝镜像源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"comment\"># 验证是否切换成功</span></span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\"><span class=\"comment\"># 配置npm依赖下载位置</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"d:\\nodejs\\npm_cache\"</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"d:\\nodejs\\npm_global\"</span></span><br><span class=\"line\"><span class=\"comment\"># 查看配置 </span></span><br><span class=\"line\">npm config ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 vue cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装 安装在之前配置好的D:\\nodejs\\npm_global\\node_modules目录下</span></span><br><span class=\"line\">npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"使用vue-cli创建一个vue项目\"><a href=\"#使用vue-cli创建一个vue项目\" class=\"headerlink\" title=\"使用vue cli创建一个vue项目\"></a>使用vue cli创建一个vue项目</h2><p><strong>创建一个项目名为hello的vue项目</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue init webpack hello</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动项目</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hello</span><br><span class=\"line\">  </span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"><span class=\"comment\"># npm start</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>本地访问</strong></p>\n<p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<p><strong>项目结构：</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello     -------------&gt;项目名</span><br><span class=\"line\">   -build  -------------&gt;用来使用webpack打包使用build依赖</span><br><span class=\"line\">   -config -------------&gt;用来做整个项目配置目录</span><br><span class=\"line\">   -node_modules  ------&gt;用来管理项目中使用依赖</span><br><span class=\"line\">   -src\t\t\t\t\t ------&gt;用来书写vue的源代码[重点]</span><br><span class=\"line\"><span class=\"code\">     -assets      ------&gt;用来存放静态资源 [重点]</span></span><br><span class=\"line\"><span class=\"code\">     -components   ------&gt;用来书写Vue组件 [重点]</span></span><br><span class=\"line\"><span class=\"code\">     -router\t\t\t ------&gt;用来配置项目中路由[重点]</span></span><br><span class=\"line\"><span class=\"code\">     App.vue      ------&gt;项目中根组件[重点]</span></span><br><span class=\"line\"><span class=\"code\">     main.js      ------&gt;项目中主入口[重点]</span></span><br><span class=\"line\">   -static        ------&gt;其它静态</span><br><span class=\"line\">   -.babelrc      ------&gt; 将es6语法转为es5运行</span><br><span class=\"line\">   -.editorconfig ------&gt; 项目编辑配置</span><br><span class=\"line\">   -.gitignore    ------&gt; git版本控制忽略文件</span><br><span class=\"line\">   -.postcssrc.js ------&gt; 源码相关js</span><br><span class=\"line\">   -index.html    ------&gt; 项目主页</span><br><span class=\"line\">   -package.json  ------&gt; 类似与pom.xml 依赖管理  jquery 不建议手动修改</span><br><span class=\"line\">   -package-lock.json ----&gt; 对package.json加锁</span><br><span class=\"line\">   -README.md         ----&gt; 项目说明文件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h2><p>1、编写各个组件：主页、用户、商品等等功能模块，并导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;网站主页&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;/</span><span class=\"regexp\">/ 导出组件，向外暴露</span></span><br><span class=\"line\"><span class=\"regexp\">  name: \"Home\",</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、在index.js中引入并注册组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../components/Home'</span> <span class=\"comment\">// 引入 Home</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> User <span class=\"keyword\">from</span> <span class=\"string\">'../components/User'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">'../components/Student'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/'</span>,<span class=\"attr\">redirect</span>: <span class=\"string\">'/home'</span>&#125;, <span class=\"comment\">// 重定向到 /home</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/home'</span>,<span class=\"attr\">component</span>: Home&#125;,<span class=\"comment\">// 注册 Home</span></span><br><span class=\"line\">    &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/user'</span>,<span class=\"attr\">component</span>: User&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/student'</span>,<span class=\"attr\">component</span>: Student&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3、在App.vue中添加访问路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"#/home\"</span>&gt;主页&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;a href=\"#/u</span>ser<span class=\"string\">\"&gt;用户管理&lt;/a&gt;</span></span><br><span class=\"line\">        &lt;a href=\"#/student\"&gt;学生管理&lt;/a&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;router-view/&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'App'</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在vue-cli中使用axios\"><a href=\"#在vue-cli中使用axios\" class=\"headerlink\" title=\"在vue cli中使用axios\"></a>在vue cli中使用axios</h2><ul>\n<li><p>在当前工程下安装axios</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js  中引入axios</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$http=axios; <span class=\"comment\">// 修改 vue内部 $http为 axios</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发起异步请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"User\"</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          users: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  method:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$http.get(<span class=\"string\">\"http://rap2api.taobao.org/app/mock/270195/user/findAll\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.users = res.data.results;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据渲染</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;用户管理&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;a href=\"\"&gt;添加用户&lt;/</span>a&gt;</span><br><span class=\"line\">    &lt;table border=<span class=\"string\">\"1\"</span> cellspacing=<span class=\"string\">\"0\"</span> width=<span class=\"string\">\"600px\"</span>&gt;</span><br><span class=\"line\">      &lt;tr&gt;</span><br><span class=\"line\">        &lt;th&gt;编号&lt;<span class=\"regexp\">/th&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;th&gt;姓名&lt;/</span>th&gt;</span><br><span class=\"line\">        &lt;th&gt;年龄&lt;<span class=\"regexp\">/th&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;th&gt;生日&lt;/</span>th&gt;</span><br><span class=\"line\">        &lt;th align=<span class=\"string\">\"center\"</span>&gt;操作&lt;<span class=\"regexp\">/th&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>tr&gt;</span><br><span class=\"line\">      &lt;tr v-<span class=\"keyword\">for</span>=<span class=\"string\">\"user in users\"</span>&gt;</span><br><span class=\"line\">        &lt;td v-text=<span class=\"string\">\"user.id\"</span>&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td v-text=\"user.name\"&gt;&lt;/</span>td&gt;</span><br><span class=\"line\">        &lt;td v-text=<span class=\"string\">\"user.age\"</span>&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td v-text=\"user.birth\"&gt;&lt;/</span>td&gt;</span><br><span class=\"line\">        &lt;td align=<span class=\"string\">\"center\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span>&amp;nbsp; </span><br><span class=\"line\">        &lt;a href=<span class=\"string\">\"\"</span>&gt;删除&lt;<span class=\"regexp\">/a&gt;&lt;/</span>td&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/tr&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>table&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n  <img src=\"/2020/10/30/vue-cli/1.gif\" style=\"zoom:80%;\">\n\n","categories":["前端"],"tags":["Vue"]},{"title":"三方平台对接","url":"/2022/01/17/worknote-01/","content":"<h2 id=\"第三方平台对接\"><a href=\"#第三方平台对接\" class=\"headerlink\" title=\"第三方平台对接\"></a>第三方平台对接</h2><p>同步沃尔玛店铺中的订单信息到公司的系统中。<a id=\"more\"></a></p>\n<p>1.1 获取授权 </p>\n<p>授权方式：</p>\n<ul>\n<li><p>方式一：成为第三方服务商 <a href=\"https://developer.walmart.com/doc/us/mp/us-mp-authorize/\" target=\"_blank\" rel=\"noopener\">https://developer.walmart.com/doc/us/mp/us-mp-authorize/</a> (可行性较低)</p>\n<img src=\"/2022/01/17/worknote-01/1.jpg\" style=\"zoom:50%;\">\n</li>\n<li><p>方式二：线下直接获取卖家clientId，clientSecret（卖家后台可以看到）（目前采用）</p>\n</li>\n</ul>\n<p>1.2 同步订单</p>\n<img src=\"/2022/01/17/worknote-01/2.jpg\" style=\"zoom:50%;\">\n\n<p>1.3 部署流程（手动）：</p>\n<p>1、将项目打成jar包以及Dockefile文件后上传至目标服务器；</p>\n<p>2、构建docker镜像</p>\n<p>3、构建docker容器</p>\n<p>4、运行容器</p>\n<p>（2，3，4步写成shell脚本，在服务器上运行脚本即可完成部署）</p>\n<h2 id=\"线上问题复盘\"><a href=\"#线上问题复盘\" class=\"headerlink\" title=\"线上问题复盘\"></a>线上问题复盘</h2><h3 id=\"问题1：\"><a href=\"#问题1：\" class=\"headerlink\" title=\"问题1：\"></a>问题1：</h3><p>原有的issues表中没有添加ai_platform字段，导致程序报错，影响后续流程。</p>\n<h3 id=\"分析1：\"><a href=\"#分析1：\" class=\"headerlink\" title=\"分析1：\"></a>分析1：</h3><p>缺少数据迁移文件。</p>\n<p>我扒了我所有的提交记录，发现自己并没有提交修改表的migrate文件！</p>\n<p><img src=\"/2022/01/17/worknote-01/3.jpg\" alt></p>\n<p>修改表的正规操作:</p>\n<ul>\n<li>1、先通过命令创建migrate文件；</li>\n</ul>\n<p>例：<code>generate migration AddAiPlatformToIssues ai_platform:string</code></p>\n<ul>\n<li>2、编辑migrate文件</li>\n<li>3、执行<code>db:migrate</code> 命令后才会真正修改数据库 </li>\n</ul>\n<p>注意点：</p>\n<ul>\n<li>提交代码时，一定要提交migrate文件！！！</li>\n<li>不要通过图形工具直接去修改数据库中的表！！！</li>\n</ul>\n<p>线上与我相关的相关的问题大致就以上这点，因为主要的流程并不在我这里。</p>\n<h2 id=\"开发问题复盘\"><a href=\"#开发问题复盘\" class=\"headerlink\" title=\"开发问题复盘\"></a>开发问题复盘</h2><h3 id=\"问题1：-1\"><a href=\"#问题1：-1\" class=\"headerlink\" title=\"问题1：\"></a>问题1：</h3><p>网络访问问题：本地测试的好好的，一部署就出问题？</p>\n<h3 id=\"分析1：-1\"><a href=\"#分析1：-1\" class=\"headerlink\" title=\"分析1：\"></a>分析1：</h3><p>部署在AWS上的服务器之间都是通过内网访问的，通过外网访问不到！！</p>\n<p>而在本地的办公网络访问不到内网，只能用外网ip做测试。</p>\n<p>例如：在服务器上发起http请求</p>\n<p><img src=\"/2022/01/17/worknote-01/4.jpg\" alt></p>\n<p>这种网络访问的问题之前确实没遇到过，之前的工作只有crud，写写对外的接口，在提供对内调用的接口时确实要注意内外网的问题，属于低级错误了！</p>\n<h3 id=\"问题2：\"><a href=\"#问题2：\" class=\"headerlink\" title=\"问题2：\"></a>问题2：</h3><p>线上服务调不通：</p>\n<p><img src=\"/2022/01/17/worknote-01/5.jpg\" alt></p>\n<h3 id=\"分析2：\"><a href=\"#分析2：\" class=\"headerlink\" title=\"分析2：\"></a>分析2：</h3><p>先上一张部署图，<br><img src=\"/2022/01/17/worknote-01/7.jpg\" style=\"zoom:50%;\"></p>\n<p>吸取内网外网调用的问题后，确认是通过内网ip在进行调用。在测试服务器上分别调用两台机器的服务，发现都能够调通，将问题缩小为问题出现在了负载均衡服务器的配置上，请教运维后，发现是端口映射出了问题，负载均衡服务器只对外暴露了80端口，在docker中容器的8888端口与宿主机的80做映射<br><code>docker run -p 80:8888 --name shulex-tag-app:shulex-tag-app:latest -d</code></p>\n<p>ok，问题解决。</p>\n<h3 id=\"问题3：\"><a href=\"#问题3：\" class=\"headerlink\" title=\"问题3：\"></a>问题3：</h3><p>一个不是问题的问题？</p>\n<h3 id=\"分析3：\"><a href=\"#分析3：\" class=\"headerlink\" title=\"分析3：\"></a>分析3：</h3><p>在进行ai_issues表插入的时候遇到回滚，当时就认为是自己程序的问题，完全没结合具体的业务去分析问题，</p>\n<p><img src=\"/2022/01/17/worknote-01/6.jpg\" alt></p>\n<p>Optional 参数：来自官方文档的解释</p>\n<p><img src=\"/2022/01/17/worknote-01/8.jpg\" alt></p>\n<p>ai_issues表中的tag_id也就是对应这里的tag，是不能为空的！所以在插入时必须去验证tag对象是否存在，为空就插入不了。就应该回滚！</p>\n<p>注意：</p>\n<p>分析问题时请不要脱离业务！！</p>\n<h2 id=\"bug解决\"><a href=\"#bug解决\" class=\"headerlink\" title=\"bug解决\"></a>bug解决</h2><h3 id=\"解决maven依赖冲突\"><a href=\"#解决maven依赖冲突\" class=\"headerlink\" title=\"解决maven依赖冲突\"></a>解决maven依赖冲突</h3><p>报错信息：<br><img src=\"/2022/01/17/worknote-01/9.jpg\" alt></p>\n<p><font color=\"red\">NoSuchMethidError</font>一般就是版本冲突了，通过maven命令<code>mvn -Dverbose dependency:tree</code>找到冲突的包，排除掉即可。<br><img src=\"/2022/01/17/worknote-01/10.jpg\" style=\"zoom:40%;\"></p>\n<img src=\"/2022/01/17/worknote-01/11.jpg\" style=\"zoom:40%;\">\n\n<p>排除mysql中的即可：<br><img src=\"/2022/01/17/worknote-01/12.jpg\" style=\"zoom:50%;\"></p>\n","categories":["工作笔记"]},{"title":"记一次Datax写入不了数据的问题","url":"/2022/09/16/worknote-02/","content":"<p>datax日志如下：<a id=\"more\"></a></p>\n<p><img src=\"/2022/09/16/worknote-02/1.jpg\" alt></p>\n<p>乍一看没什么问题，也没报错，可是这条日志刷了半个多小时，初步排查配置文件是否写的有问题，结果并无问题。</p>\n<p>进一步排查读库，也并没有什么问题，排查写库，一个只有一条记录的表尽然要查半天！最新的数据还是一个月之前的数据，判断是数据写入时出了问题，数据无法写入。</p>\n<p>接着就去查看数据库的磁盘占用情况，果不其然出了问题，磁盘满了！<br><img src=\"/2022/09/16/worknote-02/2.png\" style=\"zoom:80%;\"></p>\n<p>mysqld.log占了一大半！询问同事后，对文件进行清空处理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat dev/null &gt; /data/mysql/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<p>再次启动datax，成功插入数据！</p>\n<p>再次查看mysqld.log发现文件仍在暴增，于是写了一个脚本定时去清空文件，每天清空一次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 0 * * * cat dev/null &gt; /data/mysql/mysqld.log</span><br></pre></td></tr></table></figure>\n\n","tags":["工作笔记"]},{"title":"记一次Linux根目录爆满排查","url":"/2022/09/27/worknote-3/","content":"<p>在一次运行jar包的过程中，后台启动报错，日志文件也没有生成，于是前台启动，疯狂报错！<a id=\"more\"></a><br>查看日志发现是磁盘空间不够的问题</p>\n<p>于是，查看磁盘使用情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<p>发现根目录爆满<br><img src=\"/2022/09/27/worknote-3/3.png\" alt></p>\n<p>怀疑是日志，进入项目目录后，查看使用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">du -h -x --max-depth=1</span><br></pre></td></tr></table></figure>\n\n<p>果然是日志！<br><img src=\"/2022/09/27/worknote-3/1.png\" alt><br>删除日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf ./logs</span><br></pre></td></tr></table></figure>\n\n<p>删除日志后项目正常启动了，编写定时任务每月清理一次日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每月的第一天删除logs目录下20开头的所有文件夹</span></span><br><span class=\"line\">0 0 1 * * rm -rf /logs/20*</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["工作笔记"]},{"title":"Java集合总结","url":"/2020/08/11/collection/","content":"<h2 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h2><p>简单来说，集合就是存储对象的容器，方便我们操作多个Java对象。<a id=\"more\"></a></p>\n<h2 id=\"集合分类\"><a href=\"#集合分类\" class=\"headerlink\" title=\"集合分类\"></a>集合分类</h2><p>集合接口以及常用实现类<br><img src=\"/2020/08/11/collection/1.png\" alt></p>\n<p>使用场景：</p>\n<ul>\n<li>如果是集合类型，可选择List或Set。List是插入有序，可重复的，值可以为null；Set 是不可重复的，值不能为null。</li>\n<li>如果是key-value类型，则选择Map。保持插入顺序选择LinkedHashMap;排序选择TreeMap。</li>\n</ul>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><h3 id=\"1、Collection介绍\"><a href=\"#1、Collection介绍\" class=\"headerlink\" title=\"1、Collection介绍\"></a>1、Collection介绍</h3><p>集合与数组的区别：</p>\n<ul>\n<li>数组长度固定，集合长度可变</li>\n<li>数组可以存储基本数据类型和引用数据类型；集合只能存储引用数据类型，存储基本数据类型时会自动装箱，转换为对应的包装类。</li>\n</ul>\n<p><img src=\"/2020/08/11/collection/2.png\" alt></p>\n<p>基本方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、添加功能：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object obj)</span>：添加一个元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection c)</span>：添加一个集合的所有元素</span></span><br><span class=\"line\"><span class=\"function\">2、删除功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>：移除所有元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span>：移除一个元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collecion c)</span>：移除当前集合的所有元素，只要一个元素被移除就返回<span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"function\">3、判断功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span>：判断当前集合是否包含当前元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection c)</span>：判断当前集合包含指定集合</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>：判断集合是否为空</span></span><br><span class=\"line\"><span class=\"function\">4、获取功能：</span></span><br><span class=\"line\"><span class=\"function\">    Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span>：获取迭代器</span></span><br><span class=\"line\"><span class=\"function\">5、长度功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>：获取元素个数</span></span><br><span class=\"line\"><span class=\"function\">6、交集功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection c)</span>：移除当前集合中集合c没有的元素，最终结果保存至当前集合中</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、迭代器（Iterator）\"><a href=\"#2、迭代器（Iterator）\" class=\"headerlink\" title=\"2、迭代器（Iterator）\"></a>2、迭代器（Iterator）</h3><p>java.utils.Collection继承了java.lang.Iterable接口，Collection继承了Iterable的Iterator()方法，返回Iterator对象。</p>\n<p>java.utils.Iterator也是一个接口，只有三个方法</p>\n<ul>\n<li>hasNext()</li>\n<li>next()</li>\n<li>remove()</li>\n</ul>\n<p>这三个方法通过Collection的实现类以内部类的方式实现，因为Collection的实现类存储结构不同，遍历方式也必然不同，必须通过各个实现类以内部类的方式实现，来完成对不同实现类的遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、创建集合对象</span></span><br><span class=\"line\">    Collection coll1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    <span class=\"comment\">// 2、添加数据到集合中</span></span><br><span class=\"line\">    coll1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    coll1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    coll1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3、使用集合对象获取迭代器对象</span></span><br><span class=\"line\">    Iterator iterator = coll1.iterator();</span><br><span class=\"line\">    <span class=\"comment\">// 起始指针位于第一个元素之前</span></span><br><span class=\"line\">    <span class=\"comment\">// hasNext() 判断是否还有下一个元素</span></span><br><span class=\"line\">    <span class=\"comment\">// next() 指针下移，将下移以后的集合位置上的元素返回</span></span><br><span class=\"line\">    <span class=\"comment\">// 4、遍历集合</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(iterator.hasNext())&#123;<span class=\"comment\">// 5、判断是否存在元素</span></span><br><span class=\"line\">        Object obj = iterator.next();<span class=\"comment\">// 6、下移到下一个元素的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.equals(<span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>)))&#123;</span><br><span class=\"line\">            iterator.remove();<span class=\"comment\">// 移除当前元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    iterator = coll1.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、List集合\"><a href=\"#3、List集合\" class=\"headerlink\" title=\"3、List集合\"></a>3、List集合</h3><p>LIst集合特点：有序（存取顺序与取出顺序一致），可重复。</p>\n<p>List集合常用实现类</p>\n<ul>\n<li>ArrayList：底层数据结构是数组，线程不安全</li>\n<li>LinkedList：底层结构是链表，线程不安全</li>\n<li>Vector：底层数据结构是数组，线程安全</li>\n</ul>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><p>底层其实就是一个数组，但是可以进行扩容，实现动态增长。支持快速随机访问。插入和删除元素时，时间复杂度受元素位置影响。<br>直接添加元素或删除尾部元素时，时间复杂度为<code>O(1)</code>；指定位置添加或删除时间复杂度为<code>O(n-i)</code>，因为其他元素需要整体的后移或前移。</p>\n<p>构造方法：<br>指定了容量则按照该容量初始化，未指定则返回一个空数组</p>\n<p>add(E   e)方法：<br>步骤：检查是否需要扩容—&gt;插入元素</p>\n<p>add(int index,E e)<br>步骤：检查角标—&gt;检查是否需要扩容—&gt;插入元素</p>\n<p>get(int index)：检查角标—&gt;返回元素</p>\n<p>set(int index,E e)：检查角标—&gt;替代元素—&gt;返回旧值</p>\n<p>remove(int index)：检查角标—&gt;删除元素—&gt;计算出需要移动的个数，并移动—&gt;设置为null，让gc回收</p>\n<p>在<strong>增删时候，需要数组的拷贝复制(navite 方法由C/C++实现)</strong></p>\n<h4 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h4><p>LinkedList底层是双向链表 。删除时时间复杂度为<code>O(1)</code>，指定位置添加或删除时时间复杂度为<code>O(n)</code>，因为需要先移动到指定位置然后再删除或添加。</p>\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><p>Vector底层也是数组，与ArrayList最大的区别就是：<strong>同步(线程安全)</strong></p>\n<p>所有方法都是同步的，<strong>有性能损失</strong>。</p>\n<h3 id=\"4、Set集合\"><a href=\"#4、Set集合\" class=\"headerlink\" title=\"4、Set集合\"></a>4、Set集合</h3><p>Set集合特点：元素不可重复</p>\n<p>Set集合常用实现类</p>\n<ul>\n<li>HashSet：底层数据结构是哈希表。</li>\n<li>TreeSet：底层数据结构是红黑数（平衡二叉树）；保证元素有序。</li>\n<li>LinkedHashSet：底层数据结构由哈希表和链表组成。</li>\n</ul>\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><ul>\n<li>实现Set接口</li>\n<li>不保证迭代顺序</li>\n<li>允许元素为null</li>\n<li><strong>底层实际上是一个HashMap实例</strong></li>\n<li>非同步</li>\n<li>初始容量非常影响迭代性能</li>\n</ul>\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><ul>\n<li>可以实现排序功能</li>\n<li><strong>底层实际上是一个TreeMap实例</strong></li>\n<li>非同步</li>\n</ul>\n<h4 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h4><ul>\n<li>迭代是有序的</li>\n<li>允许为null</li>\n<li><strong>底层实际上是一个HashMap+双向链表实例(其实就是LinkedHashMap)</strong></li>\n<li>非同步</li>\n<li>性能比HashSet差一丢丢，因为要维护一个双向链表</li>\n<li>初始容量与迭代无关，LinkedHashSet迭代的是双向链表</li>\n</ul>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"1、Map介绍\"><a href=\"#1、Map介绍\" class=\"headerlink\" title=\"1、Map介绍\"></a>1、Map介绍</h3><p>特点：将键映射到值的对象，一个映射不能有重复的键，每个键最多映射一个值。</p>\n<p>Map与Collection的区别</p>\n<ul>\n<li>Map集合存储的元素是成对出现的，键唯一，值可以重复</li>\n<li>Collection集合存储的元素是单独出现的，子类List存储的值可重复，Set不可重复</li>\n</ul>\n<p><img src=\"/2020/08/11/collection/3.png\" alt></p>\n<p>基本方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、添加功能：</span><br><span class=\"line\">    put(K key,V value)  添加元素，key存在则替换</span><br><span class=\"line\"><span class=\"number\">2</span>、删除功能：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>  移除所有键值对</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">remove</span><span class=\"params\">(Object key)</span>  根据键删除值，并把值返回</span></span><br><span class=\"line\"><span class=\"function\">3、判断功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span>  判断集合是否包含指定的键</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span>  判断集合是否包含指定的值</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>  判断集合是否为空</span></span><br><span class=\"line\"><span class=\"function\">4、获取功能：</span></span><br><span class=\"line\"><span class=\"function\">    Set&lt;Map.Entry&lt;K key,V value&gt;&gt; <span class=\"title\">entrySet</span><span class=\"params\">()</span>  返回键值对对象的集合</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">get</span><span class=\"params\">(Object key)</span>  根据键获取值</span></span><br><span class=\"line\"><span class=\"function\">    Set&lt;K&gt; <span class=\"title\">keySet</span><span class=\"params\">()</span>  获取集合中所有的键的集合</span></span><br><span class=\"line\"><span class=\"function\">    Collection&lt;V&gt; <span class=\"title\">values</span><span class=\"params\">()</span>  获取集合中所有值的集合</span></span><br><span class=\"line\"><span class=\"function\">5、长度功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  返回集合中键值对的对数</span></span><br><span class=\"line\"><span class=\"function\">6、遍历功能：</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Object key, Object value)</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><ul>\n<li>无序，允许为null，非同步</li>\n<li>底层有散列表（数组+链表）实现</li>\n</ul>\n<p><strong>put(K key,V value)方法</strong>：map.put(key1,value1)</p>\n<p>首先调用key1所在类的hashCode()计算key的哈希值，此哈希值与数组长度-1做&amp;位运算，得到在Entry数组中的存放位置；<br>如果此位置为空，则直接添加，否则将key1的哈希值与此位置上元素的哈希值比较；<br>如果哈希值不同，则直接添加，否则调用key1所在类的equals()方法，如果返回true，直接覆盖，否则添加到链表尾部。</p>\n<p>当元素个数达到容量的0.75倍时，就会扩容，容量扩大为原来的2倍，原有的数据全部被复制过来。</p>\n<p>jdk1.7是以链表的形式添加元素，jdk1.8之后，链表长度大于8，数组长度大于64的时候，链表会转换为红黑树。</p>\n<p><strong>get(Object key)</strong>：计算key的哈希值，通过getNode(int hash,Object key)获取对应的value</p>\n<p><strong>remove(Object key)</strong>：计算key的哈希值，通过removeNode(int hash,Object key,Object value) 删除该键值对，并返回值</p>\n<p><strong>HashMap与HashTable的区别：</strong></p>\n<p>从存储结构和实现来讲基本上都是相同的。HashTable是线程安全的，另外它不允许key和value为null。Hashtable是个过时的集合类，不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用<code>ConcurrentHashMap</code>替换。</p>\n<p>在JDK8中HashMap的底层是：<strong>数组+链表+红黑树</strong></p>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><p>jdk1.7 采用分段锁的方式解决线程安全 segment数组+ReentrantLock</p>\n<p>jdk1.8 采用<code>synchronized</code>+<code>CAS</code>实现线程安全</p>\n<h4 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h4><ul>\n<li>底层是数组和双向链表</li>\n<li>允许为null，不同步</li>\n<li>保存了插入的顺序</li>\n</ul>\n<h4 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h4><ul>\n<li>实现了NavigableMap接口，而NavigableMap接口继承着SortedMap接口，可实现定制排序，默认key值升序</li>\n<li>底层是红黑树</li>\n<li>key不能为null，为null为抛出NullPointerException</li>\n<li>不同步</li>\n<li>使用Comparator或者Comparable来比较key是否相等与排序的问题</li>\n</ul>\n","categories":["Java"],"tags":["JavaSE"]},{"title":"C#基础","url":"/2021/08/01/csharp-01/","content":"<h1 id=\"C-语言特点\"><a href=\"#C-语言特点\" class=\"headerlink\" title=\"C#语言特点\"></a>C#语言特点</h1><ul>\n<li>C#是微软发布发一种面向对象的、运行于.NET Framework和.NET Core(开源，跨平台)之上的高级语言。</li>\n<li>C#是一种<strong>安全</strong>的、<strong>稳定</strong>的、<strong>简单</strong>的、<strong>优雅</strong>的，由C和C++衍生出来的面向对象语言，它在继承C和C++强大功能的同时去掉了一些它们复杂的特性。<a id=\"more\"></a></li>\n</ul>\n<h1 id=\"C-与-NET的关系\"><a href=\"#C-与-NET的关系\" class=\"headerlink\" title=\"C#与.NET的关系\"></a>C#与.NET的关系</h1><p>.NET是一个开发平台，而C#是一种在.NET开发平台上使用最多的编程语言。</p>\n<h1 id=\"NET-Framework\"><a href=\"#NET-Framework\" class=\"headerlink\" title=\".NET Framework\"></a>.NET Framework</h1><p>.NET Framework 是一个可以快速开发、部署网站服务及应用程序的开发平台，是 Windows 中的一个组件，主要包括<strong>公共语言运行库 CLR</strong>（Common Language Runtime）和 <strong>.NET Framework 类库FCL</strong>（Framework Class Library）。</p>\n<ul>\n<li><p>在 .NET Framework 框架中支持的编程语言包括 C#、VB、C++、J# 等， 但目前使用最多的是 C# 语言。</p>\n</li>\n<li><p><strong>CLS</strong>（Common Language Specification, 公共语言运行规范）定义了一组规则，即可以通过不同的编程语言（C#、VB、J# 等）来创建 Windows 应用程序、ASP.NET 网站程序以及在 .NET Framework 中所有支持的程序。</p>\n</li>\n<li><p><strong>CLR</strong> 是 .NET Framework 的基础。用户可以将 CLR 看作一个在执行时管理代码的代码，它提供内存管理、线程管理和远程处理等核心服务，并且还强制实施严格类型安全以及可提高安全性和可靠性的管理。</p>\n<p>它与 JVM类似。以公共语言运行库为目标的代码称为托管代码，不以公共语言运行库为目标的代码称为非托管代码。</p>\n</li>\n<li><p><strong>FCL</strong> 中包括 Windows Forms （Windows 窗体程序）、ASP.NET（网站程序）、WPF（Windows 的界面程序的框架）、 WCF（Windows 平台上的工作流程序）等程序所用到的类库文件。</p>\n</li>\n<li><p>C# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。</p>\n</li>\n</ul>\n<h1 id=\"Net-Core\"><a href=\"#Net-Core\" class=\"headerlink\" title=\".Net Core\"></a>.Net Core</h1><p>.NET Core是一个<strong>开源</strong>的，<strong>跨平台</strong>的Framework，不管是开发web或移动设备都在同一个Framework（.NET Core）下运行，而且 .NET Core也可在不同的操作系统上运行，包括Windows、Linux、MacOS，实现了跨平台跨设备。<br>.NET Core 在发布程序时不用事先安装Framework而是通过Nuget下载，这样在初次部署时就不用安装一个复杂而庞大Framework，而是按需下载。这种基于Nuget的按需加载铸就了.NET Core 跨平台。</p>\n<blockquote>\n<p>NuGet 是免费、开源的包管理开发工具，专注于在 .NET 应用开发过程中，简单地合并第三方的组件库。</p>\n</blockquote>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>C#数据类型分为：值类型、引用类型、指针类型。</p>\n<p><strong>值类型（Value types）</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>类型</strong></th>\n<th align=\"left\"><strong>描述</strong></th>\n<th align=\"left\"><strong>范围</strong></th>\n<th align=\"left\"><strong>默认值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>bool</strong></td>\n<td align=\"left\">布尔值</td>\n<td align=\"left\">True 或 False</td>\n<td align=\"left\">False</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>byte</strong></td>\n<td align=\"left\">1字节 无符号整数</td>\n<td align=\"left\">0 到 255</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>char</strong></td>\n<td align=\"left\">2字节 Unicode 字符</td>\n<td align=\"left\">U +0000 到 U +ffff</td>\n<td align=\"left\">‘\\0’</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>short</strong></td>\n<td align=\"left\">2字节 有符号整数类型</td>\n<td align=\"left\">-32,768 到 32,767</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>int</strong></td>\n<td align=\"left\">4字节 有符号整数类型</td>\n<td align=\"left\">-2,147,483,648 到 2,147,483,647</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>float</strong></td>\n<td align=\"left\">4字节 单精度浮点型</td>\n<td align=\"left\">-3.4 x 10<sup>38</sup> 到 + 3.4 x 10<sup>38</sup></td>\n<td align=\"left\">0.0F</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>long</strong></td>\n<td align=\"left\">8字节 有符号整数类型</td>\n<td align=\"left\">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>double</strong></td>\n<td align=\"left\">8字节 双精度浮点型</td>\n<td align=\"left\">(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td>\n<td align=\"left\">0.0D</td>\n</tr>\n<tr>\n<td align=\"left\">decimal</td>\n<td align=\"left\">16字节 精确的十进制值，28-29 有效位数</td>\n<td align=\"left\">(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td>\n<td align=\"left\">0.0M</td>\n</tr>\n</tbody></table>\n<p><strong>引用类型（Reference types）</strong></p>\n<p>引用类型指的是一个内存位置，如果内存位置的数据是由一个变量改变的，则该引用类型变量会自动反应这种值的变化。内置的引用类型有：<code>object</code>、<code>dynamic</code> 和 <code>string</code>。</p>\n<ul>\n<li><p>object 对象类型， 是 C# 所有数据类型的终极基类。object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p>\n<p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p>\n</li>\n<li><p>dynamic 动态数据类型， 用于存储任何类型的值，折现变量的类型检查发生在运行时。</p>\n<p> 动态类型与对象类型相似，但是对象类型的变量类型检查发生在编译时，而动态类型变量的类型检查发生在运行时。</p>\n</li>\n<li><p>string 字符串类型，是 System.String 类的别名。它是从对象（Object）类型派生的。String类型的值可以通过两种形式进行分配：引号和 @引号（加 @（称作”逐字字符串”）将转义字符（\\）当作普通字符对待）。</p>\n</li>\n</ul>\n<p><strong>指针类型（Pointer types）</strong></p>\n<p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p>\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><ul>\n<li><p><strong>隐式类型转换</strong> - 这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。小范围转大范围时使用。</p>\n</li>\n<li><p><strong>显式类型转换</strong> - 强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</p>\n<p>大范围转小范围时使用。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数值类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> intNum;</span><br><span class=\"line\"><span class=\"keyword\">long</span> longNum = <span class=\"number\">1</span>;</span><br><span class=\"line\">intNum = (<span class=\"keyword\">int</span>) longNum;<span class=\"comment\">// 大范围转小范围 需要强制类型转换</span></span><br><span class=\"line\">longNum = intNum;<span class=\"comment\">// 小范围转大范围 自动类型转换</span></span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(intNum);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(longNum);<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串转换数值</span></span><br><span class=\"line\"><span class=\"comment\">// 方式一 int.Parse()</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num1 = <span class=\"keyword\">int</span>.Parse(<span class=\"string\">\"111\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(num1);<span class=\"comment\">// 111</span></span><br><span class=\"line\"><span class=\"comment\">// int num2 = int.Parse(\"a\");// 抛System.FormatException</span></span><br><span class=\"line\"><span class=\"comment\">// 方式二 int.TryParse()</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> isSuccess = <span class=\"keyword\">int</span>.TryParse(<span class=\"string\">\"a\"</span>, out <span class=\"keyword\">int</span> num3);</span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(isSuccess);<span class=\"comment\">// False</span></span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(num3);<span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 方式三 Convert.ToInt32()</span></span><br><span class=\"line\"><span class=\"comment\">//int num4 = Convert.ToInt32(\"a\"); // 抛System.FormatException</span></span><br><span class=\"line\"><span class=\"comment\">//Console.WriteLine(num4);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型之间的转换</span></span><br><span class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">object obj = student as object;</span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(obj);</span><br><span class=\"line\">object obj1 = <span class=\"keyword\">new</span> object();</span><br><span class=\"line\">Student student1 = obj1 as Student;</span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(student1==null);<span class=\"comment\">// True 转换失败返回null</span></span><br><span class=\"line\">object obj2 = null as object;</span><br><span class=\"line\"><span class=\"built_in\">Console</span>.WriteLine(obj2 == null);<span class=\"comment\">// True</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><p><strong>整数常量</strong></p>\n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，没有前缀则表示十进制。</p>\n<p>整数常量也可以有后缀，可以是 U 和 L 的组合，其中，U 和 L 分别表示 unsigned 和 long。后缀可以是大写或者小写，多个后缀以任意顺序进行组合。</p>\n<p>定义常量：使用<code>const</code>关键字</p>\n<blockquote>\n<p>const与readonly</p>\n<ul>\n<li>const定义时就必须赋值且后续不能更改；</li>\n<li>readonly定义时可以不赋值，后续只能进行一次赋值。</li>\n</ul>\n</blockquote>\n<h1 id=\"可空类型\"><a href=\"#可空类型\" class=\"headerlink\" title=\"可空类型\"></a>可空类型</h1><p><strong>?</strong> 单问号用于对 <strong>int、double、bool</strong> 等无法直接赋值为 null 的数据类型进行 null 的赋值，意思是这个数据类型是 Nullable 类型的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">//默认值0</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>? ii; <span class=\"comment\">//默认值null</span></span><br></pre></td></tr></table></figure>\n\n<p>Null合并运算符(<strong>??</strong>)，如果第一个操作数的值为 null，则运算符返回第二个操作数的值，否则返回第一个操作数的值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? num1 = null;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? num2 = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num3;</span><br><span class=\"line\">num3 = num1 ?? num2; <span class=\"comment\">// num1为空，所以返回num2。即num3的值为666</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h1><p>默认情况下，泛型的类型参数可以是任何类型，通过泛型约束，可以只允许使用特定类型的泛型参数。<br><img src=\"/2021/08/01/csharp-01/1.png\" alt></p>\n<h1 id=\"协变、逆变、不变\"><a href=\"#协变、逆变、不变\" class=\"headerlink\" title=\"协变、逆变、不变\"></a>协变、逆变、不变</h1><ul>\n<li><p>协变：当值作为返回值/out输出</p>\n<ul>\n<li><code>public interface IEnumerable&lt;out T&gt;</code></li>\n</ul>\n</li>\n<li><p>逆变：当值作为输入/in</p>\n<ul>\n<li><code>public delegate void Action&lt;in T&gt;</code></li>\n</ul>\n</li>\n<li><p>不变：当值既作为输入又作为输出</p>\n<ul>\n<li><code>public interface List&lt;T&gt;</code></li>\n</ul>\n</li>\n</ul>\n<p>协变和逆变可以发生类型之间的转换。例如，<code>string</code>转<code>object</code>，而不变则不行。</p>\n","categories":["C#"],"tags":["C#"]},{"title":"ElementUI整合SpringBoot","url":"/2020/10/31/elementui/","content":"<h2 id=\"创建前端项目\"><a href=\"#创建前端项目\" class=\"headerlink\" title=\"创建前端项目\"></a>创建前端项目</h2><ul>\n<li>使用vue cli创建一个名为element_user的vue项目<a id=\"more\"></a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue init webpack element_user</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在当前项目下安装elementui </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在项目中的main.js中引入elementui</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ElementUI); <span class=\"comment\">// 在项目中使用 elementui</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ElementUI的一些基础知识：</p>\n<p>ElementUI是基于vue的一个ui框架，并提供了很多相关组件，方便我们快速构建页面。</p>\n<p><strong>属性值的设置</strong>：</p>\n<ul>\n<li>当属性值是字符串时，直接使用<code>属性=&quot;属性值&quot;</code>  的方式给属性赋值</li>\n<li>当属性值是表达式（例如 false,true，数字等等）时，使用<code>:属性=&quot;属性值&quot;</code>的方式给属性赋值</li>\n</ul>\n<p><strong>事件的绑定：</strong></p>\n<ul>\n<li>在组件标签中添加<code>@事件名=vue中事件处理函数</code></li>\n<li>在 <code>methods:{}</code>内编写处理函数的实现</li>\n</ul>\n<p><strong>组件方法的调用：</strong></p>\n<ul>\n<li>使用组件的方法时，需要在组件中加入<code>ref=&quot;组件别名&quot;</code></li>\n<li>在调用方法时直接使用<code>this,$refs.组件别名.方法名()</code></li>\n</ul>\n</blockquote>\n<p><strong>vue项目的基本结构：</strong><br><img src=\"/2020/10/31/elementui/1.png\" alt></p>\n<h3 id=\"在App-vue中创建头部导航栏\"><a href=\"#在App-vue中创建头部导航栏\" class=\"headerlink\" title=\"在App.vue中创建头部导航栏\"></a>在App.vue中创建头部导航栏</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;el-container&gt;</span><br><span class=\"line\">      &lt;el-header&gt;</span><br><span class=\"line\">        &lt;el-menu :<span class=\"keyword\">default</span>-active=<span class=\"string\">\"activeIndex\"</span></span><br><span class=\"line\">          <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"el-menu-demo\"</span> mode=<span class=\"string\">\"horizontal\"</span> @select=<span class=\"string\">\"handleSelect\"</span>&gt;</span><br><span class=\"line\">          &lt;el-menu-item index=<span class=\"string\">\"/\"</span>&gt;主页&lt;<span class=\"regexp\">/el-menu-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;el-menu-item index=\"/u</span>serlist<span class=\"string\">\"&gt;用户管理&lt;/el-menu-item&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;el-menu-item index=\"</span>/orderlist<span class=\"string\">\"&gt;订单管理&lt;/el-menu-item&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/el-menu&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/el-header&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;el-main&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;router-view/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/el-main&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/el-container&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">export default &#123;</span></span><br><span class=\"line\"><span class=\"string\">  name: \"</span>App<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      activeIndex: this.$route.path,</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    handleSelect(key, keyPath) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.$router.push(key);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写主页的组件Index-vue\"><a href=\"#编写主页的组件Index-vue\" class=\"headerlink\" title=\"编写主页的组件Index.vue\"></a>编写主页的组件Index.vue</h3><p>简单实现一个轮播图的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;el-carousel :interval=<span class=\"string\">\"3000\"</span> type=<span class=\"string\">\"card\"</span> height=<span class=\"string\">\"250px\"</span>&gt;</span><br><span class=\"line\">      &lt;el-carousel-item v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in imgs\"</span> :key=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">        &lt;el-image style=<span class=\"string\">\"width: 500px; height: 250px\"</span> :src=<span class=\"string\">\"item\"</span> fit=<span class=\"string\">\"contain\"</span>&gt;&lt;<span class=\"regexp\">/el-image&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>el-carousel-item&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/el-carousel&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;欢迎来到xx管理系统！&lt;/</span>h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> homeImg1 <span class=\"keyword\">from</span> <span class=\"string\">\"../assets/indexImgs/1.jpg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> homeImg2 <span class=\"keyword\">from</span> <span class=\"string\">\"../assets/indexImgs/2.jpg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> homeImg3 <span class=\"keyword\">from</span> <span class=\"string\">\"../assets/indexImgs/3.jpg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> homeImg4 <span class=\"keyword\">from</span> <span class=\"string\">\"../assets/indexImgs/4.jpg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Index\"</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      imgs: [homeImg1, homeImg2, homeImg3, homeImg4],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在index-js中引入组件和访问路径\"><a href=\"#在index-js中引入组件和访问路径\" class=\"headerlink\" title=\"在index.js中引入组件和访问路径\"></a>在index.js中引入组件和访问路径</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span> <span class=\"string\">'../components/Index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">'../components/User/UserList'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> OrderList <span class=\"keyword\">from</span> <span class=\"string\">'../components/Order/OrderList'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, <span class=\"attr\">redirect</span>:<span class=\"string\">'/index'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/index'</span>, <span class=\"attr\">component</span>: Index &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/userlist'</span>, <span class=\"attr\">component</span>: UserList &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/orderlist'</span>, <span class=\"attr\">component</span>: OrderList &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写用户管理的组件UserList-vue\"><a href=\"#编写用户管理的组件UserList-vue\" class=\"headerlink\" title=\"编写用户管理的组件UserList.vue\"></a>编写用户管理的组件UserList.vue</h2><h3 id=\"在当前工程下安装axios\"><a href=\"#在当前工程下安装axios\" class=\"headerlink\" title=\"在当前工程下安装axios\"></a>在当前工程下安装axios</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios --save-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在main-js-中引入axios\"><a href=\"#在main-js-中引入axios\" class=\"headerlink\" title=\"在main.js  中引入axios\"></a>在main.js  中引入axios</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$http=axios; <span class=\"comment\">// 修改 vue内部 $http为 axios</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写UserList-vue\"><a href=\"#编写UserList-vue\" class=\"headerlink\" title=\"编写UserList.vue\"></a>编写UserList.vue</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;el-button type=<span class=\"string\">\"primary\"</span> size=<span class=\"string\">\"small\"</span> @click=<span class=\"string\">\"centerDialogVisible = true\"</span>&gt;添加&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;el-table stripe size=\"small\" :data=\"tableData\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;el-table-column type=\"index\" width=\"50\"&gt; &lt;/</span>el-table-column&gt;</span><br><span class=\"line\">      &lt;el-table-column label=<span class=\"string\">\"编号\"</span> width=<span class=\"string\">\"100\"</span>&gt;</span><br><span class=\"line\">        &lt;template slot-scope=<span class=\"string\">\"scope\"</span>&gt;</span><br><span class=\"line\">          &lt;span style=<span class=\"string\">\"margin-left: 10px\"</span>&gt;&#123;&#123; scope.row.id &#125;&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>template&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/el-table-column&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;el-table-column label=\"姓名\" width=\"160\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;template slot-scope=\"scope\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;el-popover trigger=\"hover\" placement=\"top\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;p&gt;姓名: &#123;&#123; scope.row.name &#125;&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">            &lt;p&gt;住址: &#123;&#123; scope.row.address &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;div slot=\"reference\" class=\"name-wrapper\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              &lt;el-tag size=\"medium\"&gt;&#123;&#123; scope.row.name &#125;&#125;&lt;/</span>el-tag&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>el-popover&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>el-table-column&gt;</span><br><span class=\"line\">      &lt;el-table-column prop=<span class=\"string\">\"gender\"</span> label=<span class=\"string\">\"性别\"</span> width=<span class=\"string\">\"100\"</span>&gt;&lt;<span class=\"regexp\">/el-table-column&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;el-table-column prop=\"birth\" label=\"生日\" width=\"160\"&gt;&lt;/</span>el-table-column&gt;</span><br><span class=\"line\">      &lt;el-table-column prop=<span class=\"string\">\"address\"</span> label=<span class=\"string\">\"地址\"</span> width=<span class=\"string\">\"160\"</span>&gt;&lt;<span class=\"regexp\">/el-table-column&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;el-table-column label=\"操作\" width=\"300\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;template slot-scope=\"scope\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;el-button size=\"small\"</span></span><br><span class=\"line\"><span class=\"regexp\">           @click=\"handleEdit(scope.$index, scope.row)\"&gt;编辑&lt;/</span>el-button&gt;</span><br><span class=\"line\">          &lt;el-button size=<span class=\"string\">\"small\"</span>  type=<span class=\"string\">\"danger\"</span></span><br><span class=\"line\">            @click=<span class=\"string\">\"handleDelete(scope.$index, scope.row)\"</span>&gt;删除&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>template&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/el-table-column&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>el-table&gt;</span><br><span class=\"line\">    &lt;el-dialog title=<span class=\"string\">\"员工信息\"</span> :visible.sync=<span class=\"string\">\"centerDialogVisible\"</span> width=<span class=\"string\">\"40%\"</span> center&gt;</span><br><span class=\"line\">      &lt;el-form :hide-required-asterisk=<span class=\"string\">\"false\"</span> :rules=<span class=\"string\">\"rules\"</span> ref=<span class=\"string\">\"userForm\"</span> :model=<span class=\"string\">\"form\"</span> label-suffix=<span class=\"string\">\":\"</span>&gt;</span><br><span class=\"line\">        &lt;el-form-item label=<span class=\"string\">\"姓名\"</span> prop=<span class=\"string\">\"name\"</span>&gt;</span><br><span class=\"line\">          &lt;el-col :span=<span class=\"string\">\"11\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"form.name\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"small\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span>&lt;<span class=\"regexp\">/el-col&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>el-form-item&gt;</span><br><span class=\"line\">        &lt;el-form-item label=<span class=\"string\">\"性别\"</span>&gt;</span><br><span class=\"line\">          &lt;el-radio-group v-model=<span class=\"string\">\"form.gender\"</span>&gt;</span><br><span class=\"line\">            &lt;el-radio label=<span class=\"string\">\"男\"</span>&gt;&lt;<span class=\"regexp\">/el-radio&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;el-radio label=\"女\"&gt;&lt;/</span>el-radio&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/el-radio-group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>el-form-item&gt;</span><br><span class=\"line\">        &lt;el-form-item label=<span class=\"string\">\"生日\"</span> prop=<span class=\"string\">\"birth\"</span>&gt;</span><br><span class=\"line\">          &lt;el-col :span=<span class=\"string\">\"11\"</span>&gt;</span><br><span class=\"line\">            &lt;el-date-picker value-format=<span class=\"string\">\"yyyy-MM-dd\"</span> type=<span class=\"string\">\"date\"</span> placeholder=<span class=\"string\">\"选择日期\"</span> v-model=<span class=\"string\">\"form.birth\"</span> style=<span class=\"string\">\"width: 100%\"</span> size=<span class=\"string\">\"small\"</span>&gt;&lt;<span class=\"regexp\">/el-date-picker&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>el-col&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/el-form-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;el-form-item label=\"详细地址\" prop=\"address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;el-input type=\"textarea\" v-model=\"form.address\" :rows=\"2\"&gt;&lt;/</span>el-input&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/el-form-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;span style=\"text-align: center; display: block\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;el-button type=\"primary\" @click=\"onSubmit\" size=\"small\"&gt;保存&lt;/</span>el-button&gt;</span><br><span class=\"line\">          &lt;el-button @click=<span class=\"string\">\"clear\"</span> size=<span class=\"string\">\"small\"</span>&gt;重置&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>span&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/el-form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>el-dialog&gt;</span><br><span class=\"line\">    &lt;el-pagination</span><br><span class=\"line\">      layout=<span class=\"string\">\"prev, pager, next,jumper,total,sizes\"</span></span><br><span class=\"line\">      background</span><br><span class=\"line\">      style=<span class=\"string\">\"margin: 10px 0px\"</span></span><br><span class=\"line\">      :total=<span class=\"string\">\"total\"</span></span><br><span class=\"line\">      @current-change=<span class=\"string\">\"findCurrentPage\"</span></span><br><span class=\"line\">      @size-change=<span class=\"string\">\"findPageSize\"</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/el-pagination&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: \"UserList\",</span></span><br><span class=\"line\"><span class=\"regexp\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      search: \"\",</span></span><br><span class=\"line\"><span class=\"regexp\">      tableData: [],</span></span><br><span class=\"line\"><span class=\"regexp\">      centerDialogVisible: false,</span></span><br><span class=\"line\"><span class=\"regexp\">      form: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        name: \"\",</span></span><br><span class=\"line\"><span class=\"regexp\">        gender: \"男\",</span></span><br><span class=\"line\"><span class=\"regexp\">        birth: \"\",</span></span><br><span class=\"line\"><span class=\"regexp\">        address: \"\",</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">      total: 0,</span></span><br><span class=\"line\"><span class=\"regexp\">      pageNo: 1,</span></span><br><span class=\"line\"><span class=\"regexp\">      pageSize: 9,</span></span><br><span class=\"line\"><span class=\"regexp\">      rules: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        name: [&#123; required: true, message: \"请输入姓名\", trigger: \"blur\" &#125;],</span></span><br><span class=\"line\"><span class=\"regexp\">        birth: [&#123; required: true, message: \"请选择出生日期\", trigger: \"blur\" &#125;],</span></span><br><span class=\"line\"><span class=\"regexp\">        address: [</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123; required: true, message: \"请输入详细地址\", trigger: \"blur\" &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">        ],</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    handleEdit(index, row) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ console.log(index, row);</span></span><br><span class=\"line\"><span class=\"regexp\">      this.centerDialogVisible = true;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$http</span></span><br><span class=\"line\"><span class=\"regexp\">        .get(\"http:/</span><span class=\"regexp\">/localhost:8989/u</span>ser/select?id=<span class=\"string\">\" + row.id)</span></span><br><span class=\"line\"><span class=\"string\">        .then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">          //console.log(res.data);</span></span><br><span class=\"line\"><span class=\"string\">          this.form = res.data;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    handleDelete(index, row) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.$confirm(\"</span>确认删除?<span class=\"string\">\", \"</span>提示<span class=\"string\">\", &#123;</span></span><br><span class=\"line\"><span class=\"string\">        confirmButtonText: \"</span>确定<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        cancelButtonText: \"</span>取消<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        type: \"</span>warning<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        .then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">          this.$http</span></span><br><span class=\"line\"><span class=\"string\">            .get(\"</span>http:<span class=\"comment\">//localhost:8989/user/delete?id=\" + row.id)</span></span><br><span class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">                  message: <span class=\"string\">\"删除成功\"</span>,</span><br><span class=\"line\">                  type: <span class=\"string\">\"success\"</span>,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.listAll();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">                  message: <span class=\"string\">\"删除失败\"</span>,</span><br><span class=\"line\">                  type: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"info\"</span>,</span><br><span class=\"line\">            message: <span class=\"string\">\"已取消删除\"</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onSubmit() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$refs.userForm.validate(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$http</span><br><span class=\"line\">            .post(<span class=\"string\">\"http://localhost:8989/user/save\"</span>, <span class=\"keyword\">this</span>.form)</span><br><span class=\"line\">            .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">this</span>.centerDialogVisible = <span class=\"literal\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">                  message: <span class=\"string\">\"保存成功\"</span>,</span><br><span class=\"line\">                  type: <span class=\"string\">\"success\"</span>,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.listAll();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">                  message: <span class=\"string\">\"保存失败\"</span>,</span><br><span class=\"line\">                  type: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">this</span>.form = &#123; <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">            message: <span class=\"string\">\"输入信息不合法！\"</span>,</span><br><span class=\"line\">            type: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//console.log(this.form);</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.form = &#123; <span class=\"attr\">id</span>: <span class=\"keyword\">this</span>.form.id, <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    listAll() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$http</span><br><span class=\"line\">        .get(</span><br><span class=\"line\">          <span class=\"string\">\"http://localhost:8989/user/listAll?pageNo=\"</span> +</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pageNo +</span><br><span class=\"line\">            <span class=\"string\">\"&amp;pageSize=\"</span> +</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pageSize</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.tableData = res.data.users;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.total = res.data.recordCount;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    findCurrentPage(page) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageNo = page;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listAll();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    findPageSize(size) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageSize = size;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listAll();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listAll();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现后端接口\"><a href=\"#实现后端接口\" class=\"headerlink\" title=\"实现后端接口\"></a>实现后端接口</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin</span> <span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/listAll\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">listAll</span><span class=\"params\">(Integer pageNo, Integer pageSize)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        pageNo=pageNo==<span class=\"keyword\">null</span>?<span class=\"number\">1</span>:pageNo;</span><br><span class=\"line\">        pageSize=pageSize==<span class=\"keyword\">null</span>?<span class=\"number\">9</span>:pageSize;</span><br><span class=\"line\">        List&lt;UserPO&gt; users = userService.listAll(pageNo, pageSize);</span><br><span class=\"line\">        Integer recordCount = userService.findTotal();</span><br><span class=\"line\">        Integer pageTotal = (recordCount - <span class=\"number\">1</span>) / pageSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">        map.put(<span class=\"string\">\"users\"</span>, users);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"totalPage\"</span>, pageTotal);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"recordCount\"</span>, recordCount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/save\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">insert</span><span class=\"params\">(@RequestBody UserPO userPO)</span> </span>&#123;</span><br><span class=\"line\">        Result result = <span class=\"keyword\">new</span> Result();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            userService.insertOrUpdate(userPO);</span><br><span class=\"line\">            result.setStatus(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            result.setMsg(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            result.setStatus(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            result.setMsg(<span class=\"string\">\"保存失败\"</span>);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/delete\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">delete</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        Result result = <span class=\"keyword\">new</span> Result();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            userService.delete(id);</span><br><span class=\"line\">            result.setStatus(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            result.setMsg(<span class=\"string\">\"删除成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            result.setStatus(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            result.setMsg(<span class=\"string\">\"删除失败\"</span>);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/select\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserPO <span class=\"title\">select</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.selectOne(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/2020/10/31/elementui/1.gif\" alt></p>\n","categories":["前端"],"tags":["SpringBoot","Vue","ElementUI"]},{"title":"数据类型，运算符，数组","url":"/2020/01/09/java-01/","content":"<h2 id=\"变量的使用\"><a href=\"#变量的使用\" class=\"headerlink\" title=\"变量的使用\"></a>变量的使用</h2><p>1.变量必须先声明后使用。<br>2.变量都定义在其作用域内，在作用域内有效，出了作用域就失效了。<br>3.同一个作用域内不能声明两个同名变量。<a id=\"more\"></a></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><img src=\"/2020/01/09/java-01/1.jpg\" alt></p>\n<p><strong>基本数据类型(primitive type)</strong><br>        整型  byte(1字节) -128~127 , short (2字节), int(4字节) , long(8字节) l或L结尾<br>        浮点型  float(4字节) 定义时要以f或F结尾 , double(8字节)<br>        字符型  char(2字节)<br>        布尔型  boolean 只能取两个值之一 ：true , false<br><em>7种基本数据类型之间的计算（不包括布尔类型）:</em><br>        1.自动类型提升：<br>               容量小的数据类型变量与容量大的数据类型做运算时，运算结果自动装换为容量大的。<br>               byte , char , short –&gt; int –&gt; long –&gt; float –&gt; double<br><strong>所有的byte , short , char 类型的值将被提升为int型；</strong><br><strong>被final 修饰的变量不会自动提升其类型</strong></p>\n<p>​        2.强制类型转换：<br>​        使用强转符 () ，可能造成精度损失<br><strong>引用数据类型(reference type)</strong><br>​        类 class<br>​        String类型：  声明时使用一对””，可以与8种基本数据类型做运算，+ 只能表示连接<br>​        接口 interfere<br>​        数组 [ ]</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>​    <strong>算术运算符</strong><br>​            <strong>逻辑运算符</strong><br>​            <strong>&amp;&amp;与&amp;的区别：</strong><br>​            &amp; : 左边无论真假，右边进行运算<br>​            &amp;&amp; ： 左边为真，右边参与运算；左边为假，右边不参与运算<br>​            <strong>|与||的区别：</strong><br>​            ||：左边为真，右边不参与运算<br>​            <strong>位运算：</strong><br>​         <img src=\"/2020/01/09/java-01/1.png\" alt></p>\n<p><strong>运算符优先级：</strong></p>\n<p>单目乘除为(位)关系，逻辑三目后赋值。 </p>\n<p>单目：单目运算符+ –(负数) ++ – 等<br>乘除：算数单目运算符* / % + -<br>为（位）：位移单目运算符&lt;&lt; &gt;&gt;<br>关系：关系单目运算符&gt; &lt; &gt;= &lt;= == !=<br>逻辑：逻辑单目运算符&amp;&amp; || &amp; | ^<br>三目：三目单目运算符A &gt; B ? X : Y<br>后：无意义，仅仅为了凑字数<br>赋值：赋值=</p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p><strong>顺序结构</strong><br><strong>分支结构</strong><br><strong>循环结构</strong><br>        break :  结束当前循环<br>        continue :  结束当次循环</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p><strong>数组的特点:</strong><br>            1.数组是有序排列的<br>            2.数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型的变量<br>            3.创建数组对象时会在内存中开辟一整块连续的内存空间<br>            4.数组的长度一旦确定就不能修改 </p>\n<p><strong>一维数组的使用:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] nums;<span class=\"comment\">// 声明</span></span><br><span class=\"line\">    <span class=\"comment\">// 静态初始化:数组的初始化和数组元素的初始化同时进行</span></span><br><span class=\"line\">    <span class=\"comment\">// int型数组元素数量小于指定容量时，以0填充</span></span><br><span class=\"line\">    nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// int[] nums = &#123;1,2,3,4,5,6&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 动态初始化:数组的初始化和数组元素的初始化分开进行</span></span><br><span class=\"line\">    String[] names = <span class=\"keyword\">new</span> String[<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过角标的方式调用指定位置的元素</span></span><br><span class=\"line\">    names[<span class=\"number\">0</span>] = <span class=\"string\">\"Tom\"</span>;</span><br><span class=\"line\">    names[<span class=\"number\">1</span>] = <span class=\"string\">\"Justin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取数组长度： length</span></span><br><span class=\"line\">    System.out.println(names.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.length;i++) &#123;</span><br><span class=\"line\">        System.out.println(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>一维数组元素的默认初始值</strong><br><em>基本数据类型：</em><br>整形：0<br>浮点型：0.0<br>char型：0（ASCII码值） 而非’0’<br>boolean型：false<br>引用数据类型：null</p>\n<p><strong>一维数组的内存解析:</strong></p>\n<p>在栈空间中申请一个变量用来存储堆空间中数组的首地址值<br>        在堆空间中申请一个数组用来存放数组元素</p>\n<p><strong>多维数组的使用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] arr =  <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [][] &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;,&#123;<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">        String [][] arr1 = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">        String [][] arr2 = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>][];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用数组指定位置的元素</span></span><br><span class=\"line\">        System.out.println(arr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]);<span class=\"comment\">// 2</span></span><br><span class=\"line\">        System.out.println(arr1[<span class=\"number\">1</span>][<span class=\"number\">1</span>]);<span class=\"comment\">// null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取数组的长度</span></span><br><span class=\"line\">        System.out.println(arr.length);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; arr[i].length;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.print(arr[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二维数组元素的默认初始值:</strong><br>针对初始化方式一：<code>String [][] arr1 = new String[3][2];</code><br>外层元素的初始化值为：地址值<br>内层元素的初始化值为：与一维数组的初始化情况相同<br>针对初始化方式二：<code>String [][] arr1 = new String[3][];</code><br>外层元素的初始化值为：null<br>内层元素的初始化值为：<font color=\"red\">不能调用，否则报错 </font></p>\n<p><strong>二位数组的内存解析:</strong><br>在栈空间中申请一个变量用来存储堆空间中数组的首地址值<br>在堆空间中申请一个数组用来存放二维数组的外层元素，外层元素中存放着指向存储内层元素数组的首地址<br>在堆空间中申请一个数组用来存储内层元<br><img src=\"/2020/01/09/java-01/Array_02.png\" alt></p>\n<h2 id=\"数组中涉及的常见算法\"><a href=\"#数组中涉及的常见算法\" class=\"headerlink\" title=\"数组中涉及的常见算法\"></a>数组中涉及的常见算法</h2><p><strong>数组元素的赋值</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 打印10行杨辉三角</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月13日上午11:26:21</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YangHui_Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明并动态初始化二位数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> [][] yangHui = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][];<span class=\"comment\">// 10行，列数不确定</span></span><br><span class=\"line\">        <span class=\"comment\">// 给元素赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; yangHui.length;i++) &#123;</span><br><span class=\"line\">            yangHui[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[i+<span class=\"number\">1</span>];<span class=\"comment\">// 第i行有i+1个元素</span></span><br><span class=\"line\">            <span class=\"comment\">// 给首末元素赋值</span></span><br><span class=\"line\">            yangHui[i][<span class=\"number\">0</span>] =yangHui[i][i] = <span class=\"number\">1</span>;<span class=\"comment\">//首末元素为1</span></span><br><span class=\"line\">            <span class=\"comment\">// 给其余元素赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j &lt; yangHui[i].length-<span class=\"number\">1</span>;j++) &#123;</span><br><span class=\"line\">                    yangHui[i][j] = yangHui[i-<span class=\"number\">1</span>][j] + yangHui[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历输出</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; yangHui.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; yangHui[i].length;j++) &#123;</span><br><span class=\"line\">                System.out.print(yangHui[i][j] + <span class=\"string\">\" \"</span>);    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>求数值型数组中元素的最大值、最小值、平均数、总和等</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 定义一个int型的一维数组，包含10个元素，分别赋一些随机整数，</span></span><br><span class=\"line\"><span class=\"comment\">然后求出所有元素的最大值，最小值，和值，平均值，并输出出来。</span></span><br><span class=\"line\"><span class=\"comment\">要求：所有随机数都是两位数。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月13日下午2:13:41</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> average = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取[a,b]范围内的随机数，(int)(Math.random()*(b-a+1)+a)</span></span><br><span class=\"line\">            arr[i] = (<span class=\"keyword\">int</span>)(Math.random()*(<span class=\"number\">99</span>-<span class=\"number\">10</span>+<span class=\"number\">1</span>)+<span class=\"number\">10</span>);</span><br><span class=\"line\">            System.out.print(arr[i]+ <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(min&gt;arr[i]) &#123;</span><br><span class=\"line\">                min = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max&lt;arr[i]) &#123;</span><br><span class=\"line\">                max = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum+=arr[i];</span><br><span class=\"line\">            average = sum/arr.length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最大值：\"</span> + max);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最小值：\"</span> + min);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"和值：\"</span> + sum);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"平均值：\"</span> + average);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=\"red\">赋值与复制</font></strong></p>\n<p>赋值：<code>array2 = array1;// array1指向堆空间的地址赋给array2,不能称为数组的复制</code><br>            对array2修改就是对array1进行修改<br>        复制：<code>for(int i = 0;i &lt; array2.length;i++) {\n            array2[i] = array1[i];\n        }</code><br>            对array2修改不会影响到array1</p>\n<p><strong>数组的反转</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String[] array1 = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"Tom\"</span>,<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"Justin\"</span>,<span class=\"string\">\"Troye\"</span>,<span class=\"string\">\"Swift\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; array1.length/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">        String temp = array1[i];</span><br><span class=\"line\">        array1[i] = array1[array1.length-<span class=\"number\">1</span>-i];</span><br><span class=\"line\">        array1[array1.length-<span class=\"number\">1</span>-i] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找</strong></p>\n<ol>\n<li>线性查找</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String[] array1 = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"Tom\"</span>,<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"Justin\"</span>,<span class=\"string\">\"Troye\"</span>,<span class=\"string\">\"Swift\"</span>&#125;;</span><br><span class=\"line\">String dest = <span class=\"string\">\"Justin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; array1.length;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dest.equals(array1[i])) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"元素Justin的位置为：\"</span> + i);</span><br><span class=\"line\">        isFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(isFlag) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"没有找到！\"</span>);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>二分查找</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> [] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> head = array3[<span class=\"number\">0</span>];<span class=\"comment\">// 初始的首索引</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> end = array3[array3.length -<span class=\"number\">1</span>];<span class=\"comment\">// 初始的尾索引</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> middle = (head + end)/<span class=\"number\">2</span>;<span class=\"comment\">// 二分</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isFlag1 = <span class=\"keyword\">true</span>;<span class=\"comment\">// 设置标志位，找到元素后置false</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(head &lt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(number == array3[middle]) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"元素6的位置为：\"</span> + middle);</span><br><span class=\"line\">        isFlag1 = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(number &lt; array3[middle]) &#123;</span><br><span class=\"line\">            end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"keyword\">if</span>(isFlag1) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"没有找到该元素！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>排序</strong></p>\n<p><strong>冒泡排序</strong></p>\n<p>排序思想：</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步<br>做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要<br>比较为止。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> [] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">33</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; array.length-<span class=\"number\">1</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; array.length-<span class=\"number\">1</span>-i;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[j]&gt;array[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = array[j];</span><br><span class=\"line\">            array[j] = array[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            array[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; array.length;i++) &#123;</span><br><span class=\"line\">    System.out.print(array[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Arrays工具类</strong></p>\n<p>java.util.Arrays ：操作数组的工具类，定义了许多操作数组的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 1.boolean equals(int[] a,int[] b) 判断两个数组是否相等。</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isEqual =Arrays.equals(arr1, arr2);</span><br><span class=\"line\">        System.out.println(isEqual);<span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.String toString(int[] a) 输出数组信息</span></span><br><span class=\"line\">        String arr1Info = Arrays.toString(arr1);</span><br><span class=\"line\">        System.out.println(arr1Info);<span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.void fill(int[] a,int val) 将指定值填充到数组之中。</span></span><br><span class=\"line\">        Arrays.fill(arr1,<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));<span class=\"comment\">// [6,6,6,6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.void sort(int[] a) 对数组进行排序。</span></span><br><span class=\"line\">        Arrays.sort(arr2);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr2));<span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5.int binarySearch(int[] a,int key) 对排序后的数组进行二分法检索指定的值。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = Arrays.binarySearch(arr2, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"元素4的索引为：\"</span>+ index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"未找到该元素！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 6. List&lt;T&gt; asList(T... a) 返回一个List  底层是final数组</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组使用的常见异常</strong></p>\n<p>1.数组脚标越界异常<br>    ArrayIndexOutOfBoundsException：访问到了数组中的不存在的脚标时发生。<br>    合理范围：[0,array.length-1]</p>\n<p>2.空指针异常<br>    NullPointerException：array引用没有指向实体，却在操作实体中的元素时。</p>\n","categories":["Java"],"tags":["JavaSE"]},{"title":"多线程","url":"/2020/02/17/java-04/","content":"<h2 id=\"程序、进程、线程的概念\"><a href=\"#程序、进程、线程的概念\" class=\"headerlink\" title=\"程序、进程、线程的概念\"></a>程序、进程、线程的概念</h2><img src=\"/2020/02/17/java-04/program,process,thread.png\" style=\"zoom:70%;\">\n并行：多个CPU同时执行多个任务。\n并发：一个CPU(采用时间片)”同时“执行多个任务。<a id=\"more\"></a>\n\n<h2 id=\"线程的创建和使用\"><a href=\"#线程的创建和使用\" class=\"headerlink\" title=\"线程的创建和使用\"></a>线程的创建和使用</h2><p><strong>创建方式一：继承Thread类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建一个继承于Thread类的子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.重写Thread类的run()方法-&gt;将此线程执行的操作声明在run()中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.在主线程中创建Thread类的子类的对象</span></span><br><span class=\"line\">        MyThread t1 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        <span class=\"comment\">// 4.通过此对象调用start()方法：&lt;1&gt;启动当前线程;&lt;2&gt;调用当前线程的run()</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">// 以下操作在主线程中执行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子线程的创建和启动过程：<br><img src=\"/2020/02/17/java-04/thread1.png\" alt=\"子线程的创建和启动过程\"></p>\n<p><strong>创建方式二：实现Runnable接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建子类实现Runnable接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.实现Runnable接口中的run()方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3.创建Runnable实现类的对象</span></span><br><span class=\"line\">        MyThread2 mThread = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">        <span class=\"comment\">// 4.将此对象作为参数传入Thread类的构造器中，创建Thread()类对象</span></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(mThread);</span><br><span class=\"line\">        <span class=\"comment\">// 5.通过Thread类对象调用start()方法</span></span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 再启动一个线程 不需要再造实现类对象</span></span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(mThread);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>两种创建方式的比较：</strong><br>        开发中：优先选择实现Runnable接口的方式。<br>        原因 ：1.没有类的单继承性的局限性；2.更适合处理多个线程有共享数据的情况。<br>        相同点：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中；启动线程都是调用Thread类中的start()方法</p>\n<h2 id=\"Thread类中常用方法\"><a href=\"#Thread类中常用方法\" class=\"headerlink\" title=\"Thread类中常用方法\"></a>Thread类中常用方法</h2><p><strong>void start()：</strong> 启动线程，并执行对象的run()方法<br><strong>void run()：</strong>线程在被调度时执行的操作<br><strong>String getName()：</strong> 返回线程的名称<br><strong>void setName(String name)：</strong>设置该线程名称<br><strong>static Thread currentThread()：</strong> 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类<br><strong>static void yield()：</strong>线程让步<br>       &lt;1&gt; 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程<br>       &lt;2&gt; 若队列中没有同优先级的线程，忽略此方法<br><strong>join()：</strong>在线程a中调用线程b的 join() 方法时，线程a将被阻塞，直到线程b执行完为止 ;低优先级的线程也可以获得执行。底层调用wait()，会释放锁。<br><strong>static void sleep(long millis)：</strong>(指定时间:毫秒)<br>&lt;1&gt; 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队<br>&lt;2&gt; 抛出InterruptedException异常<br><strong>stop()：</strong>强制线程生命期结束，不推荐使用<br><strong>boolean isAlive()：</strong>返回boolean，判断线程是否还活着</p>\n<h2 id=\"线程的调度\"><a href=\"#线程的调度\" class=\"headerlink\" title=\"线程的调度\"></a>线程的调度</h2><p><strong>调度的策略：</strong>时间片；抢占式。<br>        <strong>Java的调度方法：</strong><br>        &lt;1&gt; 同优先级线程组成先进先出队列(先到先服务)，使用时间片策略；<br>        &lt;2&gt; 对高优先级，使用抢占式策略，高优先级的线程抢占CPU.<br>        <strong>线程的优先级等级：</strong><br>        MAX_PRIORITY : 10<br>        MIN_PRIORITY : 1<br>        NORM_PRIORITY : 5<br>        <strong>涉及的方法：</strong><br>        getPriority() : 返回线程优先级；<br>        setPriority(int newPriority) : 重新设置线程的优先级。<br>        <strong>说明：</strong><br>        线程创建时继承父线程的优先级；<br>        低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</p>\n<h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><p><img src=\"/2020/02/17/java-04/threadLift.png\" alt=\"线程生命周期\"></p>\n<h2 id=\"线程的同步\"><a href=\"#线程的同步\" class=\"headerlink\" title=\"线程的同步\"></a>线程的同步</h2><p>多个线程执行的不确定性会引起结果的不稳定性；<br>多个线程对数据的共享，会造成操作的不完整性。<br><strong>方式一：同步代码块</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(<span class=\"comment\">/*同步监视器*/</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要同步的代码：操作共享数据(多个线程共同操作的变量)的代码。<br>同步监视器：俗称：锁。任何一个类的对象都可以充当锁。<br>要求：多个线程必须要共用同一把锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * <span class=\"meta\">@author</span> zyz</span><br><span class=\"line\"> * <span class=\"meta\">@description</span> 测试三个窗口同时卖票，采用同步代码块解决线程安全问题</span><br><span class=\"line\"> * <span class=\"meta\">@create</span> <span class=\"number\">2020</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span> <span class=\"number\">13</span>:<span class=\"number\">57</span></span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Ticket t = <span class=\"keyword\">new</span> Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">\"窗口1\"</span>);</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        t2.setName(<span class=\"string\">\"窗口2\"</span>);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        t3.setName(<span class=\"string\">\"窗口3\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNum = <span class=\"number\">100</span>;<span class=\"comment\">// 采用实现Runnable接口方式实现多线程，共享变量无需声明为static</span></span><br><span class=\"line\">    Object obj = <span class=\"keyword\">new</span> Object();<span class=\"comment\">// 保证多个线程共用一把锁</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(obj)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ticketNum&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 票号：\"</span>+ticketNum);</span><br><span class=\"line\">                    ticketNum--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式二：同步方法</strong><br>        1.不需要显式声明同步监视器；<br>        2.非静态的同步方法：同步监视器是this;===&gt;对象锁<br>            静态的同步方法：同步监视器是当前类。===&gt;类锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> multithread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 采用同步方法解决线程安全问题</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-02-22 16:08</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Ticket1 t1 = <span class=\"keyword\">new</span> Ticket1();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(t1);</span><br><span class=\"line\">        t4.setName(<span class=\"string\">\"窗口1\"</span>);</span><br><span class=\"line\">        Thread t5 = <span class=\"keyword\">new</span> Thread(t1);</span><br><span class=\"line\">        t5.setName(<span class=\"string\">\"窗口2\"</span>);</span><br><span class=\"line\">        Thread t6 = <span class=\"keyword\">new</span> Thread(t1);</span><br><span class=\"line\">        t6.setName(<span class=\"string\">\"窗口3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">        t5.start();</span><br><span class=\"line\">        t6.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNum = <span class=\"number\">100</span>;<span class=\"comment\">// 采用实现Runnable接口方式实现多线程，共享变量无需声明为static</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            threadRun();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将可能出现线程安全问题的代码块封装成一个同步方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">threadRun</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 采用继承Thread类实现多线程时，需要将此方法声明为static</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ticketNum&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 票号：\"</span>+ticketNum);</span><br><span class=\"line\">                ticketNum--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>死锁：</strong>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。<br>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。<br><strong>方式三：Lock</strong><br>        通过显式定义同步锁对象，即Lock对象，来实现同步。<br>        ReentrantLock类实现了Lock，以及创建锁的lock()方法，释放锁的unlock()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 采用Lock解决线程安全问题</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-02-23 14:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketTest3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Ticket2 t = <span class=\"keyword\">new</span> Ticket2();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread th1 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        th1.setName(<span class=\"string\">\"线程1：\"</span>);</span><br><span class=\"line\">        Thread th2 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        th2.setName(<span class=\"string\">\"线程2：\"</span>);</span><br><span class=\"line\">        Thread th3 = <span class=\"keyword\">new</span> Thread(t);</span><br><span class=\"line\">        th3.setName(<span class=\"string\">\"线程3：\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        th1.start();</span><br><span class=\"line\">        th2.start();</span><br><span class=\"line\">        th3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticket2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNum = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 1.实例化ReentrantLock</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.调用锁定方法lock()</span></span><br><span class=\"line\">                lock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ticketNum&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+ticketNum);</span><br><span class=\"line\">                    ticketNum--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3.调用解锁方法unlock()</span></span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>synchronized 与  Lock 的不同点：</em><br>1.synchronized机制再执行完相应的同步代码后，自动释放同步监视器；<br>    Lock需要手动的启动同步(lock())，同时也需要手动的结束同步(unlock())。<br>2.Lock只有代码块锁，synchronized有代码块锁和方法锁<br>3.使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）<br><strong>优先使用顺序：</strong><br>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt;同步方法（在方法体之外）</p>\n<h2 id=\"线程的通信\"><a href=\"#线程的通信\" class=\"headerlink\" title=\"线程的通信\"></a>线程的通信</h2><p><strong>wait()：</strong>一旦线程执行此方法，当前线程就会进入阻塞状态，并释放同步监视器(锁)。<br><strong>notify()：</strong>一旦执行此方法就会唤醒被wait的一个线程。若有多个线程被wait，则唤醒优先级高的。<br><strong>notifyAll()：</strong>唤醒所有被wait的线程。<br>        <em>三个方法必须使用在同步代码块或同步方法中。<br>        三个方法的调用者必须是同步代码块或是同步代码块中的同步监视器。<br>        三个方法定义在Object类中。</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 使用两个线程打印1-100。线程1, 线程2 交替打印</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-02-23 17:30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadCommunicate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Number n = <span class=\"keyword\">new</span> Number();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread th1 = <span class=\"keyword\">new</span> Thread(n);</span><br><span class=\"line\">        th1.setName(<span class=\"string\">\"线程1：\"</span>);</span><br><span class=\"line\">        Thread th2 = <span class=\"keyword\">new</span> Thread(n);</span><br><span class=\"line\">        th2.setName(<span class=\"string\">\"线程2：\"</span>);</span><br><span class=\"line\">        th1.start();</span><br><span class=\"line\">        th2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                notify();<span class=\"comment\">// 唤醒线程</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + num);</span><br><span class=\"line\">                    num++;</span><br><span class=\"line\">                    <span class=\"comment\">// 线程执行完后就阻塞</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        wait();<span class=\"comment\">// 执行完wait()后释放锁</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>sleep()与wait()的异同点：</em><br>1.相同点：一旦执行后。线程都会进入阻塞状态<br>2.不同点：<br>&lt;1&gt;声明的位置不同：sleep()声明在Thread类中，wait()声明在Object类中；<br>&lt;2&gt;调用要求不同，wait()只能在同步代码块或同步方法中使用；<br>&lt;3&gt;sleep()不会释放锁。</p>\n<p>1.锁池（就绪队列）<br>所有需要竞争同步锁的线程都会放在锁池当中，比如当前对象的锁已经被其中一个线程得到，则其他线程需要在这个锁池进行等待，当前面的线程释放同步锁后锁池中的线程去竞争同步锁，当某个线程得到后会进入就绪队列进行等待cpu资源分配。<br>2.等待池（等待队列）<br>当我们调用<code>wait()</code>方法后，线程会放到等待池当中，等待池的线程是不会去竞争同步锁。只有调用了<code>notify()</code>或<code>notifyAll()</code>后等待池的线程才会开始去竞争锁，<code>notify()</code>是随机从等待池选出一个线程放到锁池，而<code>notifyAll()</code>是将等待池的所有线程放到锁池当中。</p>\n<h2 id=\"JDK5-0新增的线程创建方式\"><a href=\"#JDK5-0新增的线程创建方式\" class=\"headerlink\" title=\"JDK5.0新增的线程创建方式\"></a>JDK5.0新增的线程创建方式</h2><p><strong>方式三：实现Callable接口</strong></p>\n<p>使用此方式与前面实现多线程的方式的不同之处在于，可以更方便的获取返回值，前面的方式只能通过共享变量的方式实现值传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 线程创建方式三</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-02-26 14:11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest3</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建子线程1</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建Callable实现类的对象</span></span><br><span class=\"line\">        MyThread3 t = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">        <span class=\"comment\">// 实例化FutureTask类，将Callable实现类的对象作为参数传入</span></span><br><span class=\"line\">        FutureTask futureTask = <span class=\"keyword\">new</span> FutureTask(t);</span><br><span class=\"line\">        FutureTask futureTask1 = <span class=\"keyword\">new</span> FutureTask(t);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Thread(Runnable target)需要传入一个Runnable实现类的对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 而FutureTask类不仅实现了Future接口，同时也实现了Runnable接口</span></span><br><span class=\"line\">        <span class=\"comment\">// 因此可将FutureTask类的对象作为参数传入</span></span><br><span class=\"line\">        Thread th3 = <span class=\"keyword\">new</span> Thread(futureTask);</span><br><span class=\"line\">        th3.setName(<span class=\"string\">\"子线程1：\"</span>);</span><br><span class=\"line\">        th3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// get()返回Callable实现类的对象重写的call()的返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object threadName = futureTask.get();</span><br><span class=\"line\">            System.out.println(threadName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建子线程2</span></span><br><span class=\"line\">        Thread th4 = <span class=\"keyword\">new</span> Thread(futureTask1);</span><br><span class=\"line\">        th4.setName(<span class=\"string\">\"子线程2：\"</span>);</span><br><span class=\"line\">        th4.start();     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式四：使用线程池</strong><br>好处：<br>1.提高响应速度(减少了创建新线程的时间)<br>2.降低资源消耗(重复利用线程池中的线程，不需要每次都创建)<br>3.便于线程管理：<br>corePoolSize：核心池的大小<br>maxinumPoolSize：最大线程数<br>keepAliveTime：线程没有任务是最多保持多长时间后会终止</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 线程的创建方式四</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-02-26 16:03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池 提供指定线程数量</span></span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程并开始线程</span></span><br><span class=\"line\">        service.submit(<span class=\"keyword\">new</span> MyThread4());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread4());</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接池</span></span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\":\"</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"I/O流","url":"/2020/03/11/java-08/","content":"<h2 id=\"File类的使用\"><a href=\"#File类的使用\" class=\"headerlink\" title=\"File类的使用\"></a>File类的使用</h2><p>1、File类的一个对象，代表一个文件或一个文件目录<br>2、File类声明在java.io包下<a id=\"more\"></a><br><strong>File类对象常用方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"src/IO/hello.txt\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// public String getAbsolutePath()：获取绝对路径</span></span><br><span class=\"line\">    System.out.println(file1.getAbsoluteFile());</span><br><span class=\"line\">    <span class=\"comment\">// public String getPath() ：获取路径</span></span><br><span class=\"line\">    System.out.println(file1.getParent());</span><br><span class=\"line\">    <span class=\"comment\">// public String getName() ：获取名称</span></span><br><span class=\"line\">    System.out.println(file1.getName());</span><br><span class=\"line\">    <span class=\"comment\">// public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class=\"line\">    System.out.println(file1.getParent());</span><br><span class=\"line\">    <span class=\"comment\">// public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class=\"line\">    System.out.println(file1.length());</span><br><span class=\"line\">    <span class=\"comment\">// public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class=\"line\">    <span class=\"comment\">// public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class=\"line\">    <span class=\"comment\">// public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class=\"line\">    <span class=\"comment\">//public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class=\"line\">    File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">    file1.renameTo(file2);</span><br><span class=\"line\">    <span class=\"comment\">// public boolean isDirectory()：判断是否是文件目录</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean isFile() ：判断是否是文件</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean exists() ：判断是否存在</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean canRead() ：判断是否可读</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean canWrite() ：判断是否可写</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean isHidden() ：判断是否隐藏</span></span><br><span class=\"line\">    System.out.println(file2.exists());<span class=\"comment\">// true</span></span><br><span class=\"line\">    System.out.println(file1.exists());<span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class=\"line\">    <span class=\"comment\">// public boolean delete()：删除文件或者文件夹</span></span><br><span class=\"line\">    File file3 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test1.txt\"</span>);</span><br><span class=\"line\">    file3.createNewFile();</span><br><span class=\"line\">    file3.delete();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"I-O流原理及流的分类\"><a href=\"#I-O流原理及流的分类\" class=\"headerlink\" title=\"I/O流原理及流的分类\"></a>I/O流原理及流的分类</h2><p>按操作的数据单位分为：字节流，字符流<br>按数据流向分为：输入流，输出流<br>四个抽象基类：<br>字节流：InputStream，OutputStream<br>字符流：Reader，Writer</p>\n<p>按流的角色分为：节点流，处理流</p>\n<p>节点流：<br>操作字节：FileInputStream，FileOutputStream<br>操作字符：FileReader，FileWriter<br>缓冲流（处理流的一种）：<br>操作字节：BufferedInputStream，BufferedOutput<br>操作字符：BufferedReader，BufferedWriter<br><img src=\"/2020/03/11/java-08/2.png\" style=\"zoom:80%;\"></p>\n<h2 id=\"使用FileReader从硬盘中读取字符数据\"><a href=\"#使用FileReader从硬盘中读取字符数据\" class=\"headerlink\" title=\"使用FileReader从硬盘中读取字符数据\"></a>使用FileReader从硬盘中读取字符数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FileReader fileReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.实例化File类对象</span></span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);<span class=\"comment\">// 相对于当前Modul</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.提供具体的流</span></span><br><span class=\"line\">        fileReader = <span class=\"keyword\">new</span> FileReader(file1);</span><br><span class=\"line\">        <span class=\"comment\">// 3.读数据</span></span><br><span class=\"line\">        <span class=\"comment\">// read()返回读入的一个字符的ASCII码，如果到达末尾则返回-1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((data = fileReader.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>) data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;<span class=\"comment\">// 防止内存泄漏，必须关闭流</span></span><br><span class=\"line\">        <span class=\"comment\">// 4.关闭流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileReader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fileReader.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 调用read(char[] cbuf) 返回每次读入cbuf数组中的字符个数，到达文件末尾返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    FileReader fr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">        fr = <span class=\"keyword\">new</span> FileReader(file1);</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] cbuf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = fr.read(cbuf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//                for (int i = 0; i &lt; cbuf.length; i++) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//                    System.out.print(cbuf[i]);</span></span><br><span class=\"line\">            <span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*方式一：</span></span><br><span class=\"line\"><span class=\"comment\">               for(int i=0;i&lt;len;i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    System.out.print(cbuf[i]);</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 方式二：</span></span><br><span class=\"line\">            String str = <span class=\"keyword\">new</span> String(cbuf,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            System.out.print(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fr.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用FileWriter向硬盘中写入字符数据\"><a href=\"#使用FileWriter向硬盘中写入字符数据\" class=\"headerlink\" title=\"使用FileWriter向硬盘中写入字符数据\"></a>使用FileWriter向硬盘中写入字符数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 文件不存在则自动创建；</span></span><br><span class=\"line\"><span class=\"comment\"> * new FileWriter(file1,false); 写入时将原来文件的内容覆盖(默认为false)</span></span><br><span class=\"line\"><span class=\"comment\"> * new FileWriter(file1,true); 写入时追加到原文件内容后面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 利用输入流向硬盘中写入数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    FileWriter fw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.提供File类的对象，指明要写入的文件</span></span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 提供FileWriter对象，用于数据写入</span></span><br><span class=\"line\">        fw = <span class=\"keyword\">new</span> FileWriter(file1,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        fw.write(<span class=\"string\">\"哈哈哈哈哈,\"</span>);</span><br><span class=\"line\">        fw.write(<span class=\"string\">\"歪比巴卜\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fw!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            fw.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用FileInputStream-FileOutputStream对字节文件的处理\"><a href=\"#使用FileInputStream-FileOutputStream对字节文件的处理\" class=\"headerlink\" title=\"使用FileInputStream,FileOutputStream对字节文件的处理\"></a>使用FileInputStream,FileOutputStream对字节文件的处理</h2><p><img src=\"/2020/03/11/java-08/1.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    FileInputStream fi = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileOutputStream fo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pic.png\"</span>);</span><br><span class=\"line\">        File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pic1.png\"</span>);</span><br><span class=\"line\">        fi = <span class=\"keyword\">new</span> FileInputStream(file1);</span><br><span class=\"line\">        fo = <span class=\"keyword\">new</span> FileOutputStream(file2);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] pic = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;<span class=\"comment\">// 获取读取的字符长度</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len = fi.read(pic))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            fo.write(pic,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fo!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                fo.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fi!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                fi.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓冲流的使用\"><a href=\"#缓冲流的使用\" class=\"headerlink\" title=\"缓冲流的使用\"></a>缓冲流的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span> <span class=\"comment\">// 内部通过提供一个缓冲区，提高文件的读取，写入速度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    BufferedInputStream bis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    BufferedOutputStream bos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.造文件</span></span><br><span class=\"line\">        File file1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pic.png\"</span>);</span><br><span class=\"line\">        File file2 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"pic2.png\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.造流</span></span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file1);</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file2);</span><br><span class=\"line\">        <span class=\"comment\">// 3.造缓冲流</span></span><br><span class=\"line\">        bis = <span class=\"keyword\">new</span> BufferedInputStream(fis);</span><br><span class=\"line\">        bos = <span class=\"keyword\">new</span> BufferedOutputStream(fos);</span><br><span class=\"line\">        <span class=\"comment\">// 4.读取和写入</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buff = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len = bis.read(buff))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            bos.write(buff,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bis!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                bis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bos!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                bos.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><p>InputStreamReader：将IntputStream转换为Reader</p>\n<p>OutputStreamWriter：将Writer转化为OutputStream</p>\n<h2 id=\"对象流\"><a href=\"#对象流\" class=\"headerlink\" title=\"对象流\"></a>对象流</h2><p>序列化：使用ObjectOutputStream类保存基本数据类型数据或对象<br>反序列化：使用ObjectInputStream类读取基本数据类型数据或对象<br><strong>对象的序列化：</strong>允许把内存中的java对象转化为与平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或是通过网络节点将这种二进制流传输到另一个网络节点。当程序获取到这种二进制流后，可以恢复成原来的java对象。<br><strong>对象的序列化与反序列化：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span>  <span class=\"comment\">//序列化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ObjectOutputStream oos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        oos = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"test.dat\"</span>));</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">new</span> String(<span class=\"string\">\"哈哈哈哈哈哈哈哈哈\"</span>));</span><br><span class=\"line\">        oos.flush();</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"马老师\"</span>,<span class=\"number\">40</span>));</span><br><span class=\"line\">        oos.flush();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(oos!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                oos.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ObjectInputStream ois = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ois = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.dat\"</span>));</span><br><span class=\"line\">        Object o = ois.readObject();</span><br><span class=\"line\">        String str = (String) o;</span><br><span class=\"line\">        System.out.println(str);<span class=\"comment\">// 哈哈哈哈哈哈哈哈哈</span></span><br><span class=\"line\">        Person p = (Person) ois.readObject();</span><br><span class=\"line\">        System.out.println(p);<span class=\"comment\">// Person&#123;name='马老师', age=40&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ois!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ois.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 1、序列化对象需要实现Serializable接口</span></span><br><span class=\"line\"><span class=\"comment\"> *              2、需要提供一个静态的全局常量serialVersionUID</span></span><br><span class=\"line\"><span class=\"comment\"> *              3、保证当前类的所有属性是可序列化的</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-03-12 15:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">42256165416L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Person&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"Java常用类","url":"/2020/02/26/java-05/","content":"<h2 id=\"字符串相关类：String\"><a href=\"#字符串相关类：String\" class=\"headerlink\" title=\"字符串相关类：String\"></a>字符串相关类：String</h2><p>1.String声明为final，不可被继承。<br>2.实现了Serializable接口：表示字符串是支持序列化的;<br>   实现了Comparable接口：表示String是可以比较大小的；<a id=\"more\"></a><br>3.String内部定义了final char[]    value[]用于存储字符串数据；<br>4.String代表不可变的字符序列。</p>\n<ul>\n<li><p>当对字符串重新赋值；</p>\n</li>\n<li><p>对现有字符串进行连接操作；</p>\n</li>\n<li><p>当调用replace()修改指定字符或字符串时；<br>  <strong>都会重新指定内存区域进行赋值。</strong></p>\n</li>\n</ul>\n<p>5.通过字面量的方式给一个字符串赋值，此时字符串的值声明在字符串常量池中。</p>\n<p><img src=\"/2020/02/26/java-05/String_1.png\" alt=\"字面量赋值方式\"><br>    6.字符串常量池是不会存储相同内容的字符串的。</p>\n<p>在jdk1.6之前，字符串常量池在JVM的方法区（永久代）中，jdk1.7之后移到了堆中，jdk1.8去除永久代，改为元空间。</p>\n<h3 id=\"String实例化的两种方式：\"><a href=\"#String实例化的两种方式：\" class=\"headerlink\" title=\"String实例化的两种方式：\"></a>String实例化的两种方式：</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String实例化方式一：字面量赋值 </span></span><br><span class=\"line\"><span class=\"comment\">// 首先会从字符串常量池中查找，如果该字符串已经存在，在返回引用，否则在字符串常量池中创建</span></span><br><span class=\"line\">String st1 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// String实例化方式二：new + 构造器 在堆空间中创建</span></span><br><span class=\"line\">String st2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>内存解析：<br><img src=\"/2020/02/26/java-05/String_2.png\" alt></p>\n<p><img src=\"/2020/02/26/java-05/String_3.png\" alt></p>\n<blockquote>\n<p>intern 方法是一个native方法，intern方法会从字符串常量池中查询当前字符串是否存在，如果存在，就直接返回当前字符串；如果不存在，则会在常量池中创建并返回堆中的对象引用。</p>\n</blockquote>\n<h3 id=\"String常用方法\"><a href=\"#String常用方法\" class=\"headerlink\" title=\"String常用方法\"></a>String常用方法</h3> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringMethodTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String st1 = <span class=\"string\">\"Taylor Swift\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// int length()：返回字符串的长度：return value.length</span></span><br><span class=\"line\">        System.out.println(st1.length());<span class=\"comment\">// 12</span></span><br><span class=\"line\">        <span class=\"comment\">// char charAt(int index)：返回某索引处的字符return value[index]</span></span><br><span class=\"line\">        System.out.println(st1.charAt(<span class=\"number\">0</span>));<span class=\"comment\">// T</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class=\"line\">        System.out.println(st1.isEmpty());<span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"comment\">// String toLowerCase()：使用默认语言环境，将String 中的所有字符转换为小写</span></span><br><span class=\"line\">        System.out.println(st1.toLowerCase());<span class=\"comment\">// taylor swift</span></span><br><span class=\"line\">        <span class=\"comment\">// String toUpperCase()：使用默认语言环境，将String 中的所有字符转换为大写</span></span><br><span class=\"line\">        System.out.println(st1.toUpperCase());<span class=\"comment\">// TAYLOR SWIFT</span></span><br><span class=\"line\">        <span class=\"comment\">// String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class=\"line\">        String st2 = <span class=\"string\">\" hello world \"</span>;</span><br><span class=\"line\">        String st3 = st2.trim();</span><br><span class=\"line\">        System.out.println(st3);<span class=\"comment\">// \" hello world \"</span></span><br><span class=\"line\">        System.out.println(st2.trim());<span class=\"comment\">// \"hello world\"</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class=\"line\">        System.out.println(st2.equals(<span class=\"string\">\" hello world \"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(st2.equals(st3));<span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"comment\">//boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class=\"line\">        System.out.println(st2.equalsIgnoreCase(<span class=\"string\">\" HELLO world \"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">//String concat(String str)：将指定字符串连接到此字符串的结尾。等价于用“+”</span></span><br><span class=\"line\">        String st4 = <span class=\"string\">\"Justin \"</span>.concat(<span class=\"string\">\"Bieber\"</span>);</span><br><span class=\"line\">        System.out.println(st4);<span class=\"comment\">// Justin Bieber</span></span><br><span class=\"line\">        <span class=\"comment\">//int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class=\"line\">        String st5 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String st6 = <span class=\"string\">\"abd\"</span>;</span><br><span class=\"line\">        System.out.println(st5.compareTo(st6));<span class=\"comment\">// -1  (c-d=&gt;99-100)</span></span><br><span class=\"line\">        <span class=\"comment\">//String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class=\"line\">        String st7 = <span class=\"string\">\"学习JAVA高级语法\"</span>;</span><br><span class=\"line\">        System.out.println(st7.substring(<span class=\"number\">2</span>));<span class=\"comment\">// JAVA高级语法</span></span><br><span class=\"line\">        <span class=\"comment\">//String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class=\"line\">        System.out.println(st7.substring(<span class=\"number\">0</span>,<span class=\"number\">6</span>));<span class=\"comment\">//学习JAVA</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class=\"line\">        String st1 = <span class=\"string\">\"Jim Smith\"</span>;</span><br><span class=\"line\">        System.out.println(st1.endsWith(<span class=\"string\">\"aaa\"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(st1.endsWith(<span class=\"string\">\"Smith\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class=\"line\">        String st2 = <span class=\"string\">\"张伟\"</span>;</span><br><span class=\"line\">        System.out.println(st2.startsWith(<span class=\"string\">\"张\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class=\"line\">        System.out.println(st2.startsWith(<span class=\"string\">\"张\"</span>,<span class=\"number\">0</span> ));<span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(st2.startsWith(<span class=\"string\">\"张伟dsg\"</span>,<span class=\"number\">0</span> ));<span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean contains(CharSequence s)：当且仅当此字符串包含指定的char值序列时，返回true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello world\"</span>.contains(<span class=\"string\">\"o\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">// int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Runnable\"</span>.indexOf(<span class=\"string\">\"n\"</span>));<span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"comment\">// int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始(包含此索引)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hellohello\"</span>.indexOf(<span class=\"string\">\"l\"</span>,<span class=\"number\">4</span>));<span class=\"comment\">// 7</span></span><br><span class=\"line\">        <span class=\"comment\">// int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello\"</span>.lastIndexOf(<span class=\"string\">\"l\"</span>));<span class=\"comment\">// 3</span></span><br><span class=\"line\">        <span class=\"comment\">// int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"helloworld\"</span>.lastIndexOf(<span class=\"string\">\"o\"</span>,<span class=\"number\">9</span>));<span class=\"comment\">// 6</span></span><br><span class=\"line\">        <span class=\"comment\">// 注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用newChar 替换此字符串中出现的所有oldChar得到的。</span></span><br><span class=\"line\">        String st1 = <span class=\"string\">\"aabbccaa\"</span>;</span><br><span class=\"line\">        String st2 = st1.replace(<span class=\"string\">'a'</span>,<span class=\"string\">'A'</span>);</span><br><span class=\"line\">        System.out.println(st2);</span><br><span class=\"line\">        <span class=\"comment\">// String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class=\"line\">        <span class=\"comment\">// String replaceAll(String regex, String replacement) ：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class=\"line\">        <span class=\"comment\">// String replaceFirst(String regex, String replacement) ：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class=\"line\">        <span class=\"comment\">// String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class=\"line\">        <span class=\"comment\">// String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String-与char-转换\"><a href=\"#String-与char-转换\" class=\"headerlink\" title=\"String 与char[]转换\"></a>String 与char[]转换</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String -&gt; char[]  调用String的toCharArray()</span></span><br><span class=\"line\">        String st1 = <span class=\"string\">\"qwerasdf\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] charArray1 = st1.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; charArray1.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(charArray1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// char[] -&gt; String  调用String()构造器</span></span><br><span class=\"line\">        String st2 = <span class=\"keyword\">new</span> String(charArray1);</span><br><span class=\"line\">        System.out.println(st2);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String与byte-转换\"><a href=\"#String与byte-转换\" class=\"headerlink\" title=\"String与byte[] 转换\"></a>String与byte[] 转换</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String -&gt; byte[]  调用String的getBytes()</span></span><br><span class=\"line\">        String st1 = <span class=\"string\">\"abc123哈哈\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] byteArray1 = st1.getBytes();<span class=\"comment\">// 使用默认编码</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(byteArray1));<span class=\"comment\">// [97, 98, 99, 49, 50, 51, -27, -109, -120, -27, -109, -120]</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] byteArray2 = st1.getBytes(<span class=\"string\">\"gbk\"</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(byteArray2));<span class=\"comment\">// [97, 98, 99, 49, 50, 51, -71, -2, -71, -2]</span></span><br><span class=\"line\">        <span class=\"comment\">// byte[] -&gt;String    调用String()构造器</span></span><br><span class=\"line\">        String st2 = <span class=\"keyword\">new</span> String(byteArray1);</span><br><span class=\"line\">        System.out.println(st2);<span class=\"comment\">// abc123哈哈</span></span><br><span class=\"line\">        String st3 = <span class=\"keyword\">new</span> String(byteArray2,<span class=\"string\">\"gbk\"</span>);</span><br><span class=\"line\">        System.out.println(st3);<span class=\"comment\">// abc123哈哈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StringBuffer-与-StringBuilder\"><a href=\"#StringBuffer-与-StringBuilder\" class=\"headerlink\" title=\"StringBuffer 与 StringBuilder\"></a>StringBuffer 与 StringBuilder</h2><p>String：不可变的字符序列<br>StringBuffer：可变的字符序列；线程安全，效率低<br>StringBuilder：可变的字符系列；线程不安全，效率高<br>底层都是使用char[]存储<br>StringBuffer(StringBuilder)常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span></span><br><span class=\"line\">        StringBuffer st1 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        st1.append(<span class=\"string\">\"!!!\"</span>);<span class=\"comment\">// abc!!!</span></span><br><span class=\"line\">        System.out.println(st1);</span><br><span class=\"line\">        <span class=\"comment\">// StringBuffer delete(int start,int end)：删除指定位置的内容</span></span><br><span class=\"line\">        st1.delete(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">// 取头不取尾</span></span><br><span class=\"line\">        System.out.println(st1);<span class=\"comment\">// bc!!!</span></span><br><span class=\"line\">        <span class=\"comment\">// StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span></span><br><span class=\"line\">        st1.replace(<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"string\">\"de\"</span>);</span><br><span class=\"line\">        System.out.println(st1);<span class=\"comment\">// bcde!</span></span><br><span class=\"line\">        <span class=\"comment\">// StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class=\"line\">        st1.insert(<span class=\"number\">4</span>,<span class=\"string\">\"f\"</span>);</span><br><span class=\"line\">        System.out.println(st1);<span class=\"comment\">// bcdef!</span></span><br><span class=\"line\">        <span class=\"comment\">// StringBuffer reverse() ：把当前字符序列逆转</span></span><br><span class=\"line\">        System.out.println(st1.reverse());<span class=\"comment\">// !fedcb</span></span><br><span class=\"line\">        <span class=\"comment\">// public int indexOf(String str) 返回指定字符串的索引位置</span></span><br><span class=\"line\">        System.out.println(st1.indexOf(<span class=\"string\">\"b\"</span>));<span class=\"comment\">// 5</span></span><br><span class=\"line\">        <span class=\"comment\">// public String substring(int start,int end) 截取指定起始位置的字符串</span></span><br><span class=\"line\">        System.out.println(st1.substring(<span class=\"number\">1</span>,<span class=\"number\">5</span>));<span class=\"comment\">// fedc</span></span><br><span class=\"line\">        <span class=\"comment\">// public int length()</span></span><br><span class=\"line\">        <span class=\"comment\">// public char charAt(int n )</span></span><br><span class=\"line\">        <span class=\"comment\">// public void setCharAt(int n ,char ch)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日期时间API\"><a href=\"#日期时间API\" class=\"headerlink\" title=\"日期时间API\"></a>日期时间API</h2><p>Date类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// System类中的currentTimeMillis()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 时间戳：返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(time);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// util.Date类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造器一：Date(),创建一个当前时间的Date对象</span></span><br><span class=\"line\">    Date date1 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    System.out.println(date1);<span class=\"comment\">// 默认调用重写的toString()</span></span><br><span class=\"line\">    System.out.println(date1.getTime());<span class=\"comment\">// getTime()获取当前时间对应的毫秒数</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造器二：Date(long time)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SimpleDateFormat类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化SimpleDateFormat,使用默认构造器</span></span><br><span class=\"line\">    SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat();</span><br><span class=\"line\">    Date date1 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    <span class=\"comment\">// 格式化日期 日期-&gt;String</span></span><br><span class=\"line\">    String date2 = sdf.format(date1);</span><br><span class=\"line\">    System.out.println(date1);<span class=\"comment\">// Mon Mar 02 14:15:11 CST 2020</span></span><br><span class=\"line\">    System.out.println(date2);<span class=\"comment\">// 20-3-2 下午2:15</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析 String-&gt;日期</span></span><br><span class=\"line\">    String date3 = <span class=\"string\">\"20-3-2 下午2:15\"</span>;</span><br><span class=\"line\">    Date date4 = sdf.parse(date3);</span><br><span class=\"line\">    System.out.println(date4);<span class=\"comment\">// Mon Mar 02 14:15:00 CST 2020</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用带参构造器</span></span><br><span class=\"line\">    SimpleDateFormat sdf2 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh-mm-ss\"</span>);</span><br><span class=\"line\">    System.out.println(sdf2.format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">// 2020-03-02 02-24-05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较器\"><a href=\"#比较器\" class=\"headerlink\" title=\"比较器\"></a>比较器</h2><p><strong>自然排序：</strong>java.lang.Comparable<br>需要进行比较的类需要实现<code>Comparable</code>接口中的<code>toCompare()</code>方法，在实现<code>Comperable</code>接口时可使用该类作为泛型限定，在编译期间即可发现传入参数是否为需要进行比较的实体对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"comment\">// 按照年龄排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Person) &#123;</span><br><span class=\"line\">        Person person = (Person)o;</span><br><span class=\"line\">        <span class=\"comment\">// return Integer.compare(this.age,preson.age);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-person.age;<span class=\"comment\">// 从小到大</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"输入类型不匹配\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>定制排序：</strong>java.util.Comparator<br>需要重写<code>Comparator</code>类中的<code>compare()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Comparator comparator = <span class=\"keyword\">new</span> Comparator() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(o1 <span class=\"keyword\">instanceof</span> Person &amp;&amp; o2 <span class=\"keyword\">instanceof</span> Person)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((Person) o1).getAge()-((Person)o2).getAge();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"传入参数错误\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        StudentGrade stu = StudentGrade.ONE;</span><br><span class=\"line\">        System.out.println(stu);<span class=\"comment\">// 自动调用Enum中的toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// values()返回枚举类型的对象数组</span></span><br><span class=\"line\">        StudentGrade[] values = StudentGrade.values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// valueOf()把一个字符串转为对应的枚举类对象</span></span><br><span class=\"line\">        StudentGrade stu2 = StudentGrade.valueOf(<span class=\"string\">\"TWO\"</span>);</span><br><span class=\"line\">        System.out.println(stu2);<span class=\"comment\">// TWO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> StudentGrade&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提供当前枚举类的对象</span></span><br><span class=\"line\">    ONE(<span class=\"string\">\"大一\"</span>),</span><br><span class=\"line\">    TWO(<span class=\"string\">\"大二\"</span>),</span><br><span class=\"line\">    THREE(<span class=\"string\">\"大三\"</span>),</span><br><span class=\"line\">    FOUR(<span class=\"string\">\"大四\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 声明StudentGrade对象的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String grade;</span><br><span class=\"line\">    <span class=\"comment\">// 私有化构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">StudentGrade</span><span class=\"params\">(String grade)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getGrade</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"网络编程","url":"/2020/03/13/java-09/","content":"<h2 id=\"TCP网络编程\"><a href=\"#TCP网络编程\" class=\"headerlink\" title=\"TCP网络编程\"></a>TCP网络编程</h2><p>使用TCP连接进行通信的客户端和服务端<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span>  <span class=\"comment\">// 客户端</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">client</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建Socket对象，指明服务器端的IP和端口号</span></span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        InetAddress inet = InetAddress.getByName(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> Socket(inet, <span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建输出流</span></span><br><span class=\"line\">        os = socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// 3.向外写数据</span></span><br><span class=\"line\">        os.write(<span class=\"string\">\"hello? hello? hello?\"</span>.getBytes());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (os != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 4.关闭输入流</span></span><br><span class=\"line\">                os.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 5.关闭Socket</span></span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span>  <span class=\"comment\">// 服务端</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">server</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ByteOutputStream byteOutputStream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1.创建服务器端的ServerSocket，指明端口号</span></span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">9999</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 2.接受来自客户端的Socket</span></span><br><span class=\"line\">            socket = serverSocket.accept();</span><br><span class=\"line\">            <span class=\"comment\">// 3.创建输入流</span></span><br><span class=\"line\">            is = socket.getInputStream();</span><br><span class=\"line\">            byteOutputStream = <span class=\"keyword\">new</span> ByteOutputStream();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">            <span class=\"comment\">// 4.读取数据</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将buffer数组中的数据写到ByteOutputStream类的一个数组中</span></span><br><span class=\"line\">                byteOutputStream.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"收到消息，来自：\"</span>+socket.getInetAddress());</span><br><span class=\"line\">            System.out.println(byteOutputStream.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;<span class=\"comment\">// 5.关闭流和socket</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteOutputStream != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    byteOutputStream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    is.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (socket != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (serverSocket != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    serverSocket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用TCP实现文件传输\"><a href=\"#使用TCP实现文件传输\" class=\"headerlink\" title=\"使用TCP实现文件传输\"></a>使用TCP实现文件传输</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">client</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建socket并绑定IP和端口号</span></span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建输出流，发送数据</span></span><br><span class=\"line\">        OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">// 创建文件输入流，外部读取文件内容</span></span><br><span class=\"line\">        FileInputStream fi = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"../java_08/pic2.png\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = fi.read(buffer))!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            outputStream.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭数据输出</span></span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 客户端接收服务端的反馈信息</span></span><br><span class=\"line\">        InputStream inputStream = socket.getInputStream();</span><br><span class=\"line\">        ByteOutputStream byteOutputStream = <span class=\"keyword\">new</span> ByteOutputStream();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer1 = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len=inputStream.read(buffer1))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            byteOutputStream.write(buffer1,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(byteOutputStream.toString());</span><br><span class=\"line\">        byteOutputStream.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        fi.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">server</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建服务端ServerSocket并绑定端口</span></span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">9999</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 接收客户端socket</span></span><br><span class=\"line\">        Socket socket = serverSocket.accept();</span><br><span class=\"line\">        <span class=\"comment\">// 创建输入流，接收数据</span></span><br><span class=\"line\">        InputStream inputStream = socket.getInputStream();</span><br><span class=\"line\">        <span class=\"comment\">// 创建文件输出流，用于保存接收到的文件</span></span><br><span class=\"line\">        FileOutputStream fo = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"rec1.png\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len = inputStream.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            fo.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 服务器反馈消息给客户端</span></span><br><span class=\"line\">        OutputStream outputStream = socket.getOutputStream();</span><br><span class=\"line\">        outputStream.write(<span class=\"string\">\"图片已接收到！\"</span>.getBytes());</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        fo.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">        serverSocket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UDP网络编程\"><a href=\"#UDP网络编程\" class=\"headerlink\" title=\"UDP网络编程\"></a>UDP网络编程</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sender</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建套接字</span></span><br><span class=\"line\">    DatagramSocket socket = <span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\">    InetAddress inet = InetAddress.getByName(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">    String str = <span class=\"string\">\"哈哈哈哈哈哈哈~\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] data = str.getBytes();</span><br><span class=\"line\">    <span class=\"comment\">// 2.初始化数据包，绑定IP,和端口号，确定数据的字节长度</span></span><br><span class=\"line\">    DatagramPacket packet = <span class=\"keyword\">new</span> DatagramPacket(data,<span class=\"number\">0</span>,data.length,inet,<span class=\"number\">9999</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3.发送数据包</span></span><br><span class=\"line\">    socket.send(packet);</span><br><span class=\"line\">    <span class=\"comment\">// 4.关闭Socket</span></span><br><span class=\"line\">    socket.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receiver</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建套接字</span></span><br><span class=\"line\">    DatagramSocket socket = <span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">9999</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.创建用于接收数据的字节数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 3.创建数据包</span></span><br><span class=\"line\">    DatagramPacket packet = <span class=\"keyword\">new</span> DatagramPacket(buffer,<span class=\"number\">0</span>,buffer.length);</span><br><span class=\"line\">    <span class=\"comment\">// 4.接收数据</span></span><br><span class=\"line\">    socket.receive(packet);</span><br><span class=\"line\">    <span class=\"comment\">// 5.将接收的数据打印到控制台</span></span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(packet.getData(),<span class=\"number\">0</span>,packet.getLength()));</span><br><span class=\"line\">    <span class=\"comment\">// 6.关闭socket</span></span><br><span class=\"line\">    socket.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"URL编程\"><a href=\"#URL编程\" class=\"headerlink\" title=\"URL编程\"></a>URL编程</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HttpURLConnection con = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileOutputStream fo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建URL对象</span></span><br><span class=\"line\">            URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://localhost:8888/index.html\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 创建连接对象</span></span><br><span class=\"line\">            con = (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">            <span class=\"comment\">// 创建连接</span></span><br><span class=\"line\">            con.connect();</span><br><span class=\"line\">            <span class=\"comment\">// 创建输入流，用于读取数据</span></span><br><span class=\"line\">            is = con.getInputStream();</span><br><span class=\"line\">            <span class=\"comment\">// 创建文件输出流，将读取的数据写到本地</span></span><br><span class=\"line\">            fo = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"index.html\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                fo.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fo.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    is.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (con != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    con.disconnect();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["JavaSE"]},{"title":"JDK8新特性","url":"/2020/03/24/java-11/","content":"<h2 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h2><p>Lambda是一个匿名函数，可以理解为一段可传递的代码，将代码将数据一样进行传递。<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> lambda表达式的写法</span></span><br><span class=\"line\"><span class=\"comment\"> * 格式：lambda参数列表(接口中的抽象方法的形参列表)-&gt;lambda体(重写的抽象方法的方法体)</span></span><br><span class=\"line\"><span class=\"comment\"> * lambda表达式的本质：作为函数式接口的一个实例</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数式接口：<span class=\"doctag\">@FunctionalInterface</span> 只声明了一个抽象方法的接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-03-24 11:09</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaTest1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 方式一：无参，无返回值，一条执行语句 (可以省略return)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Runnable r1 = ()-&gt; System.out.println(<span class=\"string\">\"歪比巴卜\"</span>);</span><br><span class=\"line\">        r1.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 方式二：一个参数，无返回值   参数数据类型可以省略(编译器类型推断)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; c1 = (String s)-&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        c1.accept(<span class=\"string\">\"茉莉~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 方式三：一个参数，参数的小括号可以省略</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; c1 = s -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//方法引用   使用操作符“::” 将类(或对象) 与方法名分隔开来。</span></span><br><span class=\"line\">        <span class=\"comment\">// Consumer&lt;String&gt; c1 = System.out::println;</span></span><br><span class=\"line\">        c1.accept(<span class=\"string\">\"起   飞\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 方式四：两个或以上的参数，多条执行语句</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Comparator&lt;Integer&gt; com1 = (o1,o2)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(o1);</span><br><span class=\"line\">            System.out.println(o2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(com1.compare(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lambda表达式的应用\"><a href=\"#Lambda表达式的应用\" class=\"headerlink\" title=\"Lambda表达式的应用\"></a>Lambda表达式的应用</h2><h3 id=\"forEach-遍历Map\"><a href=\"#forEach-遍历Map\" class=\"headerlink\" title=\"forEach 遍历Map\"></a>forEach 遍历Map</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">\"key1\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"key2\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"key3\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"key4\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">map.forEach((key,value) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"key:\"</span> + key + <span class=\"string\">\",value:\"</span> + value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"forEach-遍历List\"><a href=\"#forEach-遍历List\" class=\"headerlink\" title=\"forEach 遍历List\"></a>forEach 遍历List</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">list.forEach(value -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"value:\"</span> + value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建并开启线程\"><a href=\"#创建并开启线程\" class=\"headerlink\" title=\"创建并开启线程\"></a>创建并开启线程</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;System.out.println(<span class=\"string\">\"new Thread start\"</span>)).start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stream-流\"><a href=\"#Stream-流\" class=\"headerlink\" title=\"Stream 流\"></a>Stream 流</h2><p>以集合为例，一个流式处理的操作我们首先需要调用<code>stream()</code>函数将其<strong>转换成流</strong>，然后再调用相应的<strong>中间操作</strong>达到我们需要对集合进行的操作，比如筛选、转换等，最后通过<strong>终端操作</strong>对前面的结果进行封装，返回我们需要的形式。<br><img src=\"/2020/03/24/java-11/1.jpg\" style=\"zoom:80%;\"></p>\n<h3 id=\"常用api的使用\"><a href=\"#常用api的使用\" class=\"headerlink\" title=\"常用api的使用\"></a>常用api的使用</h3><p>创建实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Long id;       </span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;   </span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer age;   </span><br><span class=\"line\"><span class=\"keyword\">private</span> String school;</span><br></pre></td></tr></table></figure>\n\n<p>初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;()&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">1L</span>,<span class=\"string\">\"张三\"</span>,<span class=\"number\">10</span>, <span class=\"string\">\"清华大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">2L</span>,<span class=\"string\">\"李四\"</span>,<span class=\"number\">12</span>, <span class=\"string\">\"清华大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">3L</span>,<span class=\"string\">\"王五\"</span>,<span class=\"number\">15</span>, <span class=\"string\">\"清华大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">4L</span>,<span class=\"string\">\"赵六\"</span>,<span class=\"number\">12</span>, <span class=\"string\">\"清华大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">5L</span>,<span class=\"string\">\"田七\"</span>,<span class=\"number\">25</span>, <span class=\"string\">\"北京大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">6L</span>,<span class=\"string\">\"小明\"</span>,<span class=\"number\">16</span>, <span class=\"string\">\"北京大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">7L</span>,<span class=\"string\">\"小红\"</span>,<span class=\"number\">14</span>, <span class=\"string\">\"北京大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">8L</span>,<span class=\"string\">\"小华\"</span>,<span class=\"number\">14</span>, <span class=\"string\">\"浙江大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">9L</span>,<span class=\"string\">\"小丽\"</span>,<span class=\"number\">17</span>, <span class=\"string\">\"浙江大学\"</span>));</span><br><span class=\"line\">        add(<span class=\"keyword\">new</span> User(<span class=\"number\">10L</span>,<span class=\"string\">\"小何\"</span>,<span class=\"number\">10</span>, <span class=\"string\">\"浙江大学\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>filter 过滤</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 筛选出学校是清华大学的所有用户并打印输出他们的姓名</span></span><br><span class=\"line\">List&lt;User&gt; userList = list.stream()</span><br><span class=\"line\">    .filter(user -&gt; <span class=\"string\">\"清华大学\"</span>.equals(user.getSchool()))</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br><span class=\"line\">userList.forEach(user -&gt; &#123;</span><br><span class=\"line\">    System.out.print(user.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">张三 李四 王五 赵六</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>distinct</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// distinct 获取所有user的年龄（年龄不重复）</span></span><br><span class=\"line\"><span class=\"comment\">// map 方法用于映射每个元素到对应的结果</span></span><br><span class=\"line\"><span class=\"comment\">// List&lt;Integer&gt; userAgeList = list.stream().map(User::getAge)</span></span><br><span class=\"line\">List&lt;Integer&gt; userAgeList = list.stream()</span><br><span class=\"line\">        .map(user -&gt; user.getAge())</span><br><span class=\"line\">        .distinct()</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">userAgeList.forEach(age -&gt; &#123;</span><br><span class=\"line\">    System.out.print(age + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">18 20 16 19 25 22 21</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>limit  返回前n个元素的流，当集合长度小于n时，则返回所有集合</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取年龄是偶数的前2名user</span></span><br><span class=\"line\">List&lt;User&gt; userList2 = list.stream()</span><br><span class=\"line\">        .filter(user -&gt; user.getAge() % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        .limit(<span class=\"number\">2</span>)</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">userList2.forEach(user -&gt; &#123;</span><br><span class=\"line\">    System.out.print(user.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">张三 李四</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>sorted</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有user按年龄从大到小排序</span></span><br><span class=\"line\">List&lt;User&gt; userList3 = list.stream()</span><br><span class=\"line\">        .sorted((user1, user2) -&gt; user2.getAge() - user1.getAge())</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(userList3);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[User&#123;id=5, name='田七', age=25, school='北京大学'&#125;, User&#123;id=8, name='小华', age=22, school='浙江大学'&#125;, User&#123;id=9, name='小丽', age=21, school='浙江大学'&#125;, User&#123;id=2, name='李四', age=20, school='清华大学'&#125;, User&#123;id=7, name='小红', age=20, school='北京大学'&#125;, User&#123;id=4, name='赵六', age=19, school='清华大学'&#125;, User&#123;id=1, name='张三', age=18, school='清华大学'&#125;, User&#123;id=10, name='小何', age=18, school='浙江大学'&#125;, User&#123;id=3, name='王五', age=16, school='清华大学'&#125;, User&#123;id=6, name='小明', age=16, school='北京大学'&#125;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>skip  跳过几个元素再输出</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳过前两个user,输出之后的user</span></span><br><span class=\"line\">List&lt;User&gt; userList4 = list</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(userList4);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[User&#123;id=3, name='王五', age=16, school='清华大学'&#125;, User&#123;id=4, name='赵六', age=19, school='清华大学'&#125;, User&#123;id=5, name='田七', age=25, school='北京大学'&#125;, User&#123;id=6, name='小明', age=16, school='北京大学'&#125;, User&#123;id=7, name='小红', age=20, school='北京大学'&#125;, User&#123;id=8, name='小华', age=22, school='浙江大学'&#125;, User&#123;id=9, name='小丽', age=21, school='浙江大学'&#125;, User&#123;id=10, name='小何', age=18, school='浙江大学'&#125;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>map 映射元素结果</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 筛选出学校是清华大学的所有学生</span></span><br><span class=\"line\">List&lt;String&gt; nameList = list.stream()</span><br><span class=\"line\">        .filter(user -&gt; <span class=\"string\">\"清华大学\"</span>.equals(user.getSchool()))</span><br><span class=\"line\">        .map(user -&gt; user.getName())</span><br><span class=\"line\">        .collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(nameList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 除了上面这类基础的map，java8还提供了mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)，</span></span><br><span class=\"line\"><span class=\"comment\"> * mapToInt(ToIntFunction&lt;? super T&gt; mapper)，</span></span><br><span class=\"line\"><span class=\"comment\"> * mapToLong(ToLongFunction&lt;? super T&gt; mapper)，</span></span><br><span class=\"line\"><span class=\"comment\"> * java8为这些流设定了一些特殊的操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 统计学校为北京大学的所有用户的人数</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> count = list.stream()</span><br><span class=\"line\">        .filter(user -&gt; <span class=\"string\">\"北京大学\"</span>.equals(user.getSchool()))</span><br><span class=\"line\">        .mapToInt(user -&gt; user.getAge()).count();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"北京大学用户的人数：\"</span> + count);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[张三, 李四, 王五, 赵六]</span><br><span class=\"line\">北京大学用户的人数：3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>匹配</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// allMatch</span></span><br><span class=\"line\"><span class=\"comment\">// 用于检测是否全部都满足指定的参数行为，如果全部满足则返回true</span></span><br><span class=\"line\"><span class=\"comment\">// 判断所有用户的年龄是否都大于18岁</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isAllAdult = list.stream().allMatch(user -&gt; user.getAge() &gt; <span class=\"number\">18</span>);</span><br><span class=\"line\">System.out.println(isAllAdult);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// anyMatch</span></span><br><span class=\"line\"><span class=\"comment\">// 检测是否存在一个或多个满足指定的参数行为，如果满足则返回true</span></span><br><span class=\"line\"><span class=\"comment\">// 判断是否有大于18岁的用户</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isAnyAdult = list.stream().anyMatch(user -&gt; user.getAge() &gt; <span class=\"number\">18</span>);</span><br><span class=\"line\">System.out.println(isAnyAdult);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// noneMatch　　</span></span><br><span class=\"line\"><span class=\"comment\">// 检测是否不存在满足指定行为的元素，如果不存在则返回true</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>findFirst  用于返回满足条件的第一个元素</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Optional&lt;User&gt; first = list.stream()</span><br><span class=\"line\">        .filter(user -&gt; user.getAge() == <span class=\"number\">18</span>)</span><br><span class=\"line\">        .findFirst();</span><br><span class=\"line\">User user = first.get();</span><br><span class=\"line\">System.out.println(user);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">User&#123;id=1, name='张三', age=18, school='清华大学'&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>counting  计算个数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Long counting = list.stream().collect(Collectors.counting());</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> counting = list.stream().count();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"总人数：\"</span>+counting);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">总人数：10</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>maxBy  minBy  计算最大值 最小值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer maxAge = list.stream()</span><br><span class=\"line\">        .collect(Collectors.maxBy((user1, user2) -&gt; user1.getAge() - user2.getAge()))</span><br><span class=\"line\">        .get().getAge();</span><br><span class=\"line\">Integer minAge = list.stream()</span><br><span class=\"line\">        .collect(Collectors.minBy((user1, user2) -&gt; user1.getAge() - user2.getAge()))</span><br><span class=\"line\">        .get().getAge();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"最大年龄：\"</span> + maxAge);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"最小年龄：\"</span> + minAge);</span><br><span class=\"line\"><span class=\"comment\">// 方式二： 使用比较器</span></span><br><span class=\"line\">Integer maxAge2 = list.stream()</span><br><span class=\"line\">        .collect(Collectors.maxBy(Comparator.comparing(User::getAge)))</span><br><span class=\"line\">        .get()</span><br><span class=\"line\">        .getAge();</span><br><span class=\"line\">Integer minAge2 = list.stream()</span><br><span class=\"line\">        .collect(Collectors.minBy(Comparator.comparing(User::getAge)))</span><br><span class=\"line\">        .get()</span><br><span class=\"line\">        .getAge();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"最大年龄：\"</span> + maxAge2);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"最小年龄：\"</span> + minAge2);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">最大年龄：25</span><br><span class=\"line\">最小年龄：16</span><br><span class=\"line\">最大年龄：25</span><br><span class=\"line\">最小年龄：16</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>summingInt、summingLong、summingDouble 计算总和</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer ageSum = list.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"年龄总合为：\"</span> + ageSum);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">年龄总合为：195</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>averageInt、averageLong、averageDouble 计算平均值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Double ageAverage = list.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"年龄平均值：\"</span> + ageAverage);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">年龄平均值：19.5</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>summarizingInt、summarizingLong、summarizingDouble  </p>\n<p>一次性查询元素个数、总和、最大值、最小值和平均值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">IntSummaryStatistics collect = list.stream()</span><br><span class=\"line\">    .collect(Collectors.summarizingInt(User::getAge));</span><br><span class=\"line\">System.out.println(collect);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">IntSummaryStatistics&#123;count=10, sum=195, min=16, average=19.500000, max=25&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>joining 字符串拼接</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String names = list.stream()</span><br><span class=\"line\">    .map(User::getName)</span><br><span class=\"line\">    .collect(Collectors.joining(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">System.out.println(names);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">张三,李四,王五,赵六,田七,小明,小红,小华,小丽,小何</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>groupingBy 分组</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据大学划分用户</span></span><br><span class=\"line\">Map&lt;String, List&lt;User&gt;&gt; userBySchool = list.stream()</span><br><span class=\"line\">    .collect(Collectors.groupingBy(User::getSchool));</span><br><span class=\"line\">System.out.println(userBySchool);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;浙江大学=[User&#123;id=8, name='小华', age=22, school='浙江大学'&#125;, User&#123;id=9, name='小丽', age=21, school='浙江大学'&#125;, User&#123;id=10, name='小何', age=18, school='浙江大学'&#125;], 北京大学=[User&#123;id=5, name='田七', age=25, school='北京大学'&#125;, User&#123;id=6, name='小明', age=16, school='北京大学'&#125;, User&#123;id=7, name='小红', age=20, school='北京大学'&#125;], 清华大学=[User&#123;id=1, name='张三', age=18, school='清华大学'&#125;, User&#123;id=2, name='李四', age=20, school=</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>partitioningBy  分区</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按照是否是清华大学的user将所有user分为两个部分</span></span><br><span class=\"line\">Map&lt;Boolean, List&lt;User&gt;&gt; userByQinghua = list.stream()</span><br><span class=\"line\">    .collect(Collectors.partitioningBy(user1 -&gt; <span class=\"string\">\"清华大学\"</span>.equals(user1.getSchool())));</span><br><span class=\"line\">System.out.println(userByQinghua);</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;false=[User&#123;id=5, name='田七', age=25, school='北京大学'&#125;, User&#123;id=6, name='小明', age=16, school='北京大学'&#125;, User&#123;id=7, name='小红', age=20, school='北京大学'&#125;, User&#123;id=8, name='小华', age=22, school='浙江大学'&#125;, User&#123;id=9, name='小丽', age=21, school='浙江大学'&#125;, User&#123;id=10, name='小何', age=18, school='浙江大学'&#125;], true=[User&#123;id=1, name='张三', age=18, school='清华大学'&#125;, User&#123;id=2, name='李四', age=20, school='清华大学'&#125;, User&#123;id=3, name='王五', age=16, school='清华大学'&#125;, User&#123;id=4, name='赵六', age=19, school='清华大学'&#125;]&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"Servlet","url":"/2020/04/05/javaweb-01/","content":"<h2 id=\"JavaWeb概念\"><a href=\"#JavaWeb概念\" class=\"headerlink\" title=\"JavaWeb概念\"></a>JavaWeb概念</h2><p><strong>javaweb：</strong>所有由java编写的可以通过浏览器访问的程序的总称。<br>javaweb是基于请求和响应来开发的。<a id=\"more\"></a></p>\n<p><strong>请求：</strong>Request，是指客户端(浏览器)给服务器(Tomcat)发送数据。<br><strong>响应：</strong>Response，服务器给客户端回传数据。</p>\n<p><strong>请求与响应的关系：</strong>请求和响应是成对出现的，有请求就有响应。</p>\n<h2 id=\"Web资源的分类\"><a href=\"#Web资源的分类\" class=\"headerlink\" title=\"Web资源的分类\"></a>Web资源的分类</h2><p>web资源按实现的技术和呈现的效果的不同，分为静态资源和动态资源。<br>静态资源：html、css、js、txt文本、mp4视频、jpg图片等等<br>动态资源：jsp页面、Servlet程序</p>\n<h2 id=\"Tomcat端口号\"><a href=\"#Tomcat端口号\" class=\"headerlink\" title=\"Tomcat端口号\"></a>Tomcat端口号</h2><p>tomcat默认端口号：8080<br>apache-tomcat-8.0.50\\conf\\server.xml文件可修改默认端口号</p>\n<p>http默认端口号：80<br>https默认端口号：443(浏览器会自动补全)</p>\n<p>web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如JAVA中的Tomcat容器，ASP的IIS或PWS都是这样的容器。一个服务器可以多个容器。Web容器负责将HTTP请求转换为HttpServletRequest对象。</p>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>1、Servlet是JavaEE规范之一，规范就是接口。<br>2、Servlet是JavaWeb三大组件之一，三大组件为：Servlet程序、Filter过滤器、Listener监听器。<br>3、Servlet是运行在服务器上的一个java小程序，可以接受客户端发送过来的请求并发送响应数据给客户端。<br><strong>手动实现Servlet程序:</strong><br>1、编写一个类去实现Servlet 接口<br>2、实现service 方法，处理请求，并响应数据<br>3、到web.xml 中去配置servlet 程序的访问地址</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- servlet标签给Tomcat服务器配置Servlet程序 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- servlet-name标签用于给 Servlet程序起一个别名(一般是类名)--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- servlet-class 是Servlet程序的全类名--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- servlet-mapping标签用于给servlet程序配置访问地址--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- servlet-name告诉服务器当前的配置地址是给哪一个servlet程序使用的--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- url-pattern标签配置访问地址</span></span><br><span class=\"line\"><span class=\"comment\">             / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/test<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Servlet的生命周期：</strong></p>\n<p>1、加载：容器通过类加载器使用Servlet类对应的文件来加载Servlet</p>\n<p>2、创建：通过<strong>调用Servlet的构造函数来创建一个Servlet实例</strong></p>\n<p>3、初始化：通过调用Servlet的init()方法来完成初始化工作，ServletConfig对象读取web.xml获取初始化参数，对Servlet进行初始化</p>\n<p>4、处理客户请求：Servlet创建后就可以处理请求，当有新的客户端请求时，Web容器都会<strong>创建一个新的线程</strong>来处理该请求。接着调用Servlet的Service()方法来响应客户端请求（Service方法根据请求的method属性来调用doGet()和doPost()）</p>\n<p>5、卸载：<strong>容器在卸载Servlet之前</strong>需要调用destroy()方法，让Servlet释放其占用的资源。</p>\n<p><strong>通过继承HttpServlet实现Servlet程序：</strong>一般在实际开发中使用此方式<br>1、编写一个类去继承HttpServlet类<br>2、根据业务需求重写doGet 或 doPost 方法<br>3、在web.xml中配置servlet程序的访问地址<br><img src=\"/2020/04/05/javaweb-01/1.png\" alt></p>\n<p>ServletConfig类的作用：<br>1、获取 Servlet 程序的别名 servlet-name的值；<br>2、获取初始化参数 init-param；<br>3、获取ServletContext 对象；</p>\n<p>ServletContext：<br>1、ServletContext 是一个接口，它表示Servlet 上下文对象<br>2、一个web 工程，只有一个ServletContext 对象实例。<br>3、ServletContext 对象是一个域对象。<br>4、ServletContext 是在web 工程部署启动的时候创建。在web 工程停止的时候销毁。</p>\n<blockquote>\n<p>什么是域对象?<br>域对象，是可以像Map 一样存取数据的对象，叫域对象。<br>这里的域指的是存取数据的操作范围，整个web 工程。<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;存数据&nbsp;  &nbsp; &nbsp; &nbsp; 取数据&nbsp;  &nbsp; &nbsp;&nbsp;删除数据<br>Map &nbsp; &nbsp; &nbsp;put() &nbsp; &nbsp; &nbsp;&nbsp;get()  &nbsp; &nbsp; &nbsp;&nbsp;remove()<br>域对象 &nbsp; setAttribute() &nbsp;getAttribute()&nbsp; removeAttribute()</p>\n</blockquote>\n<p>ServletContext 类的四个作用<br>1、获取web.xml 中配置的上下文参数context-param<br>2、获取当前的工程路径，格式: /工程路径<br>3、获取工程部署后在服务器硬盘上的绝对路径<br>4、像Map 一样存取数据</p>\n<h2 id=\"请求的HTTP协议格式\"><a href=\"#请求的HTTP协议格式\" class=\"headerlink\" title=\"请求的HTTP协议格式\"></a>请求的HTTP协议格式</h2><h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><p>1、请求行<br>(1) 请求的方式GET<br>(2) 请求的资源路径[+?+请求参数]<br>(3) 请求的协议的版本号HTTP/1.1<br>2、请求头<br>key : value 组成不同的键值对，表示不同的含义。<br><img src=\"/2020/04/05/javaweb-01/2.png\" alt></p>\n<h3 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h3><p>1、请求行<br>(1) 请求的方式POST<br>(2) 请求的资源路径[+?+请求参数]<br>(3) 请求的协议的版本号HTTP/1.1<br>2、请求头</p>\n<p>1) key : value 不同的请求头，有不同的含义<br>空行<br>3、请求体===&gt;&gt;&gt; 就是发送给服务器的数据<br><img src=\"/2020/04/05/javaweb-01/3.png\" alt><br>GET 请求有哪些：<br>1、form 标签method=get<br>2、a 标签<br>3、link 标签引入css<br>4、Script 标签引入js 文件<br>5、img 标签引入图片<br>6、iframe 引入html 页面<br>7、在浏览器地址栏中输入地址后敲回车<br>POST 请求有哪些：<br>8、form 标签method=post</p>\n<h2 id=\"响应的HTTP协议格式\"><a href=\"#响应的HTTP协议格式\" class=\"headerlink\" title=\"响应的HTTP协议格式\"></a>响应的HTTP协议格式</h2><p>1、响应行<br>(1) 响应的协议和版本号<br>(2) 响应状态码<br>(3) 响应状态描述符<br>2、响应头<br>(1) key : value 不同的响应头，有其不同含义<br>空行<br>3、响应体—-&gt;&gt;&gt; 就是回传给客户端的数据<br><img src=\"/2020/04/05/javaweb-01/4.png\" alt></p>\n<p>常见的响应码：<br>200&nbsp;&nbsp;&nbsp;&nbsp;请求成功<br>302&nbsp;&nbsp;&nbsp;&nbsp;表示请求重定向<br>404&nbsp;&nbsp;&nbsp;&nbsp;表示服务器已经收到，但是请求的数据不存在<br>500&nbsp;&nbsp;&nbsp;&nbsp;表示服务器已经收到，但是服务器内部错误</p>\n<h2 id=\"MMIE类型说明\"><a href=\"#MMIE类型说明\" class=\"headerlink\" title=\"MMIE类型说明\"></a>MMIE类型说明</h2><p>MIME是HTTP协议中的数据类型<br><img src=\"/2020/04/05/javaweb-01/5.png\" alt></p>\n<h2 id=\"HttpServletRequest类\"><a href=\"#HttpServletRequest类\" class=\"headerlink\" title=\"HttpServletRequest类\"></a>HttpServletRequest类</h2><p>每次只要有请求进入Tomcat 服务器，Tomcat 服务器就会把请求过来的HTTP 协议信息解析好封装到Request 对象中。然后传递到service 方法（doGet 和doPost）中给我们使用。我们可以通过HttpServletRequest 对象，获取到有请求的信息。</p>\n<p><strong>HttpServletRequest常用方法：</strong><br>i. getRequestURI() 获取请求的资源路径<br>ii. getRequestURL() 获取请求的统一资源定位符（绝对路径）<br>iii. getRemoteHost() 获取客户端的ip 地址<br>iv. getHeader() 获取请求头<br>v. getParameter() 获取请求的参数<br>vi. getParameterValues() 获取请求的参数（多个值的时候使用）<br>vii. getMethod() 获取请求的方式GET 或POST<br>viii. setAttribute(key, value); 设置域数据<br>ix. getAttribute(key); 获取域数据<br>x. getRequestDispatcher() 获取请求转发对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost:8080/06.servlet/test3\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        兴趣爱好：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cpp\"</span>&gt;</span>C++</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"java\"</span>&gt;</span>Java</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"js\"</span>&gt;</span>JavaScript</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet3</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"post请求\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求体的字符集为UTF-8，从而解决post 请求的中文乱码问题</span></span><br><span class=\"line\">        request.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求参数</span></span><br><span class=\"line\">        String username = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String pwd = request.getParameter(<span class=\"string\">\"pwd\"</span>);</span><br><span class=\"line\">        String[] hobbies = request.getParameterValues(<span class=\"string\">\"hobby\"</span>);</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">        System.out.println(pwd);</span><br><span class=\"line\">        System.out.println(Arrays.asList(hobbies));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"请求的转发\"><a href=\"#请求的转发\" class=\"headerlink\" title=\"请求的转发\"></a>请求的转发</h2><p>服务器收到请求后，从一个资源跳转到另一个资源的操作。<br>特点：1、浏览器地址栏没有变化<br>            2、是一次请求<br>            3、共享Request域中的数据<br>            4、可以转发到WEB-INF目录下<br>            5、不可以访问工程外的资源<br>可能会造成表单的多次提交。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException,IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取请求的参数（办事的材料）查看</span></span><br><span class=\"line\">\tString username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"在Servlet1（柜台1）中查看参数（材料）：\"</span> + username);</span><br><span class=\"line\">\t<span class=\"comment\">// 给材料盖一个章，并传递到Servlet2（柜台2）去查看</span></span><br><span class=\"line\">\treq.setAttribute(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"柜台1 的章\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 问路：Servlet2（柜台2）怎么走</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 请求转发必须要以斜杠打头，斜杠表示地址为：http://ip:port/工程名/ , 映射到IDEA 代码的web目录</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\tRequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class=\"string\">\"/servlet2\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// RequestDispatcher requestDispatcher = req.getRequestDispatcher(\"http://www.baidu.com\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// 走向Sevlet2（柜台2）</span></span><br><span class=\"line\">\trequestDispatcher.forward(req,resp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"base标签\"><a href=\"#base标签\" class=\"headerlink\" title=\"base标签\"></a>base标签</h2><p>设置页面相对路径工作时参照的路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>c.html<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--base 标签设置页面相对路径工作时参照的地址</span></span><br><span class=\"line\"><span class=\"comment\">        href 属性就是参数的地址值</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://localhost:8080/06.servlet/a/b/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    这是a/b/c.html</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../index.html\"</span>&gt;</span>返回首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HttpServletResponse类\"><a href=\"#HttpServletResponse类\" class=\"headerlink\" title=\"HttpServletResponse类\"></a>HttpServletResponse类</h2><p>HttpServletResponse 类和HttpServletRequest 类一样。<br>每次请求进来，Tomcat 服务器都会创建一个Response 对象传递给Servlet 程序去使用。<br>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息。<br><strong>两个输出流：(同时只能使用一个)</strong><br>字节流：getOutputStream();  &nbsp;&nbsp;&nbsp;常用于下载，传递二进制数据<br>字符流：getWriter();&nbsp;&nbsp;&nbsp;常用于回传字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseIOServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        // 设置服务器字符集</span></span><br><span class=\"line\"><span class=\"comment\">//        response.setCharacterEncoding(\"utf-8\");</span></span><br><span class=\"line\"><span class=\"comment\">//        // 通过响应头，设置客户端（浏览器）字符集</span></span><br><span class=\"line\"><span class=\"comment\">//        response.setHeader(\"Content-Type\",\"text/html;charset=UTF-8\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 同时设置服务端和客户端的编码集</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);<span class=\"comment\">// 必须在获取流对象之前使用</span></span><br><span class=\"line\">        <span class=\"comment\">// 向客户端回传字符串数据</span></span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"请求的重定向\"><a href=\"#请求的重定向\" class=\"headerlink\" title=\"请求的重定向\"></a>请求的重定向</h2><p>请求重定向，是指客户端给服务器发请求，然后服务器通过响应头告诉客户端，并提供一个新的地址，然后客户端去新地址访问，叫请求重定向（因为之前的地址可能已经被废弃）。可以解决表单的多次提交问题。<br><img src=\"/2020/04/05/javaweb-01/6.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseIOServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        // 方式一：</span></span><br><span class=\"line\"><span class=\"comment\">//        // 设置响应码</span></span><br><span class=\"line\"><span class=\"comment\">//        response.setStatus(302);</span></span><br><span class=\"line\"><span class=\"comment\">//        // 设置响应头，指明新的地址</span></span><br><span class=\"line\"><span class=\"comment\">//        response.setHeader(\"Location\",\"http://localhost:8080/06.servlet/ResponseServlet2\");</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">// 方式二：</span></span><br><span class=\"line\">        response.sendRedirect(<span class=\"string\">\"http://localhost:8080/06.servlet/ResponseServlet2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        writer.write(<span class=\"string\">\"哈哈哈\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaEE项目的三层架构\"><a href=\"#JavaEE项目的三层架构\" class=\"headerlink\" title=\"JavaEE项目的三层架构\"></a>JavaEE项目的三层架构</h2><p><img src=\"/2020/04/05/javaweb-01/7.png\" alt></p>\n<p>分层的目的是为了解耦。解耦是为了降低代码的耦合度，方便项目后期的维护和升级。</p>\n<h3 id=\"1、MVC-概念\"><a href=\"#1、MVC-概念\" class=\"headerlink\" title=\"1、MVC 概念\"></a>1、MVC 概念</h3><p>MVC 全称：Model 模型、View 视图、Controller 控制器。<br>MVC 最早出现在JavaEE 三层中的Web 层，它可以有效的指导Web 层的代码如何有效分离，单独工作。<br>Model 模型：将与业务逻辑相关的数据封装为具体的JavaBean 类，其中不掺杂任何与数据处理相关的代码——JavaBean/domain/entity/pojo。<br>View 视图：只负责数据和界面的显示，不接受任何与显示数据无关的代码，便于程序员和美工的分工合作——JSP/HTML。<br>Controller 控制器：只负责接收请求，调用业务层的代码处理请求，然后派发页面，是一个“调度者”的角色——Servlet。转到某个页面。或者是重定向到某个页面。<br>MVC 是一种思想，MVC 的理念是将软件代码拆分成为组件，单独开发，组合使用（目的还是为了降低耦合度）。<br><img src=\"/2020/04/05/javaweb-01/8.png\"></p>\n","categories":["Java"],"tags":["JavaWeb"]},{"title":"Cookie,session","url":"/2020/04/23/javaweb-06/","content":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>Cookie是服务器通知客户端保存键值对的一种技术。<br>客户端有了Cookie后，每次请求都会发送给服务器。<br>Cookie 的值可以唯一地标识客户端，因此 Cookie 常用于会话管理。<br>每个Cookie的 大小不能超过4kb。<a id=\"more\"></a></p>\n<h3 id=\"1-创建Cookie\"><a href=\"#1-创建Cookie\" class=\"headerlink\" title=\"1.创建Cookie\"></a>1.创建Cookie</h3><p><img src=\"/2020/04/23/javaweb-06/1.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">createCookie</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建Cookie对象</span></span><br><span class=\"line\">        Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.通知客户端保存Cookie</span></span><br><span class=\"line\">        resp.addCookie(cookie);</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">\"Cookie创建成功\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-服务器获取Cookie\"><a href=\"#2-服务器获取Cookie\" class=\"headerlink\" title=\"2.服务器获取Cookie\"></a>2.服务器获取Cookie</h3><p><img src=\"/2020/04/23/javaweb-06/2.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">getCookie</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    Cookie[] cookies = req.getCookies();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Cookie cookie:cookies)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// getName()返回cookie的key</span></span><br><span class=\"line\">        <span class=\"comment\">// getValue()返回cookie的value</span></span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">\"Cookie[\"</span>+cookie.getName()+<span class=\"string\">\"=\"</span>+cookie.getValue()+<span class=\"string\">\"]&lt;br/&gt;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Cookie iwantCookie = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*for(Cookie cookie:cookies)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            // 给到想要的cookie</span></span><br><span class=\"line\"><span class=\"comment\">            if(\"key1\".equals(cookie.getName()))&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                iwantCookie = cookie;</span></span><br><span class=\"line\"><span class=\"comment\">                break;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">    iwantCookie = CookieUtils.findCookie(<span class=\"string\">\"key1\"</span>,req.getCookies());    <span class=\"keyword\">if</span>(iwantCookie!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"找到了指定的cookie\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>将查找指定Cookie封装成工具类：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找指定名称的cookie</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cookies</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> cookie</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Cookie <span class=\"title\">findCookie</span><span class=\"params\">(String name,Cookie[] cookies)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name==<span class=\"keyword\">null</span>||cookies==<span class=\"keyword\">null</span>||cookies.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Cookie cookie:cookies)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 给到想要的cookie</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name.equals(cookie.getName()))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cookie;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Cookie值的修改\"><a href=\"#3-Cookie值的修改\" class=\"headerlink\" title=\"3.Cookie值的修改\"></a>3.Cookie值的修改</h3><p><strong>方案一：</strong><br>1、先创建一个要修改的同名（指的就是key）的Cookie 对象<br>2、在构造器，同时赋于新的Cookie 值。<br>3、调用response.addCookie( Cookie );</p>\n<p><strong>方案二：</strong><br>1、先查找到需要修改的Cookie 对象<br>2、调用setValue()方法赋于新的Cookie 值。<br>3、调用response.addCookie()通知客户端保存修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">updateCookie</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* // 方式一：</span></span><br><span class=\"line\"><span class=\"comment\">    // 1、先创建一个要修改的同名（指的就是key）的Cookie 对象</span></span><br><span class=\"line\"><span class=\"comment\">    // 2、在构造器，同时赋于新的Cookie 值。</span></span><br><span class=\"line\"><span class=\"comment\">    Cookie cookie = new Cookie(\"key1\", \"value2\");</span></span><br><span class=\"line\"><span class=\"comment\">    // 3、调用response.addCookie( Cookie );通知客户端保存cookie</span></span><br><span class=\"line\"><span class=\"comment\">    resp.addCookie(cookie);</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 方式二：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1、先查找到需要修改的Cookie 对象</span></span><br><span class=\"line\">    Cookie cookie = CookieUtils.findCookie(<span class=\"string\">\"key1\"</span>,req.getCookies());</span><br><span class=\"line\">    <span class=\"comment\">// 2、调用setValue()方法赋于新的Cookie 值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cookie!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    cookie.setValue(<span class=\"string\">\"value3\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3、调用response.addCookie()通知客户端保存修改</span></span><br><span class=\"line\">    resp.addCookie(cookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Cookie的生命控制\"><a href=\"#4-Cookie的生命控制\" class=\"headerlink\" title=\"4.Cookie的生命控制\"></a>4.Cookie的生命控制</h3><p>管理cookie什么时候被销毁(删除)<br>setAge()：<br>正数表示在指定的秒数后过期；<br>负数表示浏览器关闭后，cookie就会销毁；（）默认值为-1<br>0表示马上删除cookie。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultLife</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"defaultLife\"</span>,<span class=\"string\">\"defaultLife\"</span>);</span><br><span class=\"line\">    cookie.setMaxAge(-<span class=\"number\">1</span>); <span class=\"comment\">// 设置存活时间</span></span><br><span class=\"line\">    resp.addCookie(cookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteCookie</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    Cookie cookie = CookieUtils.findCookie(<span class=\"string\">\"defaultLife\"</span>,req.getCookies());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cookie!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    cookie.setMaxAge(<span class=\"number\">0</span>);<span class=\"comment\">// 马上删除cookie</span></span><br><span class=\"line\">    resp.addCookie(cookie);</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"cookie[defaultLife=defaultValue]已删除\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Cookie有效路径Path的设置\"><a href=\"#5-Cookie有效路径Path的设置\" class=\"headerlink\" title=\"5.Cookie有效路径Path的设置\"></a>5.Cookie有效路径Path的设置</h3><p>Cookie的path属性可以有效的过滤哪些Cookie可以发送 个服务器。<br>path属性是通过请求的地址来进行有效的过滤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">testPath</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"key2\"</span>,<span class=\"string\">\"value2\"</span>);</span><br><span class=\"line\">    cookie.setPath(req.getContextPath()+<span class=\"string\">\"/a\"</span>);  <span class=\"comment\">// 设置Path值为  /工程路径/a</span></span><br><span class=\"line\">    resp.addCookie(cookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-免输入用户名登录\"><a href=\"#6-免输入用户名登录\" class=\"headerlink\" title=\"6.免输入用户名登录\"></a>6.免输入用户名登录</h3><p><img src=\"/2020/04/23/javaweb-06/3.png\" alt></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost:8080/08_cookie/loginServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;cookie.username.value&#125;\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"zyz\"</span>.equals(username)&amp;&amp;<span class=\"string\">\"123456\"</span>.equals(password))&#123;</span><br><span class=\"line\">            Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"username\"</span>,username);</span><br><span class=\"line\">            cookie.setMaxAge(<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>*<span class=\"number\">7</span>);<span class=\"comment\">// cookie一周内有效</span></span><br><span class=\"line\">            resp.addCookie(cookie);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录成功！\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录失败！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>1、Session 是一个接口（HttpSession）。<br>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。<br>3、每个客户端都有自己的一个Session 会话。<br>4、Session 会话中，我们经常用来保存用户登录之后的信息。</p>\n<h3 id=\"1-创建和获取session\"><a href=\"#1-创建和获取session\" class=\"headerlink\" title=\"1.创建和获取session\"></a>1.创建和获取session</h3><p>request.getSeesion()：<br>第一次调用：创建Session会话。<br>之后的调用：获取前面创建好的Session会话对象。<br>isNew()：判断Session是否是刚创建的<br>&nbsp;&nbsp;&nbsp;&nbsp;true：表示刚创建<br>&nbsp;&nbsp;&nbsp;&nbsp;false：表示获取之前创建<br>getId()：得到Session的会话id值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">createOrGetSession</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建或获取Session会话对象</span></span><br><span class=\"line\">    HttpSession session = req.getSession();</span><br><span class=\"line\">    <span class=\"comment\">// 判断Session是否是刚刚创建的</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNew = session.isNew();</span><br><span class=\"line\">    <span class=\"comment\">// 获取Session会话的唯一标识id</span></span><br><span class=\"line\">    String id = session.getId();</span><br><span class=\"line\"></span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"得到Session,id为：\"</span>+id+<span class=\"string\">\"&lt;br/&gt;\"</span>);</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"是否是刚刚创建的：\"</span>+isNew+<span class=\"string\">\"&lt;br/&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Session域数据的存取\"><a href=\"#2-Session域数据的存取\" class=\"headerlink\" title=\"2.Session域数据的存取\"></a>2.Session域数据的存取</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 往Session域中保存数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setAttribute</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    req.getSession().setAttribute(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"value1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取Session中的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">getAttribute</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    Object key1 = req.getSession().getAttribute(<span class=\"string\">\"key1\"</span>);</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"从Session中获取的key1的数据为：\"</span>+ key1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Session生命周期控制\"><a href=\"#3-Session生命周期控制\" class=\"headerlink\" title=\"3.Session生命周期控制\"></a>3.Session生命周期控制</h3><p>setMaxInactiveInterval(int  interval)：设置Session超时时间，超过指定的时长就会被销毁。<br>负数表示永不超时。<br>getMaxInactiveInterval()：获取Session超时时长。<br>invalidate()：使当前会话马上超时。</p>\n<p>获取默认超时时长：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultLife</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxInactiveInterval = req.getSession().getMaxInactiveInterval();</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"Session的默认超时时长为：\"</span>+maxInactiveInterval);<span class=\"comment\">// 1800</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 设置web工程下所有的 Session 默认超时时长：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置个别Session的超时时长：                                                                                                                                                                                                                                                                                                                                                                                                                                            </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setLife</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    req.getSession().setMaxInactiveInterval(<span class=\"number\">3</span>);</span><br><span class=\"line\">    resp.getWriter().write(<span class=\"string\">\"设置Session 3秒后失效~\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使Session马上失效：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNow</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">       req.getSession().invalidate();</span><br><span class=\"line\">       resp.getWriter().write(<span class=\"string\">\"设置Session 马上失效~\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaWeb"]},{"title":"Json,AJAX","url":"/2020/05/15/javaweb-08/","content":"<h2 id=\"json概念\"><a href=\"#json概念\" class=\"headerlink\" title=\"json概念\"></a>json概念</h2><p>json是一种轻量级的数据交换格式。<br>1、比xml更为轻量，解析速度更快。<br>2、数据交换指的是客户端和服务器之间业务数据的传递格式。<a id=\"more\"></a></p>\n<h2 id=\"json在javaScipt中的使用\"><a href=\"#json在javaScipt中的使用\" class=\"headerlink\" title=\"json在javaScipt中的使用\"></a>json在javaScipt中的使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json的定义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonObj = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"key1\"</span>:<span class=\"number\">666</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"key2\"</span>:<span class=\"string\">\"qwer\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"key3\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"key4\"</span>:[<span class=\"number\">111</span>,<span class=\"string\">\"abc\"</span>,<span class=\"literal\">false</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">\"key5\"</span>:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"key5_1\"</span>:<span class=\"number\">222</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"key5_2\"</span>:<span class=\"string\">\"aaaa\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"key6\"</span>:[&#123;<span class=\"string\">\"key6_1_1\"</span>:<span class=\"number\">333</span>,<span class=\"string\">\"key6_1_2\"</span>:<span class=\"number\">444</span>&#125;,&#123;<span class=\"string\">\"key6_2_1\"</span>:<span class=\"number\">555</span>&#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(jsonObj);<span class=\"comment\">//object  json就是一个对象</span></span><br><span class=\"line\">alert(jsonObj.key1);<span class=\"comment\">// 666</span></span><br><span class=\"line\">alert(jsonObj.key4[<span class=\"number\">1</span>])<span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"comment\">// json对象转字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonString = <span class=\"built_in\">JSON</span>.stringify(jsonObj);</span><br><span class=\"line\">alert(jsonString);符串</span><br><span class=\"line\"><span class=\"comment\">// json字符串转json对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonObj2 = <span class=\"built_in\">JSON</span>.parse(jsonString);</span><br><span class=\"line\">alert(jsonObj2);</span><br></pre></td></tr></table></figure>\n\n<p> <strong>json的存在有两种形式：</strong><br>1、对象的形式：操作json中的数据时，使用json对象；<br>2、字符串的形式：客户端与服务端之间进行数据交换时，使用json字符串。<br>JSON.stringify()：把json对象转换为json字符串<br>JSON.parse()：把json字符串转换为json对象</p>\n<h2 id=\"json在java中的使用\"><a href=\"#json在java中的使用\" class=\"headerlink\" title=\"json在java中的使用\"></a>json在java中的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// javaBean和json的相互转换</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">10001</span>,<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">        <span class=\"comment\">// javaBean转json字符串</span></span><br><span class=\"line\">        String p1JsonString = gson.toJson(p1);</span><br><span class=\"line\">        System.out.println(p1JsonString);</span><br><span class=\"line\">        <span class=\"comment\">// json字符串转javaBean</span></span><br><span class=\"line\">        Person p2 = gson.fromJson(p1JsonString, Person<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(p2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"comment\">// List 和json的相互转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"number\">10001</span>,<span class=\"string\">\"Tom\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"number\">10002</span>,<span class=\"string\">\"Tony\"</span>));</span><br><span class=\"line\">        personList.add(<span class=\"keyword\">new</span> Person(<span class=\"number\">10003</span>,<span class=\"string\">\"Nick\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">        <span class=\"comment\">// List转json字符串数组</span></span><br><span class=\"line\">        String jsonStringArr = gson.toJson(personList);</span><br><span class=\"line\">        System.out.println(jsonStringArr);</span><br><span class=\"line\">        <span class=\"comment\">// json字符串数组转List</span></span><br><span class=\"line\">        <span class=\"comment\">// List&lt;Person&gt; personList1 = gson.fromJson(jsonStringArr, new PersonListType().getType());</span></span><br><span class=\"line\">        List&lt;Person&gt; personList1 = gson.fromJson(jsonStringArr, <span class=\"keyword\">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());</span><br><span class=\"line\">        System.out.println(personList1);</span><br><span class=\"line\">        System.out.println(personList1.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"comment\">// Map 和json的相互转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;Integer,Person&gt; personMap = <span class=\"keyword\">new</span> HashMap&lt;Integer, Person&gt;();</span><br><span class=\"line\">        personMap.put(<span class=\"number\">1</span>,<span class=\"keyword\">new</span> Person(<span class=\"number\">10001</span>,<span class=\"string\">\"Tom1\"</span>));</span><br><span class=\"line\">        personMap.put(<span class=\"number\">2</span>,<span class=\"keyword\">new</span> Person(<span class=\"number\">10002</span>,<span class=\"string\">\"Tom2\"</span>));</span><br><span class=\"line\">        personMap.put(<span class=\"number\">3</span>,<span class=\"keyword\">new</span> Person(<span class=\"number\">10003</span>,<span class=\"string\">\"Tom3\"</span>));</span><br><span class=\"line\">        Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">        <span class=\"comment\">// Map转json字符串集合</span></span><br><span class=\"line\">        String jsonStringMap = gson.toJson(personMap);</span><br><span class=\"line\">        System.out.println(jsonStringMap);</span><br><span class=\"line\">        <span class=\"comment\">// json字符串集合转Map</span></span><br><span class=\"line\">        <span class=\"comment\">// Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(jsonStringMap, new PersonMapList().getType());</span></span><br><span class=\"line\">        Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(jsonStringMap, <span class=\"keyword\">new</span> TypeToken&lt;Map&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());</span><br><span class=\"line\">        System.out.println(personMap1);</span><br><span class=\"line\">        System.out.println(personMap1.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ajax请求\"><a href=\"#ajax请求\" class=\"headerlink\" title=\"ajax请求\"></a>ajax请求</h2><p>AJAX是一种创建交互式网页应用的开发技术。<br>浏览器通过javaScript异步发起请求，局部更新页面的技术。<br>浏览器地址栏不会发生变化；局部更新不会舍弃原来页面的内容。</p>\n<h2 id=\"原生AJAX请求\"><a href=\"#原生AJAX请求\" class=\"headerlink\" title=\"原生AJAX请求\"></a>原生AJAX请求</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">javaScriptAjax</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"javaScriptAjax调用了~\"</span>);</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>,<span class=\"string\">\"Tony\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将需要返回给客户端的对象转换为json字符串</span></span><br><span class=\"line\">    Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    String personJsonString = gson.toJson(person);</span><br><span class=\"line\">    resp.getWriter().write(personJsonString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"meta-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 使用js发起Ajax请求，访问服务器AjaxServlet中的javascriptAjax()</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxRequest</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// \t\t\t\t1、我们首先要创建XMLHttpRequest </span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> xmlHttpRequest = <span class=\"keyword\">new</span> XMLHttpRequest();</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// \t\t\t\t2、调用open方法设置请求参数 open(请求方法,请求地址,异步(true))</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            xmlHttpRequest.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"http://localhost:8080/11_json/ajaxServlet?action=javaScriptAjax\"</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">// \t\t\t\t3、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            xmlHttpRequest.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\">                if (xmlHttpRequest.readyState == 4 &amp;&amp; xmlHttpRequest.status == 200) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// 将json字符串转换为json对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> jsonObj = <span class=\"built_in\">JSON</span>.parse(xmlHttpRequest.responseText);</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// 将响应数据显示在页面上</span></span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"div01\"</span>).innerHTML = <span class=\"string\">\"编号：\"</span> + jsonObj.id + <span class=\"string\">\"&lt;br/&gt;姓名：\"</span> + jsonObj.name;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 4、调用send方法发送请求</span></span></span><br><span class=\"line\">            xmlHttpRequest.send();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ajaxRequest()\"</span>&gt;</span>ajax request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div01\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jquery中的ajax请求\"><a href=\"#jquery中的ajax请求\" class=\"headerlink\" title=\"jquery中的ajax请求\"></a>jquery中的ajax请求</h2><p><strong>$.ajax 方法</strong><br>url：表示请求的地址<br>type：表示请求的类型GET 或POST 请求<br>data：表示发送给服务器的数据<br>data的格式有两种：<br>一：name=value&amp;name=value<br>二：{key:value}<br>success：请求成功，响应的回调函数<br>dataType：响应的数据类型<br>常用的响应数据类型有：text、xml、json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax请求</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ajaxBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">\"http://localhost:8080/11_json/ajaxServlet\"</span>,</span><br><span class=\"line\">        data: <span class=\"string\">\"action=jqueryAjax\"</span>,</span><br><span class=\"line\">        type: <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"服务器返回的数据：\"</span> + data);</span><br><span class=\"line\">            $(<span class=\"string\">\"#msg\"</span>).html(<span class=\"string\">\"编号：\"</span> + data.id + <span class=\"string\">\" 姓名：\"</span> + data.name);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"json\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>$.get 方法和$.post 方法</strong><br>url： 请求的url 地址<br>data： 发送的数据<br>callback： 成功的回调函数<br>type ：返回的数据类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax--get请求</span></span><br><span class=\"line\">$(<span class=\"string\">\"#getBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(</span><br><span class=\"line\">        \"http://localhost:8080/11_json/ajaxServlet\",</span><br><span class=\"line\">        \"action=jqueryAjax\",</span><br><span class=\"line\">        function (data) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"服务器返回的数据：\"</span> + data);</span><br><span class=\"line\">            $(<span class=\"string\">\"#msg\"</span>).html(<span class=\"string\">\"编号：\"</span> + data.id + <span class=\"string\">\" 姓名：\"</span> + data.name);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"json\"</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax--post请求</span></span><br><span class=\"line\">$(<span class=\"string\">\"#postBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// post请求</span></span><br><span class=\"line\">    $.post(</span><br><span class=\"line\">        <span class=\"string\">\"http://localhost:8080/11_json/ajaxServlet\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"action=jqueryAjax\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"服务器返回的数据：\"</span> + data);</span><br><span class=\"line\">            $(<span class=\"string\">\"#msg\"</span>).html(<span class=\"string\">\"编号：\"</span> + data.id + <span class=\"string\">\" 姓名：\"</span> + data.name);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"json\"</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>$.getJSON 方法</strong><br>url： 请求的url 地址<br>data： 发送给服务器的数据<br>callback： 成功的回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax--getJson请求</span></span><br><span class=\"line\">$(<span class=\"string\">\"#getJSONBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.getJSON(</span><br><span class=\"line\">        <span class=\"string\">\"http://localhost:8080/11_json/ajaxServlet\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"action=jqueryAjax\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"服务器返回的数据：\"</span> + data);</span><br><span class=\"line\">            $(<span class=\"string\">\"#msg\"</span>).html(<span class=\"string\">\"编号：\"</span> + data.id + <span class=\"string\">\" 姓名：\"</span> + data.name);</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>表单序列化serialize()</strong><br>serialize()可以把表单中所有的表单项都获取到，并以name1=value1&amp;name2=value2 的形式拼接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#submit\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 把参数序列化</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> params = $(<span class=\"string\">\"#form01\"</span>).serialize();</span><br><span class=\"line\">     $.getJSON(<span class=\"string\">\"http://localhost:8080/11_json/ajaxServlet\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"action=serializeAjax&amp;\"</span>+params,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">          alert(<span class=\"string\">\"服务器返回的数据：\"</span> + data);</span><br><span class=\"line\">          $(<span class=\"string\">\"#msg\"</span>).html(<span class=\"string\">\"编号：\"</span> + data.id + <span class=\"string\">\" 姓名：\"</span> + data.name);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["前端"],"tags":["JavaWeb"]},{"title":"JWT原理及使用","url":"/2020/10/18/jwt/","content":"<h2 id=\"JWT-简介\"><a href=\"#JWT-简介\" class=\"headerlink\" title=\"JWT 简介\"></a>JWT 简介</h2><p>JSON Web Token的缩写，通过json作为web应用中的令牌，用于在各方之间安全地传输json数据。在数据的传输过程中还可以完成数据加密、签名等。<a id=\"more\"></a></p>\n<h2 id=\"JWT的主要用途\"><a href=\"#JWT的主要用途\" class=\"headerlink\" title=\"JWT的主要用途\"></a>JWT的主要用途</h2><p><strong>1、认证授权</strong></p>\n<ul>\n<li>这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</li>\n</ul>\n<p><strong>2.信息交换</strong></p>\n<ul>\n<li>JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</li>\n</ul>\n<h2 id=\"JWT与Session的区别\"><a href=\"#JWT与Session的区别\" class=\"headerlink\" title=\"JWT与Session的区别\"></a>JWT与Session的区别</h2><h3 id=\"基于传统的Session认证\"><a href=\"#基于传统的Session认证\" class=\"headerlink\" title=\"基于传统的Session认证\"></a>基于传统的Session认证</h3><p><strong>认证方式</strong></p>\n<ul>\n<li>http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证。那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息(session)。这份登录信息会在响应时传递给浏览器，告诉其保存为cookie(存储sessionid)，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</li>\n</ul>\n<p><strong>2.认证流程</strong><br><img src=\"/2020/10/18/jwt/1.png\" alt></p>\n<p><strong>3.存在的问题</strong></p>\n<ul>\n<li>1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大</li>\n<li>2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</li>\n<li>3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</li>\n<li>4.在前后端分离系统中就更加痛苦:如下图所示<br>  也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。每次携带sessionid 到服务器，服务器还要查询用户信息。还有就是sessionid就是一个特征值，表达的信息不够丰富，不容易扩展。而且如果后端应用是多节点部署，就需要实现session共享机制。不方便集群应用。  <img src=\"/2020/10/18/jwt/2.png\" style=\"zoom:80%;\">\n\n</li>\n</ul>\n<h3 id=\"基于JWT的认证\"><a href=\"#基于JWT的认证\" class=\"headerlink\" title=\"基于JWT的认证\"></a>基于JWT的认证</h3><p><strong>认证流程</strong><br><img src=\"/2020/10/18/jwt/3.png\" alt></p>\n<ul>\n<li><p>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</p>\n</li>\n<li><p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同aaa.bbb.ccc的字符串。  header.payload.signature</p>\n</li>\n<li><p>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</p>\n</li>\n<li><p>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) </p>\n</li>\n<li><p>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</p>\n</li>\n<li><p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</p>\n</li>\n</ul>\n<p><strong>JWT的优势</strong></p>\n<ul>\n<li><p>简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</p>\n</li>\n<li><p>自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库</p>\n</li>\n<li><p>因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。</p>\n</li>\n<li><p>不需要在服务端保存会话信息，特别适用于分布式微服务。</p>\n</li>\n</ul>\n<h2 id=\"JWT的结构\"><a href=\"#JWT的结构\" class=\"headerlink\" title=\"JWT的结构\"></a>JWT的结构</h2><h3 id=\"1、标头Header\"><a href=\"#1、标头Header\" class=\"headerlink\" title=\"1、标头Header\"></a>1、标头Header</h3><p>通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC、SHA256或RSA。它会使用Base64编码组成JWT结构的一部分(aaa.)。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、有效载荷Payload\"><a href=\"#2、有效载荷Payload\" class=\"headerlink\" title=\"2、有效载荷Payload\"></a>2、有效载荷Payload</h3><p>包含有关实体的声明（通常是用户）或其他数据（对用户不敏感的信息）的声明。同样使用Base64编码组成JWT的第二部分（bbb.）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"1234567890\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"admin\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、签名Signature\"><a href=\"#3、签名Signature\" class=\"headerlink\" title=\"3、签名Signature\"></a>3、签名Signature</h3><p>前面两部分都是使用Base64进行编码的，即在前端可以Base64解码解开里面的信息。Signature 需要使用<br>编码后的header和payload以及我们提供的一个密钥，然后使用header中指明的签名算法（HS256）进行签名，保证JWT没有被篡改过。</p>\n<p>例如：<code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);</code></p>\n<p><img src=\"/2020/10/18/jwt/4.png\" alt></p>\n<p>最终输出为：<br><img src=\"/2020/10/18/jwt/5.png\" alt></p>\n<ul>\n<li>输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</li>\n<li>简洁(Compact)<br>  可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</li>\n<li>自包含(Self-contained)<br>  负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>\n</ul>\n<h2 id=\"整合Springboot\"><a href=\"#整合Springboot\" class=\"headerlink\" title=\"整合Springboot\"></a>整合Springboot</h2><h3 id=\"1、创建数据库\"><a href=\"#1、创建数据库\" class=\"headerlink\" title=\"1、创建数据库\"></a>1、创建数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> jwt_test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">KEY</span> auto_increment,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">25</span>),</span><br><span class=\"line\"><span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">25</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(<span class=\"keyword\">id</span>,<span class=\"keyword\">name</span>,<span class=\"keyword\">password</span>) <span class=\"keyword\">values</span></span><br><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"string\">'zhangyuzhen'</span>,<span class=\"string\">'123456'</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"string\">'zhangsan'</span>,<span class=\"string\">'123456'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建Springboot项目\"><a href=\"#2、创建Springboot项目\" class=\"headerlink\" title=\"2、创建Springboot项目\"></a>2、创建Springboot项目</h3><p>导入如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入jwt--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mybatis--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入lombok--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mysql--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写配置文件\"><a href=\"#3、编写配置文件\" class=\"headerlink\" title=\"3、编写配置文件\"></a>3、编写配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8989</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.type</span>=<span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/jwt_test?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">2824199842</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mybatis.type-aliases-package</span>=<span class=\"string\">com.zyz.po</span></span><br><span class=\"line\"><span class=\"meta\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:com/zyz/mapper/*.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">logging.level.com.zyz.dao</span>=<span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n\n<p>先测试数据库是否能连接成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootJwtApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        System.out.println(connection.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、创建项目的包结构\"><a href=\"#4、创建项目的包结构\" class=\"headerlink\" title=\"4、创建项目的包结构\"></a>4、创建项目的包结构</h3><p><img src=\"/2020/10/18/jwt/10.png\" alt></p>\n<p>编写各层的代码：</p>\n<blockquote>\n<p>po</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>dao       @Repository可以省略，因为其接口对应的mapper文件通过namespace与之相关联，生成的实现类总是在容器中</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">login</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.UserDao\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"User\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select id,name from t_user where name=#&#123;name&#125; and password=#&#123;password&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Springboot启动类上中添加dao接口包扫描的注解@MapperScan(“com.zyz.dao”)或者在每个dao接口中添加@Mapper注解</p>\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>UserService &#123;</span><br><span class=\"line\">   <span class=\"built_in\"> User </span>login(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = userDao.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ObjectUtils.isEmpty(user1))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"登录失败！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>utils</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建 Token</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JWTUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 密钥</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SIGNATURE = <span class=\"string\">\"qwertyuiopasdfghjklzxcvbnm\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成 Token  header.payload.signature</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getToken</span><span class=\"params\">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置token有效时长</span></span><br><span class=\"line\">        Calendar instance = Calendar.getInstance();</span><br><span class=\"line\">        instance.add(Calendar.DATE,<span class=\"number\">7</span>);<span class=\"comment\">// 有效期为7天</span></span><br><span class=\"line\">        JWTCreator.Builder builder = JWT.create();</span><br><span class=\"line\">        <span class=\"comment\">// 设置header  header有默认值，无需手动设置 默认加密方式为HMAC256</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置payload  遍历map将键值对存入payload</span></span><br><span class=\"line\">        map.forEach((key,value)-&gt;&#123;builder.withClaim(key,value);&#125;);</span><br><span class=\"line\">        String token = builder</span><br><span class=\"line\">                <span class=\"comment\">// 设置token过期时长</span></span><br><span class=\"line\">                .withExpiresAt(instance.getTime())</span><br><span class=\"line\">                <span class=\"comment\">// 设置signature</span></span><br><span class=\"line\">                .sign(Algorithm.HMAC256(SIGNATURE));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证 token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DecodedJWT <span class=\"title\">verify</span><span class=\"params\">(String token)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/user/login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">login</span><span class=\"params\">(@RequestBody User user)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            User realUser = userService.login(user);</span><br><span class=\"line\">            Map&lt;String, String&gt; payload = <span class=\"keyword\">new</span> HashMap&lt;&gt;();<span class=\"comment\">// 用来存放payload</span></span><br><span class=\"line\">            payload.put(<span class=\"string\">\"id\"</span>,realUser.getId().toString());</span><br><span class=\"line\">            payload.put(<span class=\"string\">\"name\"</span>,realUser.getName());</span><br><span class=\"line\">            String token = JWTUtils.getToken(payload);<span class=\"comment\">// 创建token</span></span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"认证成功！\"</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"token\"</span>,token);<span class=\"comment\">// 认证成功返回token</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>interceptor  编写用于token验证的拦截器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JWTInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JWTUtils.verify(token);<span class=\"comment\">// 验证token</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">// 放行</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"Token已经过期!!!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e)&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"签名错误!!!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"加密算法不匹配!!!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"state\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"无效token~~\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将map转换为json格式返回给前端</span></span><br><span class=\"line\">        String json = <span class=\"keyword\">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">        response.getWriter().println(json);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>config  使编写的拦截器生效</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> JWTInterceptor())</span><br><span class=\"line\">                .addPathPatterns(<span class=\"string\">\"/**\"</span>) <span class=\"comment\">// 拦截所有请求</span></span><br><span class=\"line\">                .excludePathPatterns(<span class=\"string\">\"/user/**\"</span>);<span class=\"comment\">// 与用户相关的请求除外</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Postman测试\"><a href=\"#使用Postman测试\" class=\"headerlink\" title=\"使用Postman测试\"></a>使用Postman测试</h2><p>认证成功时：<br><img src=\"/2020/10/18/jwt/6.png\"></p>\n<p>认证失败时：<br><img src=\"/2020/10/18/jwt/7.png\"></p>\n<p>测试被拦截器拦截的接口：<br>不携带token:<br><img src=\"/2020/10/18/jwt/8.png\" alt></p>\n<p>携带token:<br><img src=\"/2020/10/18/jwt/9.png\" alt></p>\n","categories":["Java"],"tags":["JWT"]},{"title":"Linux 常用命令","url":"/2020/02/25/linux-02/","content":"<h2 id=\"关机-amp-重启命令\"><a href=\"#关机-amp-重启命令\" class=\"headerlink\" title=\"关机&amp;重启命令\"></a>关机&amp;重启命令</h2><p><strong>shutdown</strong>(默认1分钟后关机)<br>        shutdown -h now : 立即关机<br>        shutdown -h 1 : 1分钟后关机<br>        shutdown -r now : 立即重启<a id=\"more\"></a><br><strong>halt:</strong>禁用cpu，相当于直接关机<br><strong>reboot:</strong>立即重启<br><strong>sync:</strong>把内存上的数据同步到磁盘上(关机或重启前应该先执行此指令，防止数据丢失)</p>\n<h2 id=\"用户登录和注销\"><a href=\"#用户登录和注销\" class=\"headerlink\" title=\"用户登录和注销\"></a>用户登录和注销</h2><p><strong>su 用户名：</strong>切换用户<br><strong>logout：</strong>注销用户，在图形运行级别无效</p>\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><p>Linux是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须向系统管理员申请一个账号，然后以这个账号的身份进入系统。<br>每个用户至少属于一个组。<br><strong>添加用户：</strong> useradd -r -m -s /bin/bash 用户名<br>-r：建立系统账号<br>-m：自动建立用户的登入目录<br>-s：指定用户登入后所使用的shell<br><strong>指定密码：</strong>passwd 用户名<br><strong>删除用户：</strong><br>userdel 用户名(删除用户保留家目录)<br>userdel -r 用户名 (删除用户及用户主目录)<br><strong>查询用户：</strong>id 用户名<br><strong>查看当前用户：</strong>whoami  /who am I<br><strong>用户组：</strong>系统对有共性的多个用户进行统一的管理<br>添加组：groupadd  组名<br>查看组id：grep 组名 /etc/group<br>修改组账户：groupmod -g[新id] -n[新组名] 组名<br>删除组：groupdel 组名<br>增加用户时直接加上组：useradd -g 用户组 用户<br>修改用户组：usermod -g 用户组 用户<br>相关文件：<br>/etc/passwd：用户的配置文件，记录用户的各种信息<br>用户名：口令：用户标识号：组标识号：注释性描述：登录shell<br>/etc/shadow：口令配置文件<br>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：不活动时间：失效时间：标志<br>/etc/group：组配置文件<br>组名：口令：组标识符</p>\n<h2 id=\"运行级别\"><a href=\"#运行级别\" class=\"headerlink\" title=\"运行级别\"></a>运行级别</h2><p>0：关机<br>        1：单用户（找回丢失密码）<br>        2：多用户状态没有网络服务<br>        3：多用户状态有网络<br>        4：系统未使用保留给用户<br>        5：图形界面<br>        6：系统重启<br>                /etc/inittab文件查看运行级别（ubuntu没有此文件）<br>                修改默认运行级别：init [012356] (然后按ctrl+alt+F1，Ubuntu进入命令界面 )<br><img src=\"/2020/02/25/linux-02/4.png\" alt></p>\n<h2 id=\"帮助指令\"><a href=\"#帮助指令\" class=\"headerlink\" title=\"帮助指令\"></a>帮助指令</h2><p>man 指令<br>help 指令</p>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p>​    <strong>pwd：</strong>显示当前目录的绝对路径</p>\n<p>​    <strong>ls [选项] [目录或是文件]：</strong>显示指定目录霞的文件信息<br>​            常用选项：<br>​            -a：显示当前目录的所有文件或目录，包括隐藏文件；<br>​            -l：以列表的方式显示信息。<br>​            <em>ls -a -l 等价于 ll</em></p>\n<p>​    <strong>cd [目录]：</strong>进入指定目录<br>​            绝对路径：从根目录出发定位  /home<br>​            相对路径：从当前路径出发定位 ../home<br>​            cd ~  进入当前用户的家目录<br>​            cd ..  进入当前目录的上一级目录</p>\n<p>​    <strong>mkdir [选项] 目录：</strong>创建目录<br>​            -p：创建多级目录<br>​            rmdir [] 目录：删除目录<br>​            redir 目录：删除的是空目录；rm -rf 目录：删除非空目录</p>\n<p>​    <strong>touch 文件名：</strong>创建一个空文件（可以一次创建多个文件）</p>\n<p>​    <strong>cp [选项] 原文件 指定目录：</strong>拷贝文件到指定目录<br>​            -r：递归复制整个文件夹    </p>\n<p>​    <strong>rm [选项] 要删除的文件夹或目录：</strong>删除指定文件夹<br>​            -r：递归删除整个文件夹<br>​            -f：强制删除不提示    </p>\n<p>​    <strong>mv 原文件名 新文件名：</strong>文件重命名<br>​            <strong>mv 原文件路径 新文件路径：</strong>移动文件    </p>\n<p>​    <strong>cat [选项] 文件路径：</strong>查看文件内容<br>​            -n：显示行号<br>​            管道命令：|，前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）<br>​            |more：分页显示<br>​            |less：效率比more高</p>\n<p>​    <strong>&gt;输出重定向：</strong><br>​            <strong>&gt;&gt;追加：</strong><br>​            ls -l &gt;文件：将列表的内容写入文件中<br>​            ls -l &gt;&gt;文件：将列表的内容追加到文件的末尾</p>\n<p>​    <strong>echo [选项] [输出内容]：</strong>输出内容到控制台</p>\n<p>​    <strong>head 文件名：</strong>查看文件前10行<br>​            head -n 行数：查看文件的前任意行</p>\n<p>​    <strong>tail 文件名：</strong>查看文件尾10行<br>​            tail -n 行数：查看文件尾任意行<br>​            tail -f 文件名：实时监控文件的更新</p>\n<p>​    <strong>ln -s 原文件或目录 软链接：</strong>给文件创建一个软链接，相当于windows中的快捷方式</p>\n<p>​    <strong>history ：</strong>查看或执行(! 编号)已经执行过的指令</p>\n<h2 id=\"时间日期类\"><a href=\"#时间日期类\" class=\"headerlink\" title=\"时间日期类\"></a>时间日期类</h2><p><strong>date：</strong>显示当前时间日期<br>        date “+%Y-%M-%d %H:%m:%S”：按指定格式显示时间日期<br>        date -s 字符串时间日期：设置时间日期</p>\n<p><strong>cal：</strong>显示当前日历        </p>\n<h2 id=\"搜索查找类\"><a href=\"#搜索查找类\" class=\"headerlink\" title=\"搜索查找类\"></a>搜索查找类</h2><p><strong>find [搜索范围] [选项] ：</strong>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。<br>选项：-name 文件名：按文件名查找<br>            -user 用户名：按用户名查找<br>            -size +/-文件大小：按文件大小查找（+表示大于  -表示小于  默认为等于）</p>\n<p><strong>locate 文件名：</strong>定位文件路径</p>\n<p><strong>grep [选项] 查找内容 源文件：</strong><br>    选项：-n：匹配行号<br>                -i：忽略大小写</p>\n<h2 id=\"压缩和解压类\"><a href=\"#压缩和解压类\" class=\"headerlink\" title=\"压缩和解压类\"></a>压缩和解压类</h2><p><strong>gzip 文件名：</strong>压缩文件</p>\n<p><strong>gunzip 文件名：</strong>解压文件</p>\n<p><strong>zip [选项] 文件名.zip 将要压缩的内容：</strong>压缩文件<br>        选项：-r：递归压缩，即压缩目录</p>\n<p><strong>unzip [选项] 文件名.zip：</strong>解压缩文件<br>        选项：-d：指定解压后文件的存放目录</p>\n<p><strong>tar [选项] 文件名.tar.gz 打包的内容</strong><br>        选项：<br>        -c：产生.tar打包文件<br>        -v：显示详细信息<br>        -f：指定压缩后的文件<br>        -z：打包同时压缩<br>        -x：解包.tar文件<br>        tar -zcvf xxx.tar.gz 要压缩的文件或目录：压缩文件<br>        tar -zxvf xxx.tar.gz -C 路径：解压到指定路径</p>\n<h2 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h2><p>在linux中的每一个用户都必须属于一个组们不能独立于组外。<br>        在linux中每个文件有所有者，所在组，其他组。<br>        <strong>文件/目录的所有者：</strong>一般为文件的创建者<br>        查看文件的所有者：ls -ahl<br>        chown 文件名 用户：更改文件所有者<br>        chgrp 组名 文件名：修改文件所在组<br>        chown 新的所有者:新的所在组 文件名：同时改变文件所有者和所在组<br>        -R：如果是目录则使其下所有子文件或目录递归生效</p>\n<p><strong>创建组：groupadd 组名</strong><br>        在组内添加用户：useradd -g 组名 用户名<br>        改变用户所在组：usermod -g 组名 用户名<br>        改变用户登录的初始目录：usermod -d 目录名 用户 </p>\n<p><strong>文件/目录权限：</strong><br><img src=\"/2020/02/25/linux-02/1.png\" alt>        r：对于文件代表可以读取，查看<br>        w：对于文件代表可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件的目录有写权限。<br>        x：对于文件代表可以执行</p>\n<p>r：对于目录，可以读取，ls查看目录内容<br>        w：对于目录，可以修改，目录内创建，删除，重命名<br>        x：对于目录，可以进入该目录</p>\n<h2 id=\"文件-目录权限管理\"><a href=\"#文件-目录权限管理\" class=\"headerlink\" title=\"文件/目录权限管理\"></a>文件/目录权限管理</h2><p>chmod：修改文件/目录权限<br>        第一种方式：+、-、= 变更权限<br>        u：所有者  g：所有组   o：其他人  a：所有人<br>        chmod u=rwc,g=rx,o=x 文件目录名<br>        chmod o+w 文件目录名<br>        chmod a-x 文件目录名<br>        规定：r=4  w=2  x=1</p>\n<h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><p>crontab [选项]<br>        -e   编辑crontab定时任务<br>        -l     查看crontab任务<br>        -r     删除当前用户所有的crontab任务<br><img src=\"/2020/02/25/linux-02/2.png\" alt><br><img src=\"/2020/02/25/linux-02/3.png\" alt></p>\n<h2 id=\"磁盘分区、挂载\"><a href=\"#磁盘分区、挂载\" class=\"headerlink\" title=\"磁盘分区、挂载\"></a>磁盘分区、挂载</h2><p>分区的方式：</p>\n<p><strong>1) mbr分区:</strong><br>1.最多支持四个主分区<br>2.系统只能安装在主分区<br>3.扩展分区要占一个主分区<br>4.MBR最大只支持2TB，但拥有最好的兼容性</p>\n<p><strong>2) gtp分区:</strong><br>1.支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）<br>2.最大支持18EB的大容量（1EB=1024 PB，1PB=1024 TB ）<br>3.windows7 64位以后支持gtp</p>\n<p>linux的磁盘分区作为文件被挂载(mount)到根目录下的文件夹中，同时也可以将其卸载(umount)。<br>硬盘说明：<br>1.linux硬盘分IDE硬盘和SCSI硬盘，目前使用的基本上是SCSI硬盘。<br>2.对于IDE硬盘，驱动器标识符为 <code>hdx~</code>。<br>3.对于SCSI硬盘则标识符为<code>sdx~</code>。</p>\n<p>查看所有设备的挂载情况：lsblk 或lsblk -f</p>\n<p>分区命令：fdisk /dev/sdb<br>        n 新增分区    w  写入退出<br>        格式化磁盘：mkfs -t ext4 /dev/sdb1<br>        挂载磁盘：mount  设备名称  挂载目录<br>        卸载磁盘：umount   设备名称或挂载目录<br>        永久挂载：通过修改  /etc/fstab   —–&gt;   执行mount -a<br>4.查询磁盘使用情况：<br>查询磁盘整体使用情况：df -lh<br>查询指定目录的磁盘使用情况：du -h 目录<br><strong>工作常用指令：</strong><br>1、统计/home文件夹下文件的个数<br>ls -l /home |grep “^-“|wc -l<br>2、统计/home文件夹下的目录个数<br>ls -l /home | grep “^d” | wc -l<br>3、统计/hom文件夹下文件的个数，包括子文件夹里面的<br>ls -lR /home |grep “^-“|wc -l<br>4、统计/home文件夹下目录的个数，包括子文件夹下的<br>ls -lR /home | grep “^d” | wc -l<br>5、以树状显示文件结构<br>tree 目录</p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p><strong>查看进程：</strong></p>\n<p>ps -aux [| grep 进程名]：显示当前终端所有的进程信息</p>\n<p>ps  -ef：查看父进程</p>\n<p><strong>终止进程：</strong></p>\n<p>kill -[选项] 进程号</p>\n<p>killall 进程名<br>选项：9  强制终止</p>\n<p><strong>service服务管理：</strong></p>\n<p>service   服务名 [start | stop | restart | reload | status]</p>\n<p>ls -l /etc/init.d/     列出系统服务</p>\n<p><strong>动态监控进程：</strong></p>\n<p>top -d 秒数  ：每隔几秒就刷新</p>\n<p><strong>监控网络情况：</strong></p>\n<p>netstat [选项]</p>\n<p>-n 按一定顺序排列输出<br>-p 显示哪个进程在调用</p>\n","categories":["Linux"],"tags":["Linux"]},{"title":"MyBatis映射文件","url":"/2020/05/25/mybatis-03/","content":"<h2 id=\"实现增删改查功能\"><a href=\"#实现增删改查功能\" class=\"headerlink\" title=\"实现增删改查功能\"></a>实现增删改查功能</h2><p>映射文件指导着MyBatis如何进行数据库增删改查<br>在EmployeeMapper接口中添加增删改查的方法:<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteEmpById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在映射文件Employee.xml添加相应的sql映射：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace  名称空间  1.通过 namespace.id 来确定要执行的sql语句</span></span><br><span class=\"line\"><span class=\"comment\">                         2.指定为接口的全类名，用于绑定接口</span></span><br><span class=\"line\"><span class=\"comment\">     id  唯一标识   用于唯一标识一条sql语句</span></span><br><span class=\"line\"><span class=\"comment\">     result  返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">     #&#123;id&#125;  从传递过来的参数中取出id值</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"dao.EmployeeMapper\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--public Employee getEmpById(Integer id);--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        select * from employee where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--public void addEmp(Employee employee);--&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!-- parameterType： 参数类型  可以省略</span></span><br><span class=\"line\"><span class=\"comment\">         mysql支持自增主键，自增主键的获取，mybatis也是利用statement.getGenerateKeys()</span></span><br><span class=\"line\"><span class=\"comment\">         useGenerateKey=\"true\":使用自增主键获取主键值策略</span></span><br><span class=\"line\"><span class=\"comment\">         keyProperty:指定对应的主键值类型，也就是mybatis获取到主键后封装给javaBean的哪个属性--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addEmp\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">        insert into employee(name,gender,email) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--public void updateEmp(Employee employee);--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateEmp\"</span>&gt;</span></span><br><span class=\"line\">        update employee set name=#&#123;name&#125;,gender=#&#123;gender&#125;,email=#&#123;email&#125; where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--public void deleteEmpById(Integer id);--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"deleteEmpById\"</span>&gt;</span></span><br><span class=\"line\">        delete from employee where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试增删改方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class=\"line\">        SqlSession sqlSession = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sqlSession = sqlSessionFactory.openSession();<span class=\"comment\">// 不会自动提交</span></span><br><span class=\"line\">            EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            Employee employee = <span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>, <span class=\"string\">\"Tom\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"tom@126.com\"</span>);</span><br><span class=\"line\">            mapper.addEmp(employee);</span><br><span class=\"line\">            <span class=\"comment\">// 获取自增主键的值</span></span><br><span class=\"line\">            System.out.println(employee.getId());<span class=\"comment\">// 5</span></span><br><span class=\"line\">            <span class=\"comment\">// 修改</span></span><br><span class=\"line\">            <span class=\"comment\">//mapper.updateEmp(new Employee(2,\"zyz001\",\"1\",\"zyz001@qq.com\"));</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除</span></span><br><span class=\"line\">            <span class=\"comment\">//mapper.deleteEmpById(2);</span></span><br><span class=\"line\">            <span class=\"comment\">// 手动提交</span></span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sqlSession != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sqlSession.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MyBatis参数处理\"><a href=\"#MyBatis参数处理\" class=\"headerlink\" title=\"MyBatis参数处理\"></a>MyBatis参数处理</h2><p>单个参数：mybatis不会做特殊处理。&nbsp;&nbsp;&nbsp;&nbsp;#{参数名}：取出参数<br>多个参数：mybatis会做特殊处理，多个参数封装成一个map<br>key：参数param1,param2…<br>value：传入的参数值<br>#{param1}或#{0}：取出参数值1<br><strong>通过注解明确指定封装类型的key：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Employee <span class=\"title\">getEmpByIdAndName</span><span class=\"params\">(@Param(<span class=\"string\">\"id\"</span>)</span>Integer id,@<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span>String name)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>#{指定的key}：取出对应的参数值<br><strong>#{}与${}的区别：</strong><br>#{}：是以预编译的形式，将参数设置到sql；防止sql注入<br>${}：直接拼装到sql中；有安全问题</p>\n<h2 id=\"select元素\"><a href=\"#select元素\" class=\"headerlink\" title=\"select元素\"></a>select元素</h2><p>1、返回list对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getEmpsByNameLike</span><span class=\"params\">(String name)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpsByNameLike\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">    select * from employee where name like #&#123;name&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; employeeList = mapper.getEmpsByNameLike(<span class=\"string\">\"%o%\"</span>);<span class=\"comment\">// 查询name含有o的所有记录</span></span><br></pre></td></tr></table></figure>\n\n<p>2、返回map对象(单条记录)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一条记录的map key:列名   value:对应的值</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">getEmpByIdReturnMap</span><span class=\"params\">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByIdReturnMap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"map\"</span>&gt;</span></span><br><span class=\"line\">     select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Object&gt; map = mapper.getEmpByIdReturnMap(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(map);<span class=\"comment\">// &#123;gender=1, name=zyz001, id=1, email=zyz001@qq.com&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、返回map对象(多条记录)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回多条记录发map key:主键  value:封装后的bean对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 告诉mybatis封装这个map的时候使用哪个属性作为map的主键</span></span><br><span class=\"line\">  <span class=\"meta\">@MapKey</span>(<span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer,Employee&gt; <span class=\"title\">getEmpsByNameLikeReturnMap</span><span class=\"params\">(String name)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpsByNameLikeReturnMap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">       select * from employee where name like #&#123;name&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer,Employee&gt; employeeMap = mapper.getEmpsByNameLikeReturnMap(<span class=\"string\">\"%o%\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"resultMap-自定义结果集封装规则\"><a href=\"#resultMap-自定义结果集封装规则\" class=\"headerlink\" title=\"resultMap 自定义结果集封装规则\"></a>resultMap 自定义结果集封装规则</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- resultMap  自定义结果集规则</span></span><br><span class=\"line\"><span class=\"comment\">            id  方便引用</span></span><br><span class=\"line\"><span class=\"comment\">            type 自定义规则的java类型</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MyEmp\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  id 指定主键封装规则</span></span><br><span class=\"line\"><span class=\"comment\">             column  指定哪一列</span></span><br><span class=\"line\"><span class=\"comment\">             property  指定对应Javabean的哪一个属性--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义普通列封装规则 不指定则自动封装       --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpById\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"MyEmp\"</span>&gt;</span></span><br><span class=\"line\">    select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>联合查询：级联属性封装结果集 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MyEmpAndDept\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"d_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept.departmentName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDept\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"MyEmpAndDept\"</span>&gt;</span></span><br><span class=\"line\">        SELECT e.id id,e.name name,e.gender gender,e.email email,</span><br><span class=\"line\">        e.dept_id dept_id,d.id d_id,d.dept_name dept_name</span><br><span class=\"line\">        from employee e,dept d WHERE e.dept_id=d.id AND e.id=#&#123;id&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> 联合查询：通过association标签封装结果集   </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MyEmpAndDept2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- association 可以指定联合的javabean对象</span></span><br><span class=\"line\"><span class=\"comment\">                    property=\"dept\"  指定javabean中的哪个属性是联合的对象</span></span><br><span class=\"line\"><span class=\"comment\">                    javaType  指定联合对象的类型--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"bean.Department\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"d_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"departmentName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>分部查询：先查询员工，得到员工信息后再根据员工的部门编号，查询部门信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DepartmentMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDeptById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DepartmentMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"dao.DepartmentMapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"bean.Department\"</span>&gt;</span></span><br><span class=\"line\">        select id,dept_name departmentName from dept where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>EmployeeMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  分部查询  可以启动延迟加载--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MyEmpByStep\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义关联对象封装规则</span></span><br><span class=\"line\"><span class=\"comment\">        select 表明当前属性是调用指定的方法后查询出来的结果</span></span><br><span class=\"line\"><span class=\"comment\">        column  指定哪一列的值传给这个方法--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">select</span>=<span class=\"string\">\"dao.DepartmentMapper.getDeptById\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByIdStep\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"MyEmpByStep\"</span>&gt;</span></span><br><span class=\"line\">        select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">setting</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--  开启延迟加载 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lazyLoadingEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 按需加载--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">setting</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用时才进行加载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Employee empByIdStep = mapper.getEmpByIdStep(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(empByIdStep.getName());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/25/mybatis-03/1.jpg\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Employee empByIdStep = mapper.getEmpByIdStep(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(empByIdStep);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/25/mybatis-03/2.jpg\" alt></p>\n<p><strong>Collection集合类型&amp;嵌套结果集：</strong><br>通过部门编号查找所有在该部门的员工，返回一个List员工集合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String departmentName;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Employee&gt; emps;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DepartmentMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDeptByIdPlus</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MyDept\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bean.Department\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"did\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"departmentName\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- collection标签用来定义关联集合类型的属性的封装规则</span></span><br><span class=\"line\"><span class=\"comment\">                    ofType  指定集合里面元素的类型 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"emps\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"eid\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"email\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptByIdPlus\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"MyDept\"</span>&gt;</span></span><br><span class=\"line\">    SELECT d.id did ,dept_name,e.id eid,e.`name`,e.gender,e.email,e.dept_id</span><br><span class=\"line\">    FROM dept d LEFT JOIN employee e ON d.id=e.dept_id WHERE d.id=#&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Department deptByIdPlus = mapper.getDeptByIdPlus(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(deptByIdPlus);</span><br><span class=\"line\">System.out.println(deptByIdPlus.getEmps());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/05/25/mybatis-03/3.jpg\" alt></p>\n<p>结果集包含<code>List&lt;String&gt; orderIds</code>时</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 一对多，变成list&lt;String&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderIds\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"String\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arg</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_Id\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["ORM框架"],"tags":["MyBatis"]},{"title":"工作笔记","url":"/2021/01/18/note-02/","content":"<h2 id=\"强引用、弱引用、软引用和虚引用\"><a href=\"#强引用、弱引用、软引用和虚引用\" class=\"headerlink\" title=\"强引用、弱引用、软引用和虚引用\"></a>强引用、弱引用、软引用和虚引用</h2><p><strong>强引用</strong><br>强引用不会被垃圾回收器回收，内存不足时抛出OOM。<br><code>new</code>创建对象时就是强引用，对象不使用时，将其设置为<code>null</code>，GC才会回收。<a id=\"more\"></a><br>例如<code>ArrayList</code>中的<code>clear()</code>方法：<br><img src=\"/2021/01/18/note-02/1.png\" alt></p>\n<p><strong>软引用</strong><br>如果一个对象只具有软引用，则<strong>内存空间充足时，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存</strong>。只要垃圾回收器没有回收它，该对象就可以被程序使用。<br>当内存不足时，<code>JVM</code>首先将<strong>软引用</strong>中的<strong>对象</strong>引用置为<code>null</code>，然后通知<strong>垃圾回收器</strong>进行回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String strongReference = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 软引用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softReference = <span class=\"keyword\">new</span> SoftReference&lt;String&gt;(str);</span><br></pre></td></tr></table></figure>\n\n<p><strong>弱引用</strong><br>在GC线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<strong>不管当前内存空间足够与否，都会回收它的内存</strong>。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 弱引用</span></span><br><span class=\"line\">WeakReference&lt;String&gt; weakReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(str);</span><br><span class=\"line\"><span class=\"comment\">// 弱引用转强引用</span></span><br><span class=\"line\">String strongReference = weakReference.get();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/01/18/note-02/2.png\" alt><br>因为<code>key</code>是弱引用，当<code>ThreadLocal</code>对象除了<code>Entry</code>对象外没有其他引用的时候，在下次<code>GC</code>就直接回收了，但是<code>value</code>会随着线程生命周期存在，所以就发生了内存泄漏。<br>所以在<code>ThreadLocal</code>的源码中<code>remove</code>中调用<code>expungeStaleEntry</code>函数来解决这种情况：<br><img src=\"/2021/01/18/note-02/3.png\" alt></p>\n<p><strong>虚引用</strong></p>\n<p>在任何时候都可能被垃圾回收器回收。    主要用来<strong>跟踪对象</strong>被垃圾回收器<strong>回收</strong>的活动。</p>\n<blockquote>\n<p>虚引用必须和引用队列(ReferenceQueue)联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">&gt;ReferenceQueue queue = <span class=\"keyword\">new</span> ReferenceQueue();</span><br><span class=\"line\">&gt;<span class=\"comment\">// 创建虚引用，要求必须与一个引用队列关联</span></span><br><span class=\"line\">&gt;PhantomReference pr = <span class=\"keyword\">new</span> PhantomReference(str, queue);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><p><strong>命名规范</strong></p>\n<p>1、名副其实，见名知意<br>2、避免魔法值，使用全局常量、枚举</p>\n<p><strong>函数</strong></p>\n<p>1、一个函数只做一件事，保证短小<br>2、函数名由动词 / 动词+名词 构成<br>3、长而具有描述性的名称比短而令人费解的名称好<br>4、函数传参控制在一个或两个以内，多参数封装成对象<br>5、函数要么修改某对象的状态，要么返回该对象的信息</p>\n<p><strong>注释</strong></p>\n<p>注释是一种必须的恶，用来弥补我们使用代码表达意图时遭遇的失败，尽可能地少些注释，使用代码表达意图。</p>\n<p><strong>格式</strong></p>\n<p>1、函数、相关性不强的代码使用换行隔开<br>2、调用者应该放在被调用者上面</p>\n<p><strong>异常</strong></p>\n<p>不要返回 null 值，在新方法中抛出异常或是返回特例对象，比如空对象、空列表<code>Collections.emptyList()</code>等。<br>不要传递 null 值<br>将异常处理与主要逻辑隔离</p>\n<p><strong>单元测试</strong><br>可读性<br>每个测试一个概念<br><strong>类</strong><br>单一权责原则<br>内聚，类中的每一个变量都被每一个方法使用，则该类具有最大的内聚性</p>\n<h2 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h2><p>在创建对象时，只通过<code>new</code>的动作在堆内存开辟空间，却没有把堆内存空间的地址值赋值给栈内存的某个变量用以存储，也就是创建对象后没有再操作对象。</p>\n<p><strong>匿名对象特点：</strong></p>\n<p>1、由于我们没有记录堆内存对象的地址值，所以只能用一次，再次使用就找不到了。</p>\n<p>2、匿名对象的好处就是使用完毕就是垃圾，可以在垃圾回收器空闲时回收，节省内存空间。</p>\n<p>创建对象后如果没有再对该对象进行别的操作就返回了，可以直接返回匿名对象无需再为匿名对象赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* public User getUser()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t User user = new User();</span></span><br><span class=\"line\"><span class=\"comment\">*    return user;</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换抽象类\"><a href=\"#类型转换抽象类\" class=\"headerlink\" title=\"类型转换抽象类\"></a>类型转换抽象类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 转换类基类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;M&gt; 待转对象类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;N&gt; 预转对象类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-2-20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractConvertor</span>&lt;<span class=\"title\">M</span>, <span class=\"title\">N</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Description: 单个对象转换</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> m 待转对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 转换后的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> N <span class=\"title\">convert</span><span class=\"params\">(M m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Description: 单个对象反向转换</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> n 待转对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 转换后的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> M <span class=\"title\">reverseConvert</span><span class=\"params\">(N n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Description: 集合转换</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> mList 待转对象集合</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 转换后的对象集合</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;N&gt; <span class=\"title\">convert</span><span class=\"params\">(List&lt;M&gt; mList)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;N&gt; nList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mList != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnList = <span class=\"keyword\">new</span> ArrayList&lt;N&gt;(mList.size());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (M m : mList) &#123;</span><br><span class=\"line\">\t\t\t\tnList.add(convert(m));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Description: 集合转换</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> mList 待转对象集合</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 转换后的对象集合</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;M&gt; <span class=\"title\">reverseConvert</span><span class=\"params\">(List&lt;N&gt; nList)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;M&gt; mList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nList != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmList = <span class=\"keyword\">new</span> ArrayList&lt;M&gt;(nList.size());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (N n : nList) &#123;</span><br><span class=\"line\">\t\t\t\tmList.add(reverseConvert(n));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间日期转换工具类\"><a href=\"#时间日期转换工具类\" class=\"headerlink\" title=\"时间日期转换工具类\"></a>时间日期转换工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DateUtile</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年月日时分秒格式的日期转化为字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> date</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">formatDateTime</span><span class=\"params\">(Date date)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == date)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年月日时分秒格式的字符串转化为日期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parseDateTime</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == str)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            date = sdf.parse(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年月日格式的日期转化为字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> date</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">formatDate</span><span class=\"params\">(Date date)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == date)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年月日格式的字符串转化为日期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parseDate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == str)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            date = sdf.parse(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时分秒格式的日期转化为字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> date</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">formatTime</span><span class=\"params\">(Date date)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == date)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH:mm:ss\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时分秒格式的字符串转化为日期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parseTime</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == str)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH:mm:ss\"</span>);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            date = sdf.parse(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["工作笔记"]},{"title":"RabbitMQ整合springboot","url":"/2020/10/26/rabbitmq-02/","content":"<p>springboot整合RabitMQ<a id=\"more\"></a></p>\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写连接信息\"><a href=\"#编写连接信息\" class=\"headerlink\" title=\"编写连接信息\"></a>编写连接信息</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.rabbitmq.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.port</span>=<span class=\"string\">5672</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.virtual-host</span>=<span class=\"string\">/rabbitmq_study</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.username</span>=<span class=\"string\">zyz</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.password</span>=<span class=\"string\">2824199842</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"helloword模型\"><a href=\"#helloword模型\" class=\"headerlink\" title=\"helloword模型\"></a>helloword模型</h2><p>生产者生产消息，消费者一直等待消息到来。<br><img src=\"/2020/10/26/rabbitmq-02/4.png\" alt><br>添加配置类MqConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MqConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建 hello队列 并交给容器管理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">helloQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"><span class=\"meta\">@Test</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发布消息</span></span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"hello,world\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Message：\"</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"work模型\"><a href=\"#work模型\" class=\"headerlink\" title=\"work模型\"></a>work模型</h2><p>多个消费者绑定同一个队列，共同消费其中的消息。解决消息积压问题。<br><img src=\"/2020/10/26/rabbitmq-02/7.png\" alt></p>\n<p>配置类MqConfig中添加work队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">workQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"work\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testWork</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">\"work\"</span>,<span class=\"string\">\"hello,workQueue\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues =<span class=\"string\">\"work\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive1</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"WorkConsumer1接收消息：\"</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"work\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive2</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"WorkConsumer2接收消息：\"</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Publish-Subscribe-Fanout模型\"><a href=\"#Publish-Subscribe-Fanout模型\" class=\"headerlink\" title=\"Publish/Subscribe Fanout模型\"></a>Publish/Subscribe Fanout模型</h2><p>广播模型，每个消费者绑定不同的队列，每个队列绑定在交换机上，生产者生产消息给交换机，交换机负责消息的分发。实现一条消息被多个消费者消费。<br><img src=\"/2020/10/26/rabbitmq-02/8.png\" alt></p>\n<p>在配置类MqConfig中添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 注入队列fanout1</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注入队列fanout2</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注入交换机fanout.ex</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutEx</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout.ex\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定队列fanout1和交换机fanout.ex</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanout1ToEx</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutEx());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定队列fanout2和交换机fanout.ex</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanout2ToEx</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutEx());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testFanout</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"fanout.ex\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"hello,fanout\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleFanout1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者1:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleFanout2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者2:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Publish-Subscribe-Routing-Direct模型\"><a href=\"#Publish-Subscribe-Routing-Direct模型\" class=\"headerlink\" title=\"Publish/Subscribe Routing-Direct模型\"></a>Publish/Subscribe Routing-Direct模型</h2><p>让不同的消息被不同的队列消费<br><img src=\"/2020/10/26/rabbitmq-02/9.png\" alt></p>\n<p>在配置类MqConfig中添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"directQueue1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"directQueue2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"routing.direct.ex\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directQueue1ToExWithLog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"log\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directQueue2ToExWithUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directQueue2ToExWithOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"order\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testRoutingDirect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.direct.ex\"</span>,<span class=\"string\">\"log\"</span>,<span class=\"string\">\"hello,log\"</span>);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.direct.ex\"</span>,<span class=\"string\">\"user\"</span>,<span class=\"string\">\"hello,user\"</span>);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.direct.ex\"</span>,<span class=\"string\">\"order\"</span>,<span class=\"string\">\"hello,order\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"directQueue1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDirectQueue1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者1:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"directQueue2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDirectQueue2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者2:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Publish-Subscribe-Routing-Topic模型\"><a href=\"#Publish-Subscribe-Routing-Topic模型\" class=\"headerlink\" title=\"Publish/Subscribe Routing-Topic模型\"></a>Publish/Subscribe Routing-Topic模型</h2><p>可使用通配符将交换机与队列绑定<br><img src=\"/2020/10/26/rabbitmq-02/10.png\" alt></p>\n<p>在配置类MqConfig中添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topicQueue1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topicQueue2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"routing.topic.ex\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicQueue1ToExWithUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"user.*\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicQueue2ToExWithUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"user.#\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testRoutingTopic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.topic.ex\"</span>,<span class=\"string\">\"user\"</span>,<span class=\"string\">\"hello,user\"</span>);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.topic.ex\"</span>,<span class=\"string\">\"user.info\"</span>,<span class=\"string\">\"hello,user.info\"</span>);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"routing.topic.ex\"</span>,<span class=\"string\">\"user.info.crud\"</span>,<span class=\"string\">\"hello,user.info.crud\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"topicQueue1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleTopicQueue1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者user.*:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"topicQueue2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleTopicQueue2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"消费者user.#:\"</span>+msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">消费者user.*:hello,user.info</span><br><span class=\"line\">消费者user.#:hello,user</span><br><span class=\"line\">消费者user.#:hello,user.info</span><br><span class=\"line\">消费者user.#:hello,user.info.crud</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h2><p>转换为json字符串发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;String,User&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User(<span class=\"number\">111L</span>, <span class=\"string\">\"张小红\"</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">\"userInfo\"</span>,user);</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">\"hello\"</span>, JSON.toJSONString(map));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息监视\"><a href=\"#消息监视\" class=\"headerlink\" title=\"消息监视\"></a>消息监视</h2><p>在配置文件中添加</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启消息到达交换机的确认机制</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.publisher-confirm-type</span>=<span class=\"string\">correlated</span></span><br><span class=\"line\"><span class=\"comment\"># 开启消息未达到队列的回调</span></span><br><span class=\"line\"><span class=\"meta\">spring.rabbitmq.publisher-returns</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>添加配置类RabbitMsgWatch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMsgWatch</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ConfirmCallback</span>, <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ReturnsCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(RabbitMsgWatch<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置监听</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span> <span class=\"comment\">// 后置增强 bean对象创建后开始生效</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfig</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        rabbitTemplate.setConfirmCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        rabbitTemplate.setReturnsCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 消息到交换机的回调</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> correlationData</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ack</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cause</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(JSON.toJSONString(correlationData));</span><br><span class=\"line\">        logger.info(JSON.toJSONString(ack));</span><br><span class=\"line\">        logger.info(JSON.toJSONString(cause));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 消息未到达队列的回调</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> returned</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">returnedMessage</span><span class=\"params\">(ReturnedMessage returned)</span> </span>&#123;</span><br><span class=\"line\">        logger.info(JSON.toJSONString(returned));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息签收\"><a href=\"#消息签收\" class=\"headerlink\" title=\"消息签收\"></a>消息签收</h2><p>消息的签收方式分为，自动签收和手动签收</p>\n<ul>\n<li><p>自动签收</p>\n<p>吞吐量很高，用于数据量比较大，数据不是特别重要的场景，例如日志。消息只要被客户端接收到，无论客户端发生了什么，服务器都会删除这条消息。springboot项目默认开启自动签收。</p>\n</li>\n<li><p>手动签收</p>\n<p>吞吐量低，用于数据重要的场景，例如操作数据库。在sprboot项目中需要手动来开启。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 开启手动ack</span><br><span class=\"line\">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br><span class=\"line\"># 直连交换机开启手动ack</span><br><span class=\"line\">spring.rabbitmq.listener.direct.acknowledge-mode=manual</span><br></pre></td></tr></table></figure>\n\n<p>发送消息时设置消息id</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitTemplate.convertAndSend(<span class=\"string\">\"directs\"</span>, <span class=\"string\">\"error\"</span>, <span class=\"string\">\"我是一个重要消息\"</span>, <span class=\"keyword\">new</span> MessagePostProcessor() &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Message <span class=\"title\">postProcessMessage</span><span class=\"params\">(Message message)</span><span class=\"keyword\">throws</span> AmqpException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//自己给消息设置自定义的ID</span></span><br><span class=\"line\">\tString messageId= UUID.randomUUID().toString().replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"\"</span>);                       \t\tmessage.getMessageProperties().setMessageId(messageId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息的签收与拒收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 参数说明:</span></span><br><span class=\"line\"><span class=\"comment\">* deliveryTag  消息投递ID，要签收的投递ID是多少</span></span><br><span class=\"line\"><span class=\"comment\">* multiple:是否批量签收</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">channel.basicAck(deliveryTag,<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 参数说明:</span></span><br><span class=\"line\"><span class=\"comment\">* deliveryTag  消息投递ID，要签收的投递ID是多少</span></span><br><span class=\"line\"><span class=\"comment\">* multiple:是否批量签收</span></span><br><span class=\"line\"><span class=\"comment\">* requeue: true 代表拒绝签收并把消息重新放回到队列里面  false就直接拒绝</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">channel.basicNack(deliveryTag,<span class=\"keyword\">false</span>,<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>拒收消息，其实是为了保护消息，当消费消息发生异常时，我们可以把消息放在队列里面，重新让别人消费，而不是丢了它！</p>\n<blockquote>\n<p>死循环的处理：</p>\n<p>不签收，并且让它回到队列里面，想法很好，但是很容易造成死循环，因为没有任何人能消费它。</p>\n<p>我们设计一个机制，当一个消息被消费3次还没有消费成功，我们就直接把它记录下来，人工处理！</p>\n<p>消息消费3次（消息的标识，消息的计数）</p>\n<p>我们引入Redis ，使用Redis 计数，若超过3次，直接拒绝消息，并且不回到队列里面</p>\n</blockquote>\n<h2 id=\"重复消费问题\"><a href=\"#重复消费问题\" class=\"headerlink\" title=\"重复消费问题\"></a>重复消费问题</h2><p>重复消费的情况：消费者消费消息之后，还没来得及确认消费，突然宕机了，此时队列里面的该消息并没有被消费掉，就会发生消息重复消费的问题。</p>\n<p>解决重复消费的问题，最终就是要保证消息的幂等性，也就是消费重复消费同一条消息最终得到的结果与消费一条消息一样。</p>\n<p>解决方案：<br>乐观锁机制保证：</p>\n<p>1、通过数据库加入版本号比对</p>\n<p>2、redis中存入全局唯一id比对</p>\n<h2 id=\"延迟消息\"><a href=\"#延迟消息\" class=\"headerlink\" title=\"延迟消息\"></a>延迟消息</h2><p>当发送消息到服务器时，不是马上就放到消息队列中，而是在mq服务器里面建立一个定时任务，在服务器到达延时时间后再执行投递的操作。<br><img src=\"/2020/10/26/rabbitmq-02/1.jpg\" style=\"zoom:60%;\"></p>\n<p>实现细节：</p>\n<img src=\"/2020/10/26/rabbitmq-02/2.jpg\" style=\"zoom:60%;\">\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 延迟队列  </span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">delayQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; args = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 把一个队列修改为延迟队列</span></span><br><span class=\"line\">    <span class=\"comment\">// 消息的最大存活时间</span></span><br><span class=\"line\">    args.put(<span class=\"string\">\"x-message-ttl\"</span>,<span class=\"number\">10</span>*<span class=\"number\">1000</span>) ; </span><br><span class=\"line\">    <span class=\"comment\">// 该队列里面的消息死了，去那个交换机</span></span><br><span class=\"line\">    args.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>,<span class=\"string\">\"DeadLetter.exc\"</span>); </span><br><span class=\"line\">    <span class=\"comment\">// 该队列里面的消息死了，去那个交换机, 由那个路由key</span></span><br><span class=\"line\">    args.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>,<span class=\"string\">\"DeadLetter.key\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"delay\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换机</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">deadLetterExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"DeadLetter.exc\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定死信队列</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">newAndDeadLetterExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(deadlyQueue()).to(deadLetterExchange()).</span><br><span class=\"line\">        with(<span class=\"string\">\"DeadLetter.key\"</span>); <span class=\"comment\">// 死信路由key</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信队列</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadlyQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"deadly.queue\"</span>) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["分布式中间件"],"tags":["RabbitMQ"]},{"title":"秒杀案例","url":"/2021/10/27/rabbitmq-03/","content":"<p>使用Springboot+MyBatis+Redis+Rabbit+Mysql实现商品秒杀的功能。<a id=\"more\"></a></p>\n<h1 id=\"项目的整体流程\"><a href=\"#项目的整体流程\" class=\"headerlink\" title=\"项目的整体流程\"></a>项目的整体流程</h1><p>在秒杀开始之前，将数据库中的参加秒杀的商品同步至Redis中。秒杀开始，用户发起请求，为了流程简洁，直接在网关层中的Controller中负责对部分请求进行过滤，与Redis进行交互。然后发送消息，即将用户请求信息放入Rabbitmq中。在serivce项目中消费消息，即获取到Rabbitmq中的用户请求信息，随后完成与Mysql的交互，将信息持久化到数据库中。<br><img src=\"/2021/10/27/rabbitmq-03/1.png\" style=\"zoom: 50%;\"></p>\n<h1 id=\"网关项目中的Controller\"><a href=\"#网关项目中的Controller\" class=\"headerlink\" title=\"网关项目中的Controller\"></a>网关项目中的Controller</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpikeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBloomFilter bloomFilter;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/doSpike\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSpike</span><span class=\"params\">(Long productId, Long userId)</span> </span>&#123;</span><br><span class=\"line\">        String key = productId + <span class=\"string\">\":\"</span> + userId;</span><br><span class=\"line\">        <span class=\"comment\">// 使用bloomFilter快速判断key值是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bloomFilter.isExist(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"已经参与抢购，不能重复参加！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 请求次数累计</span></span><br><span class=\"line\">        Long count = redisTemplate.opsForValue().increment(<span class=\"string\">\"requestCount:productId:userId:\"</span> + productId + <span class=\"string\">\"_\"</span> + userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count != <span class=\"keyword\">null</span> &amp;&amp; count &gt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"该商品已被抢完！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新redis中的数据</span></span><br><span class=\"line\">        Long finalStock = redisTemplate.opsForValue().decrement(<span class=\"string\">\"product:\"</span> + productId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( finalStock &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"该商品已被抢完！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将请求信息存入mq</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"userId\"</span>, userId);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"productId\"</span>, productId);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">\"spike.queue\"</span>, JSON.toJSONString(map));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"抢购成功！\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>布隆过滤器工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBloomFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate redisTemplate;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 范围</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">2</span> &lt;&lt; <span class=\"number\">29</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 质数的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] seeds = &#123;<span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 特征函数的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HASH_FUN_NUM = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 搞一个数组 专门放特征函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashFun[] hashFuns = <span class=\"keyword\">new</span> HashFun[HASH_FUN_NUM];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyBloomFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; HASH_FUN_NUM; i++) &#123;</span><br><span class=\"line\">            hashFuns[i] = <span class=\"keyword\">new</span> HashFun(size, seeds[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 把字符串做特征函数 然后添加到位图中去</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBloom</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环特征函数的数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HashFun hashFun : hashFuns) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每次计算出一个点位</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = hashFun.getPos(str);</span><br><span class=\"line\">            System.out.println(pos);</span><br><span class=\"line\">            <span class=\"comment\">// 把点位存起来  存在redis的bitmap中去 map&lt;String,BitMap&gt;</span></span><br><span class=\"line\">            redisTemplate.opsForValue().setBit(<span class=\"string\">\"SPIKE\"</span>, pos, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否重复</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">isExist</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算五次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HashFun hashFun : hashFuns) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = hashFun.getPos(str);</span><br><span class=\"line\">            <span class=\"comment\">// 从位图中判断是否存在</span></span><br><span class=\"line\">            Boolean flag = redisTemplate.opsForValue().getBit(<span class=\"string\">\"SPIKE\"</span>, pos);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != flag &amp;&amp; !flag) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 只要有一个点位 不存在 说明不重复</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashFun</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 范围</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * seed 种子</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> seed;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> seed)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.seed = seed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(str)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空字符串的hash值就是0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">            h = seed * h + chars[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPos</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = hash(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash &amp; (size - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Service项目\"><a href=\"#Service项目\" class=\"headerlink\" title=\"Service项目\"></a>Service项目</h1><h2 id=\"数据同步类\"><a href=\"#数据同步类\" class=\"headerlink\" title=\"数据同步类\"></a>数据同步类</h2><p>可写成任务调度的形式，需要在主启动类上添加注解<code>@EnableScheduling</code>，开启任务调度功能。</p>\n<p>这里采用每次项目启动时进行数据同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MysqlToRedis</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProductMapper productMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现CommandLineRunner接口</span></span><br><span class=\"line\"><span class=\"comment\">     * springboot启动后会自动调用重写的 run 方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 查询秒杀商品</span></span><br><span class=\"line\">        List&lt;Product&gt; spikeProducts = productMapper.listSpikeProducts();</span><br><span class=\"line\">        <span class=\"comment\">// 存入redis</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(spikeProducts)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        spikeProducts.forEach(p -&gt; stringRedisTemplate.opsForValue().set(<span class=\"string\">\"product:\"</span> + p.getId(), String.valueOf(p.getStock())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    /**</span></span><br><span class=\"line\"><span class=\"comment\">//     * 每天12点执行</span></span><br><span class=\"line\"><span class=\"comment\">//     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Scheduled(cron=\"0 0 12 * * ? *\")</span></span><br><span class=\"line\"><span class=\"comment\">//    public void spikeTask()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    /**</span></span><br><span class=\"line\"><span class=\"comment\">//     * 项目执行完成后执行</span></span><br><span class=\"line\"><span class=\"comment\">//     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @PostConstruct</span></span><br><span class=\"line\"><span class=\"comment\">//    public void spikeTask()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息监视类\"><a href=\"#消息监视类\" class=\"headerlink\" title=\"消息监视类\"></a>消息监视类</h2><p>用来监听消息和获取消息，从消息队列中获取请求信息，完成与数据库的交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpikeListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IOrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBloomFilter bloomFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"spike.queue\"</span>,concurrency=<span class=\"string\">\"3-5\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleSpike</span><span class=\"params\">(Channel channel, Message message)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取消息队列中的数据</span></span><br><span class=\"line\">        String msg = <span class=\"keyword\">new</span> String(message.getBody());</span><br><span class=\"line\">        JSONObject jsonObject = JSON.parseObject(msg);</span><br><span class=\"line\">        Long userId = jsonObject.getLong(<span class=\"string\">\"userId\"</span>);</span><br><span class=\"line\">        Long productId = jsonObject.getLong(<span class=\"string\">\"productId\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成订单记录 减少库存</span></span><br><span class=\"line\">        orderService.handleOrderAndStock(userId,productId);</span><br><span class=\"line\">        <span class=\"comment\">// 将商品id和用户id信息对应的key加入bloomFilter</span></span><br><span class=\"line\">        bloomFilter.addBloom(productId + <span class=\"string\">\":\"</span> + userId);</span><br><span class=\"line\">        <span class=\"comment\">// 签收</span></span><br><span class=\"line\">        channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理秒杀业务方法\"><a href=\"#处理秒杀业务方法\" class=\"headerlink\" title=\"处理秒杀业务方法\"></a>处理秒杀业务方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(rollbackFor = RuntimeException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">handleOrderAndStock</span>(<span class=\"title\">Long</span> <span class=\"title\">userId</span>, <span class=\"title\">Long</span> <span class=\"title\">productId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 自旋拿锁</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (time &lt; waitTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用redis分布式锁 防止线程安全问题</span></span><br><span class=\"line\">        String lockKey = <span class=\"string\">\"lock:\"</span> + productId;</span><br><span class=\"line\">        String uuid = UUIDUtils.getUUID().toString();</span><br><span class=\"line\">        Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(lockKey, uuid, <span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != lock &amp;&amp; !lock) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 没拿到锁</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            time++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Product product = productMapper.selectById(productId);</span><br><span class=\"line\">                <span class=\"keyword\">long</span> finalStock = product.getStock() - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (finalStock &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    log.info(<span class=\"string\">\"库存不足!\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    product.setStock(finalStock);</span><br><span class=\"line\">                    productMapper.update(product);</span><br><span class=\"line\">                    insert(<span class=\"keyword\">new</span> Order(<span class=\"keyword\">null</span>, userId, productId));</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放锁 使用uuid校验防止误删</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (uuid.equals(stringRedisTemplate.opsForValue().get(lockKey))) &#123;</span><br><span class=\"line\">                    stringRedisTemplate.delete(lockKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"业务方法的优化\"><a href=\"#业务方法的优化\" class=\"headerlink\" title=\"业务方法的优化\"></a>业务方法的优化</h2><p>使用Redisson解决分布式锁问题，保证线程操作的原子性，防止线程释放掉其他线程获取的锁。</p>\n<p>引入Redisson依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.13.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedissonClient <span class=\"title\">redissonClient</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        config.useSingleServer().setTimeout(<span class=\"number\">50000</span>).setAddress(<span class=\"string\">\"redis://127.0.0.1:6379\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改写业务方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(rollbackFor = RuntimeException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">handleOrderAndStock</span>(<span class=\"title\">Long</span> <span class=\"title\">userId</span>, <span class=\"title\">Long</span> <span class=\"title\">productId</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RLock lock = redissonClient.getLock(<span class=\"string\">\"lock:\"</span> + productId);</span><br><span class=\"line\">    lock.lock(<span class=\"number\">30</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Product product = productMapper.selectById(productId);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> finalStock = product.getStock() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finalStock &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"库存不足!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            product.setStock(finalStock);</span><br><span class=\"line\">            productMapper.update(product);</span><br><span class=\"line\">            insert(<span class=\"keyword\">new</span> Order(<span class=\"keyword\">null</span>, userId, productId));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java项目"],"tags":["RabbitMQ"]},{"title":"Redis五大数据类型","url":"/2020/08/05/redis-02/","content":"<p>Redis内部存储的数据为键值对，键的数据类型都是字符串类型，这里说的数据类型是指值的类型。<a id=\"more\"></a></p>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><p>使用场景：</p>\n<ul>\n<li>存储json类型对象</li>\n<li>作为计数器，例如点赞数，粉丝数</li>\n</ul>\n<p>追加字符串，如果当前key不存在就相当于新建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">append name 666</span><br></pre></td></tr></table></figure>\n\n<p>获取字符串长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">strlen name</span><br></pre></td></tr></table></figure>\n\n<p>增加减少</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 1   </span><br><span class=\"line\">OK                      </span><br><span class=\"line\">127.0.0.1:6379&gt; incr views <span class=\"comment\"># 加1      </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2                </span><br><span class=\"line\">127.0.0.1:6379&gt; get views   </span><br><span class=\"line\"><span class=\"string\">\"2\"</span>                            </span><br><span class=\"line\">127.0.0.1:6379&gt; decr views   <span class=\"comment\"># 减1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1      </span><br><span class=\"line\">127.0.0.1:6379&gt; get views   </span><br><span class=\"line\"><span class=\"string\">\"1\"</span>                         </span><br><span class=\"line\">127.0.0.1:6379&gt; incrby views 10   <span class=\"comment\"># 设置步长，加10</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11    </span><br><span class=\"line\">127.0.0.1:6379&gt; get views    </span><br><span class=\"line\"><span class=\"string\">\"11\"</span>                         </span><br><span class=\"line\">127.0.0.1:6379&gt; decrby views 10   </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                     </span><br><span class=\"line\">127.0.0.1:6379&gt; get views       </span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure>\n\n<p>截取字符串</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get demo</span><br><span class=\"line\"><span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange demo 0 4                                                                      </span><br><span class=\"line\"><span class=\"string\">\"hello\"</span>   </span><br><span class=\"line\">127.0.0.1:6379&gt; getrange demo 0 -1  <span class=\"comment\"># 获取全部字符串                                              </span></span><br><span class=\"line\"><span class=\"string\">\"hello,world\"</span></span><br></pre></td></tr></table></figure>\n\n<p>替换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get demo</span><br><span class=\"line\"><span class=\"string\">\"hello,world\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setrange demo 6 redis!   <span class=\"comment\"># 替换指定位置开始的字符串                                                              (integer) 12                                                                                           127.0.0.1:6379&gt; get demo                                                              </span></span><br><span class=\"line\"><span class=\"string\">\"hello,redis!\"</span></span><br></pre></td></tr></table></figure>\n\n<p>设置键值对的时候指定有效期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">setex key1 10 <span class=\"string\">\"hello\"</span> <span class=\"comment\"># 设置key1的值为hello,10秒后过期</span></span><br></pre></td></tr></table></figure>\n\n<p>如果key不存在就创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">setnx key2 <span class=\"string\">\"hello2\"</span></span><br></pre></td></tr></table></figure>\n\n<p>批量设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v1 k3 v3     </span><br><span class=\"line\">OK                             </span><br><span class=\"line\">127.0.0.1:6379&gt; keys *     </span><br><span class=\"line\">1) <span class=\"string\">\"k3\"</span>                </span><br><span class=\"line\">2) <span class=\"string\">\"k1\"</span>                 </span><br><span class=\"line\">3) <span class=\"string\">\"k2\"</span>                </span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4   <span class=\"comment\"># 原子操作</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0         </span><br><span class=\"line\">127.0.0.1:6379&gt; keys *   </span><br><span class=\"line\">1) <span class=\"string\">\"k3\"</span>                  </span><br><span class=\"line\">2) <span class=\"string\">\"k1\"</span>              </span><br><span class=\"line\">3) <span class=\"string\">\"k2\"</span></span><br></pre></td></tr></table></figure>\n\n<p>设置对象 user:{id}.{filed}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zyz user:1:age 21</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\"><span class=\"string\">\"zyz\"</span></span><br><span class=\"line\"><span class=\"string\">\"21\"</span></span><br></pre></td></tr></table></figure>\n\n<p>先get后set</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getset name zyz  <span class=\"comment\"># key值不存在，先返回nil,再设置</span></span><br><span class=\"line\">(nil)                         </span><br><span class=\"line\">127.0.0.1:6379&gt; get name     </span><br><span class=\"line\"><span class=\"string\">\"zyz\"</span>                     </span><br><span class=\"line\">127.0.0.1:6379&gt; getset name zyz666  <span class=\"comment\"># key存在，返回key值，再设置</span></span><br><span class=\"line\"><span class=\"string\">\"zyz\"</span>                             </span><br><span class=\"line\">127.0.0.1:6379&gt; get name     </span><br><span class=\"line\"><span class=\"string\">\"zyz666\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>是一个双向链表结构，可以用来存储一组数据；从这个列表的前端和后端取数据效率非常高。</p>\n<p>使用场景：</p>\n<ul>\n<li>模拟队列，堆栈</li>\n<li>朋友圈点赞，查询点赞数，点赞人的信息等</li>\n</ul>\n<p>插入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush list 1   <span class=\"comment\"># 相当于压栈，操作第一个元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                    </span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list 2    </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2               </span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list 3       </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3              </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 2         </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span>                </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>               </span><br><span class=\"line\">3) <span class=\"string\">\"1\"</span>             </span><br><span class=\"line\">127.0.0.1:6379&gt; rpush list 4   <span class=\"comment\"># 相当于从队列的尾部插入 ，操作最后一个元素  </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4                </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1   </span><br><span class=\"line\"> 1) <span class=\"string\">\"3\"</span>      </span><br><span class=\"line\"> 2) <span class=\"string\">\"2\"</span>     </span><br><span class=\"line\"> 3) <span class=\"string\">\"1\"</span>       </span><br><span class=\"line\"> 4) <span class=\"string\">\"4\"</span></span><br></pre></td></tr></table></figure>\n\n<p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1      </span><br><span class=\"line\">1) \"3\"        </span><br><span class=\"line\">2) \"2\"         </span><br><span class=\"line\">3) \"1\"        </span><br><span class=\"line\">4) \"4\"      </span><br><span class=\"line\">127.0.0.1:6379&gt; lpop list   # 移除第一个</span><br><span class=\"line\">\"3\"                     </span><br><span class=\"line\">127.0.0.1:6379&gt; Rpop list   # 移除最后一个                        </span><br><span class=\"line\">\"4\"  </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1     </span><br><span class=\"line\">1) \"2\"                           </span><br><span class=\"line\">2) \"1\"</span><br></pre></td></tr></table></figure>\n\n<p>获取值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lindex list 0                           </span><br><span class=\"line\"><span class=\"string\">\"2\"</span></span><br></pre></td></tr></table></figure>\n\n<p>查询list长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; llen list   </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n\n<p>根据指定的值删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1  </span><br><span class=\"line\">1) <span class=\"string\">\"4\"</span>                            </span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span>              </span><br><span class=\"line\">3) <span class=\"string\">\"2\"</span>         </span><br><span class=\"line\">4) <span class=\"string\">\"1\"</span>        </span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list  1 4  <span class=\"comment\"># 移除value为4的从头开始的第一个值   </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1              </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1   </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span>                         </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>                                                                         </span><br><span class=\"line\">3) <span class=\"string\">\"1\"</span></span><br></pre></td></tr></table></figure>\n\n<p>截取元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1    </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span>                    </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>                </span><br><span class=\"line\">3) <span class=\"string\">\"1\"</span>               </span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim list 0 1   <span class=\"comment\"># 通下标[0]截取指定长度[1] </span></span><br><span class=\"line\">OK                     </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1     </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span>                                                        </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span></span><br></pre></td></tr></table></figure>\n\n<p>将原列表的最后一个元素移到新的列表中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1      </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span>                                </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>                            </span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush list list1  <span class=\"comment\"># 将list最后一个元素移到list1中    </span></span><br><span class=\"line\"><span class=\"string\">\"2\"</span>                      </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list1 0 -1   </span><br><span class=\"line\">1) <span class=\"string\">\"2\"</span>                 </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1    </span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span></span><br></pre></td></tr></table></figure>\n\n<p>更新值，需要先判断list是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists list                                       </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0  </span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list value1                                           </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1   </span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 value2                                                        </span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>从指定元素值前面/后面插入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1  </span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span>                           </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>             </span><br><span class=\"line\">127.0.0.1:6379&gt; linsert list after 2 3   <span class=\"comment\"># 在值为2的元素后面插入一个值为3的元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3                         </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1    </span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span>                            </span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span>             </span><br><span class=\"line\">3) <span class=\"string\">\"3\"</span>                </span><br><span class=\"line\">127.0.0.1:6379&gt; linsert list before 1 0    <span class=\"comment\"># 在值为1的元素前面插入一个值为0的元素  </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4                         </span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1      </span><br><span class=\"line\">1) <span class=\"string\">\"0\"</span>                            </span><br><span class=\"line\">2) <span class=\"string\">\"1\"</span>                         </span><br><span class=\"line\">3) <span class=\"string\">\"2\"</span>                                                           </span><br><span class=\"line\">4) <span class=\"string\">\"3\"</span></span><br></pre></td></tr></table></figure>\n\n<p>List实际上是一个双向链表，前后都可以插入值；key不存在创建新的节点，key存在，新增内容；两边插入或改动效率最高。</p>\n<p>消息队列（Lpush，Rpop），栈（Lpush，Lpop）</p>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p><strong>值不可重复</strong>，值则相同添加失败。</p>\n<p>使用场景：</p>\n<ul>\n<li>去重</li>\n<li>抽奖</li>\n<li>set运算，交集并集补集差集运算，例如好友推荐</li>\n</ul>\n<p>添加值、查看所有值、判断值是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd myset aaa   </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                     </span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset bbb     </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                     </span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset    </span><br><span class=\"line\">1) <span class=\"string\">\"bbb\"</span>              </span><br><span class=\"line\">2) <span class=\"string\">\"aaa\"</span>              </span><br><span class=\"line\">127.0.0.1:6379&gt; sismember myset aaa  </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                  </span><br><span class=\"line\">127.0.0.1:6379&gt; sismember myset ccc                              </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>移除指定值的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset    </span><br><span class=\"line\">1) <span class=\"string\">\"bbb\"</span>              </span><br><span class=\"line\">2) <span class=\"string\">\"aaa\"</span>    </span><br><span class=\"line\">127.0.0.1:6379&gt; srem myset bbb      </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1                                                                                        </span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset   </span><br><span class=\"line\">1) <span class=\"string\">\"aaa\"</span></span><br></pre></td></tr></table></figure>\n\n<p>随机挑选元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset    </span><br><span class=\"line\">1) <span class=\"string\">\"bbb\"</span>                         </span><br><span class=\"line\">2) <span class=\"string\">\"aaa\"</span>                    </span><br><span class=\"line\">3) <span class=\"string\">\"ccc\"</span>               </span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset    </span><br><span class=\"line\"><span class=\"string\">\"ccc\"</span>                    </span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset        </span><br><span class=\"line\"><span class=\"string\">\"bbb\"</span>                        </span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset                                                         </span><br><span class=\"line\"><span class=\"string\">\"ccc\"</span></span><br></pre></td></tr></table></figure>\n\n<p>随机删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n\n<p>移动指定元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset    </span><br><span class=\"line\">1) <span class=\"string\">\"bbb\"</span>                         </span><br><span class=\"line\">2) <span class=\"string\">\"aaa\"</span>                    </span><br><span class=\"line\">3) <span class=\"string\">\"ccc\"</span>  </span><br><span class=\"line\">127.0.0.1:6379&gt; smove myset myset2 aaa</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">\"bbb\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"ccc\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset2</span><br><span class=\"line\">1) <span class=\"string\">\"aaa\"</span></span><br></pre></td></tr></table></figure>\n\n<p>差集，交集，并集==&gt;应用场景：B站，微博的共同关注等等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd myset a</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset b</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 d</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 e</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff myset myset2</span><br><span class=\"line\">1) <span class=\"string\">\"a\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"b\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sinter myset myset2</span><br><span class=\"line\">1) <span class=\"string\">\"c\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sunion myset myset2</span><br><span class=\"line\">1) <span class=\"string\">\"d\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"c\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"b\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"a\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"e\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Zset（有序集合）\"><a href=\"#Zset（有序集合）\" class=\"headerlink\" title=\"Zset（有序集合）\"></a>Zset（有序集合）</h2><p>可排序的set，每一个添加值都有一个对应的分数，可通过这个分数进行排序</p>\n<p>使用场景：</p>\n<ul>\n<li>海量数据的排行，例如天梯排名</li>\n</ul>\n<p>添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myzset 1 value1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myzset 2 value2 3 value3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"value1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"value2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"value3\"</span></span><br></pre></td></tr></table></figure>\n\n<p>排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore myzset -inf +inf <span class=\"comment\"># 最小值到最大值排序</span></span><br><span class=\"line\">1) <span class=\"string\">\"value1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"value2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"value3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrevrange myzset 0 -1 <span class=\"comment\"># 从大到小</span></span><br><span class=\"line\">1) <span class=\"string\">\"value3\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"value2\"</span></span><br><span class=\"line\">1) <span class=\"string\">\"value1\"</span></span><br></pre></td></tr></table></figure>\n\n<p>移除元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zrem myzset value1</span><br></pre></td></tr></table></figure>\n\n<p>获取个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zcard myzset</span><br></pre></td></tr></table></figure>\n\n<p>获取指定区间的成员数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zcount myzset 1 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><p>可以理解为Map集合，key-map，值是一个Map集合</p>\n<p>使用场景：</p>\n<ul>\n<li>与String+json相比，存储对象的属性需要频繁修改时，使用Hash，可以针对某个属性单独修改，没有序列化，也不需要修改整个对象。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset myhash field1 aaa <span class=\"comment\"># 添加一个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget myhash field1 <span class=\"comment\"># 获取一个指定字段的值</span></span><br><span class=\"line\"><span class=\"string\">\"aaa\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field2 bbb field3 ccc <span class=\"comment\"># 添加多个键值对</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class=\"comment\"># 获取多个字段值</span></span><br><span class=\"line\">1) <span class=\"string\">\"aaa\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"bbb\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash <span class=\"comment\"># 获取全部数据</span></span><br><span class=\"line\">1) <span class=\"string\">\"field1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"aaa\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"field2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"bbb\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"field3\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"ccc\"</span></span><br></pre></td></tr></table></figure>\n\n<p>获取长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hlen myhash</span><br></pre></td></tr></table></figure>\n\n<p>判断字段是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hexists myhash field1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists myhash aaaa</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>获取所有字段/值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hkeys myhash</span><br><span class=\"line\">1) <span class=\"string\">\"field1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"field2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"field3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hvals myhash</span><br><span class=\"line\">1) <span class=\"string\">\"aaa\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"bbb\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"ccc\"</span></span><br></pre></td></tr></table></figure>\n\n<p>自增，自减</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hincrby myhash field1 1</span><br><span class=\"line\">hincrby myhash field1 -1</span><br></pre></td></tr></table></figure>\n\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"Spring简介、IOC控制反转","url":"/2020/06/01/spring-01/","content":"<h2 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h2><p>Spring用于减轻项目模块之间的管理，类与类之间的管理，帮助开发人员创建对象，管理对象之间的关系。<br>Spring核心技术是IOC，AOP。能实现模块之间的，类之间的解耦合。<a id=\"more\"></a><br>优点：<br>1、轻量<br>2、针对接口编程，IOC解耦合<br>3、AOP面向切面编程<br>4、方便集成其他各种框架</p>\n<h2 id=\"Spring体系结构\"><a href=\"#Spring体系结构\" class=\"headerlink\" title=\"Spring体系结构\"></a>Spring体系结构</h2><p><img src=\"/2020/06/01/spring-01/1.jpg\" alt></p>\n<p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。</p>\n<p> Spring DAO，  Spring Web，SpringMVC，Spring AOP，Spring上下文，Spring ORM，核心容器。所以，Spring是一系列轻量级Java EE框架的集合。</p>\n<h2 id=\"IOC控制反转\"><a href=\"#IOC控制反转\" class=\"headerlink\" title=\"IOC控制反转\"></a>IOC控制反转</h2><p>Inversion of control：控制反转，是一个概念，一种思想。<br>是指把对象的创建、赋值、管理工作都交给代码以外的容器实现，控制反转就是对对象控制权的转移，由程序代码本身反转到了程序外部容器。<br><strong>控制：</strong>创建对象，对象属性的赋值，对象之间关系的管理。<br><strong>反转：</strong>把原来开发人员管理，创建对象的权力交给代码之外的容器。由容器代替开发人员管理对象。<br>正转：由开发人员在代码中，使用new 构造方法 创建对象，开发人员主动管理对象。<br>容器：一个服务器软件，一个框架(Spring)。<br>IOC的好处：减少对代码的改动，也能实现不同的功能。实现解耦合。<br>IOC的体现：Servlet ,Tomcat作为容器创建Servlet对象。<br>IOC的技术实现：<br>DI(Dependency Injection) 依赖注入，只需要在程序中提供对象的名称，至于对象是如何在容器中创建，赋值，查找都是由容器内部实现的。<br>Spring使用DI实现了IOC的功能，Spring底层创建对象使用的是反射机制。<br>Spring是一个容器。</p>\n<h2 id=\"使用Spring\"><a href=\"#使用Spring\" class=\"headerlink\" title=\"使用Spring\"></a>使用Spring</h2><h3 id=\"1、使用Maven创建一个普通的java项目\"><a href=\"#1、使用Maven创建一个普通的java项目\" class=\"headerlink\" title=\"1、使用Maven创建一个普通的java项目\"></a>1、使用Maven创建一个普通的java项目</h3><p><img src=\"/2020/06/01/spring-01/2.jpg\" alt></p>\n<h3 id=\"2、引入Spring依赖\"><a href=\"#2、引入Spring依赖\" class=\"headerlink\" title=\"2、引入Spring依赖\"></a>2、引入Spring依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>插件可加可不加，指明jdk版本(前面已经指定)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span>ss</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、创建Spring配置文件\"><a href=\"#3、创建Spring配置文件\" class=\"headerlink\" title=\"3、创建Spring配置文件\"></a>3、创建Spring配置文件</h3><p>bean.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 声明bean 一个bean标签声明一个对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"someService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.service.impl.SomeServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、使用spring创建对象，调用对象方法\"><a href=\"#4、使用spring创建对象，调用对象方法\" class=\"headerlink\" title=\"4、使用spring创建对象，调用对象方法\"></a>4、使用spring创建对象，调用对象方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Spring 容器创建对象</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、指明spring配置文件名称</span></span><br><span class=\"line\">    String config = <span class=\"string\">\"beans.xml\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 2、创建spring容器对象 ApplicationContext</span></span><br><span class=\"line\">    <span class=\"comment\">// 从类路径加载配置文件（创建配置文件中的所有对象）</span></span><br><span class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">    <span class=\"comment\">// 3、从容器中获取对象</span></span><br><span class=\"line\">    SomeService someService = (SomeService) applicationContext.getBean(<span class=\"string\">\"someService\"</span>);<span class=\"comment\">// 通过id</span></span><br><span class=\"line\">    someService.doSome();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bean定义的方式\"><a href=\"#Bean定义的方式\" class=\"headerlink\" title=\"Bean定义的方式\"></a>Bean定义的方式</h2><h3 id=\"基于xml文件\"><a href=\"#基于xml文件\" class=\"headerlink\" title=\"基于xml文件\"></a>基于xml文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--普通类型  set注入--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myPerson\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.Person\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10001\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Tony\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引用类型  set注入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"school\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mySchool\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mySchool\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.School\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1001\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"schoolName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"长江大学\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  构造注入</span></span><br><span class=\"line\"><span class=\"comment\"> constructor-arg  形参属性</span></span><br><span class=\"line\"><span class=\"comment\">        name   构造方法形参名</span></span><br><span class=\"line\"><span class=\"comment\">\t\tindex  表示构造方法的参数位置  从左到右0,1,2 ...</span></span><br><span class=\"line\"><span class=\"comment\">        普通类型   value</span></span><br><span class=\"line\"><span class=\"comment\">        引用类型   ref</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myPersonConstructor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.Person\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10002\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"zyz\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"school\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mySchool\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mySchool\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.School\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1001\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"schoolName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"长江大学\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myPersonConstructor2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.Person\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10003\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wd\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mySchool2\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mySchool2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.School\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1002\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"schoolName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清华大学\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/06/01/spring-01/3.jpg\" alt></p>\n<p>引用类型自动注入：</p>\n<ul>\n<li><p>byName：java类中引用类型属性名 与spring配置文件中的bean标签中的id值相同</p>\n<p>  <img src=\"/2020/06/01/spring-01/4.jpg\" alt></p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myPersonConstructor2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.Person\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10003\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wd\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"school\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.bean.School\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1002\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"schoolName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"清华大学\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>byType：使用byType 方式自动注入，要求：配置文件中被调用者bean 的class 属性指定的类，要与代码中调用者bean 类的某引用类型属性类型同源。即要么相同，要么有is-a 关系（子类，或是实现类）。<strong>但这样的同源的被调用bean 只能有一个。</strong></p>\n  <figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"person\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zyz.bean.Person\"</span> autowire=<span class=\"string\">\"byType\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"id\"</span> value=<span class=\"string\">\"10004\"</span>/&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"name\"</span> value=<span class=\"string\">\"wd788\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"school\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zyz.bean.School\"</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"id\"</span> value=<span class=\"string\">\"1001\"</span>/&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"schoolName\"</span> value=<span class=\"string\">\"北京大学\"</span>/&gt;</span><br><span class=\"line\"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"基于注解\"><a href=\"#基于注解\" class=\"headerlink\" title=\"基于注解\"></a>基于注解</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value相当于bean标签中的id值</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"myStudent\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中声明组件扫描器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--   声明组件扫描器  组件就是java对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.component\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，Spring 还提供了3 个创建对象的注解：<br>@Repository 用于对DAO 实现类进行注解<br>@Service 用于对Service 实现类进行注解<br>@Controller 用于对Controller 实现类进行注解<br>这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义，@Service创建业务层对象，业务层对象可以加入事务功能，@Controller 注解创建的对象可以作为处理器接收用户的请求。<br>@Repository，@Service，@Controller 是对@Component 注解的细化，标注不同层的对象。即持久层对象，业务层对象，控制层对象。</p>\n<p><code>@Autowired</code>注入</p>\n<ul>\n<li><p>byType自动注入（默认）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> School school;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性赋值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"1001\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"北京大学\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schoolName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>byName自动注入（当一个接口有多个实现类时，需要使用此方式注入）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"mySchool\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> School school;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性赋值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"mySchool\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"1001\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"北京大学\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String schoolName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>JDK注解<code>@Resource</code>自动注入</strong></p>\n<ul>\n<li><p>byName（默认）。如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略，如果找不到相同名称的，就会去找相同类型的，再找不到才报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> School school;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"bean-作用域\"><a href=\"#bean-作用域\" class=\"headerlink\" title=\"bean 作用域\"></a>bean 作用域</h2><p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说<strong>Spring容器中的Bean本身不具备线程安全的特性</strong>，但是具体还是要结合具体scope的Bean去研究。</p>\n<p>1、singleton:单例，默认作用域。</p>\n<p>2、prototype:原型，每次创建一个新对象。</p>\n<p>3、request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。</p>\n<p>4、session:会话，同一个会话共享一个实例，不同会话使用不用的实例。</p>\n<p>5、global-session:全局会话，所有会话共享一个实例。</p>\n<p>对于单例Bean,所有线程都共享一个单例实例Bean,因此是存在资源的竞争。</p>\n<p>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>\n<p>对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法，比如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等。<br><strong>注： Spring容器本身并没有提供线程安全的策略，因此是否线程安全完全取决于Bean本身的特性。</strong></p>\n<blockquote>\n<p>使用ThreadLocal</p>\n</blockquote>\n<p>使得多线程场景下，多个线程对这个单例Bean的成员变量并不存在资源的竞争，因为ThreadLocal为每个线程保存线程私有的数据。</p>\n<h2 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h2><p><strong>实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁</strong></p>\n<ol>\n<li><p>通过构造器或工厂方法<strong>创建bean实例</strong></p>\n</li>\n<li><p>为bean的<strong>属性设置值</strong>和对其他bean的引用</p>\n</li>\n<li><p>将bean实例传递给bean后置处理器的<strong>postProcessBeforeInitialization()</strong>方法</p>\n</li>\n<li><p>调用bean的<strong>初始化</strong>方法</p>\n</li>\n<li><p>将bean实例传递给bean后置处理器的<strong>postProcessAfterInitialization()</strong>方法</p>\n</li>\n<li><p>使用bean</p>\n</li>\n<li><p>当容器关闭时调用bean的<strong>销毁</strong>方法</p>\n</li>\n</ol>\n<h2 id=\"Spring-中使用的设计模式\"><a href=\"#Spring-中使用的设计模式\" class=\"headerlink\" title=\"Spring 中使用的设计模式\"></a>Spring 中使用的设计模式</h2><ul>\n<li><strong>工厂设计模式</strong> : Spring使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li>\n<li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li>\n<li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li>\n<li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>\n<li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li>\n<li><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li>\n<li>……</li>\n</ul>\n","categories":["Spring"],"tags":["Spring"]},{"title":"AOP面向切面编程","url":"/2020/06/12/spring-02/","content":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p><img src=\"/2020/06/12/spring-02/1.jpg\" alt></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>角色分析：<br>抽象角色：一般使用接口或抽象类来实现。一是通过继承被代理类的方式实现其子类，重写父类方法；二是与被代理类实现共同的一个接口。<br>真实角色：被代理的角色。<br>代理角色：代理真实角色，执行附属操作。<br>客户：使用代理角色来进行一些操作。<br>代码步骤 ：</p>\n<p>1、接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Rent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、真实角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Host提供租房服务~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、代理角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Host host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Host host)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.host = host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 代理Host对象提供服务</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        host.rent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、客户端访问代理角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host();</span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(host);</span><br><span class=\"line\">        proxy.rent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好处：<br>1、可以使真实角色的操作更加纯粹，不用去关注其他公共的业务<br>2、公共业务交给代理角色，实现业务分工<br>3、公共业务发生拓展时，方便集中管理<br>缺点：<br>一个真实角色就会产生一个代理角色，造成代码量翻倍</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>代理类是动态生成的，不是我们直接写好的。交给程序去自动生成代理类（在程序运行期间由JVM根据反射等机制动态的生成源码 ）。<br>动态代理分为两大类：基于接口的JDK动态代理；基于类cglib动态代理。<br>1、接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、真实角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"添加\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"查询\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、实现InvocationHandler接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTarget</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过代理对象执行方法时，会调用invoke</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行了MyInvocationHandler中的invoke方法\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 执行目标类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.invoke(target,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建并使用代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        UserServiceImpl target = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 创建MyInvocationHandler对象</span></span><br><span class=\"line\">        MYInvocationHandler myInvocationHandler = <span class=\"keyword\">new</span> MyInvocationHandler();</span><br><span class=\"line\">        myInvocationHandler.setTarget(target);</span><br><span class=\"line\">        <span class=\"comment\">// 使用Proxy创建代理对象</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), myInvocationHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 通过代理执行方法，会调用myIvocationHandler中的invoke方法</span></span><br><span class=\"line\">        proxy.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>动态代理作用：<br>1、在目标类源代码不改变的情况下，增加功能。<br>2、减少代码重复<br>3、专注业务逻辑代码<br>4、解耦合</p>\n<h2 id=\"AOP定义\"><a href=\"#AOP定义\" class=\"headerlink\" title=\"AOP定义\"></a>AOP定义</h2><p>面向切面编程，基于动态代理，可使用jdk,cglib两种代理方式。<br>Spring会根据具体的Bean是否具有实现接口去选择动态代理方式，如果有接口，使用的是Jdk的动态代理方式，如果没有接口，使用的是cglib的动态代理方式。<br>AOP就是动态代理的规范化，供开发人员以统一的方式使用动态代理。<br>比如你写了个方法用来做一些事情，但这个事情要求登录用户才能做，你就可以在这个方法执行前验证一下，执行后记录下操作日志，把前后的这些与业务逻辑无关的代码抽取出来放一个类里，这个类就是切面（Aspect），这个被环绕的方法就是切点（Pointcut），你所做的执行前执行后的这些方法统一叫做增强处理（Advice）。</p>\n<p>面向切面编程实现：<br>1、需要在分析项目功能时，找出切面<br>2、合理的安排切面的执行时间（目标方法前，还是目标方法后）—-&gt;通知注解<br>3、合理的安排切面执行的位置（在哪个类，哪个方法增加增强方法）—-&gt;切入点表达式</p>\n<h2 id=\"AOP实现\"><a href=\"#AOP实现\" class=\"headerlink\" title=\"AOP实现\"></a>AOP实现</h2><p>aspectj：开源的aop实现框架<br>加入aspectj依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1、真实对象的接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SomeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSome</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、实现真实对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">SomeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSome</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"doSome方法执行\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、切面对象，用于给业务增加功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Aspect</span> 表示当前类是切面类。</span></span><br><span class=\"line\"><span class=\"comment\"> * 切面类：用于给业务方法增加功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Before</span>  前置通知 </span></span><br><span class=\"line\"><span class=\"comment\">     * 定义方法，实现切面功能</span></span><br><span class=\"line\"><span class=\"comment\">     * 必须为  public void</span></span><br><span class=\"line\"><span class=\"comment\">     * 切入点表达式：execution(访问修饰符 返回值 包名.类名.方法名(方法参数) 异常类型)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**<span class=\"doctag\">@Pointcut</span>(\"execution(* com.zyz.service..*.pageList*(..))\")</span></span><br><span class=\"line\"><span class=\"comment\">    *public void pagePointcut()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    *<span class=\"doctag\">@Before</span>(\"pagePointcut()\")</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(value = <span class=\"string\">\"execution(public void com.zyz.SomeServiceImpl.doSome())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mybefore</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;<span class=\"comment\">// JoinPoint 获取执行方法的信息  必须是第一个参数</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取方法名</span></span><br><span class=\"line\">        System.out.println(joinPoint.getSignature().getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置通知：\"</span>+<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>常用Pointcut表达式</p>\n<p><strong>拦截指定注解下的所有方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.zyz.advice.aspect.Log)\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截所有公共方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * *(..))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截以set开头的所有方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* set*(..))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截类或接口中的所有方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.zyz.service.xxxService.*(..))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截包中定义的方法，不包含子包中的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.zyz.service.*.*(..))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截包或者子包中定义的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.zyz.service..*.*(..))\"</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>4、添加配置文件，由spring创建需要的对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    将对象交给spring容器，由spring容器统一创建，管理对象--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    声明目标对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"someService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.SomeServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    声明切面对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myAspection\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.MyAspect\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 声明自动代理生成器：使用aspectj框架内部的功能，创建目标对象的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">    将spring容器中所有目标对象，一次性生成代理对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5、测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String config = <span class=\"string\">\"applicationContext.xml\"</span>;</span><br><span class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">    SomeService proxy = (SomeService) applicationContext.getBean(<span class=\"string\">\"someService\"</span>);</span><br><span class=\"line\">    proxy.doSome();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br><img src=\"/2020/06/12/spring-02/2.jpg\" alt></p>\n<p>后置通知：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * returning   目标方法返回值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> res</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@AfterReturning</span>(value = <span class=\"string\">\"execution(public Integer com.zyz.SomeService.doOther(Integer))\"</span>,returning = <span class=\"string\">\"res\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myAfterReturn</span><span class=\"params\">(Object res)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"后置通知  获取的返回值为\"</span>+res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>环绕通知：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> proceedingJoinPoint  固定参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Around</span>(value = <span class=\"string\">\"execution(public Integer com.zyz.SomeService.doAround(Integer))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">myAround</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"环绕通知:目标方法前\"</span>);</span><br><span class=\"line\">    Object res = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    res = proceedingJoinPoint.proceed();<span class=\"comment\">// method.invoke()</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"目标方法返回值：\"</span>+res);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"环绕通知：目标方法后\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Spring"],"tags":["Spring"]},{"title":"Spring集成MyBatis","url":"/2020/06/16/spring-03/","content":"<p>整合的想法：使用spring的ioc核心技术， 把mybatis中使用的对象交给spring统一创建和管理。spring是容器，存放项目中使用的各种对象，例如Service对象，Dao对象，工具类对象等等。<a id=\"more\"></a></p>\n<p>项目结构：<br><img src=\"/2020/06/16/spring-03/3.jpg\" alt></p>\n<h2 id=\"1、在pom-xml文件中添加依赖及插件\"><a href=\"#1、在pom-xml文件中添加依赖及插件\" class=\"headerlink\" title=\"1、在pom.xml文件中添加依赖及插件\"></a>1、在pom.xml文件中添加依赖及插件</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    Spring事务--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    MyBatis依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span><span class=\"comment\">&lt;!--所在的目录--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span><span class=\"comment\">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、交给spring的mybatis对象\"><a href=\"#2、交给spring的mybatis对象\" class=\"headerlink\" title=\"2、交给spring的mybatis对象\"></a>2、交给spring的mybatis对象</h2><p>1.数据源</p>\n<p>2.SqlSessionFactory对象</p>\n<p>3.Dao对象</p>\n<p>4.Service对象<br>创建spring配置文件applicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  将数据库配置文件写入单独的文件中        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明数据源  用于连接数据库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.maxActive&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- mybatis主配置文件的位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybatisConfig.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明Dao类</span></span><br><span class=\"line\"><span class=\"comment\">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  声明Service类  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"employeeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.service.impl.EmployeeServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"employeeDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"employeeDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jdbc.propeties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">2824199842</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.maxActive</span>=<span class=\"string\">20</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、mybatis配置文件\"><a href=\"#3、mybatis配置文件\" class=\"headerlink\" title=\"3、mybatis配置文件\"></a>3、mybatis配置文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  打印日志--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"STDOUT_LOGGING\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  注册映射文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、在dao包下添加sql映射文件\"><a href=\"#4、在dao包下添加sql映射文件\" class=\"headerlink\" title=\"4、在dao包下添加sql映射文件\"></a>4、在dao包下添加sql映射文件</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span><br><span class=\"line\">        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span><br><span class=\"line\">&lt;mapper namespace=\"com.zyz.dao.EmployeeDao\"&gt;</span><br><span class=\"line\">    &lt;insert id=\"insertEmp\" useGeneratedKeys=\"true\" keyProperty=\"id\"&gt;</span><br><span class=\"line\">        <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee(<span class=\"keyword\">name</span>,gender,email,dept_id) <span class=\"keyword\">values</span>(<span class=\"comment\">#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;)</span></span><br><span class=\"line\">    &lt;/<span class=\"keyword\">insert</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>=<span class=\"string\">\"selectAllEmps\"</span> resultType=<span class=\"string\">\"com.zyz.bean.Employee\"</span>&gt;</span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, gender, email, dept_id deptId <span class=\"keyword\">from</span> employee</span><br><span class=\"line\">    &lt;/<span class=\"keyword\">select</span>&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、创建service包添加相应的Service接口并实现\"><a href=\"#5、创建service包添加相应的Service接口并实现\" class=\"headerlink\" title=\"5、创建service包添加相应的Service接口并实现\"></a>5、创建service包添加相应的Service接口并实现</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">queryAllEmps</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">EmployeeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmployeeDao employeeDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用set注入赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmployeeDao</span><span class=\"params\">(EmployeeDao employeeDao)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.employeeDao = employeeDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeDao.insertEmp(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">queryAllEmps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeDao.selectAllEmps();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、创建测试类\"><a href=\"#6、创建测试类\" class=\"headerlink\" title=\"6、创建测试类\"></a>6、创建测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String config = <span class=\"string\">\"applicationContext.xml\"</span>;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">        EmployeeDao employeeDao = (EmployeeDao) applicationContext.getBean(<span class=\"string\">\"employeeDao\"</span>);</span><br><span class=\"line\">        Employee employee = <span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,<span class=\"string\">\"zyz001\"</span>,<span class=\"string\">'1'</span>,<span class=\"string\">\"2824199842@qq.com\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        employeeDao.insertEmp(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String config = <span class=\"string\">\"applicationContext.xml\"</span>;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">        EmployeeDao employeeDao = (EmployeeDao) applicationContext.getBean(<span class=\"string\">\"employeeDao\"</span>);</span><br><span class=\"line\">        List&lt;Employee&gt; employees = employeeDao.selectAllEmps();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee e:employees) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String config = <span class=\"string\">\"applicationContext.xml\"</span>;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">        EmployeeService employeeService = (EmployeeService) applicationContext.getBean(<span class=\"string\">\"employeeService\"</span>);</span><br><span class=\"line\">        Employee employee = <span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">'1'</span>,<span class=\"string\">\"zhangsan@126.com\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 事务自动提交</span></span><br><span class=\"line\">        employeeService.addEmp(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String config = <span class=\"string\">\"applicationContext.xml\"</span>;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(config);</span><br><span class=\"line\">        EmployeeService employeeService = (EmployeeService) applicationContext.getBean(<span class=\"string\">\"employeeService\"</span>);</span><br><span class=\"line\">        Employee employee1 = <span class=\"keyword\">new</span> Employee(<span class=\"keyword\">null</span>,<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">'1'</span>,<span class=\"string\">\"zhangsan@126.com\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 事务自动提交</span></span><br><span class=\"line\">        List&lt;Employee&gt; employees = employeeService.queryAllEmps();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Employee employee:employees)&#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Spring"],"tags":["Spring"]},{"title":"整合jdbc，Druid","url":"/2020/07/25/springboot-04/","content":"<p>对于数据访问层，无论是SQL还是NOSQL，Springboot底层都是采用Spring Data的方式进行统一处理。<a id=\"more\"></a></p>\n<h2 id=\"整合jdbc\"><a href=\"#整合jdbc\" class=\"headerlink\" title=\"整合jdbc\"></a>整合jdbc</h2><h3 id=\"1、新建项目引入web模块和连接mysql必须的模块，JDBC-API，MySQL-Driver\"><a href=\"#1、新建项目引入web模块和连接mysql必须的模块，JDBC-API，MySQL-Driver\" class=\"headerlink\" title=\"1、新建项目引入web模块和连接mysql必须的模块，JDBC API，MySQL Driver\"></a>1、新建项目引入web模块和连接mysql必须的模块，JDBC API，MySQL Driver</h3><p><img src=\"/2020/07/25/springboot-04/1.png\" alt></p>\n<h3 id=\"2、项目建立完成后，发现已经替我们导入响应的启动器\"><a href=\"#2、项目建立完成后，发现已经替我们导入响应的启动器\" class=\"headerlink\" title=\"2、项目建立完成后，发现已经替我们导入响应的启动器\"></a>2、项目建立完成后，发现已经替我们导入响应的启动器</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!--web--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--jdbc--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--mysql--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写yaml配置文件连接数据库\"><a href=\"#3、编写yaml配置文件连接数据库\" class=\"headerlink\" title=\"3、编写yaml配置文件连接数据库\"></a>3、编写yaml配置文件连接数据库</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在测试类中测试连接是否成功\"><a href=\"#在测试类中测试连接是否成功\" class=\"headerlink\" title=\"在测试类中测试连接是否成功\"></a>在测试类中测试连接是否成功</h3><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot04DataApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 查看默认数据源 据说是最快的数据库连接池 HikariDataSource</span></span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\">        <span class=\"comment\">// 获取数据库连接</span></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、编写一个Controller，注入-jdbcTemplate，编写测试方法进行访问测试；\"><a href=\"#5、编写一个Controller，注入-jdbcTemplate，编写测试方法进行访问测试；\" class=\"headerlink\" title=\"5、编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；\"></a>5、编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> <span class=\"comment\">// 返回json对象给浏览器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * springboot对原生jdbc做了轻量级的封装</span></span><br><span class=\"line\"><span class=\"comment\">     * 并且通过JdbcTemplate类提供了对数据库的crud操作</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</span></span><br><span class=\"line\"><span class=\"comment\">     * update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；</span></span><br><span class=\"line\"><span class=\"comment\">     * batchUpdate方法用于执行批处理相关语句；</span></span><br><span class=\"line\"><span class=\"comment\">     * query方法及queryForXXX方法：用于执行查询相关语句；</span></span><br><span class=\"line\"><span class=\"comment\">     * call方法：用于执行存储过程、函数相关语句</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库中员工表的所有记录</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有实体类，从数据库查询到的数据怎么封装？ 使用万能的Map!</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"listAllUser\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String,Object&gt;&gt; listAllUser()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 原生jdbc操作</span></span><br><span class=\"line\">        String sql = <span class=\"string\">\"select * from user\"</span>;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; allUser = jdbcTemplate.queryForList(sql);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allUser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/addUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into user(name,pwd)value('wd1','123456')\"</span>;</span><br><span class=\"line\">        jdbcTemplate.update(sql);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"addOK\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/deleteUser/&#123;id&#125;\"</span>) <span class=\"comment\">//@PathVariable接收路径中占位符的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteUser</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"delete from user where id=?\"</span>;</span><br><span class=\"line\">        jdbcTemplate.update(sql,id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"deleteOK\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/updateUser/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateUser</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"update user set name=?,pwd=? where id=\"</span>+id;</span><br><span class=\"line\">        <span class=\"comment\">// 封装</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span>];</span><br><span class=\"line\">        objects[<span class=\"number\">0</span>]=<span class=\"string\">\"张伟\"</span>;</span><br><span class=\"line\">        objects[<span class=\"number\">1</span>]=<span class=\"string\">\"666666\"</span>;</span><br><span class=\"line\">        jdbcTemplate.update(sql,objects);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"updateOK\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，使用原生的jdbc完成了基本的crud操作，因为springboot对jdbc进行了轻量级的封装，在使用上也并不是很繁琐。</p>\n<h2 id=\"整合Druid\"><a href=\"#整合Druid\" class=\"headerlink\" title=\"整合Druid\"></a>整合Druid</h2><h3 id=\"1、添加Druid依赖\"><a href=\"#1、添加Druid依赖\" class=\"headerlink\" title=\"1、添加Druid依赖\"></a>1、添加Druid依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.23<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在配置文件中指定数据源\"><a href=\"#2、在配置文件中指定数据源\" class=\"headerlink\" title=\"2、在配置文件中指定数据源\"></a>2、在配置文件中指定数据源</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span> <span class=\"comment\"># 自定义数据源</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、测试并查看数据源\"><a href=\"#3、测试并查看数据源\" class=\"headerlink\" title=\"3、测试并查看数据源\"></a>3、测试并查看数据源</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot04DataApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    DataSource dataSource;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(dataSource.getClass());<span class=\"comment\">//class com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取数据库连接</span></span><br><span class=\"line\">        Connection connection = dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项\"><a href=\"#4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项\" class=\"headerlink\" title=\"4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项\"></a>4、获取连接成功后，可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span> <span class=\"comment\"># 自定义数据源</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class=\"line\">    <span class=\"comment\">#druid 数据源专有配置</span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class=\"line\">    <span class=\"comment\">#需要导入 log4j 依赖</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">useGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">connectionProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、导入log4j依赖\"><a href=\"#5、导入log4j依赖\" class=\"headerlink\" title=\"5、导入log4j依赖\"></a>5、导入log4j依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--log4j --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、创建DruidConfig类，用于拓展配置druid\"><a href=\"#6、创建DruidConfig类，用于拓展配置druid\" class=\"headerlink\" title=\"6、创建DruidConfig类，用于拓展配置druid\"></a>6、创建DruidConfig类，用于拓展配置druid</h3><p>将数据源的配置文件绑定到容器中，无需springboot再创建容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *将自定义的Druid数据源添加到容器中，不再让Spring Boot自动创建</span></span><br><span class=\"line\"><span class=\"comment\">     *绑定全局配置文件中的druid数据源属性到DruidDataSource从而让它们生效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DruidDataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置后台监控功能：<br>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装路由器 时，人家也提供了一个默认的 web 页面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注入到容器中，就相当于web.xml文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean&lt;StatViewServlet&gt; bean = </span><br><span class=\"line\">        <span class=\"keyword\">new</span> ServletRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> StatViewServlet(), <span class=\"string\">\"/druid/*\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 配置后台登录名和密码</span></span><br><span class=\"line\">    Map&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 增加配置</span></span><br><span class=\"line\">    initParameters.put(<span class=\"string\">\"loginUsername\"</span>,<span class=\"string\">\"admin\"</span>);<span class=\"comment\">// loginUsername loginPassword是固定的</span></span><br><span class=\"line\">    initParameters.put(<span class=\"string\">\"loginPassword\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 访问权限</span></span><br><span class=\"line\">    initParameters.put(<span class=\"string\">\"allow\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化参数</span></span><br><span class=\"line\">    bean.setInitParameters(initParameters);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问<a href=\"http://localhost:8080/druid/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/druid/</a><br><img src=\"/2020/07/25/springboot-04/2.png\" alt></p>\n<p>登录成功后<br><img src=\"/2020/07/25/springboot-04/3.png\" alt></p>\n<p>配置过滤器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\">    <span class=\"comment\">// 设置过滤请求</span></span><br><span class=\"line\">    HashMap&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    initParameters.put(<span class=\"string\">\"exclusion\"</span>,<span class=\"string\">\"*.js,*.css,/druid/*\"</span>);<span class=\"comment\">// 设置不进行过滤的资源</span></span><br><span class=\"line\">    bean.setInitParameters(initParameters);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"SpringSecurity","url":"/2020/07/28/springboot-06/","content":"<p>SpringSecurity是一个针对于Spring项目的安全框架，侧重于为Spring项目提供身份验证和授权。<a id=\"more\"></a></p>\n<p>将我们之前使用拦截器，过滤器进行权限检查，和身份验证的操作进行了简化，并提供了一套 Web 应用安全性的完整解决方案。</p>\n<h2 id=\"SpringSecurity使用\"><a href=\"#SpringSecurity使用\" class=\"headerlink\" title=\"SpringSecurity使用\"></a>SpringSecurity使用</h2><p>仅需引入spring-boot-starter-security模块，进行少量的配置，便可以实现强大的安全管理。</p>\n<ul>\n<li>WebSecurityConfigureAdapter：自定义Security策略</li>\n<li>AuthenticationManagerBuilder：自定义认证策略</li>\n</ul>\n<p>SpringScurity的两个主要目标就是<strong>认证</strong>和<strong>授权</strong>。</p>\n<h3 id=\"1、引入SpringSecurity模块\"><a href=\"#1、引入SpringSecurity模块\" class=\"headerlink\" title=\"1、引入SpringSecurity模块\"></a>1、引入SpringSecurity模块</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建config目录，添加WebSecurityConfig类\"><a href=\"#2、创建config目录，添加WebSecurityConfig类\" class=\"headerlink\" title=\"2、创建config目录，添加WebSecurityConfig类\"></a>2、创建config目录，添加WebSecurityConfig类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置用户信息 模拟内存用户数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        auth.inMemoryAuthentication()</span><br><span class=\"line\">                .withUser(<span class=\"string\">\"root\"</span>)</span><br><span class=\"line\">                .password(passwordEncoder().encode(<span class=\"string\">\"root\"</span>))</span><br><span class=\"line\">                .roles(<span class=\"string\">\"ADMIN\"</span>, <span class=\"string\">\"USER\"</span>)</span><br><span class=\"line\">                .authorities(<span class=\"string\">\"sys:add\"</span>, <span class=\"string\">\"sys:delete\"</span>, <span class=\"string\">\"sys:query\"</span>, <span class=\"string\">\"sys:update\"</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .withUser(<span class=\"string\">\"zyz\"</span>)</span><br><span class=\"line\">                .password(passwordEncoder().encode(<span class=\"string\">\"zyz\"</span>))</span><br><span class=\"line\">                .roles(<span class=\"string\">\"USER\"</span>)</span><br><span class=\"line\">                .authorities(<span class=\"string\">\"sys:query\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码加密器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PasswordEncoder <span class=\"title\">passwordEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * http控制</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> http</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭跨站请求伪造</span></span><br><span class=\"line\">        http.csrf().disable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求拒绝的处理器</span></span><br><span class=\"line\">        http.exceptionHandling().accessDeniedHandler(accessDeniedHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 登录成功和失败的跳转 前后端返回json字符串</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">\"/loginNew\"</span>)<span class=\"comment\">// 自定义登录的请求地址</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">\"userName\"</span>)<span class=\"comment\">// 取别名</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">\"password\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//                .successForwardUrl(\"/welcome\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .failureForwardUrl(\"/login\");</span></span><br><span class=\"line\">                .successHandler(successHandler())</span><br><span class=\"line\">                .failureHandler(failureHandler())</span><br><span class=\"line\">                .permitAll();<span class=\"comment\">// 放行接口</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义登出的请求地址</span></span><br><span class=\"line\">        http.logout().logoutUrl(<span class=\"string\">\"/logoutNew\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 访问权限的控制 在controller方法上使用@PreAuthorize注解代替（启动类需要开启@EnableGlobalMethodSecurity(prePostEnabled = true)）</span></span><br><span class=\"line\"><span class=\"comment\">//        http.authorizeRequests()</span></span><br><span class=\"line\"><span class=\"comment\">//                .antMatchers(\"/addUser\").hasAuthority(\"sys:add\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .antMatchers(\"/delUser\").hasAnyAuthority(\"sys:del\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .antMatchers(\"/updateUser\").hasAnyAuthority(\"sys:update\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .antMatchers(\"/queryUser\").hasAnyAuthority(\"sys:query\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .antMatchers(\"/testUser\").hasAnyAuthority(\"sys:test\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 其他接口登录后才能访问</span></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">                .anyRequest()</span><br><span class=\"line\">                .authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录成功后的处理 将用户信息存入redis 并返回前端一个token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationSuccessHandler <span class=\"title\">successHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (request, response, authentication) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 组装数据给前端</span></span><br><span class=\"line\">            Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            result.put(<span class=\"string\">\"code\"</span>, HttpStatus.OK.value());</span><br><span class=\"line\">            result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 设置编码</span></span><br><span class=\"line\">            response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录失败后的处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationFailureHandler <span class=\"title\">failureHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (request, response, exception) -&gt; &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            result.put(<span class=\"string\">\"code\"</span>, HttpStatus.UNAUTHORIZED.value());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> LockedException) &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"账户被锁定，登陆失败！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> BadCredentialsException) &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"账户或者密码错误，登陆失败！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> DisabledException) &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"账户被禁用，登陆失败！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> AccountExpiredException) &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"账户已过期，登陆失败！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"密码已过期，登陆失败！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登陆失败！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求拒绝的处理器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AccessDeniedHandler <span class=\"title\">accessDeniedHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((request, response, accessDeniedException) -&gt; &#123;</span><br><span class=\"line\">            response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">            Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            result.put(<span class=\"string\">\"code\"</span>, HttpStatus.FORBIDDEN.value());</span><br><span class=\"line\">            result.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"权限不够\"</span>);</span><br><span class=\"line\">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、测试Controller\"><a href=\"#3、测试Controller\" class=\"headerlink\" title=\"3、测试Controller\"></a>3、测试Controller</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUserInfo\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getUserInfo</span><span class=\"params\">(Principal principal)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> principal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUserInfo2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getUserInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录成功跳转 是一个post请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"welcome\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">welcome</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"welcome\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"addUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAuthority('sys:add')\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"addUser\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"updateUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAuthority('sys:update')\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"updateUser\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"delUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAnyAuthority('sys:del')\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"delUser\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"queryUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAnyAuthority('sys:query')\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">queryUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"queryUser\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"testUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAnyAuthority('sys:test')\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"testUser\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"free\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">free</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"free\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、从数据库中获取用户信息，作为校验\"><a href=\"#4、从数据库中获取用户信息，作为校验\" class=\"headerlink\" title=\"4、从数据库中获取用户信息，作为校验\"></a>4、从数据库中获取用户信息，作为校验</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 用户登录信息 实现SpringSecurity中的UserDetails接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhangyuzhen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Since</span> JDK 1.8</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> V1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/10/31 15:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserLoginInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetails</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer userId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userPwd;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userPwd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAccountNonExpired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAccountNonLocked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCredentialsNonExpired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 从数据库中获取登录信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhangyuzhen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Since</span> JDK 1.8</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> V1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/10/31 15:26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetailServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String userName)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        MyThreadLocal.userName.set(userName);</span><br><span class=\"line\">        User user = userService.selectByName(userName);</span><br><span class=\"line\">        <span class=\"comment\">// 转换对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtil.isEmpty(user)) &#123;</span><br><span class=\"line\">            UserLoginInfo userLoginInfo = <span class=\"keyword\">new</span> UserLoginInfo();</span><br><span class=\"line\">            userLoginInfo.setUserId(user.getId());</span><br><span class=\"line\">            userLoginInfo.setUserName(user.getUsername());</span><br><span class=\"line\">            userLoginInfo.setUserPwd(user.getPassword());</span><br><span class=\"line\">            userLoginInfo.setStatus(user.getStatus());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> userLoginInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Redis保存用户信息\"><a href=\"#使用Redis保存用户信息\" class=\"headerlink\" title=\"使用Redis保存用户信息\"></a>使用Redis保存用户信息</h2><p>在登录成功的处理方法successHandler中将token存入redis，并将token返回给前端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成token 直接用uuid作为redis中用户信息的key</span></span><br><span class=\"line\">String token = UUID.randomUUID().toString().replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">String value = JSON.toJSONString(authentication.getPrincipal());</span><br><span class=\"line\">stringRedisTemplate.opsForValue().set(LoginConstant.TOKEN_PREFIX+token,</span><br><span class=\"line\">                                      JSON.toJSONString(authentication.getPrincipal()), <span class=\"number\">15</span> * <span class=\"number\">60</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"> <span class=\"comment\">// 组装数据给前端</span></span><br><span class=\"line\">Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">result.put(<span class=\"string\">\"status\"</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">result.put(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">result.put(<span class=\"string\">\"expire\"</span>, <span class=\"number\">15</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">response.getWriter().write(JSON.toJSONString(result));</span><br></pre></td></tr></table></figure>\n\n<p>定义过滤器实现token校验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> Token校验过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhangyuzhen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Since</span> JDK 1.8</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> V1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/10/31 16:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenCheckFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">OncePerRequestFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String path = request.getRequestURI();</span><br><span class=\"line\">        <span class=\"comment\">// 放行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LoginConstant.ALLOW_URLS.contains(path)) &#123;</span><br><span class=\"line\">            filterChain.doFilter(request, response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 校验</span></span><br><span class=\"line\">        String header = request.getHeader(LoginConstant.HEAD_AUTHORIZATION);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(header)) &#123;</span><br><span class=\"line\">            Boolean isExist = stringRedisTemplate.hasKey(LoginConstant.TOKEN_PREFIX+header);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != isExist &amp;&amp; isExist) &#123;</span><br><span class=\"line\">                JSONObject jsonObject = JSON.parseObject(stringRedisTemplate.opsForValue().get(LoginConstant.TOKEN_PREFIX + header));</span><br><span class=\"line\">                String userName = jsonObject.getString(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 封装成security内置的对象</span></span><br><span class=\"line\">                UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(userName, <span class=\"keyword\">null</span>, Collections.emptyList());</span><br><span class=\"line\">                authenticationToken.setDetails(<span class=\"keyword\">new</span> WebAuthenticationDetails(request));</span><br><span class=\"line\">                SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        result.put(<span class=\"string\">\"status\"</span>, <span class=\"number\">401</span>);</span><br><span class=\"line\">        result.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"验证失败\"</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">        response.getWriter().write(JSON.toJSONString(result));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["微服务"],"tags":["SpringBoot"]},{"title":"SpringCloud","url":"/2022/02/15/springcloud-01/","content":"<h1 id=\"微服务概述\"><a href=\"#微服务概述\" class=\"headerlink\" title=\"微服务概述\"></a>微服务概述</h1><p>微服务化就是将传统的一站式应用，根据业务进行拆分成一个一个服务，彻底地去耦合，每个微服务提供单个业务服务，一个服务做一件事。<a id=\"more\"></a></p>\n<p>微服务：强调的时候服务的大小，关注的是某一个点，是<strong>具体解决某一个问题/提供对应服务的一个服务应用</strong>。</p>\n<p>微服务架构：一种架构模式，提供将单一应用程序划分成一组小的服务，服务之间相互协调、相互配合，为用户提供最终价值。每个服务运行在其<strong>独立的进程</strong>中，服务与服务之间采用轻量级的通信机制相互协作（通常是基于Http协议的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境中。另外，<strong>应当尽量避免统一的、集中式的服务管理机制</strong>，对具体的服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p>\n<h2 id=\"微服务优缺点\"><a href=\"#微服务优缺点\" class=\"headerlink\" title=\"微服务优缺点\"></a>微服务优缺点</h2><p>优点：足够内聚，易于维护；开发简单开发效率高，一个服务可能就是专一的只干一件事情。</p>\n<p>缺点：需要分布式系统的复杂性；多服务运维难度；服务之间的通信成本；数据一致性；性能监控</p>\n<h2 id=\"微服务技术栈\"><a href=\"#微服务技术栈\" class=\"headerlink\" title=\"微服务技术栈\"></a>微服务技术栈</h2><p>多种技术的集合体</p>\n<p>服务开发：Springboot 、Spring 、 SpringMVC</p>\n<p>服务注册与发现：Eureka、Consul、Zookeeper、Nacos</p>\n<p>服务熔断器：Hystrix、Envoy</p>\n<p>负载均衡：Ribbon、Nginx</p>\n<p>服务接口调用：Feign，Dubbo</p>\n<p>消息队列：Kafka、RabbitMQ、RocketMQ</p>\n<p>服务配置中心管理：SpringCloudConfig、Nacos</p>\n<h1 id=\"SpringCloud第一代组件\"><a href=\"#SpringCloud第一代组件\" class=\"headerlink\" title=\"SpringCloud第一代组件\"></a>SpringCloud第一代组件</h1><p>基于SpringBoot提供了一套微服务解决方案，是各个微服务架构技术落地实现的集合体，包含服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件。</p>\n<blockquote>\n<p>SpringBoot与SpringCloud</p>\n</blockquote>\n<p>SpringBoot专注于快速方便的开发单个个体微服务。</p>\n<p>SpringCloud关注于微服务的协调与治理，也就是对springboot开发的项目进行整合与管理。</p>\n<blockquote>\n<p>Dubbo与SpringCloud</p>\n</blockquote>\n<p>Dubbo的定位是一款RPC框架</p>\n<p>SpringCloud提供的是微服务架构下的一站式解决方案</p>\n<h2 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a>Eureka</h2><p>CAP理论：<strong>Consistency</strong>数据一致性，<strong>Availability</strong>服务可用性，<strong>Partition tolerance</strong>分区容错性。</p>\n<p>Eureka与Zookeeper区别：</p>\n<ul>\n<li><p>Zookeeper注重服务的<strong>一致性</strong>，主机挂了，集群整体不对外提供服务，需要120s重选主节点才能对外提供服务；</p>\n</li>\n<li><p>Eureka注重服务的<strong>可用性</strong>，只要有一台主机活着，就能对外提供服务。</p>\n</li>\n</ul>\n<p>与其他注册中心组件的对比：</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>语言</th>\n<th>CAP</th>\n<th>接口协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Eureka</td>\n<td>Java</td>\n<td>AP</td>\n<td>Http</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>Java</td>\n<td>CP</td>\n<td>客户端</td>\n</tr>\n<tr>\n<td>Consul</td>\n<td>Go</td>\n<td>CP</td>\n<td>Http/DNS</td>\n</tr>\n<tr>\n<td>Nacos</td>\n<td>Java</td>\n<td>AP/CP</td>\n<td>Http</td>\n</tr>\n</tbody></table>\n<p>服务注册：当项目（eureka客户端）启动时，就会向eureka-serever发送自己的元数据（运行的ip，端口port，健康状态的监控等），Eureka会保存这些元数据，通过RestFul api提供调用</p>\n<p>服务续约（心跳）：项目启动成功后，除了向eureka-server注册自己，还会每隔30s向eureka-server汇报自己，表示自己还活着。</p>\n<p>服务剔除：当项目没有在90s汇报自己的情况，eureka-server会认为此节点死掉了，会将其剔除。</p>\n<p>服务下线：当项目关闭时，会给eureka-server报告，说明自己要下机了。</p>\n<img src=\"/2022/02/15/springcloud-01/1.jpg\" style=\"zoom:50%;\">\n\n<p>Eureka Client会缓存Eureka Server的信息，即使Eureka Server全部宕掉，也可以通过缓存获取服务的信息。</p>\n<p>多个Eureka Server会通过复制来同步服务注册列表。</p>\n<h2 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h2><ul>\n<li>服务端负载均衡：Nginx/F5<ul>\n<li>在服务器端完成请求的分发。将客户端发起的请求根据负载算法分发到不同的服务器上。</li>\n</ul>\n</li>\n<li>客户端负载均衡：Ribbon<ul>\n<li>在客户端实现负载算法。消费者客户端从注册中心拿到服务列表，通过负载算法请求具体的某一台服务器实现调用。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/02/15/springcloud-01/2.jpg\" style=\"zoom:50%;\">\n\n<p>Eureka-client已经引入了Ribbon相关的包，通过<code>@LoadBalanced</code>注解即可完成负载。</p>\n<h2 id=\"Hystrix\"><a href=\"#Hystrix\" class=\"headerlink\" title=\"Hystrix\"></a>Hystrix</h2><p>服务雪崩 ：上游服务调用下游微服务，下游服务器请求响应时间变慢，导致大量请求堆积，造成线程大量阻塞，将服务器压垮，导致整个调用链路崩溃。</p>\n<p>hystrix熔断器可以在下游服务器超时时，阻断对下游服务的调用，防止调用链路雪崩。</p>\n<p>hystix也可以通过设置fallback函数对服务进行<strong>降级</strong>处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HystrixCommand</span>(</span><br><span class=\"line\">    threadPoolKey = <span class=\"string\">\"findResumeOpenStatus\"</span>,</span><br><span class=\"line\">    commandProperties = &#123;</span><br><span class=\"line\">        <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>, value = <span class=\"string\">\"2000\"</span>)&#125;,</span><br><span class=\"line\">    fallbackMethod = <span class=\"string\">\"hystrixFallback\"</span></span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n\n<p>Hystrix舱壁模式（线程池隔离）<br>不设置线程池时，所有熔断器默认共用一个线程池中的10个线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@HystrixCommand</span>(</span><br><span class=\"line\">    threadPoolKey = <span class=\"string\">\"findResumeOpenStatus\"</span>,</span><br><span class=\"line\">    commandProperties = &#123;</span><br><span class=\"line\">        <span class=\"meta\">@HystrixProperty</span>(name=<span class=\"string\">\"coreSize\"</span>,value = <span class=\"string\">\"1\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"maxQueueSize\"</span>,value = <span class=\"string\">\"20\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>, value = <span class=\"string\">\"2000\"</span>)&#125;,</span><br><span class=\"line\">    fallbackMethod = <span class=\"string\">\"hystrixFallback\"</span></span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n\n<p>自定义跳闸参数，活动窗口时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 8秒钟内，请求次数达到2个，并且失败率在50%以上，就跳闸</span></span><br><span class=\"line\"><span class=\"comment\"> * 跳闸后活动窗⼝设置为3s 每3s发一次请求，成功就重置熔断器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@HystrixCommand</span>(</span><br><span class=\"line\">        threadPoolKey = <span class=\"string\">\"testHystrix\"</span>,</span><br><span class=\"line\">        threadPoolProperties = &#123;</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"coreSize\"</span>, value = <span class=\"string\">\"2\"</span>),</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name = <span class=\"string\">\"maxQueueSize\"</span>, value = <span class=\"string\">\"20\"</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        commandProperties = &#123;</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name =</span><br><span class=\"line\">                        <span class=\"string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span>, value = <span class=\"string\">\"2000\"</span>),</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name =</span><br><span class=\"line\">                        <span class=\"string\">\"metrics.rollingStats.timeInMilliseconds\"</span>, value = <span class=\"string\">\"8000\"</span>),</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name =</span><br><span class=\"line\">                        <span class=\"string\">\"circuitBreaker.requestVolumeThreshold\"</span>, value = <span class=\"string\">\"2\"</span>),</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name =</span><br><span class=\"line\">                        <span class=\"string\">\"circuitBreaker.errorThresholdPercentage\"</span>, value = <span class=\"string\">\"50\"</span>),</span><br><span class=\"line\">                <span class=\"meta\">@HystrixProperty</span>(name =</span><br><span class=\"line\">                        <span class=\"string\">\"circuitBreaker.sleepWindowInMilliseconds\"</span>, value = <span class=\"string\">\"3000\"</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fallbackMethod = <span class=\"string\">\"hystrixFallback\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h2><p>轻量级<strong>RESTful</strong>风格的<strong>HTTP</strong>客户端，以Java注解方式发起HTTP请求，实现调用远程服务，类似于Dubbo的服务调用</p>\n<p>与dubbo的区别：</p>\n<ul>\n<li>Feign通过REST API实现远程调用，是基于HTTP的，服务提供者需要对外暴露HTTP接口供消费者调用。通过短连接进行通信，不适合高并发的访问。服务粒度是http接口级的。</li>\n<li>Dubbo更加灵活，通过RPC调用实现远程调用，支持多种传输协议（Dubbo、http、rmi、redis等等）。默认使用Dubbo协议，采用长连接进行通信，适合高并发场景。服务粒度是方法级的。</li>\n</ul>\n<h2 id=\"GateWay\"><a href=\"#GateWay\" class=\"headerlink\" title=\"GateWay\"></a>GateWay</h2><p>Spring Cloud GateWay不仅提供统⼀的路由方式（反向代理）并且基于 Filter 链的方式提供了网关基本的功能，例如：鉴权、流量控制、熔断、路径重写、日志监控等。<br><img src=\"/2022/02/15/springcloud-01/3.jpg\" alt=\"3\" style=\"zoom:50%;\"></p>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>Spring Cloud Config 分布式配置中心<br><img src=\"/2022/02/15/springcloud-01/4.jpg\" style=\"zoom:50%;\"></p>\n<p>配置文件的刷新方案：</p>\n<ul>\n<li><p>手动向Client客户端发起POST请求，<a href=\"http://localhost:8081/actuator/refresh\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/actuator/refresh</a> ， 刷新配置信息</p>\n</li>\n<li><p>通过消息总线更新，Spring Cloud Bus（基于MQ的，支持RabbitMq/Kafka），MQ消息代理构建⼀个共用的Topic，通过这个Topic连接各个微服务实例，MQ广播的消息会被所有在注册中心的微服务实例监听和消费。</p>\n</li>\n</ul>\n<p>​       手动向config server发起POST请求，<a href=\"http://localhost:9003/bus-refresh\" target=\"_blank\" rel=\"noopener\">http://localhost:9003/bus-refresh</a> ，mq就会刷新所有Client配置信息</p>\n<h1 id=\"微服务统一认证授权\"><a href=\"#微服务统一认证授权\" class=\"headerlink\" title=\"微服务统一认证授权\"></a>微服务统一认证授权</h1><p>SpringCloud OAuth对多个微服务进行统一的认证授权。</p>\n<p>OAuth2授权流程：<br><img src=\"/2022/02/15/springcloud-01/5.jpg\" style=\"zoom:60%;\"></p>\n<h1 id=\"SpringCloud第二代组件-SCA\"><a href=\"#SpringCloud第二代组件-SCA\" class=\"headerlink\" title=\"SpringCloud第二代组件(SCA)\"></a>SpringCloud第二代组件(SCA)</h1><p>SpringCloud Alibaba</p>\n<h2 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a>Nacos</h2><p>服务注册中心 + 配置中心</p>\n<p>nacos领域模型：</p>\n<p>namespace：对不同的环境进行隔离。例如开发环境，测试环境和生产环境等。</p>\n<p>group：将若干服务和配置归为一组，通常表示某个项目。</p>\n<p>service：某一个微服务。</p>\n<p>dataId：一个具体的配置文件。</p>\n<p>Nacos服务分级模型：<br><img src=\"/2022/02/15/springcloud-01/6.jpg\" style=\"zoom:40%;\"></p>\n<h2 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h2><p>一个面向云原生微服务的流量控制，熔断降级组件。</p>\n<p>以一种非侵入式的方式实现了服务的熔断、限流、降级，通过提供的dashboard来管理服务。</p>\n<p>流量控制规则：</p>\n<ul>\n<li>快速失败：到达指定的qps货线程数后，直接拒绝请求。</li>\n<li>请求预热：将设置的qps在指定时间内，从指定值的1/3逐渐增长到指定值。场景：预防请求量的突然增长</li>\n<li>排队等待：将超出qps的请求放入队列中排队，处理后按序放行，超过指定时间还没放行的请求会直接拒绝。场景：削峰填谷</li>\n</ul>\n<p>降级规则：</p>\n<ul>\n<li>RT：超时拒绝服务，活动窗口时间过了就会恢复服务</li>\n<li>异常比例</li>\n<li>异常数</li>\n</ul>\n<h2 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h2><p>使用Dubbo RPC + Dubbo LB 代替 Feign + Ribbon</p>\n<p><a href=\"https://github.com/sweetboyZhang/zyz-parent\" target=\"_blank\" rel=\"noopener\">SpringCloud代码笔记 (github.com)</a></p>\n","categories":["微服务"],"tags":["SpringCloud"]},{"title":"SpringMVC中的控制器","url":"/2020/06/30/springmvc-02/","content":"<h2 id=\"1、对请求提交方式的定义\"><a href=\"#1、对请求提交方式的定义\" class=\"headerlink\" title=\"1、对请求提交方式的定义\"></a>1、对请求提交方式的定义</h2><p>@RequestMapping 请求映射<br>属性:<br>value,表示所匹配请求的URI<br>method,表示请求的方式：<a id=\"more\"></a><br>get请求: RequestMethod.GET<br>post请求: RequestMethod.POST</p>\n<p>推荐使用Resful风格的<code>GetMapping(&quot;/xxx&quot;)</code>与<code>PostMapping(&quot;xxx&quot;)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/doSome\"</span>,method= RequestMethod.GET)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doSome</span><span class=\"params\">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、处理器的请求参数\"><a href=\"#2、处理器的请求参数\" class=\"headerlink\" title=\"2、处理器的请求参数\"></a>2、处理器的请求参数</h2><p>处理器方法可以包含以下四类参数，这些参数会在系统调用时由系统自动赋值，即程序员可在方法内直接使用。<br>➢ HttpServletRequest<br>➢ HttpServletResponse<br>➢ HttpSession<br>➢ 请求中所携带的请求参数</p>\n<h3 id=\"1、逐个参数接收\"><a href=\"#1、逐个参数接收\" class=\"headerlink\" title=\"1、逐个参数接收\"></a>1、逐个参数接收</h3><p>保证请求参数名与该请求处理方法的参数名相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保证请求参数名与该请求处理方法的参数名相同。</span></span><br><span class=\"line\"><span class=\"comment\"> * 框架接收请求参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、使用request对象接收请求参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、springmvc框架通过DispatcherServlet 调用myController中的doSome()</span></span><br><span class=\"line\"><span class=\"comment\"> * 并按名称对应，把接收到的参数赋值给形参，框架会提供类型自动转换功能</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/other.do\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doOther</span><span class=\"params\">(String name,Integer age)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>400错误码：客户端错误，表示提交请求时出现了错误</p>\n<h3 id=\"2、解决中文乱码\"><a href=\"#2、解决中文乱码\" class=\"headerlink\" title=\"2、解决中文乱码\"></a>2、解决中文乱码</h3><p>提交请求参数时，get方式没有乱码，post方式出现中文乱码。<br>使用框架提供的过滤器解决乱码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注册过滤器，解决post请求的乱码问题--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--设置项目中的字符编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 强制请求对象(HttpServletRequest)使用encoding编码值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceRequestEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 强制响应对象(HttpServletResponse)使用encoding编码值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、-RequestParam校正请求参数\"><a href=\"#3、-RequestParam校正请求参数\" class=\"headerlink\" title=\"3、@RequestParam校正请求参数\"></a>3、@RequestParam校正请求参数</h3><p>若请求URL 所携带的参数名称与处理方法中指定的参数名不相同时，则需在处理方法参数前，添加一个注解@RequestParam(“请求参数名”)，指定请求URL 所携带参数的名称。</p>\n<p><img src=\"/2020/06/30/springmvc-02/1.png\" alt> </p>\n<p><img src=\"/2020/06/30/springmvc-02/2.png\" alt></p>\n<h3 id=\"4、对象参数接收\"><a href=\"#4、对象参数接收\" class=\"headerlink\" title=\"4、对象参数接收\"></a>4、对象参数接收</h3><p>将处理器方法的参数定义为一个对象，只要保证<strong>请求参数名与这个对象的属性同名</strong>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/other.do\"</span>,method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doOther</span><span class=\"params\">(Student student)</span></span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"student\"</span>,student);</span><br><span class=\"line\">        <span class=\"comment\">// 指定视图 框架对视图执行forward操作</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"show\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回modelAndView</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>show.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>name：$&#123;student.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>age：$&#123;student.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、处理器方法的返回值\"><a href=\"#3、处理器方法的返回值\" class=\"headerlink\" title=\"3、处理器方法的返回值\"></a>3、处理器方法的返回值</h2><h3 id=\"1、返回ModelAndView\"><a href=\"#1、返回ModelAndView\" class=\"headerlink\" title=\"1、返回ModelAndView\"></a>1、返回ModelAndView</h3><p>处理器方法处理完后，需要跳转到其他资源，并且要在跳转的资源之间传递数据。</p>\n<h3 id=\"2、返回String\"><a href=\"#2、返回String\" class=\"headerlink\" title=\"2、返回String\"></a>2、返回String</h3><p>视图跳转，不传递数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/returnView.do\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doRetyrnView</span><span class=\"params\">(String name,Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// show  逻辑视图名称。项目中配置了视图解析器</span></span><br><span class=\"line\">        <span class=\"comment\">// 框架对视图进行forward转发操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、返回void\"><a href=\"#3、返回void\" class=\"headerlink\" title=\"3、返回void\"></a>3、返回void</h3><p>不能表示数据，也不能表示视图。<br>在处理ajax的时候，可以使用void返回值。通过HttpServletResponse输出数据，响应ajax请求。<br>ajax请求服务端返回的就是数据，与视图无关。</p>\n<p>step1：服务端向浏览器传回的是JSON 数据，需要使用一个工具类将字符串包装为JSON 格式，所以需要导入JSON 的依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> step2：引入jquery<br><img src=\"/2020/06/30/springmvc-02/3.png\" alt></p>\n<p>step3：发起ajax请求</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/jquery-3.4.1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">\"#btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// alert(\"button click\")</span></span></span><br><span class=\"line\"><span class=\"javascript\">                $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    url:<span class=\"string\">\"returnVoid-ajax.do\"</span>,</span></span><br><span class=\"line\">                    data:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                        name:<span class=\"string\">\"zyz\"</span>,</span></span><br><span class=\"line\">                        age:21</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">                    type:<span class=\"string\">\"post\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    dataType:<span class=\"string\">\"json\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// resp是服务器端返回的json格式的字符串</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// jquery会把json字符串转化为json对象，赋值给形参</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                    success:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(resp)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        alert(<span class=\"string\">\"name:\"</span>+resp.name+<span class=\"string\">\" age:\"</span>+resp.age);</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>发起ajax请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>step4：响应ajax请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/returnVoid-ajax.do\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doReturnVoidAjax</span><span class=\"params\">(HttpServletResponse resp, String name, Integer age)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"name:\"</span> + name);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"age:\"</span> + age);</span><br><span class=\"line\">    <span class=\"comment\">// 处理ajax请求  使用json数据格式</span></span><br><span class=\"line\">    Student student = <span class=\"keyword\">new</span> Student(name, age);</span><br><span class=\"line\">    <span class=\"comment\">// 将数据转换为json格式</span></span><br><span class=\"line\">    String studentJson=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (student != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">         studentJson= objectMapper.writeValueAsString(student);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"student的json格式：\"</span>+studentJson);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// resp输出数据到页面，响应ajax请求</span></span><br><span class=\"line\">    resp.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">    PrintWriter writer = resp.getWriter();</span><br><span class=\"line\">    writer.print(studentJson);</span><br><span class=\"line\">    writer.flush();</span><br><span class=\"line\">    writer.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、返回Object\"><a href=\"#4、返回Object\" class=\"headerlink\" title=\"4、返回Object\"></a>4、返回Object</h3><p>处理器返回的对象不是作为逻辑视图出现的，而是作为直接在页面显示的数据出现。<br>可以使用对象表示数据，响应ajax请求。<br>将对象类型转换为json类型 以及 将结果数据输出到页面，springmvc框架都可以自动帮你完成：</p>\n<p><strong>step1:</strong><br>在pom.xml中引入Jackson相关依赖，Jackson工具库用于将Object转换为Json。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>step2:</strong></p>\n<p>在springmvc.xml配置文件中添加注解驱动。<br>将Object 数据转化为JSON 数据，需要由消息转换器HttpMessageConverter 完成。而转换器的开启，需要由<code>&lt;mvc:annotation-driven/&gt;</code>来完成。<br>SpringMVC 使用消息转换器实现请求数据和对象，处理器方法返回对象和响应输出之间的<strong>自动转换</strong>。</p>\n<p>当Spring 容器进行初始化过程中，在<code>&lt;mvc:annotation-driven/&gt;</code>处创建注解驱动时，默认创建了八个HttpMessageConverter 对象。也就是说，我们注册<code>&lt;mvc:annotation-driven/&gt;</code>，就是为了让容器为我们创建HttpMessageConverter 对象。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注解驱动--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>step3:</strong></p>\n<p>修改处理器方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用框架来处理ajax请求</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> Student</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/returnStudent.do\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span>  <span class=\"comment\">// 处理器返回对象转换为json后，通过HttpServletResponse输出给浏览器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">doReturnStudentAjax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Student student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"zyz\"</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> student;<span class=\"comment\">// 框架会将obj转为json格式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从页面发起ajax请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btn02\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:<span class=\"string\">\"returnStudent.do\"</span>,</span><br><span class=\"line\">        type:<span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">        dataType:<span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">        <span class=\"comment\">// resp是服务器端返回的json格式的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// jquery会把json字符串转化为json对象，赋值给形参</span></span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">\"name:\"</span>+resp.name+<span class=\"string\">\" age:\"</span>+resp.age);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>处理流程：</strong></p>\n<p>1、框架会把处理器返回的Student类型的数据，调用框架中的<code>ArrayList&lt;HttpMessageConverter&gt;</code>中每个类的canWrite()方法，检查哪个HttpMessageConverter接口的类能处理Student类型的数据—-MappingJackson2HttpMessageConverter<br>2、调用实现类中的Write()方法，将student对象转换为json字符串<br>3、调用@ResponseBody把转换好的json数据输出到浏览器，ajax处理完成</p>\n<h4 id=\"返回List集合：\"><a href=\"#返回List集合：\" class=\"headerlink\" title=\"返回List集合：\"></a>返回List集合：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/returnStudents.do\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">doReturnStudentAjax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Student&gt; students = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Student student1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张伟1\"</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">    Student student2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张伟2\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    Student student3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张伟3\"</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">    students.add(student1);</span><br><span class=\"line\">    students.add(student2);</span><br><span class=\"line\">    students.add(student3);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btn03\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:<span class=\"string\">\"returnStudents.do\"</span>,</span><br><span class=\"line\">        type:<span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">        dataType:<span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</span><br><span class=\"line\">            $.each(resp,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,stu</span>) </span>&#123;</span><br><span class=\"line\">                alert(stu.name+<span class=\"string\">\" \"</span>+stu.age);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回String\"><a href=\"#返回String\" class=\"headerlink\" title=\"返回String\"></a>返回String</h4><p>String表示数据，不是视图。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/returnString.do\"</span>, produces=<span class=\"string\">\"text/plain;charset=utf-8\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doReturnStringAjax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"返回的字符串~\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btn04\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:<span class=\"string\">\"returnString.do\"</span>,</span><br><span class=\"line\">        type:<span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</span><br><span class=\"line\">            alert(resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、解读url-pattern标签\"><a href=\"#4、解读url-pattern标签\" class=\"headerlink\" title=\"4、解读url-pattern标签\"></a>4、解读url-pattern标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>意思是将所有以.do结尾的请求交给中央调度器（框架）处理。<br>但是，当提交一些静态资源，例如图片，html页面，js文件的请求时，服务器也会响应。<br>因为tomcat本身就能处理一些未映射的静态资源的访问。</p>\n<p><strong>将所有请求都交给框架处理：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理方式一：转发给服务器处理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 处理静态资源</span></span><br><span class=\"line\"><span class=\"comment\">框架会创建控制器对象DefaultServletHttpRequestHandler把接收到的请求转发给tomcat来处理静态资源--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>处理方式二：框架自己处理</p>\n<p>将静态资源集中存放到一个文件夹中<br><img src=\"/2020/06/30/springmvc-02/4.png\" alt></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  处理静态资源方式二</span></span><br><span class=\"line\"><span class=\"comment\"> 创建 ResourceHttpServletHandler处理器对象 让这个对象去处理静态资源的请求  不依赖于tomcat</span></span><br><span class=\"line\"><span class=\"comment\"> mapping:访问静态资源的uri  使用通配符 **</span></span><br><span class=\"line\"><span class=\"comment\"> location:静态资源在项目中的位置--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/static/\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、绝对地址和相对地址\"><a href=\"#5、绝对地址和相对地址\" class=\"headerlink\" title=\"5、绝对地址和相对地址\"></a>5、绝对地址和相对地址</h2><p><strong>绝对地址</strong><br>带有协议的地址，在互联网上唯一的</p>\n<p><strong>相对地址</strong><br>没有协议开头的，不能独立使用，需要一个参考地址。通过参考地址+相对地址本身才能指定资源。</p>\n<p>在jsp，html 中使用的地址，都是前端页面中的地址，都是相对地址。</p>\n<p>在页面中访问地址不加 ” / “ ，访问的是当前页面地址加上链接地址。使用base标签固定参考地址<br><img src=\"/2020/06/30/springmvc-02/5.png\" alt></p>\n","categories":["Spring"],"tags":["SpringMVC"]},{"title":"多线程总结","url":"/2020/08/13/thread/","content":"<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><blockquote>\n<p>进程</p>\n</blockquote>\n<p>进程是程序的一次执行过程，是指程序及其数据在处理机上顺序执行时所发生的活动，一组具有独立功能的程序在数据集合上的一次活动，它是系统进行资源分配和调度的独立单位。<a id=\"more\"></a></p>\n<blockquote>\n<p>线程</p>\n</blockquote>\n<p>为了提高系统的执行效率，减少处理机的空转时间和调度切换的时间，以及便于系统管理。提出了线程的概念，将一个进程分为多个线程，线程作为调度和分派的基本单位。线程执行开销小，但不利于资源的管理和保护。</p>\n<p>线程的三个基本状态：执行，就绪，阻塞</p>\n<p>线程的两个基本类型</p>\n<ul>\n<li>用户级进程：在用户级线程中，有关线程管理的所有工作都由应用程序完成，<strong>内核意识不到线程的存在</strong>。</li>\n<li>系统级进程：在内核级线程中，线程管理的所有工作都由内核完成，应用程序没有进行线程管理的代码，只有一个到内核级线程的编程接口。</li>\n</ul>\n<h2 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h2><p><strong>并行：</strong></p>\n<ul>\n<li>并行是指<strong>同一时刻</strong>内发生两个或多个事件</li>\n<li>并行是在<strong>不同实体（处理机）</strong>上的多个事件</li>\n</ul>\n<p><strong>并发：</strong></p>\n<ul>\n<li>并发性是指<strong>同一时间间隔</strong>内发生两个或多个事件</li>\n<li>并发是在<strong>同一实体</strong>上的多个事件</li>\n</ul>\n<p>并行是针对进程的，并发是针对线程的。<br>并发的三大特性：</p>\n<ul>\n<li><strong>原子性</strong>：一个操作在cpu上执行时不可能中途暂停然后再调度。</li>\n<li><strong>可见性</strong>：多个线程对变量的修改是可见的。</li>\n<li><strong>有序性</strong>：虚拟机在进行代码编译时，对于那些改变顺序之后不会对最终结果造成影响的代码，虚拟机不一定会按照我们写的代码的顺序来执行，有可能将他们重排序。实际上，对于有些代码进行重排序之后，虽然对变量的值没有造成影响，但有可能会出现线程安全问题。<br><code>synchronized</code>  保证原子性；<br><code>volatile</code>  保证可见性，有序性；<br><code>final</code>  保证可见性</li>\n</ul>\n<h2 id=\"Java实现多线程\"><a href=\"#Java实现多线程\" class=\"headerlink\" title=\"Java实现多线程\"></a>Java实现多线程</h2><p>创建多线程的四种方式：</p>\n<ul>\n<li>继承Thread类，重写run()方法</li>\n<li>实现Runnable接口，重写run()方法</li>\n<li>实现Callable接口，重写call()方法</li>\n<li>使用线程池</li>\n</ul>\n<p><strong>实现Runnable接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、实现Runnable接口中的run()方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 3.创建Runnable实现类的对象</span></span><br><span class=\"line\">       MyThread2 mThread = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">       <span class=\"comment\">// 4.将此对象作为参数传入Thread类的构造器中，创建Thread()类对象</span></span><br><span class=\"line\">       Thread t2 = <span class=\"keyword\">new</span> Thread(mThread);</span><br><span class=\"line\">       <span class=\"comment\">// 5.通过Thread类对象调用start()方法</span></span><br><span class=\"line\">       t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 再启动一个线程 不需要再造实现类对象</span></span><br><span class=\"line\">       Thread t3 = <span class=\"keyword\">new</span> Thread(mThread);</span><br><span class=\"line\">       t3.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现Callable接口：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建子线程1</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建Callable实现类的对象</span></span><br><span class=\"line\">        MyThread3 t = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">        <span class=\"comment\">// 实例化FutureTask类，将Callable实现类的对象作为参数传入</span></span><br><span class=\"line\">        FutureTask futureTask = <span class=\"keyword\">new</span> FutureTask(t);</span><br><span class=\"line\">        FutureTask futureTask1 = <span class=\"keyword\">new</span> FutureTask(t);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Thread(Runnable target)需要传入一个Runnable实现类的对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 而FutureTask类不仅实现了Future接口，同时也实现了Runnable接口</span></span><br><span class=\"line\">        <span class=\"comment\">// 因此可将FutureTask类的对象作为参数传入</span></span><br><span class=\"line\">        Thread th3 = <span class=\"keyword\">new</span> Thread(futureTask);</span><br><span class=\"line\">        th3.setName(<span class=\"string\">\"子线程1：\"</span>);</span><br><span class=\"line\">        th3.start();</span><br><span class=\"line\">        <span class=\"comment\">// 创建子线程2</span></span><br><span class=\"line\">        Thread th4 = <span class=\"keyword\">new</span> Thread(futureTask1);</span><br><span class=\"line\">        th4.setName(<span class=\"string\">\"子线程2：\"</span>);</span><br><span class=\"line\">        th4.start();     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Callable与Runnable 两点不同：</p>\n<p>第一，可以通过 call()获得返回值。前两种方式都有一个共同的缺陷，即在任务执行完成后 ，无法直接获取执行结果需要借助共享变量等获取 ，而 Callable和Future则很好地解决了这个问题；</p>\n<p> 第二， call()可以抛出异常。而 Runnable 要通过 setDefaultUncaughtExceptionHandler() 的方式才能在主线程中捕捉到子线程异常。</p>\n</blockquote>\n<p><strong>使用线程池</strong></p>\n<p>1、降低创建和销毁线程的资源消耗，提高线程的利用率；<br>2、提高响应速度；<br>3、提高线程的可管理性。</p>\n<p>线程池的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ThreadPoolUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据CPU数量动态配置核心线程数和最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 核心线程数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CORE_COUNT_MAX = <span class=\"number\">2</span> * CPU_COUNT + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 非核心线程存活时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> KEEP_ALIVE_TIME = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadPoolExecutor <span class=\"title\">getThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, CORE_COUNT_MAX, KEEP_ALIVE_TIME,</span><br><span class=\"line\">                TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">20</span>), Executors.defaultThreadFactory(), <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>corePoolSize</code> 核心线程数，也就是正常工作时创建的线程数，创建后不会销毁，是一种常驻线程。</li>\n<li><code>maxinumPoolSize</code> 最大线程数，表示允许创建的最大线程数，当核心线程数不够使用时创建，线程的总数不会超过最大线程数。</li>\n<li><code>keepAliveTime</code> 表示超出核心线程数之外的线程的空闲存活时间 。</li>\n<li><code>unit</code> 时间单位。</li>\n<li><code>workQueue</code> 任务队列，核心线程使用完后，将任务放入任务队列，当任务队列满后再创建新的线程。</li>\n<li><code>threadFactory</code> 线程工厂，用于创建线程。</li>\n<li><code>handler</code> 任务拒绝策略。当关闭线程池后，任务队列里面没有执行完的任务再向线程池提交时会拒绝；当线程达到最大线程数时继续提交任务也会拒绝。<img src=\"/2020/08/13/thread/2.png\" style=\"zoom:60%;\">\n\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程池 提供指定线程数量</span></span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程并开始线程</span></span><br><span class=\"line\">        service.submit(<span class=\"keyword\">new</span> MyThread4());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread4());</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接池</span></span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\":\"</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java实现多线程要注意的细节\"><a href=\"#Java实现多线程要注意的细节\" class=\"headerlink\" title=\"Java实现多线程要注意的细节\"></a>Java实现多线程要注意的细节</h2><p><strong>run()与start()的区别：</strong></p>\n<ul>\n<li><code>run()</code>：只是封装了被线程执行的代码，直接调用就是普通方法</li>\n<li><code>start()：</code>首先启动了线程，然后再由jvm去调用该线程的run()方法</li>\n</ul>\n<p><strong>java虚拟机的启动是单线程还是多线程的？</strong></p>\n<ul>\n<li>是多线程的，不仅启动main线程，还至少启动了垃圾回收线程</li>\n</ul>\n<p><strong>一般使用多线程的哪种实现方式？</strong></p>\n<ul>\n<li><p>使用实现Runnable接口的方式，避免了单继承的局限性</p>\n</li>\n<li><p>应该将并发运行任务和运行机制解耦</p>\n</li>\n</ul>\n<h2 id=\"Thread中的常用方法\"><a href=\"#Thread中的常用方法\" class=\"headerlink\" title=\"Thread中的常用方法\"></a>Thread中的常用方法</h2><p><strong>获取线程名：</strong><code>getName()</code></p>\n<p><strong>获取当前线程名：</strong><code>Thread.currentThread.getName()</code></p>\n<p><strong>设置线程名：</strong><code>setName()</code></p>\n<p><strong>设置守护进程：</strong><code>setDeamon(boolean on)</code></p>\n<ul>\n<li>守护进程<ul>\n<li>就是为其他进程服务的进程，例如垃圾回收的进程</li>\n<li>当别的用户进程执行完后，虚拟机就会退出，守护进程就会停止</li>\n<li>设置守护进程时，必须要在线程启动前设置<code>setDeamon(true)</code>，启动后设置会抛出异常，</li>\n<li>使用守护进程不要访问共享资源，因为他们可能在任何时候就挂掉了</li>\n<li>守护进程中产生的新进程也是守护进程</li>\n</ul>\n</li>\n</ul>\n<p><strong>设置线程优先级:</strong><code>setPriority()</code></p>\n<p>线程优先级高仅仅表示线程<strong>获取的CPU时间片的几率高</strong>，但这不是一个<strong>确定的因素</strong>！</p>\n<p> <strong>线程生命周期方法：</strong></p>\n<blockquote>\n<p>sleep()方法</p>\n</blockquote>\n<p>调用sleep方法会进入计时等待状态，等时间到了，<strong>进入的是就绪状态而并非是运行状态</strong><br><img src=\"/2020/08/13/thread/1.png\" alt></p>\n<blockquote>\n<p>yield()方法</p>\n</blockquote>\n<p>暂停当前正在执行的线程，让线程进入就绪状态，把执行机会让给优先级相同或更高的线程，不确保真正的让出。</p>\n<blockquote>\n<p>join()方法</p>\n</blockquote>\n<p>使调用的线程先执行，执行完后再执行其他线程；低优先级的线程也可以获得执行。</p>\n<blockquote>\n<p>wait()方法</p>\n</blockquote>\n<p>wait()是Object类中定义的native方法；</p>\n<p>一旦线程执行此方法，当前线程就会进入阻塞状态，并释放锁</p>\n<blockquote>\n<p>notify()方法</p>\n</blockquote>\n<p>notify()也是Object类中定义的native方法；</p>\n<p>一旦执行此方法就会唤醒被wait的一个线程。若有多个线程被wait，则唤醒优先级高的</p>\n<blockquote>\n<p>notifyAll()方法</p>\n</blockquote>\n<p>也是Object类中的方法，唤醒所有wait的线程</p>\n<blockquote>\n<p>interrupt()方法</p>\n</blockquote>\n<p>线程中断在之前的版本中有stop()方法，因为存在安全问题被设置过时了。</p>\n<p>stop()方法可以让一个线程A终止一个线程B，被终止的线程会立即释放锁，这可能会让对象处于不一致的状态。</p>\n<p>一般使用interrupt()来请求终止线程。</p>\n<ul>\n<li>interrupt不会真正停止一个线程，仅仅是发出一个<strong>中断信号</strong>，告诉他应该要结束了</li>\n<li>让线程自己处理，到底是中断还是继续执行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread t1 = <span class=\"keyword\">new</span> Thread( <span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若未发生中断，就正常执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Thread.currentThread.isInterrupted())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 正常任务代码……</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 中断的处理代码……</span></span><br><span class=\"line\">        doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ).start();</span><br></pre></td></tr></table></figure>\n\n<p>如果阻塞线程调用了interrupt()方法，那么会<strong>抛出异常，设置标志位为false，同时该线程会退出阻塞</strong>。</p>\n<p>Thread.interrupted() ：第一次使用返回true，并清除中断标志位，第二次返回false</p>\n<h2 id=\"synchronized锁与Lock锁\"><a href=\"#synchronized锁与Lock锁\" class=\"headerlink\" title=\"synchronized锁与Lock锁\"></a>synchronized锁与Lock锁</h2><p><strong>synchronized锁使用：</strong></p>\n<blockquote>\n<p>方式一：同步代码块</p>\n</blockquote>\n<p>将可能出现线程安全问题的代码使用<code>synchronized</code>关键字包裹</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(<span class=\"comment\">/*锁*/</span>)&#123;<span class=\"comment\">// 要保证是同一把锁</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方式二：同步方法</p>\n</blockquote>\n<p> 将可能出现线程安全问题的代码块封装成一个同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">synchronized</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Lock锁</strong></p>\n<p>通过显式定义同步锁对象，即Lock对象，来实现同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">buyTicket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNum = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 1.实例化ReentrantLock</span></span><br><span class=\"line\">    <span class=\"comment\">// ReentrantLock类实现了Lock，以及创建锁的lock()方法，释放锁的unlock()方法。</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2.调用锁定方法lock()</span></span><br><span class=\"line\">                lock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ticketNum&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    ticketNum--;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3.调用解锁方法unlock()</span></span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>synchronized</code>和<code>ReentrantLock</code>都是悲观锁的实现，共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源释放给其他线程。</p>\n<blockquote>\n<p>悲观锁</p>\n</blockquote>\n<p>总是假设最坏的情况，每次操作数据都会加锁，其他线程阻塞直到获得锁。例如数据库中的行锁，表锁，读锁，写锁，Java中的<code>synchronized</code>和<code>ReentrantLock</code>独占锁等。适用于写操作比较多的场景，保证数据的一致性。</p>\n<blockquote>\n<p>乐观锁</p>\n</blockquote>\n<p>总是假设最好的情况，每次操作数据时都不会加锁，只是在更新数据前判断在此期间该数据有没有被修改过，通常使用<strong>版本号机制</strong>和<strong>CAS算法</strong>实现。适用于读操作比较多的场景，可提高吞吐量。</p>\n<blockquote>\n<p>版本号机制</p>\n<p>在数据表中添加version版本号字段，用来表示数据被修改的次数，数据被修改时加1，线程在提交更新操作时会将读取的version与数据库中的version对比，相等才更新，否则重试直到更新成功。</p>\n<p>CAS算法</p>\n<p>Compare And Swap 比较交换，也叫非阻塞同步，在进行更新操作时会将<strong>读取到的值V</strong>与<strong>当前要修改的值A</strong>进行比较，如果相等就认为在此期间该值没有被其他线程修改过，则会提交更新操作将A修改为<strong>更新值B</strong>，否则一直自旋，直到成功。</p>\n</blockquote>\n<p>缺点：</p>\n<ul>\n<li>ABA问题，当前值由A改到其他值，然后又改回A，CAS算法就会判断该值没有被修改过。<code>AtomicStampedReference</code>类通过<strong>控制变量的版本</strong>来保证 CAS 的正确性。</li>\n<li>自旋CAS，长时间不成功会带来cpu开销加大。</li>\n</ul>\n<p>在Jdk 1.6之后，对Synchronized进行了优化，主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁 和 轻量级锁 以及其它各种优化。synchronized的底层实现主要依靠 Lock-Free 的队列，基本思路是自旋后阻塞，提高了吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</p>\n<h2 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h2><p>1、注意加锁顺序，保证每一个线程按同样的顺序进行加锁；</p>\n<p>2、设置超时时间；</p>\n<p>3、死锁检查，预防死锁的发生。</p>\n","categories":["Java"],"tags":["JavaSE"]},{"title":"集合","url":"/2020/03/02/java-06/","content":"<h1 id=\"集合与数组\"><a href=\"#集合与数组\" class=\"headerlink\" title=\"集合与数组\"></a>集合与数组</h1><p><strong>数组：</strong><br>1.一旦初始化，长度就不可修改了；<br>2.一旦定义后，就只能操作指定类型的数据了；<br>3.数组提供的方法非常有限，且效率不高；<a id=\"more\"></a><br>4.获取数组中实际元素的个数，没有现成的属性和方法可调用；<br>5.存储特点：有序，可重复。<br><strong>集合：</strong>Java集合分为Collection和Map两种体系<br><img src=\"/2020/03/02/java-06/1.jpg\" alt><br><strong>Collection接口：</strong>单列数据，存储一个一个的对象<br>&lt;1&gt; List接口：元素有序，可重复，可以存null，遍历元素使用迭代器以及下标遍历get()<br>实现类：<br>ArrayList，作为List接口的主要实现类；线程不安全，效率高；底层使用Object[] elementData存储<br>LinkedList，对于频繁插入，删除效率较高；底层使用双向链表储存<br>Vector，作为List接口的古老实现类；线程安全，效率低；底层使用Object[] elementData存储<br>&lt;2&gt; Set接口：元素无序，不可重复，只能存一个null，便利元素时只能使用迭代器遍历<br>实现类：<br>HashSet，作为Set接口的主要实现类；线程不安全；可以存储null<br>LinkedHashSet，HashSet的子类；遍历时可以按照添加的顺序遍历；对于频繁遍历效率较高<br>TreeSet，要求数据是同一个类型，可按照对象的指定属性进行排序<br><strong>Map接口：</strong>双列数据，存储具有映射关系”key - value对“<br>实现类：<br>HashMap，作为Map的主要实现类；线程不安全，效率高；能存储null的键值对<br>        -&gt; LinkedHashMap，保证在遍历元素时，可以按照添加顺序进行遍历；对于频繁遍历效率较高<br>        -&gt;原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前、后的元素。<br>TreeMap，按照添加的key-value进行排序；底层采用红黑树<br>Hashtable，作为Map的古老实现类；线程安全，效率低；不能存存储null的键值对<br>       -&gt; Properties，常用来处理配置文件。key和value都是String类型</p>\n<h2 id=\"Collection接口中的方法\"><a href=\"#Collection接口中的方法\" class=\"headerlink\" title=\"Collection接口中的方法\"></a>Collection接口中的方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Collection coll1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"comment\">// add(Object e) 将元素e添加到集合中</span></span><br><span class=\"line\">        coll1.add(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"number\">123</span>);<span class=\"comment\">//自动装箱</span></span><br><span class=\"line\">        coll1.add(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">        <span class=\"comment\">// size() 获取添加元素的个数</span></span><br><span class=\"line\">        System.out.println(coll1.size());<span class=\"comment\">// 3</span></span><br><span class=\"line\">        <span class=\"comment\">// addAll(Collection coll) 将coll的所有元素添加到当前集合中</span></span><br><span class=\"line\">        Collection coll2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        coll2.addAll(coll1);</span><br><span class=\"line\">        System.out.println(coll2);<span class=\"comment\">// 自动调用toString() [aaa, 123, Wed Mar 04 15:58:00 CST 2020]</span></span><br><span class=\"line\">        <span class=\"comment\">// isEmpty() 判断当前集合是否为空</span></span><br><span class=\"line\">        System.out.println(coll1.isEmpty());<span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"comment\">// clear() 清空集合元素</span></span><br><span class=\"line\">        coll1.clear();</span><br><span class=\"line\">        System.out.println(coll1.isEmpty());<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">// contains(Object e) 是否包含某个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 会调用obj类对象的equals()</span></span><br><span class=\"line\">        Collection coll3 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        coll3.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        coll3.add(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        coll3.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\">        System.out.println(coll3);<span class=\"comment\">// [1, abc, hello]</span></span><br><span class=\"line\">        System.out.println(coll3.contains(<span class=\"string\">\"hello\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">        <span class=\"comment\">// containAll(Collection coll) 判断形参coll中所有的元素是否在当前集合中</span></span><br><span class=\"line\">        Collection coll4 = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(coll3.containsAll(coll4));<span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Collection coll1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        coll1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        System.out.println(coll1);<span class=\"comment\">// [1, 2, 3, abc]</span></span><br><span class=\"line\">        <span class=\"comment\">// remove(Object e)</span></span><br><span class=\"line\">        coll1.remove(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">        System.out.println(coll1);<span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">        <span class=\"comment\">// removeAll(Collection coll) 从当前集合中移除coll中所有的元素</span></span><br><span class=\"line\">        Collection coll2 = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        coll1.removeAll(coll2);</span><br><span class=\"line\">        System.out.println(coll1);<span class=\"comment\">// [3]</span></span><br><span class=\"line\">        <span class=\"comment\">// retainAll(Collection coll) 返回交集</span></span><br><span class=\"line\">        Collection coll3 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        coll3.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        coll3.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Collection coll4 = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        coll3.retainAll(coll4);</span><br><span class=\"line\">        System.out.println(coll3);<span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\">        <span class=\"comment\">// toArray() 集合-&gt;数组</span></span><br><span class=\"line\">        <span class=\"comment\">// 数组-&gt;集合 Arrays.asList()</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代器Iterator接口\"><a href=\"#迭代器Iterator接口\" class=\"headerlink\" title=\"迭代器Iterator接口\"></a>迭代器Iterator接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span>  <span class=\"comment\">//集合元素的遍历，调用迭代器Iterator接口</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Collection coll1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        coll1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        coll1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 实例化迭代器对象</span></span><br><span class=\"line\">        Iterator iterator = coll1.iterator();</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; coll1.size(); i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println( iterator.next());</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// 起始指针位于第一个元素之前</span></span><br><span class=\"line\">        <span class=\"comment\">// hasNext() 判断是否还有下一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// next() 指针下移，将下移以后的集合位置上的元素返回</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            Object obj = iterator.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj.equals(<span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>)))&#123;</span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iterator = coll1.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"foreach循环\"><a href=\"#foreach循环\" class=\"headerlink\" title=\"foreach循环\"></a>foreach循环</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     Collection coll1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">     coll1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">     coll1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">     coll1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">     coll1.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 使用foreach进行遍历  for(集合元素类型 局部变量 : 集合对象)</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Object obj:coll1) &#123;<span class=\"comment\">//将coll1的元素依次取出并赋给obj</span></span><br><span class=\"line\">         System.out.println(obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a:arr1) &#123;</span><br><span class=\"line\">         a = <span class=\"number\">6</span>;</span><br><span class=\"line\">     &#125;<span class=\"comment\">// 对原数组没有影响</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">         arr1[i] = <span class=\"number\">6</span>;</span><br><span class=\"line\">     &#125;<span class=\"comment\">// 对原数组的值进行修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">         System.out.println(arr1[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"List常用方法\"><a href=\"#List常用方法\" class=\"headerlink\" title=\"List常用方法\"></a>List常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">//List常用方法</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class=\"line\">   <span class=\"comment\">// boolean addAll(int index, Collection eles):从index位置开始将eles中 的所有元素添加进来</span></span><br><span class=\"line\">   <span class=\"comment\">// Object get(int index):获取指定index位置的元素</span></span><br><span class=\"line\">       ArrayList list1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">       list1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">       list1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">       list1.add(<span class=\"number\">3</span>);  </span><br><span class=\"line\">       list1.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">       list1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">       System.out.println(list1.get(<span class=\"number\">1</span>));<span class=\"comment\">// 2</span></span><br><span class=\"line\">   <span class=\"comment\">// int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class=\"line\">       System.out.println(list1.indexOf(<span class=\"number\">4</span>));<span class=\"comment\">// 3</span></span><br><span class=\"line\">   <span class=\"comment\">// int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class=\"line\">       System.out.println(list1.lastIndexOf(<span class=\"number\">3</span>));<span class=\"comment\">// 4</span></span><br><span class=\"line\">   <span class=\"comment\">// Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"删除索引为2的元素:\"</span>+list1.remove(<span class=\"number\">2</span>));<span class=\"comment\">// 删除索引为2的元素:3</span></span><br><span class=\"line\">       System.out.println(list1);<span class=\"comment\">// [1, 2, 4, 3]</span></span><br><span class=\"line\">   <span class=\"comment\">// Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class=\"line\">       list1.set(<span class=\"number\">1</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">       System.out.println(list1);<span class=\"comment\">//[1, 5, 4, 3]</span></span><br><span class=\"line\">   <span class=\"comment\">// List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span></span><br><span class=\"line\">       System.out.println(list1.subList(<span class=\"number\">1</span>,<span class=\"number\">4</span>));<span class=\"comment\">// [5, 4, 3]</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LinkedList的可顺序遍历性\"><a href=\"#LinkedList的可顺序遍历性\" class=\"headerlink\" title=\"LinkedList的可顺序遍历性\"></a>LinkedList的可顺序遍历性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span> <span class=\"comment\">// LinkedList可按顺序进行遍历  使用foreach遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// LinkedList对数据进行储存时添加了两个引用，用于记录前一个元素和后一个元素的位置，</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此可按元素的添加顺序进行遍历，并且对频繁的遍历效率较高</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        LinkedList linkedList1 = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        linkedList1.add(<span class=\"number\">1111</span>);</span><br><span class=\"line\">        linkedList1.add(<span class=\"number\">2222</span>);</span><br><span class=\"line\">        linkedList1.add(<span class=\"number\">3333</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object obj : linkedList1)&#123;</span><br><span class=\"line\">            System.out.println(obj);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 1111 2222 3333</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set常用方法\"><a href=\"#Set常用方法\" class=\"headerlink\" title=\"Set常用方法\"></a>Set常用方法</h3><p>HashSet并没有添加新的方法，沿用Collection的方法</p>\n<h3 id=\"HashSet的添加\"><a href=\"#HashSet的添加\" class=\"headerlink\" title=\"HashSet的添加\"></a>HashSet的添加</h3><p>向Set中添加数据一定要重写hashCode()和equals()方法，相等的对象必须具有相同的散列码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// HashSet 无序性  使用迭代器遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无序性：不等于随机性，存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值</span></span><br><span class=\"line\">        <span class=\"comment\">// 不可重复性：保证添加的元素按equals()进行判断时，不能返回true</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        添加元素的过程：</span></span><br><span class=\"line\"><span class=\"comment\">        向HashSet中添加元素a,首先调用元素a所在类的hashCode(),计算元素a的哈希值,</span></span><br><span class=\"line\"><span class=\"comment\">        此哈希值与数组长度-1做与运算，计算出在HashSet底层数组中的存放位置,判断此位置上是否有其他元素：</span></span><br><span class=\"line\"><span class=\"comment\">            如果此位置没有其他元素，则元素a添加成功</span></span><br><span class=\"line\"><span class=\"comment\">            如果此位置上有元素b(或以链表形式存在的多个元素),则比较a,b的哈希值：</span></span><br><span class=\"line\"><span class=\"comment\">                如果哈希值不相同，则元素a添加成功(以链表形式,元素a指向原来的元素，并取代原来元素的位置;jdk8:采用红黑树（查找速度快）)</span></span><br><span class=\"line\"><span class=\"comment\">                如果哈希值相同，进而调用元素a所在类的equals()：</span></span><br><span class=\"line\"><span class=\"comment\">                    equals()返回true,则元素a添加失败</span></span><br><span class=\"line\"><span class=\"comment\">                    equals()返回false,则添加成功</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        HashSet set1 = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        set1.add(<span class=\"number\">111</span>);</span><br><span class=\"line\">        set1.add(<span class=\"number\">222</span>);</span><br><span class=\"line\">        set1.add(<span class=\"number\">333</span>);</span><br><span class=\"line\">        Iterator iterator = set1.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 333 222 111</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TreeSet按指定属性进行排序\"><a href=\"#TreeSet按指定属性进行排序\" class=\"headerlink\" title=\"TreeSet按指定属性进行排序\"></a>TreeSet按指定属性进行排序</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">//TreeSet按指定属性遍历</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       TreeSet treeSet1 = <span class=\"keyword\">new</span> TreeSet();</span><br><span class=\"line\">       <span class=\"comment\">// 按大小排序输出</span></span><br><span class=\"line\">       treeSet1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">       treeSet1.add(-<span class=\"number\">1</span>);</span><br><span class=\"line\">       treeSet1.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">       Iterator iterator = treeSet1.iterator();</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">           System.out.println(iterator.next());</span><br><span class=\"line\">       &#125;<span class=\"comment\">// -1 0 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       TreeSet treeSet2 = <span class=\"keyword\">new</span> TreeSet();</span><br><span class=\"line\">       treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">       treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"female\"</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">       treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Troye\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">22</span>));</span><br><span class=\"line\">       treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Justin\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">22</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       Iterator iterator2 = treeSet2.iterator();</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(iterator2.hasNext())&#123;</span><br><span class=\"line\">           System.out.println(iterator2.next());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Person类实现Comparable接口并重写toCompare()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"comment\">// 按照年龄排序</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Person) &#123;</span><br><span class=\"line\">           Person person = (Person)o;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> compare = <span class=\"keyword\">this</span>.age-person.age;<span class=\"comment\">// 从小到大</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(compare==<span class=\"number\">0</span>)&#123;<span class=\"comment\">// 年龄相同则按姓名进行排序</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.compareTo(person.name);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> compare;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"输入类型不匹配\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：<br>                        <img src=\"/2020/03/02/java-06/result.png\" alt></p>\n<hr>\n<p>使用定制排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定制排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 实例化Comparator类</span></span><br><span class=\"line\">    Comparator comparator = <span class=\"keyword\">new</span> Comparator() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(o1 <span class=\"keyword\">instanceof</span> Person &amp;&amp; o1 <span class=\"keyword\">instanceof</span> Person)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((Person) o1).getAge()-((Person)o2).getAge();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"传入参数错误\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    TreeSet treeSet2 = <span class=\"keyword\">new</span> TreeSet(comparator);<span class=\"comment\">// 传入comparator参数</span></span><br><span class=\"line\">    treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Tom\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">    treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Taylor\"</span>,<span class=\"string\">\"female\"</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">    treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Troye\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">22</span>));</span><br><span class=\"line\">    treeSet2.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Justin\"</span>,<span class=\"string\">\"male\"</span>,<span class=\"number\">15</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    Iterator iterator2 = treeSet2.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(iterator2.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(iterator2.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"List与数组之间的相互转换和遍历\"><a href=\"#List与数组之间的相互转换和遍历\" class=\"headerlink\" title=\"List与数组之间的相互转换和遍历\"></a>List与数组之间的相互转换和遍历</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 数组转集合</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Arrays.asList(arr) 返回的不是真正的 ArrayList 而是 Arrays中的一个内部类</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        ArrayList&lt;Integer&gt; arrToList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(arr));</span><br><span class=\"line\">        System.out.println(arrToList); <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 遍历方式</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// forEach 遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : arrToList) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// java8函数式接口遍历</span></span><br><span class=\"line\">        arrToList.stream().forEach(System.out::println);</span><br><span class=\"line\">        arrToList.stream().forEach(num -&gt; &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 集合转数组</span></span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            list.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化数组，指定类型，防止泛型丢失</span></span><br><span class=\"line\">        Integer[] listToArr = <span class=\"keyword\">new</span> Integer[list.size()];</span><br><span class=\"line\">        <span class=\"comment\">// 使用有参数的toArray(T[] a)</span></span><br><span class=\"line\">        arrToList.toArray(listToArr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(listToArr));<span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">        Arrays.stream(listToArr).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map接口\"><a href=\"#Map接口\" class=\"headerlink\" title=\"Map接口\"></a>Map接口</h2><p><strong>Map的结构：</strong><br>Map中的key：无序，不可重复，使用Set储存所有的key，key所在的类要重写equals()和 hashCode()<br>Map中的value：无序，可重复，使用List存储所有的value，value所在类要重写equals()<br>一个键值对构成一个entry对象<br>Map中的entry：无序，不可重复，使用Set储存所有的entry<br><strong>HashMap的底层实现原理：</strong><br>HashMap map = new HashMap();<br>实例化后，底层创建了一个长度为16的一维数组Entry[] table<br>map.put(key1,value1);<br>在jdk7中，首先调用key1所在类的hashCode()计算key的哈希值，此哈希值通过某种算法后，得到在Entry数组中的存放位置；<br>如果此位置为空，则添加成功，<br>否则将key1的哈希值与此位置上的一个或多个元素(key2,value2)的哈希值比较，<br>如果哈希值不同，则添加成功,<br>否则调用key1所在类的equals()，如果返回false，则添加成功，否则添加到链表头部（jdk8插入尾部）。<br>涉及到扩容时，容量扩大为原来的2倍，原有的数据全部被复制过来。</p>\n<p>在jdk8中，没有马上就创建数组，而是在put()时创建Node[]数组</p>\n<h3 id=\"Map接口中的方法\"><a href=\"#Map接口中的方法\" class=\"headerlink\" title=\"Map接口中的方法\"></a>Map接口中的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//  添加、删除、修改操作：</span></span><br><span class=\"line\"><span class=\"comment\">// Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class=\"line\">        HashMap map1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map1.put(<span class=\"string\">\"A\"</span>,<span class=\"number\">111</span>);</span><br><span class=\"line\">        map1.put(<span class=\"string\">\"B\"</span>,<span class=\"number\">222</span>);</span><br><span class=\"line\">        map1.put(<span class=\"string\">\"C\"</span>,<span class=\"number\">333</span>);</span><br><span class=\"line\">        System.out.println(map1);<span class=\"comment\">// &#123;A=111, B=222, C=333&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class=\"line\">        HashMap map2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map2.putAll(map1);</span><br><span class=\"line\">        System.out.println(map2);<span class=\"comment\">// &#123;A=111, B=222, C=333&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class=\"line\">        Object a = map2.remove(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        System.out.println(a);<span class=\"comment\">// 111</span></span><br><span class=\"line\">        System.out.println(map2);<span class=\"comment\">// &#123;B=222, C=333&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// void clear()：清空当前map中的所有数据</span></span><br><span class=\"line\">        map2.clear();</span><br><span class=\"line\">        System.out.println(map2);<span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 元素查询的操作：</span></span><br><span class=\"line\"><span class=\"comment\">// Object get(Object key)：获取指定key对应的value</span></span><br><span class=\"line\">        Object b = map1.get(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        System.out.println(b);<span class=\"comment\">// 222</span></span><br><span class=\"line\"><span class=\"comment\">// boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class=\"line\">        System.out.println(map1.containsKey(<span class=\"string\">\"D\"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class=\"line\">        System.out.println(map1.containsValue(<span class=\"number\">222</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// int size()：返回map中key-value对的个数</span></span><br><span class=\"line\">        System.out.println(map2.size());<span class=\"comment\">// 0</span></span><br><span class=\"line\">        System.out.println(map1.size());<span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// boolean isEmpty()：判断当前map是否为空</span></span><br><span class=\"line\">        System.out.println(map2.isEmpty());<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class=\"line\"><span class=\"comment\">// 元视图操作的方法：</span></span><br><span class=\"line\"><span class=\"comment\">// Set keySet()：返回所有key构成的Set集合</span></span><br><span class=\"line\">        Set set1 = map1.keySet();</span><br><span class=\"line\">        Iterator iterator = set1.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;<span class=\"comment\">// A B C</span></span><br><span class=\"line\"><span class=\"comment\">// Collection values()：返回所有value构成的Collection集合</span></span><br><span class=\"line\">        Collection coll1 = map1.values();</span><br><span class=\"line\">        Iterator iterator1 = coll1.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator1.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator1.next());</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 111 222 333</span></span><br><span class=\"line\"><span class=\"comment\">// Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class=\"line\">        Set set2 = map1.entrySet();</span><br><span class=\"line\">        System.out.println(set2);<span class=\"comment\">// [A=111, B=222, C=333]</span></span><br><span class=\"line\">        Iterator iterator2 = set2.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator2.hasNext())&#123;</span><br><span class=\"line\">            Object obj = iterator2.next();</span><br><span class=\"line\">            Map.Entry entry = (Map.Entry) obj;</span><br><span class=\"line\">            System.out.println(entry.getKey() +<span class=\"string\">\"===\"</span>+entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>集合初始化时，指定集合初始值大小。如果暂时无法确定集合大小，那么指定相应的默认值，这也要求我们记得各种集合的默认值大小， ArrayList 大小为10 HashMap 默认值为 16 。</p>\n<p>在HashMap中initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loader factor）默认为 0.75。</p>\n<p>​                                                                                                                                         —–来自《阿里java开发手册》</p>\n</blockquote>\n<h1 id=\"集合工具类\"><a href=\"#集合工具类\" class=\"headerlink\" title=\"集合工具类\"></a>集合工具类</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 排序操作：（均为static方法）</span></span><br><span class=\"line\"><span class=\"comment\">// reverse(List)：反转List 中元素的顺序</span></span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        list.add(<span class=\"number\">111</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">222</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">333</span>);</span><br><span class=\"line\">        list.add(<span class=\"number\">444</span>);</span><br><span class=\"line\">        System.out.println(list);<span class=\"comment\">// [111, 222, 333, 444]</span></span><br><span class=\"line\">        Collections.reverse(list);</span><br><span class=\"line\">        System.out.println(list);<span class=\"comment\">// [444, 333, 222, 111]</span></span><br><span class=\"line\"><span class=\"comment\">// shuffle(List)：对List 集合元素进行随机排序</span></span><br><span class=\"line\">        Collections.shuffle(list);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"><span class=\"comment\">// sort(List)：根据元素的自然顺序对指定List 集合元素按升序排序</span></span><br><span class=\"line\">        Collections.sort(list);</span><br><span class=\"line\">        System.out.println(list);<span class=\"comment\">// [111, 222, 333, 444]</span></span><br><span class=\"line\"><span class=\"comment\">// sort(List，Comparator)：根据指定的Comparator 产生的顺序对List 集合元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">// swap(List，int，int)：将指定list 集合中的i 处元素和j 处元素进行交换</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">// 查找、替换</span></span><br><span class=\"line\"><span class=\"comment\">// Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class=\"line\"><span class=\"comment\">// Object max(Collection，Comparator)：根据Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class=\"line\"><span class=\"comment\">// Object min(Collection)</span></span><br><span class=\"line\"><span class=\"comment\">// Object min(Collection，Comparator)</span></span><br><span class=\"line\"><span class=\"comment\">// int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class=\"line\"><span class=\"comment\">// void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">// boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"DQL,常见函数","url":"/2020/02/22/mysql-02/","content":"<h2 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h2><p><strong>语法：</strong><br>        select 查询列表 from 表名<a id=\"more\"></a><br><strong>特点：</strong><br>        1.查询列表可以是：表中的字段，常量值，表达式，函数；<br>        2.查询的结果是一个虚拟的表格。<!--more--></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.查询表中的单个字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查询表中的多个字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name,last_name <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.查询表中的所有字段</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  * <span class=\"keyword\">from</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.查询常量值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'qwer'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">666</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.查询表达式</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">1</span>+<span class=\"number\">2</span>+<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">100</span>%<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.查询函数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">VERSION</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.起别名</span></span><br><span class=\"line\"><span class=\"comment\"># 方式一：使用AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">9</span>/<span class=\"number\">2</span> <span class=\"keyword\">AS</span> 结果;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name <span class=\"keyword\">AS</span> 名,last_name <span class=\"keyword\">AS</span> 姓 <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># 方式二：使用空格</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> salary 薪水 <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8.去重:使用DISTINCT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> department_id <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 9.+号的作用：只能作运算符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'22'</span>+<span class=\"number\">33</span>; <span class=\"comment\">-- 55</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">'qwer'</span>+<span class=\"number\">333</span>; <span class=\"comment\">-- 333</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"literal\">null</span>+<span class=\"number\">333</span>; <span class=\"comment\">-- NULL</span></span><br><span class=\"line\"><span class=\"comment\"># 字符串连接函数CONCAT(str1,str2,...)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  <span class=\"keyword\">CONCAT</span>(last_name, first_name) <span class=\"keyword\">AS</span> 全名 <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10.使用IFNULL(expr,expr为null时需要返回的值)对结果为null的数据进行处理</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(salary,<span class=\"string\">','</span>,<span class=\"keyword\">IFNULL</span>(commission_pct,<span class=\"number\">0</span>)) <span class=\"keyword\">AS</span> <span class=\"string\">'月薪,年奖金率'</span> <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># 11.ISNULL(expr) expr为null 返回0，否则返回1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><p><strong>语法：</strong><br>        select 查询列表 from 表名 where 筛选条件<br>        <strong>分类：</strong><br>        1.按条件表达式进行筛选<br>        条件运算符：&gt; &lt; != &lt;&gt; &gt;= &lt;=<br>        2.按逻辑表达式<br>        &amp;&amp; || ! and or not<br>        3.模糊查询<br>         <em>like：</em><br>                1.一般与通配符搭配使用<br>                2.通配符(使用\\转义)：<br>                     %：表示0个或任意多个字符;<br>                     _ ：表示任意单个字符;<br>         <em>(not) between and：</em> 包含边界值<br>        <em>in：</em> 判断某字段的值是否属于in列表中的某一项<br>        in列表中的元素类型要相同或兼容<br>        <em>is null / is not null：</em>只能判断是否为null;<br>        &lt;=&gt; : 安全等于，既能判断是否为null也能判断数字;<br>        = 和 &lt;&gt;不能判断null</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.按条件表达式筛选</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> salary&gt;<span class=\"number\">15000</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,first_name,salary <span class=\"keyword\">FROM</span>  employees <span class=\"keyword\">WHERE</span> department_id&lt;&gt;<span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.按逻辑表达式筛选</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,salary,commission_pct <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> salary&gt;=<span class=\"number\">10000</span> <span class=\"keyword\">and</span> salary&lt;=<span class=\"number\">15000</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询部门编号不是在90到110之间，或者工资高于12000的员工的信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,first_name,salary <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span>(department_id&gt;=<span class=\"number\">90</span> <span class=\"keyword\">AND</span> department_id&lt;=<span class=\"number\">110</span>) <span class=\"keyword\">OR</span> salary&gt;<span class=\"number\">12000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.模糊筛选</span></span><br><span class=\"line\"><span class=\"comment\"># 查询员工名中包含字符a的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> first_name <span class=\"keyword\">LIKE</span> <span class=\"string\">'%a%'</span> ;</span><br><span class=\"line\"><span class=\"comment\"># 查询员工名中第三个字符为a,第四个字符为n的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> first_name <span class=\"keyword\">LIKE</span> <span class=\"string\">'__an%'</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询员工编号在100~200之间的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> employee_id <span class=\"keyword\">BETWEEN</span> <span class=\"number\">100</span> <span class=\"keyword\">AND</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询员工的工种编号是IT_PROG,IT_VP,AD_PRES中的一个员工的员工名和工种编号</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> first_name,job_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">where</span> job_id <span class=\"keyword\">IN</span> (<span class=\"string\">'IT_PROG'</span>,<span class=\"string\">'IT_VP'</span>,<span class=\"string\">'AD_PRES'</span>);</span><br><span class=\"line\"><span class=\"comment\"># 查询没有奖金的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">where</span> commission_pct = <span class=\"literal\">NULL</span>; <span class=\"comment\">-- 查询不到结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> commission_pct <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h2><p>语法：select 查询列表 from 表 where 查询条件  order by 排序列表 asc/desc;<br>特点：1.asc:升序；desc:降序；如果不写，默认为升序<br>            2.order by 子句支持单个字段，多个字段，表达式，函数，别名<br>            3.order by 子句一般放在查询语句的最后面，limit子句除外</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary <span class=\"keyword\">ASC</span>; <span class=\"comment\">-- 升序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary; <span class=\"comment\">-- 省略时默认为升序排列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary <span class=\"keyword\">DESC</span>; <span class=\"comment\">-- 降序</span></span><br><span class=\"line\"><span class=\"comment\"># 查询部门编号&gt;=90的员工信息，按入职时间的先后顺序进行排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *  <span class=\"keyword\">FROM</span> employees  <span class=\"keyword\">WHERE</span> department_id&gt;=<span class=\"number\">90</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> hiredate;</span><br><span class=\"line\"><span class=\"comment\"># 按年薪的高低显示员工的信息和年薪（按表达式排序）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * ,salary*<span class=\"number\">12</span>*(<span class=\"number\">1</span>+<span class=\"keyword\">IFNULL</span>(commission_pct,<span class=\"number\">0</span>)) <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary*<span class=\"number\">12</span>*(<span class=\"number\">1</span>+<span class=\"keyword\">IFNULL</span>(commission_pct,<span class=\"number\">0</span>)) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"comment\"># 按别名排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * ,salary*<span class=\"number\">12</span>*(<span class=\"number\">1</span>+<span class=\"keyword\">IFNULL</span>(commission_pct,<span class=\"number\">0</span>)) <span class=\"keyword\">AS</span> <span class=\"string\">'年薪'</span> <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"string\">'年薪'</span> <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"comment\"># 按姓名的长度显示员工的姓名和工资（按函数值进行排序）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(last_name,first_name) <span class=\"keyword\">AS</span> <span class=\"string\">'姓名'</span> ,<span class=\"keyword\">LENGTH</span>(<span class=\"keyword\">CONCAT</span>(last_name,first_name)),salary <span class=\"keyword\">AS</span> <span class=\"string\">'工资'</span> <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">LENGTH</span>(姓名);</span><br><span class=\"line\"><span class=\"comment\"># 查询员工信息，要求先按工资的升序，再按员工编号的降序（按多个字段排序）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary <span class=\"keyword\">ASC</span>,employee_id <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h2><p>概念：类似于java中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名<br>好处：隐藏了实现细节；提高了代码的复用性<br>调用：select 函数名() from 表名;<br>分类： 1.单行函数：作用于单行数据，返回一个结果<br>            2.分组函数：作用于一组数据，并对一组数据返回一个值</p>\n<h3 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h3><h4 id=\"一、字符函数\"><a href=\"#一、字符函数\" class=\"headerlink\" title=\"一、字符函数\"></a>一、字符函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.LENGTH(str) 获取参数值的字节个数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LENGTH</span>(<span class=\"string\">'哈哈hh'</span>); <span class=\"comment\">-- 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.CONCAT(str1,str2,...) 拼接字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.UPPER(str),LOWER(str)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"keyword\">upper</span>(last_name),<span class=\"string\">' '</span>,<span class=\"keyword\">lower</span>(first_name)) <span class=\"keyword\">AS</span> <span class=\"string\">'姓名'</span><span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.SUBSTR(str FROM pos FOR len),substring()截取字符串(索引从1开始)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUBSTR</span>(last_name,<span class=\"number\">1</span>,<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.INSTR(str,substr) 返回子串在母串第一次出现的索引位置，如果找不到就返回0</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">INSTR</span>(<span class=\"string\">'helloworld'</span>,<span class=\"string\">'world'</span>); <span class=\"comment\">-- 6</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">INSTR</span>(<span class=\"string\">'helloworld'</span>,<span class=\"string\">'word'</span>); <span class=\"comment\">-- 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.TRIM([remstr FROM] str) 去掉首尾空格或指定字符串</span></span><br><span class=\"line\"><span class=\"comment\"># 7.LPAD(str,len,padstr) /RPAD(str,len,padstr)用指定的字符实现左/右填充指定长度</span></span><br><span class=\"line\"><span class=\"comment\"># REPLACE(str,from_str,to_str) 替换</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、数学函数\"><a href=\"#二、数学函数\" class=\"headerlink\" title=\"二、数学函数\"></a>二、数学函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.ROUND(X) 四舍五入</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">ROUND</span>(<span class=\"number\">-1.55</span>); <span class=\"comment\">-- -2</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">ROUND</span>(<span class=\"number\">-1.566</span>,<span class=\"number\">2</span>); <span class=\"comment\">-- -1.57</span></span><br><span class=\"line\"><span class=\"comment\"># 2.CEIL(X) 向上取整，返回&gt;=该参数的最小整数</span></span><br><span class=\"line\"><span class=\"comment\"># 3.FLOOR(X) 向下取整，返回&lt;=该参数的最大整数</span></span><br><span class=\"line\"><span class=\"comment\"># 4.TRUNCATE(X,D) 从小数点后D位截断</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">TRUNCATE</span>(<span class=\"number\">1.29</span>,<span class=\"number\">1</span>); <span class=\"comment\">-- 1.2</span></span><br><span class=\"line\"><span class=\"comment\"># 5.MOD(N,M) 取余:符号与被除数相同</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MOD</span>(<span class=\"number\">-10</span>,<span class=\"number\">3</span>); <span class=\"comment\">-- -1</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MOD</span>(<span class=\"number\">10</span>,<span class=\"number\">-3</span>); <span class=\"comment\">-- 1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、日期函数\"><a href=\"#三、日期函数\" class=\"headerlink\" title=\"三、日期函数\"></a>三、日期函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NOW() 返回当前系统日期+时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">NOW</span>(); <span class=\"comment\">-- 2020-02-23 11:27:48</span></span><br><span class=\"line\"><span class=\"comment\"># CURDATE() 返回当前系统的日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CURDATE</span>(); <span class=\"comment\">-- 2020-02-23</span></span><br><span class=\"line\"><span class=\"comment\"># CURTIME() 返回当前系统的事件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CURTIME</span>(); <span class=\"comment\">-- 11:30:11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取指定的年，月，日，时，分，秒</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">YEAR</span>(<span class=\"keyword\">NOW</span>()) <span class=\"keyword\">AS</span> 年份;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">YEAR</span>(<span class=\"string\">'1999-2-2'</span>); <span class=\"comment\">-- 1999</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MONTH</span>(<span class=\"keyword\">NOW</span>()) <span class=\"keyword\">AS</span> 月;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> MONTHNAME(<span class=\"keyword\">NOW</span>()); <span class=\"comment\">-- February</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DAY</span>(<span class=\"keyword\">NOW</span>()) <span class=\"keyword\">AS</span>  日;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">HOUR</span>(<span class=\"keyword\">CURTIME</span>()) <span class=\"keyword\">AS</span> 时; </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(<span class=\"keyword\">CURTIME</span>()) <span class=\"keyword\">AS</span> 分;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># STR_TO_DATE(str,format) 将字符通过指定的格式转换成日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">STR_TO_DATE</span>(<span class=\"string\">'1999-2-29'</span>,<span class=\"string\">'%Y-%c-%d'</span>); <span class=\"comment\">-- 1999-02-29</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">STR_TO_DATE</span>(<span class=\"string\">'99-02-29'</span>,<span class=\"string\">'%y-%m-%d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  DATE_FORMAT(date,format) 将日期转换成字符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATE_FORMAT</span>(<span class=\"keyword\">now</span>(),<span class=\"string\">'%Y年%m月%d日'</span>);<span class=\"comment\">-- 2020年02月23日</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATE_FORMAT</span>(<span class=\"keyword\">now</span>(),<span class=\"string\">'%y年%c月%d日'</span>); <span class=\"comment\">-- 20年2月23日</span></span><br><span class=\"line\"><span class=\"comment\"># 查询有奖金的员工名和入职日期(xx月/xx日 xx年)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name <span class=\"keyword\">AS</span> 姓名,<span class=\"keyword\">DATE_FORMAT</span>(hiredate,<span class=\"string\">'%m月/%d日 %y年'</span>) <span class=\"keyword\">AS</span> 入职日期 <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> commission_pct <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、其他函数\"><a href=\"#四、其他函数\" class=\"headerlink\" title=\"四、其他函数\"></a>四、其他函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">VERSION</span>();</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATABASE</span>();</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五、流程控制函数\"><a href=\"#五、流程控制函数\" class=\"headerlink\" title=\"五、流程控制函数\"></a>五、流程控制函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># IF(expr1,expr2,expr3)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">IF</span>(<span class=\"number\">2</span>&gt;<span class=\"number\">1</span>,<span class=\"string\">'true'</span>,<span class=\"string\">'false'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># case 用法一：相当于java中的switch()</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">CASE 要判断的字段或表达式</span></span><br><span class=\"line\"><span class=\"comment\">\tWHEN 常量1 THEN</span></span><br><span class=\"line\"><span class=\"comment\">\t\t要显示的值1(或语句1;)</span></span><br><span class=\"line\"><span class=\"comment\">\tELSE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t要显示的值n(或语句n;)</span></span><br><span class=\"line\"><span class=\"comment\">\tEND;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*查询员工工资，要求：</span></span><br><span class=\"line\"><span class=\"comment\">部门号=30，显示工资为1.1倍；</span></span><br><span class=\"line\"><span class=\"comment\">部门号=40，显示工资为1.2倍；</span></span><br><span class=\"line\"><span class=\"comment\">部门号=50，显示工资为1.3倍；</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> salary\t<span class=\"keyword\">AS</span> 原始工资,department_id <span class=\"keyword\">AS</span> 部门号,</span><br><span class=\"line\"><span class=\"keyword\">CASE</span> department_id</span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> <span class=\"number\">30</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">\t\tsalary *<span class=\"number\">1.1</span></span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> <span class=\"number\">40</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">\t\tsalary*<span class=\"number\">1.2</span></span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> <span class=\"number\">50</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">\t\tsalary*<span class=\"number\">1.3</span></span><br><span class=\"line\">\t<span class=\"keyword\">ELSE</span> salary</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">AS</span> 最终工资 <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># case用法二：相当于java中if()  else if() else </span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">CASE </span></span><br><span class=\"line\"><span class=\"comment\">\tWHEN 条件1 THEN</span></span><br><span class=\"line\"><span class=\"comment\">\t\t要显示的值1(或语句1;)</span></span><br><span class=\"line\"><span class=\"comment\">\tWHEN 条件2 THEN</span></span><br><span class=\"line\"><span class=\"comment\">\t\t要显示的值2(或语句2;)</span></span><br><span class=\"line\"><span class=\"comment\">\tELSE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t要显示的值n(或语句n;)</span></span><br><span class=\"line\"><span class=\"comment\">END CASE;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*查询员工的工资情况</span></span><br><span class=\"line\"><span class=\"comment\">如果工资&gt;20000,显示A级别；</span></span><br><span class=\"line\"><span class=\"comment\">如果工资&gt;15000,显示B级别；</span></span><br><span class=\"line\"><span class=\"comment\">如果工资&gt;10000,显示C级别；</span></span><br><span class=\"line\"><span class=\"comment\">其余的显示D级别</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> salary <span class=\"keyword\">AS</span> <span class=\"string\">'工资'</span>,</span><br><span class=\"line\"><span class=\"keyword\">CASE</span> </span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> salary&gt;<span class=\"number\">20000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'A'</span></span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> salary&gt;<span class=\"number\">15000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'B'</span></span><br><span class=\"line\">\t<span class=\"keyword\">WHEN</span> salary&gt;<span class=\"number\">10000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'C'</span></span><br><span class=\"line\">\t<span class=\"keyword\">ELSE</span> <span class=\"string\">'D'</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">AS</span> <span class=\"string\">'工资等级'</span> <span class=\"keyword\">FROM</span> employees;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分组函数\"><a href=\"#分组函数\" class=\"headerlink\" title=\"分组函数\"></a>分组函数</h3><p><strong>作用：</strong>用作统计使用，又称聚合函数，统计函数，组函数<br>        <strong>特点：</strong><br>        1.sum，avg一般处理数值型数据；max，min，count可以处理任何类型<br>        2.以上分组函数都忽略null值<br>        3.可以和discount()搭配使用实现去重<br>        4.一般使用count(*)统计行数，没有记录返回0<br>        5.和分组函数一起查询的字段必须是group by后面的字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sum() 求和</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">sum</span>(salary) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># avg() 求平均值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(salary) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># max() 求最大值;min() 求最小值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(salary) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(salary) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># count() 计算个数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(employee_id) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询员工表中最大入职时间和最小入职时间的相差天数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATEDIFF</span>(<span class=\"keyword\">MAX</span>(hiredate),<span class=\"keyword\">MIN</span>(hiredate)) <span class=\"keyword\">FROM</span> employees;</span><br><span class=\"line\"><span class=\"comment\"># 查询部门编号为60的员工个数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> department_id = <span class=\"number\">60</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h2><p><strong>语法：</strong><br>        select 分组函数,列(要求出现在group by的后面)<br>        from 表<br>        where 筛选条件<br>        group by 分组的列表<br>        order by 子句<br>        特点：分组查询中的筛选条件分为两类<br>            分组前筛选：数据源在原始表中，位于group by子句前面，使用where关键字；<br>            分组后筛选：数据源在分组后的结果集中，位于group by子句后面，使用having关键字<br>            1.分组函数作条件肯定放在having后<br>            2.能分组前筛选尽量放在group by前面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询每个工种的最高工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(salary),job_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> job_id;</span><br><span class=\"line\"><span class=\"comment\"># 查询每个位置上的部门个数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*),location_id <span class=\"keyword\">FROM</span> departments <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> location_id;</span><br><span class=\"line\"><span class=\"comment\"># 查询邮箱中包含a字符的，每个部门的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(salary),department_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> email <span class=\"keyword\">LIKE</span> <span class=\"string\">\"%a%\"</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id;</span><br><span class=\"line\"><span class=\"comment\"># 查询员工数&gt;2的部门</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*),department_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id <span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(*)&gt;<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(salary),job_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> commission_pct <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">HAVING</span> <span class=\"keyword\">MAX</span>(salary)&gt;<span class=\"number\">12000</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪一个，以及最低工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(salary),manager_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> manager_id&gt;<span class=\"number\">102</span> <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> manager_id <span class=\"keyword\">HAVING</span> <span class=\"keyword\">MIN</span>(salary)&gt;<span class=\"number\">5000</span> </span><br><span class=\"line\"><span class=\"comment\"># 查询每个部门每个工种的员工的平均工资，并按平均工资的高低显示 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(salary),job_id,department_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> job_id,department_id <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">AVG</span>(salary) <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一、内连接</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">语法：</span></span><br><span class=\"line\"><span class=\"comment\">select 查询列表</span></span><br><span class=\"line\"><span class=\"comment\">from 表1 别名</span></span><br><span class=\"line\"><span class=\"comment\">inner join 表2 别名</span></span><br><span class=\"line\"><span class=\"comment\">on 连接条件</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 1.等值</span></span><br><span class=\"line\"><span class=\"comment\"># 查询员工名、部门名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,department_name <span class=\"keyword\">FROM</span> departments d <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">ON</span> d.department_id = e.department_id;</span><br><span class=\"line\"><span class=\"comment\"># 查询名字中包含e的员工名和工种名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name,job_title <span class=\"keyword\">from</span> employees e <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> jobs j</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.job_id= j.job_id <span class=\"keyword\">where</span> e.last_name <span class=\"keyword\">LIKE</span> <span class=\"string\">\"%e%\"</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询部门个数&gt;3的城市名和部门个数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> city,<span class=\"keyword\">COUNT</span>(*) 部门个数 <span class=\"keyword\">FROM</span> locations l <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> departments d </span><br><span class=\"line\"><span class=\"keyword\">ON</span> l.location_id=d.location_id <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> city <span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(*)&gt;<span class=\"number\">3</span>; </span><br><span class=\"line\"><span class=\"comment\"># 查询哪个部门的部门员工个数&gt;3的部门名和员工个数，并按个数降序排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> department_name,<span class=\"keyword\">COUNT</span>(*) 部门员工个数 <span class=\"keyword\">FROM</span> departments d <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">ON</span> d.department_id = e.department_id <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_name <span class=\"keyword\">HAVING</span> <span class=\"keyword\">COUNT</span>(*)&gt;<span class=\"number\">3</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.非等值</span></span><br><span class=\"line\"><span class=\"comment\"># 查询员工的工资等级</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> salary,grade_level <span class=\"keyword\">FROM</span> employees e <span class=\"keyword\">JOIN</span> job_grades j </span><br><span class=\"line\"><span class=\"keyword\">ON</span> salary <span class=\"keyword\">BETWEEN</span> j.lowest_sal <span class=\"keyword\">AND</span> j.highest_sal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.自连接</span></span><br><span class=\"line\"><span class=\"comment\"># 查询员工名、上级的名字</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e.last_name,m.last_name <span class=\"keyword\">FROM</span> employees e <span class=\"keyword\">JOIN</span> employees m</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.manager_id = m.employee_id;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二、外连接</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">用于查询一个表中有，另一个表中没有的字段</span></span><br><span class=\"line\"><span class=\"comment\">特点：</span></span><br><span class=\"line\"><span class=\"comment\">1.外连接的查询结果为主表中的所有记录</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果从表中有和它匹配的，则显示匹配的值</span></span><br><span class=\"line\"><span class=\"comment\">\t\t否则显示null</span></span><br><span class=\"line\"><span class=\"comment\">\t\t外连接的查询结果=内连接的结果+主表中有 而 从表中没有的记录</span></span><br><span class=\"line\"><span class=\"comment\">2.左外连接，left [outer] join   左边的是主表</span></span><br><span class=\"line\"><span class=\"comment\">  右外连接，right [outer] join  右边的是主表</span></span><br><span class=\"line\"><span class=\"comment\">3.全外连接=内连接的结果+表1中有单表2中没有的+表2中有的而表1中没有的</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 查询没有员工的部门信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> d.* <span class=\"keyword\">FROM</span> departments d <span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">ON</span> d.department_id=e.department_id <span class=\"keyword\">WHERE</span> employee_id <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 子查询</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">出现在其他语句内部的select语句，称为子查询</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># where或having后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询工资比 Abel高的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> salary&gt;(<span class=\"keyword\">SELECT</span> salary <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> last_name=<span class=\"string\">\"Abel\"</span>);</span><br><span class=\"line\"><span class=\"comment\"># 查询最低工资大于50号部门最低工资的部门id和其最低工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> department_id,<span class=\"keyword\">MIN</span>(salary) <span class=\"keyword\">FROM</span>  employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id </span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">MIN</span>(salary)&gt;(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(salary) <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> department_id=<span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"comment\"># 查询location_id在1400或1700的部门中的所有员工的姓名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> department_id <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> department_id <span class=\"keyword\">FROM</span>\tdepartments  <span class=\"keyword\">WHERE</span> location_id <span class=\"keyword\">IN</span> (<span class=\"number\">1400</span>,<span class=\"number\">1700</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># select后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询每个部门的人数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> d.*,(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employees e <span class=\"keyword\">WHERE</span> e.department_id = d.department_id) 个数</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> departments d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># from后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询每个部门的平均工资的等级</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ag_dep.*,g.grade_level <span class=\"keyword\">FROM</span> </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(salary) ag,department_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id) ag_dep </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> job_grades g <span class=\"keyword\">ON</span>  ag_dep.ag <span class=\"keyword\">BETWEEN</span> lowest_sal <span class=\"keyword\">AND</span> highest_sal;</span><br><span class=\"line\"><span class=\"comment\"># 子查询</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">出现在其他语句内部的select语句，称为子查询</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># where或having后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询工资比 Abel高的员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> salary&gt;(<span class=\"keyword\">SELECT</span> salary <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> last_name=<span class=\"string\">\"Abel\"</span>);</span><br><span class=\"line\"><span class=\"comment\"># 查询最低工资大于50号部门最低工资的部门id和其最低工资</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> department_id,<span class=\"keyword\">MIN</span>(salary) <span class=\"keyword\">FROM</span>  employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id </span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">MIN</span>(salary)&gt;(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">MIN</span>(salary) <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> department_id=<span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"comment\"># 查询location_id在1400或1700的部门中的所有员工的姓名</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> last_name <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span> department_id <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> department_id <span class=\"keyword\">FROM</span>\tdepartments  <span class=\"keyword\">WHERE</span> location_id <span class=\"keyword\">IN</span> (<span class=\"number\">1400</span>,<span class=\"number\">1700</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># select后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询每个部门的人数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> d.*,(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> employees e <span class=\"keyword\">WHERE</span> e.department_id = d.department_id) 个数</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> departments d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># from后面</span></span><br><span class=\"line\"><span class=\"comment\"># 查询每个部门的平均工资的等级</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ag_dep.*,g.grade_level <span class=\"keyword\">FROM</span> </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"keyword\">AVG</span>(salary) ag,department_id <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department_id) ag_dep </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> job_grades g <span class=\"keyword\">ON</span>  ag_dep.ag <span class=\"keyword\">BETWEEN</span> lowest_sal <span class=\"keyword\">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">分页提交sql请求</span></span><br><span class=\"line\"><span class=\"comment\">select 查询列表 from 表名 limit 起始索引(从0开始)，结果的数目</span></span><br><span class=\"line\"><span class=\"comment\">limit语句放在查询语句的最后 </span></span><br><span class=\"line\"><span class=\"comment\">当前页 pageNum , 每页的条目数pageSize</span></span><br><span class=\"line\"><span class=\"comment\">select 查询列表 from 表名 limit (pageNum-1)*pageSize,pageSize;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\"># 查询前5条员工信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>\temployees\t<span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询第11条~第25条的信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">LIMIT</span> <span class=\"number\">11</span>,<span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询有奖金的员工信息，并且工资较高的前10名显示出来</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> employees <span class=\"keyword\">WHERE</span>\tcommission_pct <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> salary\t<span class=\"keyword\">DESC</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h2><p>将多条查询语句的结果合并在一起<br>语法：<br>select 查询列表1 from 表名 union select 查询列表2 from 表名<br>特点：<br>1、要查询的结果来自多个表，且多个表之间没有联系<br>2、要求查询列表1与查询列表2的列数相等<br>3、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>4、union关键字默认去重，使用union all 可以包含重复项</p>\n","categories":["数据库"],"tags":["MySQL"]},{"title":"NIO","url":"/2020/09/09/nio/","content":"<h2 id=\"NIO简介\"><a href=\"#NIO简介\" class=\"headerlink\" title=\"NIO简介\"></a>NIO简介</h2><p>Java NIO 是从jdk1.4开始引入的一个新的IO API ,可以完全代替标准的IO API。NIO与原来的IO有同样的作用和目的，但是使用方式完全不同，NIO支持<strong>面向缓冲区</strong>的、基于通道的IO操作，读写操作更加高效。<a id=\"more\"></a></p>\n<p><strong>IO与NIO的区别：</strong><br><img src=\"/2020/09/09/nio/1.png\" style=\"zoom:80%;\"></p>\n<p>NIO系统的核心在于：通道（Channel）和缓冲区（Buffer）。通道表示打开到IO设备（文件、套接字等）的连接，缓冲区负责暂时存放传输数据。<br><font color=\"red\">简而言之，Channel负责传输，Buffer负责存储。</font></p>\n<h2 id=\"Buffer存取数据\"><a href=\"#Buffer存取数据\" class=\"headerlink\" title=\"Buffer存取数据\"></a>Buffer存取数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一、Buffer在NIO中负责数据的存取。缓存区就是数组，用于存储不同类型的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据数据类型不同 boolean除外</span></span><br><span class=\"line\"><span class=\"comment\"> * ByteBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * CharBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * ShortBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * IntBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * LongBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * FloatBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * DoubleBuffer</span></span><br><span class=\"line\"><span class=\"comment\"> * 都通过allocate() 获取缓冲区</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 二、Buffer存取数据的核心方法</span></span><br><span class=\"line\"><span class=\"comment\"> * put():存</span></span><br><span class=\"line\"><span class=\"comment\"> * get():取</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 三、Buffer四个核心属性</span></span><br><span class=\"line\"><span class=\"comment\"> * capacity:容量，表示缓冲区中存储数据的最大容量，一旦声明不可改变</span></span><br><span class=\"line\"><span class=\"comment\"> * limit:界限，表示缓冲区可以操作数据的大小，limit后的数据不可操作</span></span><br><span class=\"line\"><span class=\"comment\"> * position:位置，表示缓冲区正在操作数据的位置</span></span><br><span class=\"line\"><span class=\"comment\"> * mark:标记，记录当前 position的位置，可通过 reset恢复到 mark位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 0&lt;=mark&lt;=position&lt;=limit&lt;=capacity</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BufferTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、分配指定大小的缓冲区</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------allocate--------\"</span>);</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 0</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        <span class=\"comment\">// 2、利用put()存入数据到缓冲区</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------put----------\"</span>);</span><br><span class=\"line\">        String str = <span class=\"string\">\"abcde\"</span>;</span><br><span class=\"line\">        buffer.put(str.getBytes());</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        <span class=\"comment\">// 3、切换读取数据模式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------flip----------\"</span>);</span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 0</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        <span class=\"comment\">// 4、利用get()读取数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------get-----------\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dest = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buffer.limit()];</span><br><span class=\"line\">        buffer.get(dest);</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"读取的数据：\"</span>+<span class=\"keyword\">new</span> String(dest,<span class=\"number\">0</span>,dest.length));</span><br><span class=\"line\">        <span class=\"comment\">// 5、rewind():可重复读取数据 将核心属性恢复到读之前的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------rewind---------\"</span>);</span><br><span class=\"line\">        buffer.rewind();</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 0</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        <span class=\"comment\">// 6、clear():清空缓冲区，但是数据还在，处于被遗忘的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------clear---------\"</span>);</span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        System.out.println(buffer.position());<span class=\"comment\">// 0</span></span><br><span class=\"line\">        System.out.println(buffer.limit());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">        System.out.println(buffer.capacity());<span class=\"comment\">// 1024</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"abcde\"</span>;</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        buffer.put(str.getBytes());</span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dest = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[buffer.limit()];</span><br><span class=\"line\">        buffer.get(dest,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"读取到的字符串:\"</span>+<span class=\"keyword\">new</span> String(dest,<span class=\"number\">0</span>,dest.length));<span class=\"comment\">// ab</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"position:\"</span>+buffer.position());<span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"comment\">// 标记position</span></span><br><span class=\"line\">        buffer.mark();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  buffer.get(dest,2,2);</span></span><br><span class=\"line\"><span class=\"comment\">         *  System.out.println(\"读取到的字符串:\"+new String(dest,0,dest.length));// acbd</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        buffer.get(dest,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"读取到的字符串:\"</span>+<span class=\"keyword\">new</span> String(dest,<span class=\"number\">0</span>,dest.length));<span class=\"comment\">// cd</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"position:\"</span>+buffer.position());<span class=\"comment\">// 4</span></span><br><span class=\"line\">        <span class=\"comment\">// reset重置  将position恢复到mark时的位置</span></span><br><span class=\"line\">        buffer.reset();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"position:\"</span>+buffer.position());<span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断缓冲区是否还有剩余数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buffer.hasRemaining())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输出剩余数据的个数</span></span><br><span class=\"line\">            System.out.println(buffer.remaining());<span class=\"comment\">// 3</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接缓冲区和非直接缓冲区\"><a href=\"#直接缓冲区和非直接缓冲区\" class=\"headerlink\" title=\"直接缓冲区和非直接缓冲区\"></a>直接缓冲区和非直接缓冲区</h2><p>非直接缓冲区：通过allocate()方法分配缓冲区，将缓冲区建立在JVM的内存中</p>\n<p>直接缓冲区：通过allocateDirect()方法分配，将缓冲区直接建立在物理内存中。可以提高效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为直接缓冲区</span></span><br><span class=\"line\">    System.out.println(buffer.isDirect());<span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Channel传输数据\"><a href=\"#Channel传输数据\" class=\"headerlink\" title=\"Channel传输数据\"></a>Channel传输数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一、Channel用于源节点与目标节点的连接，负责缓冲区中数据的传输</span></span><br><span class=\"line\"><span class=\"comment\"> * 二、主要实现类：</span></span><br><span class=\"line\"><span class=\"comment\"> * FileChannel</span></span><br><span class=\"line\"><span class=\"comment\"> * SocketChannel</span></span><br><span class=\"line\"><span class=\"comment\"> * ServerSocketChannel</span></span><br><span class=\"line\"><span class=\"comment\"> * DatagramChannel</span></span><br><span class=\"line\"><span class=\"comment\"> * 三、获取通道</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、Java针对支持通道的类提供了 getChannel()方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 本地 IO:</span></span><br><span class=\"line\"><span class=\"comment\"> * FileInputStream/FileOutputStream</span></span><br><span class=\"line\"><span class=\"comment\"> * RandomAccessFile</span></span><br><span class=\"line\"><span class=\"comment\"> * 网络 IO:</span></span><br><span class=\"line\"><span class=\"comment\"> * Socket</span></span><br><span class=\"line\"><span class=\"comment\"> * ServerSocket</span></span><br><span class=\"line\"><span class=\"comment\"> * DatagramSocket</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、jdk1.7中NIO.2针对各个通道提供了静态的 open()方法</span></span><br><span class=\"line\"><span class=\"comment\"> *                 以及Files工具类的 newByteChannel()方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 完成文件的复制 非直接缓冲区</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel fisChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel fosChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建输入输出流</span></span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"1.jpg\"</span>);</span><br><span class=\"line\">            fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"2.jpg\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">            fisChannel = fis.getChannel();</span><br><span class=\"line\">            fosChannel = fos.getChannel();</span><br><span class=\"line\">            <span class=\"comment\">// 分配缓冲区</span></span><br><span class=\"line\">            ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将通道中的数据存入缓冲区</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(fisChannel.read(buffer)!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 读取缓冲区中的数据并写入通道</span></span><br><span class=\"line\">                buffer.flip();<span class=\"comment\">// 切换成读模式</span></span><br><span class=\"line\">                fosChannel.write(buffer);</span><br><span class=\"line\">                <span class=\"comment\">// 清空缓冲区</span></span><br><span class=\"line\">                buffer.clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fis!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fis.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fos!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fos.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fisChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fisChannel.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fosChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fosChannel.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 完成文件的复制(内存映射文件) 直接缓冲区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FileChannel fisChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileChannel fosChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用相应的通道的open方法获取通道</span></span><br><span class=\"line\">        fisChannel = FileChannel.open(Paths.get(<span class=\"string\">\"1.jpg\"</span>), StandardOpenOption.READ);</span><br><span class=\"line\">        fosChannel = FileChannel.open(Paths.get(<span class=\"string\">\"3.jpg\"</span>),StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class=\"line\">        <span class=\"comment\">// 创建内存映射文件</span></span><br><span class=\"line\">        MappedByteBuffer inMapperBuf = fisChannel.map(FileChannel.MapMode.READ_ONLY, <span class=\"number\">0</span>, fisChannel.size());</span><br><span class=\"line\">        MappedByteBuffer outMapperBuf = fosChannel.map(FileChannel.MapMode.READ_WRITE, <span class=\"number\">0</span>, fisChannel.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dest = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[inMapperBuf.limit()];</span><br><span class=\"line\">        <span class=\"comment\">// 直接缓冲区中的数据进行读写</span></span><br><span class=\"line\">        inMapperBuf.get(dest);</span><br><span class=\"line\">        outMapperBuf.put(dest);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fisChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fisChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fosChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fosChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于直接字节缓存区来说，JVM会尽最大努力直接在此缓冲区执行本机的IO操作，避免每次调用基础操作系统的。一个本机IO操作之前或之后，将缓冲区的内容复制到中间的缓冲区中。<br><img src=\"/2020/09/09/nio/3.png\" style=\"zoom:80%;\"></p>\n<h2 id=\"通道之间的数据传输\"><a href=\"#通道之间的数据传输\" class=\"headerlink\" title=\"通道之间的数据传输\"></a>通道之间的数据传输</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 通道之间的数据传输</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FileChannel fisChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileChannel fosChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        fisChannel = FileChannel.open(Paths.get(<span class=\"string\">\"1.jpg\"</span>), StandardOpenOption.READ);</span><br><span class=\"line\">        fosChannel = FileChannel.open(Paths.get(<span class=\"string\">\"4.jpg\"</span>), StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class=\"line\"></span><br><span class=\"line\">        fisChannel.transferTo(<span class=\"number\">0</span>,fisChannel.size(),fosChannel);</span><br><span class=\"line\">        <span class=\"comment\">// fosChannel.transferFrom(fisChannel,0,fisChannel.size());</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fisChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fisChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fosChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fosChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分散读取和聚集写入\"><a href=\"#分散读取和聚集写入\" class=\"headerlink\" title=\"分散读取和聚集写入\"></a>分散读取和聚集写入</h2><p>分散读取：将通道中读取到的数据分散到多个缓冲区中。</p>\n<p>聚集写入：将多个缓冲区中的数据写入到一个通道中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 分散读取和聚集写入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RandomAccessFile randomAccessFile1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    RandomAccessFile randomAccessFile2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileChannel inChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileChannel outChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        randomAccessFile1 = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"1.jpg\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">        inChannel = randomAccessFile1.getChannel();</span><br><span class=\"line\">        ByteBuffer buffer1 = ByteBuffer.allocate(<span class=\"number\">102400</span>);</span><br><span class=\"line\">        ByteBuffer buffer2 = ByteBuffer.allocate(<span class=\"number\">102400</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 分散读取</span></span><br><span class=\"line\">        ByteBuffer[] buffers = &#123;buffer1, buffer2&#125;;</span><br><span class=\"line\">        inChannel.read(buffers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 聚集写入</span></span><br><span class=\"line\">        randomAccessFile2 = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"5.jpg\"</span>, <span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">        outChannel = randomAccessFile2.getChannel();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ByteBuffer buffer:buffers)&#123;</span><br><span class=\"line\">            buffer.flip();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        outChannel.write(buffers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (randomAccessFile1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                randomAccessFile1.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (randomAccessFile2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                randomAccessFile2.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                inChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outChannel!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                outChannel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h2><ul>\n<li>传统的IO 流都是阻塞式的。当一个线程调用read() 或write()时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不能执行其他任务。因此，在完成网络通信进行IO 操作时，由于线程会阻塞，所以服务器端必须为每个客户端都提供一个独立的线程进行处理，当服务器端需要处理大量客户端时，性能急剧下降。</li>\n<li>Java NIO 是非阻塞模式的。当线程从某通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞IO 的空闲时间用于在其他通道上执行IO 操作，所以单独的线程可以管理多个输入和输出通道。因此，NIO 可以让服务器端使用一个或有限几个线程来同时处理连接到服务器端的所有客户端请求。</li>\n</ul>\n<blockquote>\n<p>阻塞式IO通信</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用 NIO完成网络通信的三个核心</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、通道 Channel:负责来连接</span></span><br><span class=\"line\"><span class=\"comment\">     * SocketChannel/ServerSocketChannel</span></span><br><span class=\"line\"><span class=\"comment\">     * DatagramChannel</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、缓冲区 buffer: 负责数据存储</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、选择器 Selector:是SelectableChannel对象的多路复用器，用于监控 SelectableSelector的IO状况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 图片发送</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">client</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"图片发送~\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">9999</span>));</span><br><span class=\"line\">        FileChannel inFileChannel = FileChannel.open(Paths.get(<span class=\"string\">\"1.jpg\"</span>), StandardOpenOption.READ);</span><br><span class=\"line\">        <span class=\"comment\">// 2、获取缓冲区</span></span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3、读取通道中的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (inFileChannel.read(buffer)!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            buffer.flip();</span><br><span class=\"line\">            <span class=\"comment\">// 4、发送到服务端</span></span><br><span class=\"line\">            socketChannel.write(buffer);</span><br><span class=\"line\">            buffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"图片发送完成！\"</span>);</span><br><span class=\"line\">        socketChannel.shutdownOutput();</span><br><span class=\"line\">        <span class=\"comment\">// 接收服务端的反馈信息</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((len = socketChannel.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            buffer.flip();</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(buffer.array(),<span class=\"number\">0</span>,len));</span><br><span class=\"line\">            buffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 5、关闭资源</span></span><br><span class=\"line\">        inFileChannel.close();</span><br><span class=\"line\">        socketChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"comment\">// 图片接收</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">server</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务端开启!\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        FileChannel outFileChannel = FileChannel.open(Paths.get(<span class=\"string\">\"666.jpg\"</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class=\"line\">        <span class=\"comment\">// 2、绑定端口</span></span><br><span class=\"line\">        serverSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">9999</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 3、获取客户端连接的通道</span></span><br><span class=\"line\">        SocketChannel clientSocketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">        <span class=\"comment\">// 4、创建缓冲区</span></span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 5、读写数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(clientSocketChannel.read(buffer)!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            buffer.flip();</span><br><span class=\"line\">            outFileChannel.write(buffer);</span><br><span class=\"line\">            buffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 给客户端发送反馈信息</span></span><br><span class=\"line\"><span class=\"comment\">         * 1、将数据存入缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">         * 2、读取缓冲区中的数据并写入客户端通道中</span></span><br><span class=\"line\"><span class=\"comment\">         * 3、清空缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        buffer.put(<span class=\"string\">\"来自服务端：我已经接收完成了！\"</span>.getBytes());</span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        clientSocketChannel.write(buffer);</span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        <span class=\"comment\">// 6、关闭资源</span></span><br><span class=\"line\">        outFileChannel.close();</span><br><span class=\"line\">        serverSocketChannel.close();</span><br><span class=\"line\">        clientSocketChannel.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"图片接收完成！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>非阻塞式IO通信</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonBlockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">client</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">9999</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 2、切换成非阻塞模式</span></span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3、分配缓冲区</span></span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4、发送数据</span></span><br><span class=\"line\">        buffer.put(<span class=\"keyword\">new</span> Date().toString().getBytes());</span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        socketChannel.write(buffer);</span><br><span class=\"line\">        socketChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">server</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 2、切换为非阻塞模式</span></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 3、绑定端口</span></span><br><span class=\"line\">        serverSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">9999</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 4、获取选择器</span></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        <span class=\"comment\">// 5、注册通道到选择器上</span></span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        <span class=\"comment\">// 6、通过轮询的方式获取通道</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(selector.select()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 7、获取注册的所有选择键</span></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">                SelectionKey selectionKey = iterator.next();</span><br><span class=\"line\">                <span class=\"comment\">// 9、判断事件就绪</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(selectionKey.isAcceptable())&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 10、接收就绪，获取连接</span></span><br><span class=\"line\">                    SocketChannel clientSocketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">                    <span class=\"comment\">// 11、设置为非阻塞</span></span><br><span class=\"line\">                    clientSocketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 12、注册通道并监控读就绪事件</span></span><br><span class=\"line\">                    clientSocketChannel.register(selector,SelectionKey.OP_READ);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(selectionKey.isReadable())&#123;<span class=\"comment\">// 13、获取读就绪状态的通道</span></span><br><span class=\"line\">                    SocketChannel clientSocketChannel = (SocketChannel) selectionKey.channel();</span><br><span class=\"line\">                    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((len = clientSocketChannel.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        buffer.flip();</span><br><span class=\"line\">                        System.out.println(<span class=\"keyword\">new</span> String(buffer.array()));</span><br><span class=\"line\">                        buffer.clear();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 14、取消选择键</span></span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JavaSE"]},{"title":"RabbitMQ","url":"/2020/10/21/rabbitmq-01/","content":"<h2 id=\"MQ简介\"><a href=\"#MQ简介\" class=\"headerlink\" title=\"MQ简介\"></a>MQ简介</h2><p><strong>MQ</strong>（Message Queue），别名为<strong>消息中间件</strong>。通过典型的<strong>生产者</strong>和<strong>消费者</strong>模型，生产者向消息队列中不断生产消息，消费者从消息队列中不断获取消息。因为消息的产生和消费都是<strong>异步</strong>的，而且只关心消息的发送和接收，没有业务逻辑的侵入，实现了系统之间的<strong>解耦</strong>。通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。<a id=\"more\"></a><br>应用场景：</p>\n<ul>\n<li>异步处理</li>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>日志处理</li>\n<li>消息通讯</li>\n</ul>\n<h2 id=\"主流的消息中间件\"><a href=\"#主流的消息中间件\" class=\"headerlink\" title=\"主流的消息中间件\"></a>主流的消息中间件</h2><blockquote>\n<p>ActiveMQ：java语言实现，万级数据吞吐量，处理速度ms级，主从架构，成熟度高</p>\n</blockquote>\n<p>ActiveMQ，是Apache出品，最流行的，能力强劲的开源消息组件。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎。</p>\n<blockquote>\n<p>Kafka：scala语言实现，十万级数据吞吐量，梳理速度ms级，分布式架构，功能较少，应用于大数据较多</p>\n</blockquote>\n<p>Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于<strong>日志收集和传输</strong>。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。</p>\n<blockquote>\n<p>RocketMQ：java语言实现，十万级数据吞吐量，处理速度ms级，分布式架构，功能强大，拓展性强</p>\n</blockquote>\n<p>RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。</p>\n<blockquote>\n<p>RabbitMQ：erlang语言实现，万级数据吞吐量，处理速度us级，主从架构</p>\n</blockquote>\n<p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p>\n<ul>\n<li>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领域不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。</li>\n</ul>\n<h2 id=\"RabbitMQ的使用\"><a href=\"#RabbitMQ的使用\" class=\"headerlink\" title=\"RabbitMQ的使用\"></a>RabbitMQ的使用</h2><p>使用Docker快速安装并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 服务端端口5672  客户端端口 15672 </span></span><br><span class=\"line\">docker run --name rabbitmq -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=123456 -d rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问rabbitmq的管理界面\"><a href=\"#访问rabbitmq的管理界面\" class=\"headerlink\" title=\"访问rabbitmq的管理界面\"></a>访问rabbitmq的管理界面</h3><p>地址为  ip:15672 </p>\n<img src=\"/2020/10/21/rabbitmq-01/1.png\" style=\"zoom:80%;\">\n\n<p>添加用户，以及虚拟主机<br><img src=\"/2020/10/21/rabbitmq-01/2.png\" style=\"zoom:80%;\"></p>\n<p><font color=\"red\">还需要在当前登录管理界面的用户下添加新增的虚拟主机地址，否则监控不到在新增虚拟主机下的创建的消息队列！</font><br><img src=\"/2020/10/21/rabbitmq-01/3.png\" alt></p>\n<h3 id=\"使用java创建消息队列模型\"><a href=\"#使用java创建消息队列模型\" class=\"headerlink\" title=\"使用java创建消息队列模型\"></a>使用java创建消息队列模型</h3><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一种模型（直连）\"><a href=\"#第一种模型（直连）\" class=\"headerlink\" title=\"第一种模型（直连）\"></a>第一种模型（直连）</h4><p><img src=\"/2020/10/21/rabbitmq-01/4.png\" alt></p>\n<ul>\n<li>P：生产者，也就是要发送消息的程序。</li>\n<li>C：消费者：消息的接收者，会一直等待消息到来。</li>\n<li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li>\n</ul>\n<p><strong>生产者的实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产消息</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建连接mq的连接工厂对象</span></span><br><span class=\"line\">        ConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 设置连接的rabbitmq主机</span></span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">\"172.16.1.57\"</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置连接的虚拟主机</span></span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">\"/rabbitmq_study\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置访问虚拟主机的用户名和密码</span></span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">\"2824199842\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取连接对象</span></span><br><span class=\"line\">        Connection connection = connectionFactory.newConnection();</span><br><span class=\"line\">        <span class=\"comment\">// 获取连接中的通道</span></span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 将通道绑定消息队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1: 队列名称 不存在则自动创建</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：用来定义队列的特性是否要持久化 true or false</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在消费完成后自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：附加参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"hello\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 通过通道发布消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：传递消息额外设置</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：消息的具体内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicPublish(<span class=\"string\">\"\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"hello rabbitmq\"</span>.getBytes());</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在管理界面查看创建的mq<img src=\"/2020/10/21/rabbitmq-01/5.png\" alt></p>\n<p><strong>消费者的实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收消息</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class=\"line\">        ConnectionFactory connectionFactory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">\"172.16.1.57\"</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">\"/rabbitmq_study\"</span>);</span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">\"2824199842\"</span>);</span><br><span class=\"line\">        Connection connection = connectionFactory.newConnection();</span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 与创建消息队列一致</span></span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"hello\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 消费消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否开启消息的自动确认机制</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消费时的回调接口</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(<span class=\"string\">\"hello\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">new</span> DefaultConsumer(channel) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 输出消息内容</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"body:\"</span> + <span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// channel.close();</span></span><br><span class=\"line\">        <span class=\"comment\">// connection.close();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/21/rabbitmq-01/6.png\" alt></p>\n<blockquote>\n<p>封装工具类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMQUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让ConnectionFactory只加载一次</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        connectionFactory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">\"172.16.1.57\"</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">\"/rabbitmq_study\"</span>);</span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">\"2824199842\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取 RabbitMQ的连接</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Connection connection = connectionFactory.newConnection();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭 Connection和 Channel</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> conn</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> channel</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn, Channel channel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel != <span class=\"keyword\">null</span>) channel.close();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) conn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种模型（work-queue）\"><a href=\"#第二种模型（work-queue）\" class=\"headerlink\" title=\"第二种模型（work queue）\"></a>第二种模型（work queue）</h4><p><code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p>\n<p><img src=\"/2020/10/21/rabbitmq-01/7.png\" alt></p>\n<ul>\n<li>P：生产者：任务的发布者</li>\n<li>C1：消费者-1，领取任务并且完成任务，假设完成速度较慢</li>\n<li>C2：消费者-2：领取任务并完成任务，假设完成速度快</li>\n</ul>\n<p><strong>生产者</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取连接</span></span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        <span class=\"comment\">// 创建通道</span></span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 通道绑定消息队列</span></span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 发布消息</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">\"\"</span>, <span class=\"string\">\"work\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"work queue\"</span>.getBytes());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        RabbitMQUtils.close(conn,channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者-1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        channel.basicConsume(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> DefaultConsumer(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者-2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        channel.basicConsume(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> DefaultConsumer(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>默认为平均分发，将消息平均分配给每个消费者，这种分发方式叫做循环。</li>\n</ul>\n<p>通过关闭自动确认和开启手动确认来保证 “能者多劳 ”——消费快的消费者消费更多的消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">//一次只接受一条未确认的消息</span></span><br><span class=\"line\">        channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\">        channel.queueDeclare(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭消息自动确认机制  autoAck : false</span></span><br><span class=\"line\">        channel.basicConsume(<span class=\"string\">\"work\"</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">new</span> DefaultConsumer(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">                <span class=\"comment\">// 手动确认</span></span><br><span class=\"line\">                <span class=\"comment\">// 参数1：消息标识</span></span><br><span class=\"line\">                <span class=\"comment\">// 参数2：false 一次只确认一个消息</span></span><br><span class=\"line\">                channel.basicAck(envelope.getDeliveryTag(),<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三种模型（广播）\"><a href=\"#第三种模型（广播）\" class=\"headerlink\" title=\"第三种模型（广播）\"></a>第三种模型（广播）</h4><p><img src=\"/2020/10/21/rabbitmq-01/8.png\" alt></p>\n<p>在广播模式下，消息发送流程是这样的：</p>\n<ul>\n<li>可以有多个消费者</li>\n<li>每个<strong>消费者有自己的queue</strong>（队列）</li>\n<li>每个<strong>队列都要绑定到Exchange</strong>（交换机）</li>\n<li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li>\n<li>交换机把消息发送给绑定过的所有队列</li>\n<li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li>\n</ul>\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(<span class=\"string\">\"log\"</span>,<span class=\"string\">\"fanout\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">        channel.basicPublish(<span class=\"string\">\"log\"</span>,<span class=\"string\">\"\"</span>,<span class=\"keyword\">null</span>,<span class=\"string\">\"fanout message\"</span>.getBytes());</span><br><span class=\"line\">        RabbitMQUtils.close(conn,channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Connection conn = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = conn.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建交换机  名称，类型</span></span><br><span class=\"line\">        channel.exchangeDeclare(<span class=\"string\">\"log\"</span>,<span class=\"string\">\"fanout\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建临时队列</span></span><br><span class=\"line\">        String queue = channel.queueDeclare().getQueue();</span><br><span class=\"line\">        <span class=\"comment\">// 绑定临时队列和交换机</span></span><br><span class=\"line\">        channel.queueBind(queue,<span class=\"string\">\"log\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 消费消息</span></span><br><span class=\"line\">        channel.basicConsume(queue,<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> DefaultConsumer(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"消费者1：\"</span>+<span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时生产者生产的一条消息可以被多个消费者同时消费。</p>\n<h4 id=\"第四种模型（路由）\"><a href=\"#第四种模型（路由）\" class=\"headerlink\" title=\"第四种模型（路由）\"></a>第四种模型（路由）</h4><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>\n<p> 在Direct模型下：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>\n<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>\n<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>\n</ul>\n<p><img src=\"/2020/10/21/rabbitmq-01/9.png\" alt></p>\n<ul>\n<li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li>\n<li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li>\n<li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li>\n<li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li>\n</ul>\n<p><strong>生产者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        channel.exchangeDeclare(<span class=\"string\">\"log_direct\"</span>,<span class=\"string\">\"direct\"</span>);</span><br><span class=\"line\">        channel.basicPublish(<span class=\"string\">\"log_direct\"</span>,<span class=\"string\">\"info\"</span>,<span class=\"keyword\">null</span>,<span class=\"string\">\"routingKey为info的消息\"</span>.getBytes());</span><br><span class=\"line\">        RabbitMQUtils.close(connection,channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>消费者：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        channel.exchangeDeclare(<span class=\"string\">\"log_direct\"</span>,<span class=\"string\">\"direct\"</span>);</span><br><span class=\"line\">        String queue = channel.queueDeclare().getQueue();</span><br><span class=\"line\">        channel.queueBind(queue,<span class=\"string\">\"log_direct\"</span>,<span class=\"string\">\"info\"</span>);</span><br><span class=\"line\">        channel.basicConsume(queue,<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> DefaultConsumer(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"keyword\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> String(body));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Routing模型之topic</strong><br><img src=\"/2020/10/21/rabbitmq-01/10.png\" alt></p>\n<p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！这种模型<code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>\n<p><code>audit.#</code> 匹配audit.irs.corporate或者 audit.irs 等<br><code>audit.*</code>  只能匹配 audit.irs</p>\n","categories":["分布式中间件"],"tags":["RabbitMQ"]},{"title":"Jedis,Springboot集成Redis","url":"/2020/08/08/redis-05/","content":"<p>Jedis是Redis官方推荐的Java连接开发工具。是使用Java来操作Redis的中间件。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>1、创建一个maven项目</p>\n<p>2、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.56<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编码测试\"><a href=\"#编码测试\" class=\"headerlink\" title=\"编码测试\"></a>编码测试</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、创建Jedis对象</span></span><br><span class=\"line\">        Jedis jedis = <span class=\"keyword\">new</span> Jedis(<span class=\"string\">\"127.0.0.1\"</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        System.out.println(jedis.ping());<span class=\"comment\">// 连接成功输出 PONG</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 所有的api与之前的学习的命令一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试事务\"><a href=\"#测试事务\" class=\"headerlink\" title=\"测试事务\"></a>测试事务</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TxTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Jedis jedis = <span class=\"keyword\">new</span> Jedis(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"age\"</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 开启事务</span></span><br><span class=\"line\">        Transaction multi = jedis.multi();</span><br><span class=\"line\">        String result = jsonObject.toJSONString();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">\"user1\"</span>,result);</span><br><span class=\"line\">            <span class=\"comment\">// 执行事务</span></span><br><span class=\"line\">            multi.exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            multi.discard();<span class=\"comment\">// 放弃事务</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">\"user1\"</span>));<span class=\"comment\">// &#123;\"name\":\"zyz\",\"age\":21&#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Springboot整合\"><a href=\"#Springboot整合\" class=\"headerlink\" title=\"Springboot整合\"></a>Springboot整合</h2><p>1、创建springboot项目，并勾选如下依赖<br><img src=\"/2020/08/08/redis-05/1.png\" alt></p>\n<blockquote>\n<p>在springboot2.x之后，原来使用的jedis被替换成了lettuce。<br>jedis：采用直连，多个线程操作不安全。<br>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况。</p>\n</blockquote>\n<p>2、配置连接属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># springboot所有的配置类都有一个自动配置类  RedisAutoConfiguration</span></span><br><span class=\"line\"><span class=\"comment\"># 自动配置类都会绑定一个配置文件 RedisProperties  prefix = \"spring.redis\"</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   RedisTemplate redisTemplate;</span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      redisTemplate.opsForValue().set(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">      System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"name\"</span>));<span class=\"comment\">// zyz</span></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义RedisTemplate\"><a href=\"#自定义RedisTemplate\" class=\"headerlink\" title=\"自定义RedisTemplate\"></a>自定义RedisTemplate</h2><p>使用统一使用jackson序列化，防止乱码问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义Template</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\">        <span class=\"comment\">// Json序列化</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class=\"line\">        <span class=\"comment\">// String序列化</span></span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value采用Json序列化</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试，User实体类需要实现Serializable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"zyz\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">       String jsonUser = <span class=\"keyword\">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class=\"line\">       redisTemplate.opsForValue().set(<span class=\"string\">\"user\"</span>,jsonUser);</span><br><span class=\"line\">       System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"user\"</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台获取：<br><img src=\"/2020/08/08/redis-05/2.png\" alt></p>\n<h2 id=\"封装工具类\"><a href=\"#封装工具类\" class=\"headerlink\" title=\"封装工具类\"></a>封装工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\">    <span class=\"comment\">// =============================common============================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">expire</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key 获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpire</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断key是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 可以传一个值 或多个</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(String... key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"keyword\">null</span> &amp;&amp; key.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                redisTemplate.delete(key[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ============================String=============================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set(key, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递增</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">incr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"递增因子必须大于0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要减少几(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">decr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"递减因子必须大于0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ================================Map=================================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashGet</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hget</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取hashKey对应的所有键值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对应的多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Object, Object&gt; <span class=\"title\">hmget</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet 并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map  对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除hash表中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 可以使多个 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hdel</span><span class=\"params\">(String key, Object... item)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().delete(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断hash表中是否有该项的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hHasKey</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hincr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要减少记(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hdecr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ============================set=============================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key获取Set中的所有值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">sGet</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据value从一个set中查询,是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sHasKey</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数据放入set缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSet</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将set数据放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time   时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSetAndTime</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取set缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sGetSetSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除值为value的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">setRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ===============================list=================================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 开始</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">lGet</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lGetListSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引 获取list中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">lGetIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据索引修改list中的某条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lUpdateIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().set(key, index, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除N个值为value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count 移除多少个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lRemove</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> remove;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisUtils redisUtils;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRedisUtils</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    redisUtils.set(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"zyz\"</span>);</span><br><span class=\"line\">       System.out.println(redisUtils.get(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["分布式中间件"],"tags":["Redis"]},{"title":"SSM整合开发","url":"/2020/07/04/springmvc-03/","content":"<p>SSM：SpringMVC + Spring +MyBatis</p>\n<p>SpringMVC：视图层，用于接收页面请求，显示处理结果<br>Spring：业务层，管理service，dao，工具类对象<br>Mybatis：持久层，访问数据库<a id=\"more\"></a></p>\n<p>用户发起请求—&gt;SpringMVC接收—&gt;Spring中调用的Service对象处理事务—&gt;MyBatis处理数据</p>\n<h2 id=\"1、整合的思路\"><a href=\"#1、整合的思路\" class=\"headerlink\" title=\"1、整合的思路\"></a>1、整合的思路</h2><p>在进行整合时，有两个容器对象<br>1、SpringMVC容器，管理Controller控制器对象<br>2、Spring容器，管理Service，Dao，工具类对象<br>我们要把使用的对象交给合适的容器去创建，管理。<br>把Controller还有web开发相关对象交给SpringMVC容器，将这些web使用的对象写在springmvc配置文件中。<br>把Service，Dao对象定义在Spring的配置文件中，让Spring管理这些对象。</p>\n<p> <strong>两个容器之间的关系：</strong><br>SpringMVC容器是Spring的子容器，类似于Java中的子父类关系——子类可以访问父类的数据。<br>即在子容器SpringMVC中的Controller可以访问父容器Spring中的Service对象，就可以实现Controller使用Service对象。</p>\n<h2 id=\"2、整合的步骤\"><a href=\"#2、整合的步骤\" class=\"headerlink\" title=\"2、整合的步骤\"></a>2、整合的步骤</h2><p>使用之前创建好的mybatis数据库，使用student表</p>\n<h3 id=\"1、创建maven-web项目\"><a href=\"#1、创建maven-web项目\" class=\"headerlink\" title=\"1、创建maven web项目\"></a>1、创建maven web项目</h3><h3 id=\"2、加入依赖\"><a href=\"#2、加入依赖\" class=\"headerlink\" title=\"2、加入依赖\"></a>2、加入依赖</h3><p>springmvc，spring，mybatis三个框架的依赖，jackson依赖，mysql驱动，druid连接池，jsp,servlet依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- servlet依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- jsp依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1-b03<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--springmvc依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--事务--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jackson--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--mysql--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--druid--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span><span class=\"comment\">&lt;!--所在的目录--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span><span class=\"comment\">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、写web-xml\"><a href=\"#3、写web-xml\" class=\"headerlink\" title=\"3、写web.xml\"></a>3、写web.xml</h3><p>1、注册中央处理器DispatcherServlet，<br>目的：1、创建springmvc容器对象，才能创建Controller对象；2、创建的是Servlet，才能接收用户的请求。</p>\n<p>2、注册监听器ContextLoaderListener，<br>目的：创建spring容器对象，才能创建service，dao等对象</p>\n<p>3、注册字符集过滤器CharacterEncodingFilter，<br>目的：解决post请求乱码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  注册中央调度器  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myweb<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:conf/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myweb<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注册监听器  用于创建Spring容器   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:conf/application.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注册字符集过滤器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceRequestEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、创建包\"><a href=\"#4、创建包\" class=\"headerlink\" title=\"4、创建包\"></a>4、创建包</h3><p>创建controller、service、dao、bean包<br><img src=\"/2020/07/04/springmvc-03/1.png\" alt></p>\n<h3 id=\"5、写springmvc，spring，mybatis的配置文件\"><a href=\"#5、写springmvc，spring，mybatis的配置文件\" class=\"headerlink\" title=\"5、写springmvc，spring，mybatis的配置文件\"></a>5、写springmvc，spring，mybatis的配置文件</h3><p>1、springmvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--springmvc配置文件，声明 controller和它相关的对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.controller\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--视图解析器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注解驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、applicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  将数据库配置文件写入单独的文件中        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:conf/jdbc.properties\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明数据源  用于连接数据库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.maxActive&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- mybatis主配置文件的位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:conf/mybatisConfig.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明Dao类</span></span><br><span class=\"line\"><span class=\"comment\">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  声明service的注解@Service所在的包名位置  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.service\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  事务配置：注解的配置或aspectj的配置  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、mybatisConfig.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  注册映射文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、jdbc.properties</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.url</span>=jdbc:mysql://localhost:<span class=\"number\">3306</span>/mybatis?serverTimezone=Asia/Shanghai</span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=root</span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"number\">2824199842</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.maxActive</span>=<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、编写各个包的代码\"><a href=\"#6、编写各个包的代码\" class=\"headerlink\" title=\"6、编写各个包的代码\"></a>6、编写各个包的代码</h3><p>bean实体类</p>\n<p>dao接口和mapper文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zyz.bean.Employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;Employee&gt; <span class=\"title\">listAllEmps</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.EmployeeDao\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listAllEmps\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.zyz.bean.Employee\"</span>&gt;</span></span><br><span class=\"line\">        select name,gender,email,dept_id deptId from employee order by id asc</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertEmp\"</span>&gt;</span></span><br><span class=\"line\">        insert into employee(name,gender,email,dept_id) values (#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>service及其实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmployeeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;Employee&gt; <span class=\"title\">listAllEmps</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">EmployeeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引用类型自动注入@Autowired,@Resource    dao对象就在Spring容器中</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmployeeDao employeeDao;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addEmp</span><span class=\"params\">(Employee employee)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeDao.insertEmp(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">listAllEmps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeDao.listAllEmps();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/employee\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmployeeController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmployeeService employeeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 员工注册</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/addEmployee.do\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">addStudent</span><span class=\"params\">(Employee employee)</span></span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        String tips = <span class=\"string\">\"注册失败\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用service</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = employeeService.addEmp(employee);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 注册成功</span></span><br><span class=\"line\">            tips=<span class=\"string\">\"注册成功！\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"tips\"</span>,tips);</span><br><span class=\"line\">        <span class=\"comment\">// 指定结果页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"result\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 员工查询</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/listAllEmps.do\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">listAllEmp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> employeeService.listAllEmps();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、编写页面\"><a href=\"#7、编写页面\" class=\"headerlink\" title=\"7、编写页面\"></a>7、编写页面</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()+</span>\"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/yy.jpg\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 200px;height: 200px\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"addEmployee.jsp\"</span>&gt;</span>注册员工<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"listAllEmployee.jsp\"</span>&gt;</span>浏览员工<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()</span> + \"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>注册员工<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"employee/addEmployee.do\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>性别：<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span>男<span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span>女</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>电子邮箱：<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>部门编号：<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"deptId\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"注册\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()</span> + \"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>查询所有员工<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/jquery-3.4.1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 当前页面dom对象加载后，立即执行</span></span></span><br><span class=\"line\">            loadEmpData();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadEmpData</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                url: <span class=\"string\">\"employee/listAllEmps.do\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                type: <span class=\"string\">\"get\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                dataType: <span class=\"string\">\"json\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                success: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// alert(data);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// 清除旧数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">                    $(<span class=\"string\">\"#info\"</span>).html(<span class=\"string\">\"\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                    $.each(data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">k, v</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                        $(<span class=\"string\">\"#info\"</span>).append(<span class=\"string\">\"&lt;tr&gt;\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">                            .append(<span class=\"string\">\"&lt;td&gt;\"</span> + v.name + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">                            .append(<span class=\"string\">\"&lt;td&gt;\"</span> + v.gender + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">                            .append(<span class=\"string\">\"&lt;td&gt;\"</span> + v.email + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">                            .append(<span class=\"string\">\"&lt;td&gt;\"</span> + v.deptId + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>电子邮箱<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>部门编号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>项目整体结构：</strong><br><img src=\"/2020/07/04/springmvc-03/2.png\" alt></p>\n","categories":["Spring"],"tags":["MyBatis","Spring","SpringMVC"]},{"title":"SpringMVC核心技术","url":"/2020/07/05/springmvc-04/","content":"<h2 id=\"请求转发与重定向\"><a href=\"#请求转发与重定向\" class=\"headerlink\" title=\"请求转发与重定向\"></a>请求转发与重定向</h2><p>SpringMVC 框架把原来Servlet 中的请求转发和重定向操作进行了封装。<br>现在可以使用简单的方式实现转发和重定向。<br>forward:表示转发，实现request.getRequestDispatcher(“xx.jsp”).forward()<br>redirect:表示重定向，实现response.sendRedirect(“xxx.jsp”)<a id=\"more\"></a></p>\n<h3 id=\"1、请求转发\"><a href=\"#1、请求转发\" class=\"headerlink\" title=\"1、请求转发\"></a>1、请求转发</h3><p>在框架中，使用forward，redirect，与视图解析器无关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 框架的 forward请求转发</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/doForward\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doForward</span><span class=\"params\">(String name,Integer age)</span> </span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"Controller请求转发跳转成功~\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"name\"</span>,name);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"age\"</span>,age);</span><br><span class=\"line\">        <span class=\"comment\">// 使用forward显式转发</span></span><br><span class=\"line\">        <span class=\"comment\">// 一般用于跳转到视图解析器中没有指定的路径</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"forward:/WEB-INF/view/show.jsp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()+</span>\"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"doForward\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        姓名: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        年龄: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"请求转发\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>转发页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>show.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>msg数据：$&#123;msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>name：$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>age：$&#123;age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、重定向\"><a href=\"#2、重定向\" class=\"headerlink\" title=\"2、重定向\"></a>2、重定向</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 框架的 redirect 重定向</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、框架会把 Model中的简单数据类型的数据，转换为String使用，作为hello.jsp的get请求参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 目的是在 doRedirect 和 hello.jsp 两次请求之间传递数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、在目标 hello.jsp中使用参数集合对象$&#123;param&#125;获取请求参数值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/doRedirect\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doRedirect</span><span class=\"params\">(String name,Integer age)</span> </span>&#123;</span><br><span class=\"line\">    ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    modelAndView.addObject(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"Controller重定向跳转成功~\"</span>);</span><br><span class=\"line\">    modelAndView.addObject(<span class=\"string\">\"name\"</span>,name);</span><br><span class=\"line\">    modelAndView.addObject(<span class=\"string\">\"age\"</span>,age);</span><br><span class=\"line\">    <span class=\"comment\">// 使用redirect重定向</span></span><br><span class=\"line\">    modelAndView.setViewName(<span class=\"string\">\"redirect:/hello.jsp\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()+</span>\"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"doRedirect\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        姓名: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        年龄: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"重定向\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>重定向页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello.jsp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>msg数据：$&#123;param.msg&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>name：$&#123;param.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>age：$&#123;param.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>springmvc采用全局异常处理，把controller中的异常处理集中到一个地方。采用aop的思想，将业务处理与异常处理分开，解耦合。</p>\n<p>1、为了方便演示，自定义了几个异常类</p>\n<p>自定义用户异常类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUserException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUserException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyUserException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再定义两个子类继承用户异常类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgeException</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyUserException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameException</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyUserException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NameException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NameException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、编写专门处理异常的controller类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span><span class=\"comment\">// 控制器增强，增加异常处理功能 需要配置组件扫描器，声明此类所在的包名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义方法处理异常</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理 name 异常的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> e controller抛出的异常对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = NameException<span class=\"class\">.<span class=\"keyword\">class</span>)// 要处理的异常类型</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ModelAndView</span> <span class=\"title\">doNameException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、记录异常，记录到数据库，日志文件，记录日志发生的时间，哪个方法发生的异常，异常错误内容</span></span><br><span class=\"line\">        <span class=\"comment\">// 2、发送通知，把异常信息发送给相关人员</span></span><br><span class=\"line\">        <span class=\"comment\">// 3、用户友好的提示</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"姓名必须是zyz！\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"ex\"</span>, e);</span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"nameError\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = AgeException<span class=\"class\">.<span class=\"keyword\">class</span>)// 要处理的异常类型</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ModelAndView</span> <span class=\"title\">doAgeException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"年龄必须小于80！\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"ex\"</span>, e);</span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"ageError\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理未知异常  在开发过程中一般像这样使用，编写一个方法就能处理所有的异常了</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">doOtherException</span><span class=\"params\">(Exception e)</span> </span>&#123;</span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"其他异常\"</span>);</span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"ex\"</span>, e);</span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"defaultError\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、添加组件扫描器，声明处理异常的方法所在的包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注解驱动--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 处理异常--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.handler\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写异常跳转的页面</p>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>拦截器（interceptor），是一种面向切面编程的实现，将多个模块的通用服务进行分离，如权限管理、日志服务，就可以将其各自封装为一个可重用模块。而这些通用服务的具体实现是通过拦截器来完成，比如用户客户端访问一些保密模块都应先通过权限审查的拦截器来进行权限审查，确定用户是否具有该项操作的权限后方能向下执行。在面向切面编程中就是在调用业务方法前调用一个方法，或者在调用业务方法后调用一个方法。</p>\n<p><strong>拦截器的执行时间：</strong></p>\n<p>1、在请求处理之前，也就是controller类中的方法执行之前先被拦截。<br>2、在控制器方法执行之后也会执行拦截器。<br>3、在请求处理完成后也会执行拦截器。</p>\n<p><strong>拦截器类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拦截器类，拦截用户请求</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 预处理方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、在控制器方法之前执行</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、获取请求信息，验证请求是否符合要求</span></span><br><span class=\"line\"><span class=\"comment\">     *   可以验证用户是否登录，是否有权限访问某个链接地址 url</span></span><br><span class=\"line\"><span class=\"comment\">     *   验证失败，可以截断请求，请求不能被处理。</span></span><br><span class=\"line\"><span class=\"comment\">     *   验证成功，可以放行请求，执行控制器方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler  被拦截的控制器对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  true 表示验证成功，可以执行处理器中方法</span></span><br><span class=\"line\"><span class=\"comment\">     *          false 表示验证失败，请求到达拦截器就截止了，请求没有被处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拦截器MyInterceptor的preHandle()\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给浏览器一个返回结果</span></span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">\"/tips.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 后处理方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、在处理器方法之后执行</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、能够获取到处理器方法中的返回值ModelAndView，并且可以修改</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、主要对原来的执行结果做修正</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler 被拦截的控制器对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> modelAndView 处理器方法的返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拦截器MyInterceptor的postHandle()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最后执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、请求处理完成后执行，即对视图进行了forward</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、一般是做资源回收，释放内存</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拦截器MyInterceptor的afterCompletion()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>声明拦截器</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明拦截器  可以有多个--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 指定拦截器的url--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/**\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--声明拦截器对象--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.zyz.handler.MyInterceptor\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>preHandle()返回true时：<br><img src=\"/2020/07/05/springmvc-04/1.png\" alt></p>\n<p><img src=\"/2020/07/05/springmvc-04/2.png\" alt><br>返回false，跳转到提示页面，请求被终止，不会执行preHandle()以后的方法</p>\n<p>当有多个拦截器时<br><img src=\"/2020/07/05/springmvc-04/3.png\" alt></p>\n<blockquote>\n<p>拦截器与过滤器的区别</p>\n</blockquote>\n<p>过滤器，是在java web中将你传入的request、response提前过滤掉一些信息，或者提前设置一些参数。然后再传入Servlet或Struts2的 action进行业务逻辑处理。比如过滤掉非法url，或者在传入Servlet或Struts2的action前统一设置字符集，或者去除掉一些非法字符。</p>\n<p>通俗理解：<br>（1）过滤器（Filter）：当你有一堆东西的时候，你只希望选择符合你要求的某一些东西。定义这些要求的工具，就是过滤器。<br>（2）拦截器（Interceptor）：在一个流程正在进行的时候，你希望干预它的进展，甚至终止它进行，这是拦截器做的事情。</p>\n<h2 id=\"文件上传和下载\"><a href=\"#文件上传和下载\" class=\"headerlink\" title=\"文件上传和下载\"></a>文件上传和下载</h2><h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- springmvc--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--文件上传--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​      2、如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--文件上传配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"utf-8\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10485760\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxInMemorySize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"40960\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写上传文件的表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"upload2\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"upload\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、编写处理文件上传的Controller方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/upload\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//@RequestParam(\"file\") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class=\"line\">    <span class=\"comment\">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取文件名 : file.getOriginalFilename();</span></span><br><span class=\"line\">        String uploadFileName = file.getOriginalFilename();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果文件名为空，直接回到首页！</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(uploadFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"上传文件名 : \"</span> + uploadFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//上传路径保存设置</span></span><br><span class=\"line\">        String path = request.getServletContext().getRealPath(<span class=\"string\">\"/upload\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果路径不存在，创建一个</span></span><br><span class=\"line\">        File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">            realPath.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"上传文件保存地址：\"</span> + realPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        InputStream is = file.getInputStream(); <span class=\"comment\">//文件输入流</span></span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(realPath, uploadFileName)); <span class=\"comment\">//文件输出流</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取写出</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            os.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            os.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        os.close();</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 采用file.TransferTo 来保存上传的文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/upload2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload2</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取文件名 : file.getOriginalFilename();</span></span><br><span class=\"line\">        String uploadFileName = file.getOriginalFilename();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果文件名为空，直接回到首页！</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(uploadFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//上传路径保存设置</span></span><br><span class=\"line\">        String path = request.getServletContext().getRealPath(<span class=\"string\">\"/upload\"</span>);</span><br><span class=\"line\">        File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">            realPath.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//上传文件地址</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"上传文件保存地址：\"</span> + realPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class=\"line\">        file.transferTo(<span class=\"keyword\">new</span> File(realPath + <span class=\"string\">\"/\"</span> + file.getOriginalFilename()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/download\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">downloads</span><span class=\"params\">(HttpServletResponse response , HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//要下载的图片地址</span></span><br><span class=\"line\">    String  path = request.getServletContext().getRealPath(<span class=\"string\">\"/upload\"</span>);</span><br><span class=\"line\">    String  fileName = <span class=\"string\">\"基础语法.png\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//1、设置response 响应头</span></span><br><span class=\"line\">    response.reset(); <span class=\"comment\">//设置页面不缓存,清空buffer</span></span><br><span class=\"line\">    response.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>); <span class=\"comment\">//字符编码</span></span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"multipart/form-data\"</span>); <span class=\"comment\">//二进制传输数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断浏览器类型</span></span><br><span class=\"line\">    String ua = request.getHeader(<span class=\"string\">\"User-Agent\"</span>);</span><br><span class=\"line\">    String str=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是火狐浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ua.contains(<span class=\"string\">\"Firefox\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用下面的格式进行BASE64 编码后</span></span><br><span class=\"line\">        str = <span class=\"string\">\"=?utf-8?B?\"</span> + <span class=\"keyword\">new</span> BASE64Encoder().encode(fileName.getBytes(<span class=\"string\">\"utf-8\"</span>)) + <span class=\"string\">\"?=\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把中文名进行UTF-8 编码操作</span></span><br><span class=\"line\">        str = URLEncoder.encode(fileName, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置响应头</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">\"Content-Disposition\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"attachment;fileName=\"</span>+ str);</span><br><span class=\"line\"></span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(path,fileName);</span><br><span class=\"line\">    <span class=\"comment\">//2、 读取文件--输入流</span></span><br><span class=\"line\">    InputStream input=<span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">    <span class=\"comment\">//3、 写出文件--输出流</span></span><br><span class=\"line\">    OutputStream out = response.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buff =<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//4、执行 写出操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((index= input.read(buff))!= -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        out.write(buff, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    input.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/index.jsp\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"download\"</span>&gt;</span>下载<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Spring"],"tags":["SpringMVC"]},{"title":"面向对象","url":"/2020/01/18/java-02/","content":"<h1 id=\"Java面向对象学习的三条主线：\"><a href=\"#Java面向对象学习的三条主线：\" class=\"headerlink\" title=\"Java面向对象学习的三条主线：\"></a>Java面向对象学习的三条主线：</h1><p>1.Java类的成员：属性、方法、构造器；代码块，内部类<br>2.面向对象的三大特征：封装性、继承性、多态性、（抽象性）<br>3.关键字：this , super , static , final , abstract , interface , package , import<a id=\"more\"></a><br>类：抽象的，概念上的内容。<br>对象：实实在在的个体。<br>对象是由类派生出来的，是类的实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> </span></span><br><span class=\"line\"><span class=\"comment\"> * 一、设计类，其实就是设计类的成员</span></span><br><span class=\"line\"><span class=\"comment\"> * \t属性 = 成员变量 = field = 域、字段</span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法 = 成员方法 = 函数 = method</span></span><br><span class=\"line\"><span class=\"comment\"> * \t创建类的对象 = 类的实例化 = 实例化对象</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 二、类和对象的使用（面向对象思想落地的实现）</span></span><br><span class=\"line\"><span class=\"comment\"> * \t1、创建类，设计类的成员</span></span><br><span class=\"line\"><span class=\"comment\"> * \t2、创建类的对象</span></span><br><span class=\"line\"><span class=\"comment\"> * \t3、通过\"对象.属性\"或\"对象.方法\"调用对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 三、如果创建一个类的多个对象，则每个类都独立的拥有一套类的属性。（非static）</span></span><br><span class=\"line\"><span class=\"comment\"> * \t修改一个对象的属性a，则不影响另外一个对象的属性a的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月18日下午2:12:14</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 对象实例化，创建Person对象</span></span><br><span class=\"line\">\t\tPerson p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用对象的结构：属性、方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用属性：\"对象.属性\"</span></span><br><span class=\"line\">\t\tp1.name = <span class=\"string\">\"Taylor\"</span>;</span><br><span class=\"line\">\t\tp1.isMale = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tSystem.out.println(p1.name);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用方法：\"对象.方法\"</span></span><br><span class=\"line\">\t\tp1.eat();</span><br><span class=\"line\">\t\tp1.sleep();</span><br><span class=\"line\">\t\tp1.study(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建另外一个对象</span></span><br><span class=\"line\">\t\tPerson p2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tp2.name = <span class=\"string\">\"Tony\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"p2.name: \"</span> + p2.name);<span class=\"comment\">// p2.name: Tony</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"p1.name: \"</span> + p1.name);<span class=\"comment\">// p1.name: Taylor</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 属性</span></span><br><span class=\"line\">\t\tString name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> isMale;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方法</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"吃饭\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"睡觉\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(String language)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"学习\"</span> + language);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/18/java-02/oop_1.png\" alt=\"对象的内存解析\"></p>\n<h2 id=\"属性（成员变量）与局部变量\"><a href=\"#属性（成员变量）与局部变量\" class=\"headerlink\" title=\"属性（成员变量）与局部变量\"></a>属性（成员变量）与局部变量</h2><p><strong>相同点：</strong><br>            1.定义变量的格式：数据类型 变量名 = 变量值<br>            2.先声明，后使用<br>            3.变量都有其对应的作用域<br><strong>不同点:</strong><br>1.声明的位置不同<br>        属性：直接定义在类的一对{}内<br>        局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量<br>2.权限修饰符不同<br>        属性：声明时可以使用权限修饰符指明其权限<br>                   常见的权限修饰符：private , protected , public ,缺省<br>         局部变量：不可使用权限修饰符<br>3.默认初始化值不同<br>        属性：类的属性根据其类型都<strong>有默认的初始化值</strong><br>                  <em>基本数据类型：</em><br>                        整型（byte , short , int , long）: 0<br>                        浮点型（float , double）: 0.0<br>                        字符型（char）: 0（或’\\u0000’）<br>                        布尔型（boolean）: false<br>                  <em>引用数据类型（类、数组、接口）：</em>null<br>        局部变量：没有初始化值，<strong><font color=\"red\">调用局部变量之前必须进行初始化</font></strong><br><strong>类中实例变量可以不用初始化，使用相应类型的默认值即可；方法中的定义的局部变量必须初始化，否则编译不通过</strong>。</p>\n<p>4.在内存中加载的位置不同<br>        属性：加载到堆空间中（非static）<br>        局部变量：加载到栈空间中<br><strong>属性赋值顺序</strong>：1.默认初始化<br>                           2.显式初始化/代码块中赋值<br>                           3.构造器初始化<br>                           4.通过“对象.方法”或“对象.属性“初始化<br><strong>JavaBean:</strong> 符合下列标准的Java类：类是公共的，一个无参的构造器，属性以及对应的get,set方法</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p><strong>方法的声明：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">权限修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class=\"line\">\t方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法的使用</strong>：可以调用当前类的属性和方法 ，方法中不可以定义方法<br><strong>方法的封装：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> </span></span><br><span class=\"line\"><span class=\"comment\"> * 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩</span></span><br><span class=\"line\"><span class=\"comment\">score(int)。 创建20个学生对象，学号为1到20，年级(1~6)和成绩(0~100)都由随机数确定。</span></span><br><span class=\"line\"><span class=\"comment\">问题一：打印出3年级(state值为3）的学生信息。</span></span><br><span class=\"line\"><span class=\"comment\">问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class=\"line\"><span class=\"comment\">提示：</span></span><br><span class=\"line\"><span class=\"comment\">1) 生成随机数：Math.random()，返回值类型double; </span></span><br><span class=\"line\"><span class=\"comment\">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月20日下午3:40:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建StudentTest对象，用来调用封装好的方法</span></span><br><span class=\"line\">\t\tStudentTest test = <span class=\"keyword\">new</span> StudentTest();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建并初始化对象数组</span></span><br><span class=\"line\">\t\tStudent[] stuArr = test.bulidStuArr(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历输出</span></span><br><span class=\"line\">\t\ttest.print(stuArr);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"*****************************\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找出年级为3的学生</span></span><br><span class=\"line\">\t\ttest.searchState(stuArr, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"****************************\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class=\"line\">\t\ttest.bubleSort(stuArr);</span><br><span class=\"line\">\t\ttest.print(stuArr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> 创建并初始化对象数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年1月20日下午5:15:19</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Student[] bulidStuArr(<span class=\"keyword\">int</span> num) &#123;</span><br><span class=\"line\">\t\tStudent[] stuArr = <span class=\"keyword\">new</span> Student[num];<span class=\"comment\">// 创建对象数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; num;i++) &#123;</span><br><span class=\"line\">\t\t\tstuArr[i] = <span class=\"keyword\">new</span> Student();<span class=\"comment\">// 给数组元素赋值</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 给Student对象的属性赋值</span></span><br><span class=\"line\">\t\t\tstuArr[i].number = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tstuArr[i].state = (<span class=\"keyword\">int</span>)(Math.random()*(<span class=\"number\">6</span>-<span class=\"number\">1</span>+<span class=\"number\">1</span>)+<span class=\"number\">1</span>);<span class=\"comment\">// Math.random()*(b-a+1)+a</span></span><br><span class=\"line\">\t\t\tstuArr[i].score = (<span class=\"keyword\">int</span>)(Math.random()*(<span class=\"number\">100</span>-<span class=\"number\">0</span>+<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stuArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> 遍历并输出数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年1月20日下午5:03:40</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> stuArr</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Student[] stuArr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; stuArr.length;i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(stuArr[i].display());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> 根据年级查找学生</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年1月20日下午4:58:45</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> stuArr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> state</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">searchState</span><span class=\"params\">(Student[] stuArr,<span class=\"keyword\">int</span> state)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历学生数组  打印出3年级(state值为3）的学生信息。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; stuArr.length;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(stuArr[i].state == state) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(stuArr[i].display());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> 使用冒泡排序按学生成绩排序</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年1月20日下午5:02:08</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> stuArr</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bubleSort</span><span class=\"params\">(Student[] stuArr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; stuArr.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; stuArr.length - <span class=\"number\">1</span> - i;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(stuArr[j].score &gt; stuArr[j+<span class=\"number\">1</span>].score) &#123;</span><br><span class=\"line\">\t\t\t\t\tStudent temp = stuArr[j];</span><br><span class=\"line\">\t\t\t\t\tstuArr[j] = stuArr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\tstuArr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 学号number(int)，年级state(int)，成绩score(int)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> state;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"学号：\"</span> + number + <span class=\"string\">\" 年级：\"</span> + state + <span class=\"string\">\" 成绩：\"</span> + score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/2020/01/18/java-02/oop_2.png\" alt=\"对象数组内存解析\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">stus[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"><span class=\"comment\">// 引用类型变量stus[0],stus[1],stus[2]...只能存储null 或地址值 ,不能存储对象的属性。必须new一个对象用来存放该对象的属性，且这个引用类型的变量存放着指向该对象的首地址值。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名对象：创建的一个对象没有显式地赋给一个变量。只能调用一次。</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Student().display();</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法的重载：</strong>在同一个类中，允许存在一个以上的同名方法，只需参数个数或参数类型不同即可<br>        <strong>可变个数的形参：</strong>方法名(参数的类型名 … 参数名)<br>        <strong>方法参数的值传递机制：</strong><br>                形参：方法定义时，声明在小括号中的参数<br>                实参：方法调用时，实际传递给形参的数据<br>        <strong>方法参数传递的方式：</strong><font color=\"red\">值传递</font>。即将实际参数值的副本(复制品)传入方法内，而参数本身不受影响。<br>                形参是基本数据类型：将实参基本数据类型变量的“<strong>数据值</strong>”传递给形参<br>                形参是引用数据类型：将实参引用数据类型变量的“<strong>地址值</strong>”传递给形参（含变量的数据类型）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 基本数据类型的参数传递测试</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月21日下午6:42:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CanshuTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"修改前：x = \"</span> + x);<span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tchange(x);<span class=\"comment\">// 在栈空间中的change()中对变量的值进行了修改，调用完成后change()中的变量出栈，并没有影响到主函数中的变量的值</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"修改后：x = \"</span> + x);<span class=\"comment\">// 1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明为静态方法，便于主类直接调用，无需实例化对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用方法前：x = \"</span> + x);<span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tx = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用方法后：x = \"</span> + x);<span class=\"comment\">// 2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 引用类型参数传递测试</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年1月21日下午7:11:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CanshuTest1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson1 obj = <span class=\"keyword\">new</span> Person1();</span><br><span class=\"line\">\t\tobj.age = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"修改前：age = \"</span> + obj.age);<span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tchange(obj);<span class=\"comment\">// obj指向的在堆空间中的对象的值被修改，影响了最终结果</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"修改后：age = \"</span> + obj.age);<span class=\"comment\">// 2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将实参中存储的地址值传递给形参，形参和实参指向堆空间中的同一个对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(Person1 obj)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用方法前：age = \"</span> + obj.age);<span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tobj.age = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用方法后：age = \"</span> + obj.age);<span class=\"comment\">// 2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person1</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装性\"><a href=\"#封装性\" class=\"headerlink\" title=\"封装性\"></a>封装性</h2><p><strong>封装性的体现：</strong><br>        1.将类的属性私有化(private)，提供公共的(public)方法来获取(get)和设置(set)属性值<br>        2.不对外暴露的私有方法<br>        3.单例模式<br>        封装性的体现，需要权限修饰符的配合<br>        Java中的4种权限修饰符（从小到大）：private , 缺省 ，protected , public<br><img src=\"/2020/01/18/java-02/oop_3.png\" alt=\"权限修饰符的访问权限\"></p>\n<p>4种权限均可以用来修饰类的内部结构：属性(成员变量)，方法，构造器，内部类<br>        修饰外部类：缺省，public<br>        局部内部类，局部变量：不能被权限修饰符修饰</p>\n<p>1.一个java文件里，public 的类只能出现一个，只能出现一个，只能出现一个，否则，不管你用哪一个类名命名文件名编译器都会报错</p>\n<p>2.关于多态。子类继承了父类的所有成员，包括private权限的成员变量，但是继承的子类具有私有变量的拥有权但是没有使用权。</p>\n<p>3.private的成员变量，根据权限修饰符的访问控制范围，只有在类内部才能被访问，就算是他的子类，也不能访问。</p>\n<h2 id=\"构造器（构造方法）\"><a href=\"#构造器（构造方法）\" class=\"headerlink\" title=\"构造器（构造方法）\"></a>构造器（构造方法）</h2><p>作用：创建对象 new + 构造器<br>        1.若没有显示的定义类的构造器，则系统默认提供一个空参的构造器。<br>        2.定义构造器的格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">权限修饰符 类名(形参列表)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.一个类中可以定义多个构造器，彼此构成重载</p>\n<p><font color=\"red\"><strong>4.构造函数不能被继承，只能被显式或隐式的调用</strong></font></p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>1.this可修饰或调用：属性，方法，构造器。<br>2.this修饰属性和方法：this表示当前对象。<br>在类的方法中，使用“ this.属性 ” 或 “ this.方法 ”  ，调用当前对象的属性或方法，通常可以省略。<br>方法的形参与类的属性重名时必须使用” this.变量 “显式调用。<br>3.this调用构造器：<br>在构造器中通过 this(参数列表) 调用本类其他构造器，不能调用自己。</p>\n<h2 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h2><p>1.更好地实现项目中类的管理<br>        2.声明在源文件的首行。声明类或接口所属的包<br>        3.属于标识符，遵循标识符的定义规范</p>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>1.在源文件中导入指定的包或接口<br>2.声明在包的声明和类的声明之间<br>3.“ xxx.* ”表示导入xxx包下的所有结构<br>4.如果使用的类或接口在java.lang包下定义的，则可以省略<br>5.使用本包下定义的类或接口，可以省略</p>\n<h2 id=\"继承性\"><a href=\"#继承性\" class=\"headerlink\" title=\"继承性\"></a>继承性</h2><p>好处：<br>        1.减少了代码的冗余，提高了代码的复用性。<br>        2.便于功能的扩展<br>        3.为多态的使用提供了前提<br>        格式：class A extends B{}<br>        A:子类，派生类，subclass<br>        B:父类，超类，基类，superclass<br>        1.一旦子类A继承父类B以后，子类A中就获取了父类B中的结构中所有的属性和方法。<br>        父类中的private属性和方法仍然被子类所继承，只是由于封装性的原因使得子类不能直接调用父类的结构而已。<br>        2.子类继承父类后，还可以声明自己特有的属性和方法，实现功能的拓展。<br>        子类和父类的关系不等同于集合与子集的关系。<br>        <strong>Java中继承的规定：</strong><br>        1.一个类可以被多个子类继承。<br>        2.单继承：一个类只允许有一个父类。<br>        3.子父类的关系是相对的。（直接父类，间接父类）。<br>        4.子类一旦继承了父类后，就获取了直接父类以及所有间接父类的属性和方法</p>\n<p><strong>Object类：</strong><br>        1.如果我们没有显式地声明一个类的父类，则此类继承于java.lang.Object类。<br>        2.所有java类(除java.lang.Object类外)都直接或间接地继承于java.lang.Object类。<br>        3.所有java类都具有java.lang.Object类声明的功能。<br>        <strong>Object类中的主要方法：</strong>equal()，toString()<br>        <font color=\"red\">equals()与==的区别:</font><br>        ==：运算符，<br>        1.可以使用在基本数据类型变量和引用数据类型之间(除了boolean类型);<br>        2.如果比较的是基本数据类型的变量，比较两个变量保存的值是否相等(不一定要类型相等)；<br>        例如：2 == 2.0；’2’ == 2；’A’ ==65<br>        3.如果比较的是引用数据类型的变量，比较两个变量存储的地址值是否相等。<br>        equals()：方法,<br>        1.通过对象来调用，只能适用于引用数据类型的变量；<br>        2.Object类中定义的equals()与 == 相同:    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">     rerturn (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.String , Date , File , 包装类等都重写了Object类中的equal()方法。比较的不是两个引用的地址，而是比较两        个对象的“实体内容”是否相等；<br>        <font color=\"red\">toString():</font><br>        1.输出一个对象的引用时，自动调用；<br>        2.在Object类中的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 返回类名和内存地址</span></span><br></pre></td></tr></table></figure>\n\n<p>3.String， Date , File , 包装类等都重写了Object类中的toString()方法。调用对象时返回的时对象的实体内         容。</p>\n<p><strong>方法的重写：</strong><br>​子类继承父类以后，可以对父类中同名同参数方法进行覆盖操作。<br>​应用：重写之后，通过子类对象调用父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。<br>​要求：<br>​1.子类中重写的方法名和形参列表必须与父类中被重写的方法的方法名和形参列表相同。<br>​2.子类中重写的方法的权限修饰符不小于父类中被重写的权限修饰符。(父类中声明为private的方法不能被重        写)<br>​3.返回值类型：</p>\n<ul>\n<li><p>父类中被重写的方法的返回类型为void或基本数据类型时，子类中的重写方法的返回类型也必须为void或基本数据类型。</p>\n</li>\n<li><p>父类中被重写的方法的返回类型为A类型，子类中重写的方法的返回值类型可以是A类或A的子类。</p>\n</li>\n</ul>\n<p>4.子类重写的方法抛出的异常类型不大于父类被重写方法抛出的异常类型</p>\n<h2 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h2><p>1.在子类的方法或构造器中，通过“super.属性”或“super.方法”的方式 ，显示地调用父类中的属性或方法，通常省略，子类和父类出现同名的属性时不可省略。<br>​        2.在子类构造器的首行显示使用“super(形参列表)”调用父类中指定的构造器，且不能与“this(形参列表)”同时存在。<br>​        3.在子类构造器的首行如果没有显示地声明“super(形参列表)”或“this(形参列表)”，默认调用父类中空参的构造器。<br>​        4.在子类的多个构造器中至少有一个类的构造器中使用了“super(形参列表)”来调用父类构造器。</p>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h2><p>1.对象的多态性：父类的引用指向子类对象。<br>​        2.多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法。(虚拟方法调用)<br>​        在编译期只能调用父类中声明的方法，在运行期实际执行的是子类重写父类的方法。(动态绑定)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person p1 = <span class=\"keyword\">new</span> Student();<span class=\"comment\">// 父类引用指向子类对象</span></span><br><span class=\"line\">p1.getInfo();<span class=\"comment\">// 调用Student类发getInfo()方法</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用前提：类的继承关系，方法的重写。<br>        4.对象的多态性只使用于方法，不使用于属性。<br><strong>重载与重写的区别：</strong><br>        重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为<font color=\"red\">“早绑定”或“静态绑定”</font>；<br>        重写，体现了多态性，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为<font color=\"red\">“晚绑定”或“动态绑定”</font>。</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><p>a instanceof A :判断对象a是否是类A的实例或子类。若是则返回true，否则返回false.<br>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person p1 = <span class=\"keyword\">new</span> Man();<span class=\"comment\">// 声明一个父类Person对象，并指向子类Man对象</span></span><br><span class=\"line\"><span class=\"comment\">// 向下转型：使用强转符()</span></span><br><span class=\"line\"><span class=\"comment\">// 向下转型目的：</span></span><br><span class=\"line\"><span class=\"comment\">//有了对象的多态性以后，内存中实际加载了子类特有的属性和方法，但是变量声明为父类类型，在编译时只能调用父类中声明的属性和方法,</span></span><br><span class=\"line\"><span class=\"comment\">//为了调用子类对象中特有的属性和方法,使用向下转型</span></span><br><span class=\"line\"><span class=\"comment\">//Women w1 = (Women)p1;// 抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(p1 <span class=\"keyword\">instanceof</span> Man)&#123;</span><br><span class=\"line\">    Man m1 = (Man)p1;</span><br><span class=\"line\">    m1.earnMoney();<span class=\"comment\">// 调用子类Man中特有的方法(父类Person没有的方法)时，编译前不会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/01/18/java-02/oop_6.png\" alt></p>\n<h2 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h2><p>Java提供了8种基本数据类型的包装类，使得基本数据类型的变量具有类的特征<br><img src=\"/2020/01/18/java-02/oop_4.png\" alt=\"8种包装类\"></p>\n<p><img src=\"/2020/01/18/java-02/oop_5.png\" alt=\"基本类型、包装类与String类间的转换\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 基本类型、包装类与String类间的转换</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sweetboyZhang </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020年2月3日下午2:21:04</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span><span class=\"comment\">// 基本数据类型-&gt;包装类 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num1 = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tInteger num1_Object = <span class=\"keyword\">new</span> Integer(num1);<span class=\"comment\">// 调用包装类的构造器</span></span><br><span class=\"line\">\t\tInteger num2_Object = <span class=\"number\">666</span>;<span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\">\t\tSystem.out.println(num2_Object.toString());</span><br><span class=\"line\">\t\tSystem.out.println(num1_Object.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span><span class=\"comment\">// 包装类-&gt;基本数据类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tInteger num3_Object = <span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num3 = num3_Object.intValue();<span class=\"comment\">// 调用xxxValue()</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num4 = num3_Object;<span class=\"comment\">// 自动拆箱</span></span><br><span class=\"line\">\t\tSystem.out.println(num3+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(num4+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 基本数据类型，包装类-&gt;String类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式一：连接运算</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num5 = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t\tString str1 = num5 + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(str1);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式二：调用String重载的valueOf()方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> num6 = <span class=\"number\">6.6f</span>;</span><br><span class=\"line\">\t\tString str2 = String.valueOf(num6);</span><br><span class=\"line\">\t\tSystem.out.println(str2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// String类型-&gt;基本数据类型，包装类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用 包装类的parseXxx()方法</span></span><br><span class=\"line\">\t\tString str3 = <span class=\"string\">\"1432132\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num7 = Integer.parseInt(str3);</span><br><span class=\"line\">\t\tSystem.out.println(str3);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><p>1.可以修饰：属性，方法，代码块，内部类。<br>2.使用 static 修饰属性：<br><font color=\"red\"><strong>静态变量只能在类主体中定义，不能在方法中定义。 静态变量属于类所有而不属于方法。</strong></font><br>按是否使用static修饰分为<strong>静态属性(类变量)</strong>和<strong>非静态属性(实例变量)</strong>;<br><strong>非静态属性</strong>：如果创建多个对象，每个对象都独立拥有一套类中的非静态属性。修改其中一个对象中的非静态属性时，不会导致其他对象中的相同属性发生变化。<br><strong>静态属性</strong>：多个对象共享一个静态属性。当其中一个对象修改静态属性时，会导致其他对象调用此静态属性时，是修改过了的。<br><font color=\"red\">注意</font>：<br>&lt;1&gt;.静态变量随着类的加载而加载，可以通过”类名.静态变量”的方式进行调用。<br>&lt;2&gt;.静态变量的加载早于对象的创建。<br>&lt;3&gt;.由于类只会加载一次，则静态变量在内存中也只会存在一份(存在方法区的静态域中)。<br>&lt;4&gt;.类能调用类变量，但不能调用实例变量；对象既能调用类变量，又能调用实例变量。</p>\n<p><img src=\"/2020/01/18/java-02/oop_7.png\" alt=\"类变量与实例变量内存解析\"></p>\n<p>3.使用 static 修饰方法：<br>        &lt;1&gt;.静态方法随着类的加载而加载，可 通过”类名.静态方法”的方式进行调用。<br>        &lt;2&gt;.类可以调用静态方法，但不能调用非静态方法；对象既可以调用静态方法，又能调用非静态方法。<br>        &lt;3&gt;.静态方法中只能调用静态属性或静态方法；非静态方法中既能调用静态属性又能调用静态方法。<br>        &lt;4&gt;.静态方法中不能使用this,super关键字。</p>\n<p>4.如何确定一个属性是否要声明为static<br>        &lt;1&gt;.属性可以被多个对象所共享，不会随着对象的不同而不同。<br>        &lt;2&gt;.类中的常量常常声明为static</p>\n<p>5.如何确定一个方法是否要声明为static<br>        &lt;1&gt;.操作静态属性的方法通常设置为static;<br>        &lt;2&gt;.工具类中的方法，习惯上声明为static,例如Math,Arrays,Collections</p>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><p>作用：初始化类或对象<br>        <strong>静态代码块</strong>：static{}<br>        &lt;1&gt; 内部可以有输出语句<br>        &lt;2&gt; 随着类的加载而执行，而且只执行一次<br>        &lt;3&gt; 作用：初始化类的信息<br>        &lt;4&gt; 如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行<br>        &lt;5&gt; 静态代码块的执行优先于非静态代码块的执行<br>        &lt;6&gt; 静态代码块内只能调用静态的属性和方法，不可以调用非静态的属性和方法<br>        <strong>非静态代码块</strong>：{}<br>        &lt;1&gt;  内部可以有输出语句<br>        &lt;2&gt; 随着类的创建而执行<br>        &lt;3&gt; 每创建一个对象，就执行一次非静态代码块<br>        &lt;4&gt; 作用：可以在创建对象时，对对象的属性进行初始化<br>        &lt;5&gt;非静态代码块内既能调用静态的属性和方法，又能调用非静态的属性和方法</p>\n<h2 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h2><p>1.修饰类：表明该类不能被继承。例如：String类，System类，StringBuffer类<br>2.修饰方法：表明该方法不能被重写，但是可以被重载。例如：Object类中的getClass()方法<br>3.修饰变量：此时的”变量”就称为一个常量<br>    &lt;1&gt; final修饰成员变量：显式初始化，声明时直接赋值；代码块中初始化；构造器中初始化。<br>    &lt;2&gt; 修饰局部变量：修饰形参时，可以不用初始化，但是在调用时必须要初始化。给常量形参赋一个实参，以后只能在方法体内使用此形参，但不能重新赋值。<br>修饰基本数据类型时，在赋值之后就无法改变；<br>修饰引用数据类型时，在赋值后指向的地址无法改变，但是对象的内容可以改变。<br>例如：可以对数组中的元素重新赋值，但是不能使数组指向新的地址。</p>\n<p>static final 修饰属性：全局常量</p>\n<h2 id=\"abstract\"><a href=\"#abstract\" class=\"headerlink\" title=\"abstract\"></a>abstract</h2><p>1.abstract修饰类：抽象类<br>        &lt;1&gt; 此类不能实例化<br>        &lt;2&gt; 抽象类中一定有构造器，便于子类实例化调用<br>        &lt;3&gt; 通过提供抽象类的子类，通过实例化子类完成相应的操作<br>2.abstract修饰方法：抽象方法(jdk1.8中<strong>默认权限为default</strong>)<br>        &lt;1&gt; 抽象方法只有方法的声明，没有方法体<br>        &lt;2&gt; 包含抽象方法的类一定是抽象类；抽象类中可以没有抽象方法<br>        &lt;3&gt; 若子类重写了父类的所有抽象方法，此子类可以实例化；否则，此子类必须声明为抽象类</p>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><p>1.在java中，接口与类是并列的两个结构。(<strong>默认权限为public</strong>)<br>2.接口中的成员：</p>\n<ul>\n<li>JDK7及以前：只能定义全局常量(public static final 可以省略)和抽象方法(<strong>默认为public abstract</strong> )</li>\n<li>JDK8：还可以定义静态方法(public static 只能通过接口来调用)，<strong>此时被修饰的方法必须带有方法体</strong>。</li>\n</ul>\n<p>3.接口中不能定义构造器</p>\n<p>4.<strong>非抽象类</strong>实现接口必须重写该接口中的所有抽象方法</p>\n<p>5.Java通过实现多个接口，弥补单继承的局限性<br>  <code>class A extends B implements C,D,E{}</code><br> 6.接口之间可以继承，而且可以多继承</p>\n<blockquote>\n<p>接口和抽象类的区别是什么？</p>\n</blockquote>\n<ol>\n<li>接口的方法默认是<code>public abstract</code>，所有方法在接口中不能有实现(Java 8 开始，default、static方法可以有默认实现）；而抽象类可以有非抽象的方法（即普通成员函数），抽象方法可以被public、protected 和default 这些修饰符修饰（抽象方法就是为了被重写所以不能使用private 关键字修饰！）。</li>\n<li>接口中除了<code>public static ﬁnal</code> 变量，不能有其他变量；而抽象类中则不一定。</li>\n<li>一个类可以实现多个接口；但只能实现一个抽象类。接口自己本身可以通过extends 关键字扩展多个接口。</li>\n<li>从设计层面来说，抽象是对类本质的抽象，是一种模板设计，为了代码复用，而接口是对行为的抽象，是一种行为的规范，只约束了行为的有无，不对接口的实现做限制。</li>\n</ol>\n<blockquote>\n<p>当你关注于一个事物的本质时，使用抽象类；当你关注于一个操作时，使用接口。</p>\n</blockquote>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>Java中允许一个类A声明在另一个类B中，则类A就是内部类，类B就是外部类。<br>        1.非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员<br>        内部类中才可声明static成员；<br>        2.外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式；<br>        3.<strong>成员内部类可以直接使用外部类的所有成员，包括私有的数据</strong>；<br>        4.当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的；<br>        5.局部内部类和匿名内部类只能访问局部<code>final</code>变量；因为当外部类方法执行完成后，局部变量就会销毁，而内部类可能没有被销毁（只有没被引用时才被销毁）。    </p>\n<p><strong>java中的类加载顺序：</strong><br>父类静态变量/父类静态代码块-&gt;子类静态变量/子类静态代码块-&gt;父类成员变量/父类非静态代码块-&gt;父类构造器-&gt;子类成员变量/子类非静态代码块-&gt;子类构造器</p>\n","categories":["Java"],"tags":["JavaSE"]},{"title":"Jdbc核心技术","url":"/2020/03/23/jdbc/","content":"<h2 id=\"一、JDBC概述\"><a href=\"#一、JDBC概述\" class=\"headerlink\" title=\"一、JDBC概述\"></a>一、JDBC概述</h2><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>(一组API)。<a id=\"more\"></a><br>                  <img src=\"/2020/03/23/jdbc/1.png\" alt></p>\n<p><strong>JDBC接口(API)包括两个层次：</strong><br><em>面向应用的API</em>：Java API，抽象接口，供程序开发人员使用(连接数据库，执行SQL语句，获得结果)。<br><em>面向数据库的API：</em>Java Driver API，供开发商数据库驱动程序用。</p>\n<blockquote>\n<p>JDBC是sun公司提供的一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</p>\n<p>不同的数据库厂商，需要针对这套接口。提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p>\n<p>​                                                                                                                                          ——面向接口编程</p>\n</blockquote>\n<p><strong>JDBC程序编写步骤：</strong></p>\n<p><img src=\"/2020/03/23/jdbc/2.png\" alt></p>\n<h2 id=\"二、获取数据库连接\"><a href=\"#二、获取数据库连接\" class=\"headerlink\" title=\"二、获取数据库连接\"></a>二、获取数据库连接</h2><p><strong>条件1、Driver接口</strong><br>java.sql.Driver 接口是所有JDBC驱动程序需要实现的接口 。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。<br>在程序中不需要直接取访问实现了Driver 接口的类，而是由程序驱动管理器类(java.sql.DriverManager)去调用这些Driver实现。<br>mysql的驱动：com.mysql.jdbc.Driver(mysql6.0及以前)<br><strong>mysql6.0之后改用：com.mysql.cj.jdbc.Driver</strong></p>\n<p><strong>条件2、URL</strong><br>jdbc URL用于标识一个被注册的驱动程序，驱动程序管理器通过这个URL选择正确的驱动程序，从而建立到数据库的连接。</p>\n<p>格式(mysql6.0及以前)：<img src=\"/2020/03/23/jdbc/3.png\" alt></p>\n<p><strong>mysql6.0以后需要在后面加上时区：</strong><br><strong>”jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai“</strong></p>\n<p><strong>条件3、用户名和密码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConnectionTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectionTest1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取Driver实现类对象</span></span><br><span class=\"line\">\t\t\tDriver driver = <span class=\"keyword\">new</span> com.mysql.cj.jdbc.Driver();</span><br><span class=\"line\">\t\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将用户名密码封装在Properties中</span></span><br><span class=\"line\">\t\t\tProperties info = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tinfo.setProperty(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">\t\t\tinfo.setProperty(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"2824199842\"</span>);</span><br><span class=\"line\">\t\t\tConnection conn = driver.connect(url, info);</span><br><span class=\"line\">\t\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span>  <span class=\"comment\">// 没有使用第三方的API,使得程序具有更好的移植性</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectionTest2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.使用反射获取Driver实现类对象</span></span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 = Class.forName(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">\t\tDriver driver = (Driver) class1.newInstance();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.提供要连接的数据库</span></span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.提供要连接的用户名、密码</span></span><br><span class=\"line\">\t\tProperties info = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tinfo.setProperty(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">\t\tinfo.setProperty(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"2824199842\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.建立连接</span></span><br><span class=\"line\">\t\tConnection conn = driver.connect(url, info);</span><br><span class=\"line\">\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 使用DriverManager替换Driver</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectionTest3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取Driver实现类对象</span></span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 = Class.forName(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">\t\tDriver driver = (Driver) class1.newInstance();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.提供URL，用户名及密码</span></span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString pwd = <span class=\"string\">\"2824199842\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.注册驱动</span></span><br><span class=\"line\">\t\tDriverManager.registerDriver(driver);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.获取连接</span></span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url,user,pwd);</span><br><span class=\"line\">\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 省略显式加载驱动</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectionTest4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提供URL，用户名及密码</span></span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString pwd = <span class=\"string\">\"2824199842\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载Driver  mysql的Driver中静态代码块中已经注册了driver</span></span><br><span class=\"line\">\t\tClass&lt;?&gt; class1 = Class.forName(<span class=\"string\">\"com.mysql.cj.jdbc.Driver\"</span>);</span><br><span class=\"line\">\t\tDriver driver = (Driver) class1.newInstance();</span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t// 注册驱动</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tDriverManager.registerDriver(driver);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取连接</span></span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url,user,pwd);</span><br><span class=\"line\">\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 将信息放入配置文件jdbc.properties中,通过读取配置文件获取连接条件(url,user,password,driverclass)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectionTest5</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.读取配置文件信息</span></span><br><span class=\"line\">\t\tInputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class=\"string\">\"jdbc.properties\"</span>);</span><br><span class=\"line\">\t\tProperties pros = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tpros.load(inputStream);</span><br><span class=\"line\">\t\tString user = pros.getProperty(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">\t\tString pwd = pros.getProperty(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tString url = pros.getProperty(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\">\t\tString driverClass = pros.getProperty(<span class=\"string\">\"driverclass\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.加载驱动</span></span><br><span class=\"line\">\t\tClass.forName(driverClass);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取连接</span></span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url,user,pwd);</span><br><span class=\"line\">\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/03/23/jdbc/7.png\" alt></p>\n<h2 id=\"三、使用PreparedStatement实现CRUD\"><a href=\"#三、使用PreparedStatement实现CRUD\" class=\"headerlink\" title=\"三、使用PreparedStatement实现CRUD\"></a>三、使用PreparedStatement实现CRUD</h2><p><strong>操作和访问数据库：</strong><br>数据库连接被用于向数据库发送命令和SQL语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。<br>在java.sql包中有三个接口分别定义了对数据库的不同调用方式：<br>1、Statement：用于执行静态SQL语句并返回它所生成结果的对象。<br>2、PreparedStatement：SQL语句被预编译并存储在此对象中，可以用此对象多次高效地执行该语句。<br>3、CallableStatement：用于执行SQL存储过程。</p>\n<p><strong>Statement的弊端：</strong>存在拼串操作，并且存在SQL注入问题<br>        <strong>PreparedStatement：</strong>是Statement的子接口；能最大可能提高性能；操作Blob类型数据；可以防止sql注入</p>\n<h3 id=\"增删改操作\"><a href=\"#增删改操作\" class=\"headerlink\" title=\"增删改操作\"></a>增删改操作</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 增加记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Connection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    PreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.读取配置文件信息</span></span><br><span class=\"line\">        InputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class=\"string\">\"jdbc.properties\"</span>);</span><br><span class=\"line\">        Properties pros = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        pros.load(inputStream);</span><br><span class=\"line\">        String user = pros.getProperty(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        String pwd = pros.getProperty(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        String url = pros.getProperty(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\">        String driverClass = pros.getProperty(<span class=\"string\">\"driverclass\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.加载驱动</span></span><br><span class=\"line\">        Class.forName(driverClass);</span><br><span class=\"line\">        <span class=\"comment\">// 3.获取连接</span></span><br><span class=\"line\">        conn = DriverManager.getConnection(url, user, pwd);</span><br><span class=\"line\">        System.out.println(conn);</span><br><span class=\"line\">        <span class=\"comment\">// 4.预编译sql语句，返回PreparedStatement实例</span></span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into customers(name,email,birth)values(?,?,?)\"</span>;</span><br><span class=\"line\">        ps = conn.prepareStatement(sql);</span><br><span class=\"line\">        <span class=\"comment\">// 5.填充占位符</span></span><br><span class=\"line\">        ps.setString(<span class=\"number\">1</span>, <span class=\"string\">\"Taylor\"</span>);<span class=\"comment\">// 索引从1开始</span></span><br><span class=\"line\">        ps.setString(<span class=\"number\">2</span>, <span class=\"string\">\"12324@qq.com\"</span>);</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">        java.util.Date date = sdf.parse(<span class=\"string\">\"1989-2-22\"</span>);</span><br><span class=\"line\">        ps.setDate(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> Date(date.getTime()));</span><br><span class=\"line\">        <span class=\"comment\">// 6.执行操作</span></span><br><span class=\"line\">        ps.execute();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 7.关闭资源</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ps.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                conn.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1、可将增加、删除、修改、查询中的共同操作（1.获取连接，2.释放资源）封装成一个工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtils</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> 获取数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年3月25日下午5:38:23</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.读取配置文件信息</span></span><br><span class=\"line\">\t\tInputStream inputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class=\"string\">\"jdbc.properties\"</span>);</span><br><span class=\"line\">\t\tProperties pros = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tpros.load(inputStream);</span><br><span class=\"line\">\t\tString user = pros.getProperty(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">\t\tString pwd = pros.getProperty(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tString url = pros.getProperty(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\">\t\tString driverClass = pros.getProperty(<span class=\"string\">\"driverclass\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.加载驱动</span></span><br><span class=\"line\">\t\tClass.forName(driverClass);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取连接</span></span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, pwd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Description</span> // 关闭资源</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@author</span> zyz</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@date</span> 2020年3月25日下午5:40:43</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> conn</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ps</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">closeResource</span><span class=\"params\">(Connection conn, Statement ps)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tps.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、进一步可将增加、删除、修改中的共同操作（1.获取连接，2.预编译sql，3.填充sql，4.执行操作，5.关闭资源）封装到一个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将增删改操作写成一个通用的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String sql, Object ... args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.建立连接</span></span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.预编译sql</span></span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.填充占位符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tps.setObject(i + <span class=\"number\">1</span>, args[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.执行操作</span></span><br><span class=\"line\">\t\t\tps.execute();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.关闭资源</span></span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, ps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 测试通用的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"delete from customers where id =?\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tupdate(sql,<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><p>Java与SQL对应数据类型转换表：<br>       <img src=\"/2020/03/23/jdbc/4.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tResultSet resultset = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 连接</span></span><br><span class=\"line\">\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 预编译sql</span></span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select id,name,email,birth from customers where id = ?\"</span>;</span><br><span class=\"line\">\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 填充占位符</span></span><br><span class=\"line\">\t\tps.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行操作并返回结果集</span></span><br><span class=\"line\">\t\tresultset = ps.executeQuery();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resultset.next()) &#123;<span class=\"comment\">// 判断结果集的下一条是否有数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> id = resultset.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tString name = resultset.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tString email = resultset.getString(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t\tDate birth = resultset.getDate(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将数据封装到一个对象中</span></span><br><span class=\"line\">\t\t\tCustomer customer = <span class=\"keyword\">new</span> Customer(id, name, email, birth);</span><br><span class=\"line\">\t\t\tSystem.out.println(customer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tJDBCUtils.closeResource(conn, ps, resultset);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对Customer表创建通用的查询方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Customer <span class=\"title\">queryCustomers</span><span class=\"params\">(String sql, Object... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\tps.setObject(i + <span class=\"number\">1</span>, args[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tResultSet resultset = ps.executeQuery();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取结果集中的元数据:ResultSetMetaData</span></span><br><span class=\"line\">\t\tResultSetMetaData rsmd = resultset.getMetaData();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过ResultSetData 获取结果集中的列数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> column = rsmd.getColumnCount();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取数据并封装到对象中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resultset.next()) &#123;</span><br><span class=\"line\">\t\t\tCustomer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; column; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取列值</span></span><br><span class=\"line\">\t\t\t\tObject columnValue = resultset.getObject(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取每个列的列名-----属性</span></span><br><span class=\"line\">\t\t\t\tString columnName = rsmd.getColumnName(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 通过反射给属性赋值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 通过列名获取属性</span></span><br><span class=\"line\">\t\t\t\tField field = Customer<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getDeclaredField</span>(<span class=\"title\">columnName</span>)</span>;</span><br><span class=\"line\">\t\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 给属性赋值</span></span><br><span class=\"line\">\t\t\t\tfield.set(customer, columnValue);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> customer;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tJDBCUtils.closeResource(conn, ps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 测试通用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryCustomers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select id,name,email,birth from Customers where id = ? \"</span>;</span><br><span class=\"line\">\t\tCustomer customer = queryCustomers(sql,<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\tSystem.out.println(customer);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>针对Order表创建通用的查询方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderQuery</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">orderQuery</span><span class=\"params\">(String sql, Object... args)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 填充占位符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tps.setObject(i + <span class=\"number\">1</span>, args[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回结果集</span></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取结果集元数据(用来修饰结果集的类，提供了结果集的各种属性值)</span></span><br><span class=\"line\">\t\t\tResultSetMetaData metaData = rs.getMetaData();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取列数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将获取到的结果封装到Order对象中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tOrder order = <span class=\"keyword\">new</span> Order();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取每一列的列值 通过结果集</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tObject columnValue = rs.getObject(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取每一列的列名   通过元数据</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//String columnName = metaData.getColumnName(i + 1);</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取别名</span></span><br><span class=\"line\">\t\t\t\t\tString columnName = metaData.getColumnLabel(i+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span></span><br><span class=\"line\">\t\t\t\t\tField field = Order<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getDeclaredField</span>(<span class=\"title\">columnName</span>)</span>;</span><br><span class=\"line\">\t\t\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t\t\tfield.set(order, columnValue);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> order;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, ps,rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrderQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id = ?\"</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(orderQuery(sql, <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/03/23/jdbc/5.png\" alt></p>\n<p><strong>通用的查询方法(针对所有的 表)：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Query</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一条结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">query</span><span class=\"params\">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 填充占位符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tps.setObject(i + <span class=\"number\">1</span>, args[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回结果集</span></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取结果集元数据(用来修饰结果集的类，提供了结果集的各种属性值)</span></span><br><span class=\"line\">\t\t\tResultSetMetaData metaData = rs.getMetaData();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取列数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将获取到的结果封装到Order对象中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tT t = clazz.newInstance();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取每一列的列值 通过结果集</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tObject columnValue = rs.getObject(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取每一列的列名 通过元数据(表中的列名与类中的属性名不一致时会报错)</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// String columnName = metaData.getColumnName(i + 1);</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 解决方式：获取别名(没有别名时即为列名)</span></span><br><span class=\"line\">\t\t\t\t\tString columnName = metaData.getColumnLabel(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span></span><br><span class=\"line\">\t\t\t\t\tField field = clazz.getDeclaredField(columnName);</span><br><span class=\"line\">\t\t\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t\t\tfield.set(t, columnValue);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) </span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select id,name,email from customers where id = ?\"</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(query(Customer<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">sql</span>, 2))</span>;</span><br><span class=\"line\">\t\t\tString sql1 = <span class=\"string\">\"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id = ?\"</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(query(Order<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">sql1</span>, 1))</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回多条结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">queries</span><span class=\"params\">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tps.setObject(i + <span class=\"number\">1</span>, args[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将获取到的结果封装到列表中</span></span><br><span class=\"line\">\t\t\tList&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tT t = clazz.newInstance();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取每一列的列值 通过结果集</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tObject columnValue = rs.getObject(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 获取每一列的别名  通过元数据</span></span><br><span class=\"line\">\t\t\t\t\tString columnName = metaData.getColumnLabel(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 通过反射，将对象指定名columnName的属性赋值为指定的属性columnValue</span></span><br><span class=\"line\">\t\t\t\t\tField field = clazz.getDeclaredField(columnName);</span><br><span class=\"line\">\t\t\t\t\tfield.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t\t\tfield.set(t, columnValue);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tlist.add(t);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrderQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select order_id orderId,order_name orderName,order_date orderDate from `order` where order_id &lt; ?\"</span>;</span><br><span class=\"line\">\t\t\tList&lt;Order&gt; orders = queries(Order<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>, 4)</span>;</span><br><span class=\"line\">\t\t\torders.forEach(System.out::println);</span><br><span class=\"line\">\t\t\tString sql1 = <span class=\"string\">\"select id,name,email from customers where id &lt; ?\"</span>;</span><br><span class=\"line\">\t\t\tList&lt;Customer&gt; customers = queries(Customer<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">sql1</span>, 10)</span>;</span><br><span class=\"line\">\t\t\tcustomers.forEach(System.out::println);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、操作BLOB类型字段\"><a href=\"#四、操作BLOB类型字段\" class=\"headerlink\" title=\"四、操作BLOB类型字段\"></a>四、操作BLOB类型字段</h2><p>TinyBlob：255字节<br>        Blob：65K<br>        MediumBlob：16M<br>        LongBlob：4G</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">// 向Customers表中添加一条Blob类型数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into customers(name,email,birth,photo) value(?,?,?,?)\"</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\tps.setObject(<span class=\"number\">1</span>, <span class=\"string\">\"wd\"</span>);</span><br><span class=\"line\">\t\tps.setObject(<span class=\"number\">2</span>, <span class=\"string\">\"wd@qq.com\"</span>);</span><br><span class=\"line\">\t\tps.setObject(<span class=\"number\">3</span>, <span class=\"string\">\"1999-7-20\"</span>);</span><br><span class=\"line\">\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"./src/wd1.jpg\"</span>));</span><br><span class=\"line\">\t\tps.setBlob(<span class=\"number\">4</span>, in);</span><br><span class=\"line\">\t\tps.execute();</span><br><span class=\"line\">\t\tJDBCUtils.closeResource(conn, ps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 查询customers表中的Blob类型的数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tInputStream in = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tFileOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select id,name,email,birth,photo from Customers where id=? \"</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\t\tps.setInt(<span class=\"number\">1</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> id = rs.getInt(<span class=\"string\">\"id\"</span>);<span class=\"comment\">// 既可以写索引，又可以写别名或字段名</span></span><br><span class=\"line\">\t\t\t\tString name = rs.getString(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\t\t\t\tString email = rs.getString(<span class=\"string\">\"email\"</span>);</span><br><span class=\"line\">\t\t\t\tDate birth = rs.getDate(<span class=\"string\">\"birth\"</span>);</span><br><span class=\"line\">\t\t\t\tCustomer customer = <span class=\"keyword\">new</span> Customer(id, name, email, birth);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(customer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tBlob photo = rs.getBlob(<span class=\"string\">\"photo\"</span>);</span><br><span class=\"line\">\t\t\t\tin = photo.getBinaryStream();</span><br><span class=\"line\">\t\t\t\tout = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(<span class=\"string\">\"./src/wd.jpg\"</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tout.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tin.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tout.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、数据库事务\"><a href=\"#五、数据库事务\" class=\"headerlink\" title=\"五、数据库事务\"></a>五、数据库事务</h2><p><strong>事务：</strong>一组逻辑操作单元，使数据由一种状态变换到另一种状态。</p>\n<p><strong>事务处理：</strong>要么所有的事务都被提交(commit)，那么这些修改就被永久的保存下来；要么放弃所作的全部修改，整个事务回滚(rollback)到最初的状态。</p>\n<p><strong>JDBC事务处理：</strong><br>1.数据一旦提交，就不可回滚。<br>2.DDL操作一旦执行，都会自动提交。<br>    DML默认情况下，一旦执行，就会提交。可通过set autocommit=false 取消DML操作的自动提交。<br>3.默认关闭连接的时候，自动提交。</p>\n<p><strong>JDBC程序中为了让多个SQL 语句作为一个事务执行：</strong><br>调用Connection 对象的setAutoCommit(false); 以取消自动提交事务<br>在所有的SQL 语句都成功执行后，调用commit(); 方法提交事务<br>在出现异常时，调用rollback(); 方法回滚事务</p>\n<blockquote>\n<p>若此时Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p>\n</blockquote>\n<p><strong>事务的ACID属性：</strong><br>1.<strong>原子性(Atomicity)：</strong>事务是一个不可分割的工作单位，事务的操作要么都发生，要么都不发生。<br>2.<strong>一致性(Consistency)：</strong>事务必须使数据库从一个一致状态变换到另外一致状态。<br>3.<strong>隔离性(Isolation)：</strong>一个事务的执行不能被其他事务干扰。<br>4.<strong>持久性(Durability)：</strong>一个数据一旦被提交，它对数据库的改变就是永久性的。</p>\n<p><strong>数据库并发问题：</strong><br><strong>脏读：</strong>对于两个事务T1、T2，T1读取了已经被T2更新但还没被提交的数据。之后，若T2回滚，T1读取的数据就是无效的。<br><strong>不可重复读：</strong>对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段。之后，T1再次读取同一个字段，值就不同了。<br><strong>幻读：</strong>对于两个事务T1、T2，T1从一个表中读了一个字段，然后T2再该表中插入了一些新的行。之后，如果如果T1再次读取同一个表，就会多出几行。</p>\n<p><strong>四种隔离级别：</strong>隔离级别越高，一致性越好，并发性越弱。<br><img src=\"/2020/03/23/jdbc/6.png\" alt></p>\n<h2 id=\"六、DAO及相关实现类\"><a href=\"#六、DAO及相关实现类\" class=\"headerlink\" title=\"六、DAO及相关实现类\"></a>六、DAO及相关实现类</h2><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。<br>有时也称作：BaseDAO(封装通用方法)<br>作用：为了实现功能的模块化，更有利于代码的维护和升级。</p>\n<h2 id=\"七、数据库连接池\"><a href=\"#七、数据库连接池\" class=\"headerlink\" title=\"七、数据库连接池\"></a>七、数据库连接池</h2><p><strong>数据库连接池基本思想：</strong>为数据库连接建立一个“缓冲池”，预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕后再放回去。</p>\n<p>JDBC的数据库连接池使用javax.sql.DataSource 来表示，DataSource只是一个接口，该接口通常由服务器(Weblogic,WebSphere,Tomcat)提供实现，也有一些开源组织提供实现。<br><img src=\"/2020/03/23/jdbc/9.png\" alt></p>\n<p>Druid数据库连接池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Properties pros = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">    InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class=\"string\">\"druid.properties\"</span>);</span><br><span class=\"line\">    pros.load(is);</span><br><span class=\"line\">    DataSource dataSource = DruidDataSourceFactory.createDataSource(pros);</span><br><span class=\"line\">    Connection conn = dataSource.getConnection();</span><br><span class=\"line\">    System.out.println(conn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/2020/03/23/jdbc/8.png\" alt></p>\n<p>配置属性：<br><img src=\"/2020/03/23/jdbc/10.png\" alt></p>\n<h2 id=\"八、Apache-DBUtils实现CRUD操作\"><a href=\"#八、Apache-DBUtils实现CRUD操作\" class=\"headerlink\" title=\"八、Apache-DBUtils实现CRUD操作\"></a>八、Apache-DBUtils实现CRUD操作</h2><p>commons-dbutils 是Apache 组织提供的一个开源JDBC工具类库，封装了增删改查操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryRunnerTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tQueryRunner runner = <span class=\"keyword\">new</span> QueryRunner();</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"insert into customers(name,email,birth) value(?,?,?)\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> insertCount = runner.update(conn, sql, <span class=\"string\">\"zyz\"</span>, <span class=\"string\">\"zyz@qq.com\"</span>, <span class=\"string\">\"1999-1-1\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(insertCount);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// BeanHandler是ResultSetHandler接口的一个实现类，用于封装表中的一条记录</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tQueryRunner runner = <span class=\"keyword\">new</span> QueryRunner();</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select id,name,email,birth from customers where id = ?\"</span>;</span><br><span class=\"line\">\t\t\tBeanHandler&lt;Customer&gt; handler = <span class=\"keyword\">new</span> BeanHandler&lt;Customer&gt;(Customer<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\t\tCustomer customer = runner.query(conn, sql, handler, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(customer);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// BeanListhandler是ResultSetHandler接口的一个实现类，用于封装表中的多条记录构成的集合</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tQueryRunner runner = <span class=\"keyword\">new</span> QueryRunner();</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select id,name,email,birth from customers where id &gt; ?\"</span>;</span><br><span class=\"line\">\t\t\tBeanListHandler&lt;Customer&gt; handler = <span class=\"keyword\">new</span> BeanListHandler&lt;Customer&gt;(Customer<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\t\tList&lt;Customer&gt; customers = runner.query(conn, sql, handler, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tcustomers.forEach(System.out::println);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> <span class=\"comment\">// 查询特殊值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tQueryRunner runner = <span class=\"keyword\">new</span> QueryRunner();</span><br><span class=\"line\">\t\t\tconn = JDBCUtils.getConnection();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select count(*) from customers\"</span>;</span><br><span class=\"line\">\t\t\tScalarHandler handler = <span class=\"keyword\">new</span> ScalarHandler();</span><br><span class=\"line\">\t\t\tLong count = (Long) runner.query(conn, sql, handler);</span><br><span class=\"line\">\t\t\tSystem.out.println(count);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtils.closeResource(conn, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["JDBC"]},{"title":"图书Crud项目","url":"/2020/07/15/ssm/","content":"<p>此项目用于回顾ssm整合的过程，加深自己对ssm三大框架的理解以及提高使用框架的能力，同时也是对前端，web，mysql等知识的复习。<a id=\"more\"></a></p>\n<h1 id=\"一、设计数据库\"><a href=\"#一、设计数据库\" class=\"headerlink\" title=\"一、设计数据库\"></a>一、设计数据库</h1><p>创建一个名为ssm的数据库，由于只是一个图书的crud项目，这里只创建一个books表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> ssm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USE</span> ssm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> books ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> books(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> PRIMARY <span class=\"keyword\">KEY</span> auto_increment,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NUll</span>,</span><br><span class=\"line\">counts <span class=\"built_in\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">details <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> books(<span class=\"keyword\">id</span>,<span class=\"keyword\">name</span>,counts,details)<span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"string\">'JavaSE'</span>,<span class=\"number\">10</span>,<span class=\"string\">'java从入门到精通'</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"string\">'MySQL'</span>,<span class=\"number\">23</span>,<span class=\"string\">'MySQL入门'</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>,<span class=\"string\">'JavaWeb'</span>,<span class=\"number\">40</span>,<span class=\"string\">'使用java编写网站'</span>),</span><br><span class=\"line\">(<span class=\"number\">4</span>,<span class=\"string\">'JavaEE'</span>,<span class=\"number\">40</span>,<span class=\"string\">'JavaWev企业级开发解决方案'</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、项目基本环境搭建\"><a href=\"#二、项目基本环境搭建\" class=\"headerlink\" title=\"二、项目基本环境搭建\"></a>二、项目基本环境搭建</h1><p>1、使用Maven创建项目 SSM。(注意：这里并没有使用模板创建）<br>2、导入项目需要的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--依赖 junit,数据库连接驱动,数据库连接池,servlet,jsp,springmvc,spring-jdbc,mybatis,mybatis-spring--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Junit--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Servlet - JSP --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1-b03<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Spring--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Mybatis--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、Maven资源过滤设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--静态资源导出--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、建立项目包结构和配置框架<br><img src=\"/2020/07/15/ssm/1.png\" alt></p>\n<p>mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>application.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jdbc.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.password</span>=<span class=\"string\">2824199842</span></span><br><span class=\"line\"><span class=\"meta\">jdbc.maxActive</span>=<span class=\"string\">20</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、MyBatis层编写\"><a href=\"#三、MyBatis层编写\" class=\"headerlink\" title=\"三、MyBatis层编写\"></a>三、MyBatis层编写</h1><p>1、创建实体类Book<br>这里使用Lombok（偷懒~），需要导入依赖：（注意：IDEA首次使用时需要安装插件 setting-&gt;plugins-&gt;lombok）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Lombok--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  <span class=\"comment\">// 隐式导入所有get set toString 无参构造等方法</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span> <span class=\"comment\">// 有参构造，此时无参构造没了，需要加上NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span> <span class=\"comment\">// 无参构造</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer counts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String details;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、编写BookMapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(@Param(<span class=\"string\">\"bookId\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> book</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">queryBookById</span><span class=\"params\">(@Param(<span class=\"string\">\"bookId\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、编写BookMapper接口的sql映射文件BookMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.BookMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addBook\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.zyz.bean.Book\"</span>&gt;</span></span><br><span class=\"line\">        insert into books(name,counts,details) values(#&#123;name&#125;,#&#123;counts&#125;,#&#123;details&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteBookById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span>&gt;</span></span><br><span class=\"line\">        delete from books where id=#&#123;bookId&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateBook\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.zyz.bean.Book\"</span>&gt;</span></span><br><span class=\"line\">        update books set name=#&#123;name&#125;,counts=#&#123;counts&#125;,details=#&#123;details&#125;</span><br><span class=\"line\">        where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryBookById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.zyz.bean.Book\"</span>&gt;</span></span><br><span class=\"line\">        select * from books where id=#&#123;bookId&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryAllBook\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.zyz.bean.Book\"</span>&gt;</span></span><br><span class=\"line\">        select * from books</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、在mybtis配置文件中注册sql映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--  打印日志--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"STDOUT_LOGGING\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  注册映射文件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，Dao层编写完成，下一步编写Service层</p>\n<p>5、编写Service层的接口和实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> book</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">queryBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookService</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookMapper bookMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.addBook(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.deleteBookById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.updateBook(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">queryBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.queryBookById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.queryAllBook();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、Spring层整合Dao-Service层\"><a href=\"#四、Spring层整合Dao-Service层\" class=\"headerlink\" title=\"四、Spring层整合Dao,Service层\"></a>四、Spring层整合Dao,Service层</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/tx/spring-tx.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  关联数据库配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明数据源  用于连接数据库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.maxActive&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明mybatis中的SqlSessionFactoryBean 用于创建SqlSessionFactory对象    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- set注入，把数据库连接池赋值给dateSource属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- mybatis主配置文件的位置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明Dao类</span></span><br><span class=\"line\"><span class=\"comment\">         MapperScannerConfigurer:在内部调用getMapper()生成每一个接口的dao代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         创建好的dao对象放在spring容器中，默认名称为 接口名首字母小写--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--注入sqlSessionFactory--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--要扫描的dao包--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.zyz.dao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  声明service的注解@Service所在的包名位置  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.service\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明事务管理器   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  连接的数据库，指定数据源 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myDataSource\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开启事务注解驱动 告诉spring使用注解管理事务，创建代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         在需要使用事务的方法上添加Transactional注解--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，需要在Service实现类上添加@Service注解</p>\n<h1 id=\"五、SpringMVC层的整合\"><a href=\"#五、SpringMVC层的整合\" class=\"headerlink\" title=\"五、SpringMVC层的整合\"></a>五、SpringMVC层的整合</h1><p>1、添加web支持<br>右键项目<br><img src=\"/2020/07/15/ssm/2.png\" alt></p>\n<p>勾选Web Application<br><img src=\"/2020/07/15/ssm/3.png\" alt></p>\n<p>配置web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--DispatchServlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注册监听器  用于创建Spring容器   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:application.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--乱码过滤--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Session 有效时间--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建springmvc.xml并进行配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       https://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注解驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  处理静态资源--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--扫描controller--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.zyz.controller\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明springmvc框架中的视图解析器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--前缀  视图文件的路径--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/view/\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--后缀  视图文件的拓展名--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>到此为止，整个ssm项目的配置文件基本上配置完成了，ssm项目与springboot项目相比，最大的不同就是这种繁杂的配置，但是学习ssm是必不可少的，只有这样才能了解到整个Javaweb工程的核心。<br>下一步是编写controller层以及与前端页面的交互。</p>\n<h1 id=\"六、Controller层与页面之间的交互\"><a href=\"#六、Controller层与页面之间的交互\" class=\"headerlink\" title=\"六、Controller层与页面之间的交互\"></a>六、Controller层与页面之间的交互</h1><p>编写BookController类,添加crud方法</p>\n<h2 id=\"方法一：查询所有图书\"><a href=\"#方法一：查询所有图书\" class=\"headerlink\" title=\"方法一：查询所有图书\"></a>方法一：查询所有图书</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/book\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Controller层就是调用service层的一些方法，完成需要的业务</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有图书</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/allBooks\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">list</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Book&gt; books = bookService.queryAllBook();</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">\"books\"</span>,books);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"allBooks\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写首页：index.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        h3&#123;</span><br><span class=\"line\">            border: 2px blueviolet solid;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            width: 200px;</span><br><span class=\"line\">            height: 50px;</span><br><span class=\"line\">            background-color: aqua;</span><br><span class=\"line\">            padding: 20px;</span><br><span class=\"line\">            border-radius: 10px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">margin</span>: 200<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">auto</span>;<span class=\"comment\">/*外边距*/</span></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">line-height</span>: 50<span class=\"selector-tag\">px</span>;<span class=\"comment\">/*行高与高度一致则居中*/</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a&#123;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">text-decoration</span>: <span class=\"selector-tag\">none</span>;<span class=\"comment\">/*去掉链接的下划线*/</span></span></span><br><span class=\"line\">            color: blue;</span><br><span class=\"line\">            font-size: 30px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/allBooks\"</span>&gt;</span>查询所有图书<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写展示所有图书的页面allBook.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>书籍展示页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row clearfix\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12 column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>书籍列表——显示所有图书<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row clearfix\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12 column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-hover table-striped\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>书籍编号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>书籍名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>书籍数量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>书籍详情<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--遍历从数据库中查到的全部图书--%</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">var</span>=<span class=\"string\">\"book\"</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;books&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.counts&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.details&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动Tomcat测试：<br>由于我使用maven直接创建的项目，没有使用maven中的模板，所以需要手动将项目目录下的包打包至WEB-INF目录下，Tomcat才能正常启动：<br><img src=\"/2020/07/15/ssm/4.png\" alt></p>\n<h2 id=\"方法二：添加图书\"><a href=\"#方法二：添加图书\" class=\"headerlink\" title=\"方法二：添加图书\"></a>方法二：添加图书</h2><p>1、首先在展示所有图书的页面allBooks.jsp添加一个发起请求的链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12 column\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\" pull-right\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--跳到新增图书页面--%</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/toAddBook\"</span>&gt;</span>添加书籍<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在BookConntroller添加一个跳转到添加页面的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 跳转到添加图书页面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/toAddBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toAddBook</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"addBook\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写添加图书的页面addBook.jsp，也就是一个表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>添加图书页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row clearfix\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12 column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>添加图书<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/addBook\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkName\"</span>&gt;</span>书籍名称<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkName\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkCounts\"</span>&gt;</span>书籍数量<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkCounts\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"counts\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkDetails\"</span>&gt;</span>书籍详情<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkDetails\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"details\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后在BookController中编写添加图书的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加图书</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> book</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/addBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(book);</span></span><br><span class=\"line\">    bookService.addBook(book);</span><br><span class=\"line\">    <span class=\"comment\">// 重定向到查询所有图书的Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/book/allBooks\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法三：修改图书\"><a href=\"#方法三：修改图书\" class=\"headerlink\" title=\"方法三：修改图书\"></a>方法三：修改图书</h2><p>在展示所有图书的页面添加发起请求的链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.id&#125;\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在BookController中添加跳转到修改页面的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 跳转到修改页面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/toUpdateBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toUpdateBook</span><span class=\"params\">(<span class=\"keyword\">int</span> id,Model model)</span></span>&#123;</span><br><span class=\"line\">    Book book = bookService.queryBookById(id);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"book\"</span>,book);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"updateBook\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写修改图书的页面updateBook.jsp，又是一个表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>修改图书页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row clearfix\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12 column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>修改图书<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/updateBook\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkName\"</span>&gt;</span>书籍名称<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkName\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;book.name&#125;\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkCounts\"</span>&gt;</span>书籍数量<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkCounts\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"counts\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;book.counts&#125;\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"bkDetails\"</span>&gt;</span>书籍详情<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bkDetails\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"details\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;book.details&#125;\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后在BookController中编写修改图书的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改图书</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> book</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/updateBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(book);</span></span><br><span class=\"line\">    bookService.updateBook(book);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/book/allBooks\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里更新不了的原因是因为updateBook中的book对象的id值为空，而更新图书时需要id作为参数去查找哪一本图书要更新。解决方案是在修改图书页面的表单中添加一组隐藏域，将id值传给updateBook()方法即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;book.id&#125;\"</span>&gt;</span>### 方法四：删除图书</span><br></pre></td></tr></table></figure>\n\n<p>在展示所有图书的页面添加发起请求的链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.id&#125;\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/deleteBook?id=$&#123;book.id&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法四：删除图书\"><a href=\"#方法四：删除图书\" class=\"headerlink\" title=\"方法四：删除图书\"></a>方法四：删除图书</h2><p>在BookController中添加删除图书的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除图书</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/deleteBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteBook</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    bookService.deleteBookById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/book/allBooks\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法五：模糊搜索\"><a href=\"#方法五：模糊搜索\" class=\"headerlink\" title=\"方法五：模糊搜索\"></a>方法五：模糊搜索</h2><p>mapper层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据书名模糊搜索</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(@Param(<span class=\"string\">\"bookName\"</span>)</span> String name)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryBookByName\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.zyz.bean.Book\"</span>&gt;</span></span><br><span class=\"line\">    select * from books where name like #&#123;bookName&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过name模糊查询书籍</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(String name)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">String realName = name.trim();<span class=\"comment\">// 去掉前后端空格</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> bookMapper.queryBookByName(<span class=\"string\">\"%\"</span>+realName+<span class=\"string\">\"%\"</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据名称模糊查询书籍</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bkName</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryBook\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">queryBook</span><span class=\"params\">(String bkName,Model model)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Book&gt; books = bookService.queryBookByName(bkName);</span><br><span class=\"line\">    System.out.println(books);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"books\"</span>,books);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"allBooks\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前端页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/book/queryBook\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-xs-3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bkName\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入要查询的书籍名称\"</span><span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"查询\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、项目总体结构\"><a href=\"#七、项目总体结构\" class=\"headerlink\" title=\"七、项目总体结构\"></a>七、项目总体结构</h1><img src=\"/2020/07/15/ssm/5.png\" style=\"zoom:80%;\">\n\n<h1 id=\"八、最终效果\"><a href=\"#八、最终效果\" class=\"headerlink\" title=\"八、最终效果\"></a>八、最终效果</h1><p><img src=\"/2020/07/15/ssm/6.png\" alt></p>\n<h1 id=\"九、总结\"><a href=\"#九、总结\" class=\"headerlink\" title=\"九、总结\"></a>九、总结</h1><p>1、ssm整合的总体思路：使用spring容器去管理Dao,Service对象，springmvc容器管理Controller对象，springmvc容器是spring的子容器，springmvc容器中的controller对象能访问到spring容器中的service对象。</p>\n<p>2、对css的一些属性的运用还不是很熟练</p>\n","categories":["Java项目"],"tags":["MyBatis","Spring","SpringMVC"]},{"title":"工作笔记","url":"/2020/11/28/note/","content":"<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><p>【强制】主键索引名为pk_字段名；</p>\n<p>​    唯一索引名为uk_字段名；</p>\n<p>​    普通索引名则为idx_字段名。</p>\n<p>​    说明：pk_ 即primary key；uk_ 即unique key；idx_ 即index的简称。<a id=\"more\"></a></p>\n</li>\n<li><p>【强制】表必备三字段：id, gmt_create, gmt_modified。</p>\n<p>说明：其中id必为主键，类型为unsigned bigint、单表时自增、步长为1。gmt_create, gmt_modified的类型均为datetime类型，前者现在时表示主动创建，后者过去分词表示被动更新。gmt表示格林威治时间即国际时间。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># DEFAULT CURRENT_TIMESTAMP  表示当插入数据的时候，该字段默认值为当前时间</span></span><br><span class=\"line\"><span class=\"comment\"># ON UPDATE CURRENT_TIMESTAM  表示每次更新这条数据的时候，该字段都会更新成当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test`</span> (</span><br><span class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键id'</span>,</span><br><span class=\"line\"><span class=\"string\">`create_time`</span> <span class=\"built_in\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\"><span class=\"string\">`update_time`</span> <span class=\"built_in\">timestamp</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>【强制】POJO类的布尔属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段与属性之间的映射。说明：参见定义POJO类以及数据库字段定义规定，在<code>&lt;resultMap&gt;</code>中增加映射，是必须的。在MyBatis Generator生成的代码中，需要进行对应的修改。</p>\n</li>\n<li><p>自增ID与UUID</p>\n<ul>\n<li><p>自增ID数据存储空间小，性能好，但是安全性低，很难处理分布式存储的数据表，处理大量数据可能会超过自增长的取值范围</p>\n</li>\n<li><p>uuid_short() 生成18位正随机数 ===&gt;bigint(20)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addLocationArea\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">parameterType</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">     INSERT INTO location( ... )</span><br><span class=\"line\">     VALUES</span><br><span class=\"line\">     (SHORT_UUID(), ...)</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>随机正Long值uuid ===&gt;bigint(20)</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Long <span class=\"title\">getUUID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成19位正随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> UUID.randomUUID().getLeastSignificantBits() * -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL字段尽量避免NULL，应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，而且对表索引时不会存储NULL值的，所以如果索引的字段可以为NULL，索引的效率会下降很多。因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出来的的记录中col列可以为''(空字符串)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"string\">`table`</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">col</span> <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"comment\"># 查询col列不为''的所有记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"string\">`table`</span> <span class=\"keyword\">WHERE</span> col1 &lt;&gt; <span class=\"string\">''</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crud\"><a href=\"#crud\" class=\"headerlink\" title=\"crud\"></a>crud</h3></li>\n<li><p>模糊搜索： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> product <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> <span class=\"keyword\">like</span> <span class=\"keyword\">concat</span>(<span class=\"string\">'%'</span>,<span class=\"comment\">#&#123;name,jdbcType=varchar&#125;,'%')</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>根据不确定的字段条件进行查询：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.zyz.UserPO\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"BIGINT\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userItemPOList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.zyz.UserItemPO\"</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"comment\">&lt;!--property对应UserPO中的明细对象集合  ofType对应集合对象的实体类--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"item_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"BIGINT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"school_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"school_address\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"address\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--column属性为联表查询中主表以外的表的字段别名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Base_Column_List\"</span> &gt;</span></span><br><span class=\"line\">\tid,name,password</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"ResultMap\"</span>&gt;</span></span><br><span class=\"line\">        select</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Base_Column_List\"</span> /&gt;</span></span><br><span class=\"line\">        from t_user</span><br><span class=\"line\">        where 1=1</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.id != null\"</span> &gt;</span></span><br><span class=\"line\">            and id = #&#123;PO.id,jdbcType=BIGINT&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.name != null\"</span>&gt;</span></span><br><span class=\"line\">            and name = #&#123;PO.name,jdbcType=VARCHAR&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--批量条件查询  根据商品明细列表中的所有id查询对应的明细详情--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"ResultMap\"</span>&gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"chargeofforderitemdetailColumns\"</span> /&gt;</span></span><br><span class=\"line\">        FROM chargeofforderitemdetail</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"chargeOfforderItemIdList != null and chargeOfforderItemIdList.size() &gt; 0\"</span>&gt;</span></span><br><span class=\"line\">                ChargeOfforderItem_Id in</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"chargeOfforderItemIdList\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span> <span class=\"attr\">open</span>=<span class=\"string\">\"(\"</span> <span class=\"attr\">close</span>=<span class=\"string\">\")\"</span>&gt;</span></span><br><span class=\"line\">                    #&#123;item,jdbcType=VARCHAR&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>插入不确定的属性字段</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insert\"</span>&gt;</span></span><br><span class=\"line\">    insert into table</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"(\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\")\"</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">            id,</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.name != null\"</span>&gt;</span></span><br><span class=\"line\">            name,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        create_Time,</span><br><span class=\"line\">        lastUpdate_Time</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"values (\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\")\"</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">         UUID_SHORT(),</span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.name != null\"</span>&gt;</span></span><br><span class=\"line\">             #&#123;PO.name,jdbcType=VARCHAR&#125;,</span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">         now(),</span><br><span class=\"line\">         now()</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>批量插入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertbatch\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.util.List\"</span> &gt;</span></span><br><span class=\"line\">    insert into user(Id,name)values</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">        (</span><br><span class=\"line\">        UUID_SHORT(),</span><br><span class=\"line\">        #&#123;item.name,jdbcType=VARCHAR&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据不确定的字段条件进行更新</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span>&gt;</span></span><br><span class=\"line\">    update table</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.state != null\"</span>&gt;</span></span><br><span class=\"line\">            name = #&#123;PO.name,jdbcType=VARCHAR&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"PO.password != null\"</span>&gt;</span></span><br><span class=\"line\">            password = #&#123;PO.password,jdbcType=VARCHAR&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    where id = #&#123;PO.id,jdbc=BIGINT&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>时间段的处理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"beginTime != null\"</span>&gt;</span></span><br><span class=\"line\">      and &lt;![CDATA[ BusinessTime &gt;=  #&#123;beginTime,jdbcType=TIMESTAMP&#125; ]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"endTime != null\"</span>&gt;</span></span><br><span class=\"line\">      and &lt;![CDATA[ BusinessTime &lt;=  #&#123;endTime,jdbcType=TIMESTAMP&#125; ]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"Spring缓存注解\"><a href=\"#Spring缓存注解\" class=\"headerlink\" title=\"Spring缓存注解\"></a>Spring缓存注解</h3><ul>\n<li><p>启动类添加<code>@EnableCaching</code>开启缓存</p>\n</li>\n<li><p>Spring Cache是作用在方法上的，当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次调用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。</p>\n</li>\n<li><p><code>@Cacheable(key=&quot;&quot; , value=&quot;&quot;)</code> 方法调用前查询缓存，不存在就会查询数据库，查询完成后放入缓存</p>\n</li>\n<li><p><code>@CacheEvict(key=&quot;&quot; , value=&quot;&quot;)</code> 调用此注解下的方法时会清除缓存</p>\n</li>\n<li><p><code>@CachePut(key=&quot;&quot; , value=&quot;&quot;)</code>方法调用完成后放入缓存</p>\n<p> key属性是用来指定Spring缓存方法的<strong>返回结果时对应的key</strong>，value属性用来指定<strong>缓存名称</strong>。</p>\n</li>\n<li><p>使用场景：业务层bl中的关于用户的基础增删改查功能。</p>\n</li>\n<li><p><strong>缺点：因为不能指定数据有效时间，以及读取改变的数据不够灵活。一般使用RedisTemple或者自定义注解的方式。</strong></p>\n</li>\n</ul>\n<h3 id=\"Transactional\"><a href=\"#Transactional\" class=\"headerlink\" title=\"@Transactional\"></a>@Transactional</h3><ul>\n<li>一般在bl层的方法中执行多条sql时使用<ul>\n<li><code>@Transactional(rollbackFor = { Exception.class })</code></li>\n<li>默认发生<code>Error</code>或<code>RuntimeException</code>时才会回滚，发生非运行时异常时不会回滚，需要使用<code>rollbackFor</code>属性指定回滚的非运行时异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Controller中的Model参数\"><a href=\"#Controller中的Model参数\" class=\"headerlink\" title=\"Controller中的Model参数\"></a>Controller中的Model参数</h3><ul>\n<li>只有在前端请求有页面返回的时候用到，保存了想要展示在页面上的数据。</li>\n<li>例如数据的导出时，使用到了Model参数。</li>\n</ul>\n<h3 id=\"自定义注解中的元注解\"><a href=\"#自定义注解中的元注解\" class=\"headerlink\" title=\"自定义注解中的元注解\"></a>自定义注解中的元注解</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义注解使用的时机 METHOD-&gt;适用于方法  TYPE-&gt;适用于 class,interface,enum</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 在运行时去动态获取注解信息</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局异常处理\"><a href=\"#全局异常处理\" class=\"headerlink\" title=\"全局异常处理\"></a>全局异常处理</h3><p>对类添加<code>@ControllerAdvice</code>注解，在处理异常的方法前添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span>(&#123;Exception<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ResponseBody</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CommandLineRunner接口\"><a href=\"#CommandLineRunner接口\" class=\"headerlink\" title=\"CommandLineRunner接口\"></a>CommandLineRunner接口</h3><p>在应用初始化后，去执行一段代码块逻辑，这段初始化代码在整个应用生命周期内只会执行一次。</p>\n<p>用于预先加载数据，实现<code>CommandLineRunner</code>接口，需要加载的数据的逻辑写在<code>run()</code>方法中。</p>\n<p>可使用<code>@Order(1)</code>，<code>@Order(2)</code>……注解指定加载顺序。</p>\n<h3 id=\"对象的有状态与无状态\"><a href=\"#对象的有状态与无状态\" class=\"headerlink\" title=\"对象的有状态与无状态\"></a>对象的有状态与无状态</h3><ul>\n<li><p>是否存储数据</p>\n</li>\n<li><p>无状态的Bean适合用单例模式，这样可以共享实例，提高性能。有状态的Bean，多线程环境下不安全，那么适合用Prototype原型模式。Prototype: 每次对bean的请求都会创建一个新的bean实例。</p>\n</li>\n</ul>\n<h3 id=\"Controller中的返回数据\"><a href=\"#Controller中的返回数据\" class=\"headerlink\" title=\"Controller中的返回数据\"></a>Controller中的返回数据</h3><ul>\n<li><code>ResponseAdvisor</code>对返回数据进行了拦截，然后统一处理，所有的controller只需要返回业务相关数据即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span> <span class=\"comment\">// 对controller的全局配置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseAdvisor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResponseBodyAdvice</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">beforeBodyWrite</span><span class=\"params\">(Object body, MethodParameter returnType, MediaType selectedContentType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  ServerHttpResponse response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (body <span class=\"keyword\">instanceof</span> Result) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 处理数据，将业务数据封装成自定义的结果集对象Result </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> RetResponse.makeOKRsp(body);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>RetResponse</code>对controller返回的业务数据封装成自定义的 Result对象返回给前端</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 响应结果封装 对controller返回的参数封装成自定义的 Result对象返回给前端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetResponse</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeOKRsp</span><span class=\"params\">(T data, String msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;().setCode(ResultCode.SUCCESS) <span class=\"comment\">// 200</span></span><br><span class=\"line\">\t\t\t\t.setResult(WebConstants.RESULT_SUCCESS)<span class=\"comment\">// success</span></span><br><span class=\"line\">\t\t\t\t.setData(data).setMsg(msg);<span class=\"comment\">// 结果信息</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeOKRsp</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()</span><br><span class=\"line\">  .setCode(ResultCode.SUCCESS).setResult(WebConstants.RESULT_SUCCESS).setData(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeOKRsp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()</span><br><span class=\"line\">            .setCode(ResultCode.SUCCESS).setResult(WebConstants.RESULT_SUCCESS);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeErrRsp</span><span class=\"params\">(T data, String msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()          \t\t\t                                                 .setCode(ResultCode.INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">            .setResult(WebConstants.RESULT_FAILED).setData(data).setMsg(msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeFailRsp</span><span class=\"params\">(T data, String msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()                                              \t\t\t             .setCode(ResultCode.FAIL)</span><br><span class=\"line\">            .setResult(WebConstants.RESULT_FAILED).setData(data).setMsg(msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeRsp</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;().setCode(Integer.valueOf(code));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeRsp</span><span class=\"params\">(String code, String msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;().setCode(Integer.valueOf(code)).setMsg(msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeExceptionRsp</span><span class=\"params\">(String code, String msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()</span><br><span class=\"line\">            .setCode(Integer.valueOf(code))</span><br><span class=\"line\">            .setMsg(msg).setResult(WebConstants.RESULT_FAILED);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Result&lt;T&gt; <span class=\"title\">makeRsp</span><span class=\"params\">(Integer code, String msg, T data, String result)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result&lt;T&gt;()</span><br><span class=\"line\">            .setCode(code).setMsg(msg).setData(data).setResult(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Result</code>自定义结果集封装对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 响应码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"comment\">// 状态信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\">    <span class=\"comment\">// 返回常量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Result</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 异常构造方法</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> exception</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Result</span><span class=\"params\">(Exception exception)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = WebConstants.RESULT_FAILED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = exception.getMessage();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = (T) exception.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Result</span><span class=\"params\">(String message, Exception exception)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(exception);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Result</span><span class=\"params\">(String message, Exception exception, Boolean success)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(exception);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = ResultCode.FAIL.code();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = message;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = WebConstants.RESULT_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Result</span><span class=\"params\">(String message, Exception exception, Integer code)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(exception);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">setCode</span><span class=\"params\">(ResultCode resultCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = resultCode.code();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">setCode</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">setResult</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>响应码枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ResultCode &#123;</span><br><span class=\"line\">    SUCCESS(<span class=\"number\">200</span>),<span class=\"comment\">//成功</span></span><br><span class=\"line\">    FAIL(<span class=\"number\">400</span>),<span class=\"comment\">//失败</span></span><br><span class=\"line\">    UNAUTHORIZED(<span class=\"number\">401</span>),<span class=\"comment\">//未认证（签名错误）</span></span><br><span class=\"line\">    NOT_FOUND(<span class=\"number\">404</span>),<span class=\"comment\">//接口不存在</span></span><br><span class=\"line\">    INTERNAL_SERVER_ERROR(<span class=\"number\">500</span>);<span class=\"comment\">//服务器内部错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultCode(<span class=\"keyword\">int</span> code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回常量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConstants</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 返还成功</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RESULT_SUCCESS = <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 返还异常-业务异常</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RESULT_FAILED = <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 返还失败-系统异常</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RESULT_ERROR = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// token</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_TOKEN = <span class=\"string\">\"Atoken\"</span>;</span><br><span class=\"line\">   <span class=\"comment\">// Token验证失败,用户验证异常</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer AUTH_VALIDATE_FAILED = -<span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SERVICE_ERROR_TIPS = <span class=\"string\">\"服务内部异常，请稍后再试\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>时间格式化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonFormat</span>(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> Date createTime;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在数据库中不能为空的字段在ServiceImpl中使用 <code>AssertUtils.notNull(字段,&quot;参数不能为空&quot;)</code>进行断言，参数为空抛出异常信息。</p>\n</li>\n<li><p>调用过程：</p>\n<p>controller (dto)-&gt;service接口(dto)-&gt;serviceImpl实现类(dto)：使用@Service注解-&gt;bl(dto)实现类：使用@Service注解-&gt;mapper(po)接口（对应mapper.xml文件）-&gt;mysql</p>\n</li>\n<li><p>当前时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Timestamp timestamp = <span class=\"keyword\">new</span> Timestamp(System.currentTimeMillis());</span><br><span class=\"line\">System.out.println(timestamp);<span class=\"comment\">// 2020-12-10 11:03:11.976</span></span><br><span class=\"line\">SimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">String timestampDF = df.format(timestamp);</span><br><span class=\"line\">System.out.println(timestampDF);<span class=\"comment\">// 2020-12-11 11:19:51</span></span><br><span class=\"line\">Date parseDate = DateUtils.parseDate(timestampDF, <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">System.out.println(parseDate);<span class=\"comment\">// Fri Dec 11 11:20:23 CST 2020</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><p>分页结果集：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageList</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6177180431483012580L</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回的数据集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; dataList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回的分页对象信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pager pager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">getDataList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataList</span><span class=\"params\">(List&lt;T&gt; dataList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList = dataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pager <span class=\"title\">getPager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPager</span><span class=\"params\">(Pager pager)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pager = pager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pager</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagerCondition</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 总记录数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer recordCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 总页数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer totalPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pager</span><span class=\"params\">(Integer currentPage, Integer pageSize, Integer recordCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(currentPage, pageSize);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.recordCount = recordCount;</span><br><span class=\"line\">        Integer totalPageSize = recordCount / pageSize;</span><br><span class=\"line\">        Integer remailder = recordCount % pageSize;</span><br><span class=\"line\">        <span class=\"comment\">// 如果总记录数与每页显示条数的余数大于0，总页数加1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remailder &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            totalPageSize = totalPageSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        totalPage = totalPageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pager</span><span class=\"params\">(PagerCondition pageCondition, Integer recordCount)</span> </span>&#123;</span><br><span class=\"line\">        setCurrentPage(pageCondition.getCurrentPage());</span><br><span class=\"line\">        setPageSize(pageCondition.getPageSize());</span><br><span class=\"line\">        setRecordCount(recordCount);</span><br><span class=\"line\">        setTotalPage((recordCount + getPageSize() - <span class=\"number\">1</span>) / getPageSize());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getRecordCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recordCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRecordCount</span><span class=\"params\">(Integer recordCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.recordCount = recordCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getTotalPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalPage</span><span class=\"params\">(Integer totalPage)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPage = totalPage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分页结果集中的分页参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PagerCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Fields</span> 当前页</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer currentPage = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Fields</span> 每页的数量</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> Integer pageSize = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PagerCondition</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PagerCondition</span><span class=\"params\">(Integer currentPage)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentPage != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.currentPage = currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageSize = <span class=\"number\">20</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PagerCondition</span><span class=\"params\">(Integer currentPage, Integer pageSize)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentPage != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.currentPage = currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCurrentPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> currentPage;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getLimitnum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getPageSize();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getOffset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.getCurrentPage() - <span class=\"number\">1</span>) * <span class=\"keyword\">this</span>.getPageSize();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPageSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pageSize == <span class=\"keyword\">null</span> || pageSize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> pageSize;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPreviousPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentPage &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.currentPage - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrentPage</span><span class=\"params\">(Integer currentPage)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentPage = currentPage;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageSize</span><span class=\"params\">(Integer pageSize)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">startRow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> startRow = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentPage != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         startRow = (currentPage - <span class=\"number\">1</span>) * pageSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> startRow;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据库查询返回分页结果集：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的Page是PageHelper内部定义的Page</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageResult</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Page</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换为PageList</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 转换结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PageList&lt;E&gt; <span class=\"title\">toPageList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> PageList&lt;E&gt; pageList = <span class=\"keyword\">new</span> PageList&lt;&gt;();</span><br><span class=\"line\">        pageList.setPager(getPager());</span><br><span class=\"line\">        pageList.setDataList(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pager <span class=\"title\">getPager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Pager pager = <span class=\"keyword\">new</span> Pager();</span><br><span class=\"line\">        pager.setPageSize(getPageSize());</span><br><span class=\"line\">        pager.setCurrentPage(getPageNum());</span><br><span class=\"line\">        pager.setRecordCount(Math.toIntExact(getTotal()));</span><br><span class=\"line\">        pager.setTotalPage(getPages());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并结合PageHelper实现分页，PageHelper分页的实现原理就是，通过PageHelper内部的拦截器在我们执行SQL语句之前动态的将SQL语句拼接分页的语句。</p>\n<p>配置好PageHelper后，在每次查询前设置Page参数即可完成分页：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PageHelper.startPage(queryDTO.getCurrentPage(), queryDTO.getPageSize());</span><br></pre></td></tr></table></figure>\n\n<p>通过实现Mybatis拦截器实现分页参数的传递：</p>\n<p>添加配置文件，将自定义的拦截器和pageHelper的拦截器配置到mybatis.xml中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logImpl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"STDOUT_LOGGING\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.zyz.config.PageResultEnhancer\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Intercepts</span>(<span class=\"meta\">@Signature</span>(type = Executor<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">method</span> </span>= <span class=\"string\">\"query\"</span>, args = &#123;MappedStatement<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Object</span>.<span class=\"title\">class</span>, <span class=\"title\">RowBounds</span>.<span class=\"title\">class</span>, <span class=\"title\">ResultHandler</span>.<span class=\"title\">class</span>&#125;))</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">PageResultEnhancer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object result = invocation.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Page) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Page page = (Page) result;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> PageResult pageResult = <span class=\"keyword\">new</span> PageResult();</span><br><span class=\"line\">            pageResult.addAll(page);</span><br><span class=\"line\">            pageResult.setPageNum(page.getPageNum());</span><br><span class=\"line\">            pageResult.setPageSize(page.getPageSize());</span><br><span class=\"line\">            pageResult.setStartRow(page.getStartRow());</span><br><span class=\"line\">            pageResult.setEndRow(page.getEndRow());</span><br><span class=\"line\">            pageResult.setTotal(page.getTotal());</span><br><span class=\"line\">            pageResult.setPages(page.getPages());</span><br><span class=\"line\">            pageResult.setCount(page.isCount());</span><br><span class=\"line\">            pageResult.setOrderBy(page.getOrderBy());</span><br><span class=\"line\">            pageResult.setOrderByOnly(page.isOrderByOnly());</span><br><span class=\"line\">            pageResult.setReasonable(page.getReasonable());</span><br><span class=\"line\">            pageResult.setPageSizeZero(page.getPageSizeZero());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pageResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 只拦截Executor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target <span class=\"keyword\">instanceof</span> Executor) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现分页切面完成PageHelper分页参数的设置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@Pointcut(\"execution(* com.shengsigu.service..*.*(..))\")</span></span><br><span class=\"line\">     <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.shengsigu.service..*.pageList*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pagePointcut</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pagePointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pageBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Method method = ((MethodSignature)joinPoint.getSignature()).getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取到当前方法的方法签名, 判断返回类型是否是 PageList, 如果是则执行分页逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isPageList = method.getReturnType().equals(PageList<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPageList) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取参数 currentPage, pageSize，并设置分页</span></span><br><span class=\"line\">            Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">            PageCondition pageCondition = (PageCondition) args[<span class=\"number\">0</span>];</span><br><span class=\"line\">            PageHelper.startPage(pageCondition.getPageNum(),pageCondition.getPageSize(),<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><ul>\n<li>不要想当然，凭主观判断别人写的方法，调用别人的方法的时候点进去看一看是否满足自己的需求。</li>\n<li>仔细检查！！！ 做事情要有理有据，不要马虎！！！</li>\n<li>不要过分地参照原来的代码，它有可能也不规范！</li>\n<li>字段的意义？内部业务逻辑？多问写该代码的同事！</li>\n<li>对象调用方法前，记得考虑一下是否为空！</li>\n<li><code>if-else</code>语句中有重复的语句，提取出来放置<code>if-else</code>之外！</li>\n<li><code>if</code>里面有<code>if</code>，考虑合并判断条件？</li>\n<li>熟悉一块业务功能不能只看代码，应该还要去熟悉流程，数据库。</li>\n<li>永远不要相信前端传过来的参数是可靠，处于安全考虑，后端必须进行必要的参数校验。</li>\n<li>对象只有在需要时才创建，不要提前创建，避免浪费内存。</li>\n<li>最好使用空对象代替<code>null</code>返回给前端。</li>\n<li>删除、修改单个属性为一个常量时，前端传递一个<em>id</em>就可以了，不用传递整个实体对象。</li>\n<li>对象调用方法时，注意判空！</li>\n<li>方法（动词+名词）和变量（boolean类型 ：is+形容词）做到见名知意。</li>\n<li><em>mapper</em>文件里面的<em>sql</em>尽量不要写死，使用接口传递常量值。</li>\n<li>一个方法中不同的功能模块用空行隔开。</li>\n</ul>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ul>\n<li><p>push代码时确保push到的远程分支是自己新建的一个分支，千万不要push到主分支中！！！有的项目可能没有设置权限，提交的代码就直接合并到主分支中参与构建了，最终导致构建失败！</p>\n</li>\n<li><p>push大量改动时，将改动拆分push，push前检查改动，以最小改动为基准，能添加尽量不要删除，一般情况不要合并其他环境的版本到当前环境的版本，dubbo cache不要勾选！</p>\n</li>\n<li><p>确保本地编译成功再提交，pom文件的依赖不能随便加，但是要导的包一定记得导，导不进来的二方接口是别人的代码还没合，包还没构建的原因。</p>\n</li>\n<li><p>提交前merge同一环境下的目标分支到自己本地的分支，不要与fetch更新自己远程的分支到本地分支弄混淆。</p>\n</li>\n<li><p>Git Log查看git操作的日志。</p>\n</li>\n<li><p>Undo Commit 撤销commit。</p>\n</li>\n<li><p>git pull强制覆盖：</p>\n<p><code>git fetch origin master</code>  先把远程仓库最新状态拉到本地（以master为例）；</p>\n<p><code>git reset --hard origin/master</code> 将本地仓库重置到远程仓库最新状态（本地将被覆盖）。</p>\n<p>或者如果你在其他分支上：<code>git reset --hard origin/&lt;branch_name&gt;</code></p>\n<p><code>git pull</code></p>\n</li>\n</ul>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestApplicationTests</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testListToMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      List&lt;User&gt; users = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"111\"</span>, <span class=\"string\">\"zhangsan1\"</span>));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"222\"</span>, <span class=\"string\">\"zhangsan2\"</span>));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"111\"</span>, <span class=\"string\">\"zhangsan3\"</span>));</span><br><span class=\"line\">      <span class=\"comment\">// 除去key重复的键值对，保留第一次出现的 返回指定类型的 map</span></span><br><span class=\"line\">      Map&lt;String, User&gt; usersMap = users.stream()</span><br><span class=\"line\">            .collect(Collectors.toMap(User::getId, Function.identity(), (a, b) -&gt; a, ConcurrentHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">      System.out.println(usersMap.getClass());</span><br><span class=\"line\">      System.out.println(usersMap);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testOptional</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      List&lt;User&gt; users = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"111\"</span>, <span class=\"string\">\"zhangsan1\"</span>));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"222\"</span>, <span class=\"string\">\"zhangsan2\"</span>));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"333\"</span>, <span class=\"string\">\"zhangsan3\"</span>));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"comment\">// findAny()操作，返回的元素是不确定的，对于同一个列表多次调用findAny()有可能会返回不同的值。</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用findAny()是为了更高效的性能。如果是数据较少，串行地情况下，一般会返回第一个结果，如果是并行的情况，那就不能确保是第一个</span></span><br><span class=\"line\">      <span class=\"comment\">// 用来判断集合中是否有满足条件的元素,存在返回true，并且允许集合元素为null的情况</span></span><br><span class=\"line\">      Optional&lt;User&gt; usersIsNull = users.stream().filter(e -&gt; e != <span class=\"keyword\">null</span> &amp;&amp; e.getName().equals(<span class=\"string\">\"zhangsan\"</span>)).findAny();</span><br><span class=\"line\">      System.out.println(usersIsNull.isPresent());<span class=\"comment\">// false</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStringUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(StringUtils.isNumeric(<span class=\"string\">\"123\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"--------isEmpty-------\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// isEmpty判断空字符串时返回 false</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"null-&gt;\"</span> + StringUtils.isEmpty(<span class=\"keyword\">null</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\\"\\\"-&gt;\"</span> + StringUtils.isEmpty(<span class=\"string\">\"\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\\" \\\"-&gt;\"</span> + StringUtils.isEmpty(<span class=\"string\">\" \"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"--------isBlank-------\"</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"null-&gt;\"</span> + StringUtils.isBlank(<span class=\"keyword\">null</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\\"\\\"-&gt;\"</span> + StringUtils.isBlank(<span class=\"string\">\"\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\\" \\\"-&gt;\"</span> + StringUtils.isBlank(<span class=\"string\">\" \"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAssert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//Assert.notNull(null,\"判断null\");// 抛出异常</span></span><br><span class=\"line\">      <span class=\"comment\">//Assert.notNull(\"\",\"判断\\\"\\\"\");// 不会抛出异常</span></span><br><span class=\"line\">      <span class=\"comment\">//Assert.notNull(\" \",\"判断null\\\" \\\"\");// 不会抛出异常</span></span><br><span class=\"line\">      <span class=\"comment\">//Assert.notNull(new ArrayList&lt;&gt;());// 不会抛出异常</span></span><br><span class=\"line\">      User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Integer num = Integer.valueOf(<span class=\"string\">\"\"</span>);<span class=\"comment\">// 抛出 java.lang.NumberFormatException</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUUID</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 生成19位随机数 直接使用 在多线程环境下可能重复 写成工具类方法并用synchronized关键字修饰</span></span><br><span class=\"line\">      Long shortUuid = UUID.randomUUID().getLeastSignificantBits() * -<span class=\"number\">1</span>;</span><br><span class=\"line\">      System.out.println(shortUuid);</span><br><span class=\"line\">   <span class=\"comment\">// 生成uuid去掉-，可与redis的key拼接 生成唯一的键   </span></span><br><span class=\"line\">      String uuid = UUID.randomUUID().toString().replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      System.out.println(uuid);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      List&lt;User&gt; users = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      ArrayList&lt;String&gt; study = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      ArrayList&lt;String&gt; sports = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">      study.add(<span class=\"string\">\"chinese\"</span>);</span><br><span class=\"line\">      study.add(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\">      study.add(<span class=\"string\">\"english\"</span>);</span><br><span class=\"line\">      sports.add(<span class=\"string\">\"dance\"</span>);</span><br><span class=\"line\">      sports.add(<span class=\"string\">\"basketball\"</span>);</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"111\"</span>, <span class=\"string\">\"zhangsan1\"</span>,<span class=\"keyword\">new</span> Hobby(study,sports)));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"222\"</span>, <span class=\"string\">\"zhangsan2\"</span>,<span class=\"keyword\">new</span> Hobby(study,sports)));</span><br><span class=\"line\">      users.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"333\"</span>, <span class=\"string\">\"zhangsan3\"</span>,<span class=\"keyword\">new</span> Hobby(study,sports)));</span><br><span class=\"line\"></span><br><span class=\"line\">      List&lt;String&gt; ids = users.stream().map(User::getId).collect(Collectors.toList());</span><br><span class=\"line\">      System.out.println(ids);<span class=\"comment\">// [111, 222, 333]</span></span><br><span class=\"line\">      <span class=\"comment\">// flatmap 将对象中的属性转换为流，方便进行二次处理</span></span><br><span class=\"line\">      List&lt;String&gt; usersports = users.stream().flatMap(user -&gt; user.getHobby().getSports().stream()).collect(Collectors.toList());</span><br><span class=\"line\">      System.out.println(usersports);<span class=\"comment\">// [dance, basketball, dance, basketball, dance, basketball]</span></span><br><span class=\"line\">      <span class=\"comment\">// groupingBy分组 封装成为 Map&lt;指定属性,List&lt;User&gt;&gt; 指定属性相同的 User在一个List里面</span></span><br><span class=\"line\">      Map&lt;String, List&lt;User&gt;&gt; mapById = users.stream().collect(Collectors.groupingBy(User::getId));</span><br><span class=\"line\">      System.out.println(mapById);</span><br><span class=\"line\">      <span class=\"comment\">// toMap 封装成 Map&lt;指定属性,User&gt; 指定属性重复时抛 java.lang.IllegalStateException</span></span><br><span class=\"line\">      Map&lt;String, User&gt; mapById2 = users.stream().collect(Collectors.toMap(User::getId, Function.identity()));</span><br><span class=\"line\">      System.out.println(mapById2);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSingletonList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Arrays.asList(strArray)返回的是一个可变的集合，</span></span><br><span class=\"line\"><span class=\"comment\">       * 但是返回值是其内部类，不具有add方法，可以通过set方法进行增加值，默认长度是10</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * Collections.singletonList()返回的是不可变的集合，但是这个长度的集合只有1，可以减少内存空间。</span></span><br><span class=\"line\"><span class=\"comment\">       * 但是返回的值依然是Collections的内部实现类，同样没有add的方法，调用add，set方法会报错</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"111\"</span>, <span class=\"string\">\"zhangsan1\"</span>);</span><br><span class=\"line\">      List&lt;User&gt; oneToList1 = Collections.singletonList(user);</span><br><span class=\"line\">      <span class=\"comment\">// oneToList1.add(new User(\"222\",\"zyz\"));// java.lang.UnsupportedOperationException</span></span><br><span class=\"line\">      System.out.println(oneToList1);</span><br><span class=\"line\">      List&lt;User&gt; oneToList2 = Stream.of(user).collect(Collectors.toList());</span><br><span class=\"line\">      oneToList2.add(<span class=\"keyword\">new</span> User(<span class=\"string\">\"222\"</span>,<span class=\"string\">\"zyz\"</span>));</span><br><span class=\"line\">      System.out.println(oneToList2);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">      Timestamp timestamp = <span class=\"keyword\">new</span> Timestamp(System.currentTimeMillis());</span><br><span class=\"line\">      System.out.println(timestamp);<span class=\"comment\">// 2020-12-10 11:03:11.976</span></span><br><span class=\"line\">      SimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">      String timestampDF = df.format(timestamp);</span><br><span class=\"line\">      System.out.println(timestampDF);<span class=\"comment\">// 2020-12-11 11:19:51</span></span><br><span class=\"line\">      Date parseDate = DateUtils.parseDate(timestampDF, <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">      System.out.println(parseDate);<span class=\"comment\">// Fri Dec 11 11:20:23 CST 2020</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNumeric</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(StringUtils.isNumeric(<span class=\"string\">\"123\"</span>));<span class=\"comment\">// true</span></span><br><span class=\"line\">      System.out.println(StringUtils.isNumeric(<span class=\"string\">\"12.3\"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\">      System.out.println(StringUtils.isNumeric(<span class=\"string\">\"\"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\">      System.out.println(StringUtils.isNumeric(<span class=\"string\">\" \"</span>));<span class=\"comment\">// false</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"业务\"><a href=\"#业务\" class=\"headerlink\" title=\"业务\"></a>业务</h2><ul>\n<li><p>在实际开发中，添加和更新功能可以写在一起，添加时前端不传id，更新时前端传id。</p>\n</li>\n<li><p>对前端传过来的json通过<code>@RequestBody</code>转换为JavaBean后进行非空判断</p>\n<ul>\n<li>经过<code>@RequestyBody</code>封装的javaBean一定不为null，只需进行非空判断，或者对其属性进行非空判断</li>\n<li>一些必须传的数据可使用断言判断，截断流程</li>\n<li>if判断，在保证不阻断业务流程下使用</li>\n<li>集合元素进行forEach遍历之前，必须进行非空判断<code>CollectionUtils.isEmpty(collection)</code></li>\n</ul>\n</li>\n<li><p>修改密码的逻辑</p>\n<ul>\n<li>在根据原密码修改密码，验证原密码，验证密码时需要对原密码进行加密再与数据库中的密码进行比较：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入参数：旧密码oldPassword、新密码newPassword、用户id userId </span></span><br><span class=\"line\">String digestOldPassword = DigestUtils.md5DigestAsHex(oldPassword.getBytes());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!digestOldPassword.equals(user.getPassword().trim().toLowerCase())) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"输入的原密码错误！\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 密码强度校验......</span></span><br><span class=\"line\"><span class=\"comment\">// 对新密码进行加密</span></span><br><span class=\"line\">String digestNewPassword = DigestUtils.md5DigestAsHex(newPassword.trim().getBytes());</span><br><span class=\"line\"><span class=\"comment\">// 更新密码到数据库</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>枚举类的使用</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ChargeOffStateEnum &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 审核中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAIT_AUTID((<span class=\"keyword\">byte</span>) <span class=\"number\">1</span>, <span class=\"string\">\"审核中\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 已审核</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CANCEL((<span class=\"keyword\">byte</span>) <span class=\"number\">2</span>, <span class=\"string\">\"已取消\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 已取消</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    COMPLETE((<span class=\"keyword\">byte</span>) <span class=\"number\">3</span>, <span class=\"string\">\"已完成\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ChargeOffStateEnum(Byte value, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Byte value;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Byte <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChargeOffStateEnum <span class=\"title\">getChargeOffStateEnum</span><span class=\"params\">(Byte value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ChargeOffStateEnum[] stateEnums = ChargeOffStateEnum.values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ChargeOffStateEnum stateEnum : stateEnums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value.equals(stateEnum.getValue())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> stateEnum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bug处理\"><a href=\"#bug处理\" class=\"headerlink\" title=\"bug处理\"></a>bug处理</h2><p>定位bug：<br><img src=\"/2020/11/28/note/2.png\" alt></p>\n<p><img src=\"/2020/11/28/note/3.png\" alt></p>\n<p><img src=\"/2020/11/28/note/4.png\" alt></p>\n","categories":["工作笔记"]},{"title":"员工管理系统","url":"/2020/08/11/project-01/","content":"<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>模块，功能，技术选型：<a id=\"more\"></a></p>\n<ul>\n<li><p>用户模块：</p>\n<ul>\n<li>1、用户登录<ul>\n<li>2、用户注册</li>\n<li>3、验证码实现</li>\n<li>4、欢迎xx用户登录</li>\n<li>5、安全退出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>员工管理模块：</p>\n<ul>\n<li>6、员工信息展示</li>\n<li>7、员工的添加</li>\n<li>8、员工的删除</li>\n<li>9、员工的修改</li>\n<li>10、员工列表加入Redis缓存实现</li>\n</ul>\n</li>\n<li><p>技术选型</p>\n<ul>\n<li>前端：vue+axios</li>\n<li>后端：springboot + mybatis + mysql + redis</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"库表设计\"><a href=\"#库表设计\" class=\"headerlink\" title=\"库表设计\"></a>库表设计</h1><p>1、系统需要哪些表</p>\n<p>用户表</p>\n<p>员工表</p>\n<p>2、分析表与表之间的关系</p>\n<p>用户表管理员工表，没有什么关系，涉及到的都是单表操作</p>\n<p>3、分析表中的字段</p>\n<p>用户表字段<br>id、username、realname、password、gender、status、registerTime</p>\n<p>员工表</p>\n<p>id、name、photoPath、salary、age</p>\n<p>创建emp数据库，创建表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">\tusername <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\trealname <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    <span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    gender <span class=\"built_in\">varchar</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">    <span class=\"keyword\">status</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">    regist_time <span class=\"built_in\">timestamp</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_emp(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    photo_path <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    salary <span class=\"keyword\">double</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">    age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"详细设计\"><a href=\"#详细设计\" class=\"headerlink\" title=\"详细设计\"></a>详细设计</h1><p>流程图，伪代码（小项目省略）</p>\n<h1 id=\"编码环节\"><a href=\"#编码环节\" class=\"headerlink\" title=\"编码环节\"></a>编码环节</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>springboot+mybatis+mysql、引入员工系统页面</p>\n<p>项目名：emps</p>\n<p>项目结构：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-src/main/java</span></span><br><span class=\"line\"><span class=\"comment\">--------------com.zyz.</span></span><br><span class=\"line\"><span class=\"comment\">---------------------bean</span></span><br><span class=\"line\"><span class=\"comment\">---------------------dao</span></span><br><span class=\"line\"><span class=\"comment\">---------------------service</span></span><br><span class=\"line\"><span class=\"comment\">---------------------controller</span></span><br><span class=\"line\"><span class=\"comment\">---------------------utils</span></span><br><span class=\"line\"><span class=\"comment\">---------------------cache</span></span><br><span class=\"line\"><span class=\"deletion\">-src/main/resource</span></span><br><span class=\"line\"><span class=\"comment\">------------------application.yml </span></span><br><span class=\"line\"><span class=\"comment\">------------------com.zyz.mapper/   mapper配置文件</span></span><br><span class=\"line\"><span class=\"comment\">------------------com.zyz.sql/      数据库文件</span></span><br><span class=\"line\"><span class=\"comment\">------------------static/          静态资源</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正式进入编码\"><a href=\"#正式进入编码\" class=\"headerlink\" title=\"正式进入编码\"></a>正式进入编码</h2><h3 id=\"一、用户模块\"><a href=\"#一、用户模块\" class=\"headerlink\" title=\"一、用户模块\"></a>一、用户模块</h3><h4 id=\"1、创建springboot项目，勾选相应的依赖\"><a href=\"#1、创建springboot项目，勾选相应的依赖\" class=\"headerlink\" title=\"1、创建springboot项目，勾选相应的依赖\"></a>1、创建springboot项目，勾选相应的依赖</h4><p><img src=\"/2020/08/11/project-01/1.png\" alt></p>\n<p>搭建项目基本结构：<br><img src=\"/2020/08/11/project-01/2.png\" alt></p>\n<p>引入其他依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.23<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、编写springboot配置文件\"><a href=\"#2、编写springboot配置文件\" class=\"headerlink\" title=\"2、编写springboot配置文件\"></a>2、编写springboot配置文件</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定工程访问路径</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/empAdmin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/emp?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.zyz.bean</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:com/zyz/mapper/*.xml</span> <span class=\"comment\"># 要在接口中添加@Mapper注解</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">com:</span></span><br><span class=\"line\">      <span class=\"attr\">zyz:</span></span><br><span class=\"line\">        <span class=\"attr\">dao:</span> <span class=\"string\">debug</span></span><br><span class=\"line\">        <span class=\"attr\">service:</span> <span class=\"string\">info</span></span><br><span class=\"line\">        <span class=\"attr\">controller:</span> <span class=\"string\">info</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、实现验证码展示功能\"><a href=\"#3、实现验证码展示功能\" class=\"headerlink\" title=\"3、实现验证码展示功能\"></a>3、实现验证码展示功能</h4><blockquote>\n<p>验证码工具类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VerifyCodeUtils</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String VERIFY_CODES = <span class=\"string\">\"23456789ABCDEFGHJKLMNPQRSTUVWXYZ\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用系统默认字符源生成验证码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verifySize    验证码长度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateVerifyCode</span><span class=\"params\">(<span class=\"keyword\">int</span> verifySize)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用指定源生成验证码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verifySize    验证码长度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sources   验证码字符源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateVerifyCode</span><span class=\"params\">(<span class=\"keyword\">int</span> verifySize, String sources)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sources == <span class=\"keyword\">null</span> || sources.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            sources = VERIFY_CODES;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> codesLen = sources.length();</span><br><span class=\"line\">        Random rand = <span class=\"keyword\">new</span> Random(System.currentTimeMillis());</span><br><span class=\"line\">        StringBuilder verifyCode = <span class=\"keyword\">new</span> StringBuilder(verifySize);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class=\"line\">            verifyCode.append(sources.charAt(rand.nextInt(codesLen-<span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> verifyCode.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成随机验证码文件,并返回验证码值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> w</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> h</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> outputFile</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verifySize</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">outputVerifyImage</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, File outputFile, <span class=\"keyword\">int</span> verifySize)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class=\"line\">        outputImage(w, h, outputFile, verifyCode);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> verifyCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> w</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> h</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> os</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verifySize</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">outputVerifyImage</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, OutputStream os, <span class=\"keyword\">int</span> verifySize)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class=\"line\">        outputImage(w, h, os, verifyCode);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> verifyCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成指定验证码图像文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> w</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> h</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> outputFile</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">outputImage</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, File outputFile, String code)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(outputFile == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        File dir = outputFile.getParentFile();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dir.exists())&#123;</span><br><span class=\"line\">            dir.mkdirs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            outputFile.createNewFile();</span><br><span class=\"line\">            FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(outputFile);</span><br><span class=\"line\">            outputImage(w, h, fos, code);</span><br><span class=\"line\">            fos.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(IOException e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出指定验证码图片流</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> w</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> h</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> os</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">outputImage</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, OutputStream os, String code)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> verifySize = code.length();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        Random rand = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        Graphics2D g2 = image.createGraphics();</span><br><span class=\"line\">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class=\"line\">        Color[] colors = <span class=\"keyword\">new</span> Color[<span class=\"number\">5</span>];</span><br><span class=\"line\">        Color[] colorSpaces = <span class=\"keyword\">new</span> Color[] &#123; Color.WHITE, Color.CYAN,</span><br><span class=\"line\">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class=\"line\">                Color.PINK, Color.YELLOW &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] fractions = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[colors.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class=\"line\">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class=\"line\">            fractions[i] = rand.nextFloat();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Arrays.sort(fractions);</span><br><span class=\"line\"></span><br><span class=\"line\">        g2.setColor(Color.GRAY);<span class=\"comment\">// 设置边框色</span></span><br><span class=\"line\">        g2.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br><span class=\"line\"></span><br><span class=\"line\">        Color c = getRandColor(<span class=\"number\">200</span>, <span class=\"number\">250</span>);</span><br><span class=\"line\">        g2.setColor(c);<span class=\"comment\">// 设置背景色</span></span><br><span class=\"line\">        g2.fillRect(<span class=\"number\">0</span>, <span class=\"number\">2</span>, w, h-<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绘制干扰线</span></span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        g2.setColor(getRandColor(<span class=\"number\">160</span>, <span class=\"number\">200</span>));<span class=\"comment\">// 设置线条的颜色</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = random.nextInt(w - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = random.nextInt(h - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> xl = random.nextInt(<span class=\"number\">6</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> yl = random.nextInt(<span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            g2.drawLine(x, y, x + xl + <span class=\"number\">40</span>, y + yl + <span class=\"number\">20</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加噪点</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> yawpRate = <span class=\"number\">0.05f</span>;<span class=\"comment\">// 噪声率</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> area = (<span class=\"keyword\">int</span>) (yawpRate * w * h);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; area; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = random.nextInt(w);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = random.nextInt(h);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rgb = getRandomIntColor();</span><br><span class=\"line\">            image.setRGB(x, y, rgb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        shear(g2, w, h, c);<span class=\"comment\">// 使图片扭曲</span></span><br><span class=\"line\"></span><br><span class=\"line\">        g2.setColor(getRandColor(<span class=\"number\">100</span>, <span class=\"number\">160</span>));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fontSize = h-<span class=\"number\">4</span>;</span><br><span class=\"line\">        Font font = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"Algerian\"</span>, Font.ITALIC, fontSize);</span><br><span class=\"line\">        g2.setFont(font);</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = code.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class=\"line\">            AffineTransform affine = <span class=\"keyword\">new</span> AffineTransform();</span><br><span class=\"line\">            affine.setToRotation(Math.PI / <span class=\"number\">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>), (w / verifySize) * i + fontSize/<span class=\"number\">2</span>, h/<span class=\"number\">2</span>);</span><br><span class=\"line\">            g2.setTransform(affine);</span><br><span class=\"line\">            g2.drawChars(chars, i, <span class=\"number\">1</span>, ((w-<span class=\"number\">10</span>) / verifySize) * i + <span class=\"number\">5</span>, h/<span class=\"number\">2</span> + fontSize/<span class=\"number\">2</span> - <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        g2.dispose();</span><br><span class=\"line\">        ImageIO.write(image, <span class=\"string\">\"jpg\"</span>, os);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc, <span class=\"keyword\">int</span> bc)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fc &gt; <span class=\"number\">255</span>)</span><br><span class=\"line\">            fc = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bc &gt; <span class=\"number\">255</span>)</span><br><span class=\"line\">            bc = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r, g, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomIntColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rgb = getRandomRgb();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> color = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c : rgb) &#123;</span><br><span class=\"line\">            color = color &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">            color = color | c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getRandomRgb() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rgb = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            rgb[i] = random.nextInt(<span class=\"number\">255</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rgb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shear</span><span class=\"params\">(Graphics g, <span class=\"keyword\">int</span> w1, <span class=\"keyword\">int</span> h1, Color color)</span> </span>&#123;</span><br><span class=\"line\">        shearX(g, w1, h1, color);</span><br><span class=\"line\">        shearY(g, w1, h1, color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shearX</span><span class=\"params\">(Graphics g, <span class=\"keyword\">int</span> w1, <span class=\"keyword\">int</span> h1, Color color)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> period = random.nextInt(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> borderGap = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> frames = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> phase = random.nextInt(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; h1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> d = (<span class=\"keyword\">double</span>) (period &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    * Math.sin((<span class=\"keyword\">double</span>) i / (<span class=\"keyword\">double</span>) period</span><br><span class=\"line\">                    + (<span class=\"number\">6.2831853071795862</span>D * (<span class=\"keyword\">double</span>) phase)</span><br><span class=\"line\">                    / (<span class=\"keyword\">double</span>) frames);</span><br><span class=\"line\">            g.copyArea(<span class=\"number\">0</span>, i, w1, <span class=\"number\">1</span>, (<span class=\"keyword\">int</span>) d, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (borderGap) &#123;</span><br><span class=\"line\">                g.setColor(color);</span><br><span class=\"line\">                g.drawLine((<span class=\"keyword\">int</span>) d, i, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">                g.drawLine((<span class=\"keyword\">int</span>) d + w1, i, w1, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shearY</span><span class=\"params\">(Graphics g, <span class=\"keyword\">int</span> w1, <span class=\"keyword\">int</span> h1, Color color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> period = random.nextInt(<span class=\"number\">40</span>) + <span class=\"number\">10</span>; <span class=\"comment\">// 50;</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> borderGap = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> frames = <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> phase = <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; w1; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> d = (<span class=\"keyword\">double</span>) (period &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    * Math.sin((<span class=\"keyword\">double</span>) i / (<span class=\"keyword\">double</span>) period</span><br><span class=\"line\">                    + (<span class=\"number\">6.2831853071795862</span>D * (<span class=\"keyword\">double</span>) phase)</span><br><span class=\"line\">                    / (<span class=\"keyword\">double</span>) frames);</span><br><span class=\"line\">            g.copyArea(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>, h1, <span class=\"number\">0</span>, (<span class=\"keyword\">int</span>) d);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (borderGap) &#123;</span><br><span class=\"line\">                g.setColor(color);</span><br><span class=\"line\">                g.drawLine(i, (<span class=\"keyword\">int</span>) d, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">                g.drawLine(i, (<span class=\"keyword\">int</span>) d + h1, i, h1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建UserController类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin</span>  <span class=\"comment\">// 允许跨域</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成验证码图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"getImageCode\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getImageCode</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用工具类生成验证码并输出</span></span><br><span class=\"line\">        ByteArrayOutputStream os = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        String code = VerifyCodeUtils.generateVerifyCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">        VerifyCodeUtils.outputImage(<span class=\"number\">100</span>, <span class=\"number\">30</span>, os, code);</span><br><span class=\"line\">        <span class=\"comment\">// 保存至applicationContext域中</span></span><br><span class=\"line\">        request.getServletContext().setAttribute(<span class=\"string\">\"code\"</span>, code);</span><br><span class=\"line\">        <span class=\"comment\">// 将图片转换为base64</span></span><br><span class=\"line\">        String s = Base64Utils.encodeToString(os.toByteArray());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"data:image/png;base64,\"</span> + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在前端发起异步请求</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            url: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 更换验证码</span></span></span><br><span class=\"line\">            getImg() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">this</span>.getSrc()</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 封装获取验证码的请求方法</span></span></span><br><span class=\"line\">            getSrc() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                axios.get(<span class=\"string\">\"http://localhost:8080/empAdmin/user/getImageCode?time=\"</span> + <span class=\"built_in\">Math</span>.random())</span></span><br><span class=\"line\"><span class=\"javascript\">                    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        <span class=\"comment\">// console.log(res.data);</span></span></span><br><span class=\"line\">                        _this.url = res.data;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">        created() &#123;  <span class=\"comment\">// 页面加载前执行  发起异步请求</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.getSrc();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() + <span class=\"string\">\"/\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"num\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"url\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getImg\"</span>&gt;</span>换一张<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现注册功能\"><a href=\"#4、实现注册功能\" class=\"headerlink\" title=\"4、实现注册功能\"></a>4、实现注册功能</h4><blockquote>\n<p>创建User实体类，使用lombok！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String realname;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date registerTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编写dao层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加用户</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据用户名查找用户</span></span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">queryUserByName</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的sql映射文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.UserDao\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"save\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"User\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">        insert into t_user</span><br><span class=\"line\">        values</span><br><span class=\"line\">        (#&#123;id&#125;,#&#123;username&#125;,#&#123;realname&#125;,#&#123;password&#125;,#&#123;gender&#125;,#&#123;status&#125;,#&#123;registerTime&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryUserByName\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select id,username,realname,password,gender,status,register_time</span><br><span class=\"line\">        from t_user where username=#&#123;username&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编写service层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户注册</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现对应的service接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断用户是否存在</span></span><br><span class=\"line\">        User user1 = userDao.queryUserByName(user.getUsername());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user1==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 生成用户状态</span></span><br><span class=\"line\">            user.setStatus(<span class=\"string\">\"已激活\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 设置用户注册时间</span></span><br><span class=\"line\">            user.setRegisterTime(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            <span class=\"comment\">// 调用dao</span></span><br><span class=\"line\">            userDao.save(user);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"用户名已存在！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编写controller层，在UserController中添加响应注册请求的方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"register\"</span>) <span class=\"comment\">// @RequestBody将前端传来的json字符串转换为java对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">register</span><span class=\"params\">(@RequestBody User user, String code, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断验证码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(code)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"验证码为空！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String realCode = (String) request.getServletContext().getAttribute(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (realCode.equalsIgnoreCase(code)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getUsername())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"用户名为空！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"密码为空！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 调用service方法</span></span><br><span class=\"line\">            userService.register(user);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示：注册成功！\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"验证码错误！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示：\"</span> + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编写前端页面</p>\n</blockquote>\n<p>在vue对象的data中添加user对象，用来接收页面的参数<br><img src=\"/2020/08/11/project-01/4.png\" alt></p>\n<p>将页面中的表单项与user的每一个属性值绑定，.trim去掉前后空格<br><img src=\"/2020/08/11/project-01/3.png\" alt></p>\n<p>给按钮绑定注册事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"register\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>= <span class=\"string\">\" 注 册 \"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>发起注册请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册</span></span><br><span class=\"line\">register() &#123;</span><br><span class=\"line\">    axios.post(<span class=\"string\">\"http://localhost:8080/empAdmin/user/register?code=\"</span> + <span class=\"keyword\">this</span>.code, <span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 注册成功，跳转登录页面</span></span><br><span class=\"line\">                alert(res.data.msg + <span class=\"string\">\"点击确定跳转至登录页面！\"</span>);</span><br><span class=\"line\">                location.href = <span class=\"string\">\"http://localhost:8080/empAdmin/login.html\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 注册失败</span></span><br><span class=\"line\">                alert(res.data.msg + <span class=\"string\">\"点击确定重新注册！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、实现登录功能\"><a href=\"#5、实现登录功能\" class=\"headerlink\" title=\"5、实现登录功能\"></a>5、实现登录功能</h4><blockquote>\n<p>dao层</p>\n</blockquote>\n<p>已经有通过名字查询用户信息的方法<code>queryUserByName(String username)</code>，service层直接调用即可</p>\n<blockquote>\n<p>service层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(user.getUsername()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"用户名为空！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(user.getPassword()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"密码为空！\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 根据输入的用户名查询用户</span></span><br><span class=\"line\">    User user1 = userDao.queryUserByName(user.getUsername());</span><br><span class=\"line\">    <span class=\"comment\">// 判断用户是否存在  使用ObjectUtils!</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ObjectUtils.isEmpty(user1))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user1.getPassword().equals(user.getPassword()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> user1;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"密码错误！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"用户名不存在或错误！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">login</span><span class=\"params\">(@RequestBody User user)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        userService.login(user);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：登录成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端页面</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"user.username\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"user.password\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tel: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">\t\tdata: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tdate: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">\t\t\tuser: &#123;&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tcreated()&#123;</span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() + <span class=\"string\">\"/\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\tlogin()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t<span class=\"comment\">// console.log(this.user);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\taxios.post(<span class=\"string\">\"http://localhost:8080/empAdmin/user/login\"</span>,<span class=\"keyword\">this</span>.user)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t.then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t<span class=\"comment\">// console.log(res.data);</span></span></span><br><span class=\"line\">\t\t\t\t\tif(res.data.status)&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\talert(res.data.msg+<span class=\"string\">\"点击确定跳转员工管理页面！\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\tlocation.href=<span class=\"string\">\"/empAdmin/emplist.html\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\talert(res.data.msg+<span class=\"string\">\"点击确定重新登录！\"</span>)</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6、实现用户登录信息展示\"><a href=\"#6、实现用户登录信息展示\" class=\"headerlink\" title=\"6、实现用户登录信息展示\"></a>6、实现用户登录信息展示</h4><p>登录成功后的信息都在后端这边，前端拿不到这些数据。</p>\n<p>在前后端未分离的时候，通常都是通过服务端的HttpSession来保存这些信息，服务端在创建了Session的同时，会为该Session生成唯一的sessionId并保存到浏览器中，在随后的请求通过携带sessionId重新获得已经创建的Session；</p>\n<p>而在前后端分离的系统中，前端与后端分别部署在不同的服务器上，前后端交互时，前端请求不会带上后端sessionId，session获取不到。因此将信息保存至浏览器中的localStorage中</p>\n<p>在controller中保存用户信息：<br><img src=\"/2020/08/11/project-01/5.png\" alt></p>\n<p>登录成功后保存用户信息到localStorage:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">login()&#123;</span><br><span class=\"line\">   <span class=\"comment\">// console.log(this.user);</span></span><br><span class=\"line\">   axios.post(<span class=\"string\">\"http://localhost:8080/empAdmin/user/login\"</span>,<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">   .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(res.data.status)&#123;</span><br><span class=\"line\">         alert(res.data.msg+<span class=\"string\">\"点击确定跳转员工管理页面！\"</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 将用户信息存放指localStorage中</span></span><br><span class=\"line\">         <span class=\"comment\">// JSON.stringify()将json对象转换为json字符串</span></span><br><span class=\"line\">         localStorage.setItem(<span class=\"string\">\"user\"</span>,<span class=\"built_in\">JSON</span>.stringify(res.data.user));</span><br><span class=\"line\">         location.href=<span class=\"string\">\"/empAdmin/emplist.html\"</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         alert(res.data.msg+<span class=\"string\">\"点击确定重新登录！\"</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在员工展示页面显示登录名：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">   <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">         date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">         user:&#123;&#125; <span class=\"comment\">// 存放用户登录信息</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      created()&#123;</span><br><span class=\"line\"><span class=\"javascript\">         <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() + <span class=\"string\">\"/\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</span></span><br><span class=\"line\"><span class=\"actionscript\">         <span class=\"keyword\">var</span> userString = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">         <span class=\"keyword\">if</span>(userString!=<span class=\"literal\">null</span>)&#123;<span class=\"comment\">// 已登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 将json字符串转换为json对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.user = <span class=\"built_in\">JSON</span>.parse(userString);</span></span><br><span class=\"line\"><span class=\"actionscript\">         &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">// 未登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请登录！点击确定跳转登录页面\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            location.href=<span class=\"string\">\"/empAdmin/login.html\"</span>;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>用户：<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"user!=null\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"user.username\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7、实现退出功能\"><a href=\"#7、实现退出功能\" class=\"headerlink\" title=\"7、实现退出功能\"></a>7、实现退出功能</h4><p>删除localStorage中的用户数据，跳转至登录页</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理安全退出</span></span><br><span class=\"line\">          logout()&#123;</span><br><span class=\"line\">              localStorage.removeItem(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">      \t\t  location.href=<span class=\"string\">\"/empAdmin/login.html\"</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、员工模块\"><a href=\"#二、员工模块\" class=\"headerlink\" title=\"二、员工模块\"></a>二、员工模块</h3><h4 id=\"1、展示所有员工的信息\"><a href=\"#1、展示所有员工的信息\" class=\"headerlink\" title=\"1、展示所有员工的信息\"></a>1、展示所有员工的信息</h4><blockquote>\n<p>创建实体类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String photoPath;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double salary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>dao层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmpDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询所有员工</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Emp&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.EmpDao\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listAll\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">        select id,name,photo_path,salary,age from t_emp</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmpService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 展示所有员工</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Emp&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">EmpService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmpDao empDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Emp&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empDao.listAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"emp\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmpService empService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"listAll\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Emp&gt; <span class=\"title\">listAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;Emp&gt; emps = empService.listAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> emps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<p>在data中添加一个数组，用来存放所有员工<br><img src=\"/2020/08/11/project-01/6.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询员工</span></span><br><span class=\"line\">axios.get(<span class=\"string\">\"http://localhost:8080/empAdmin/emp/listAll\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emps = res.data;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(this.emps);</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--遍历员工列表--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(emp,index) in emps\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"emp.id\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"index%2==0?'row1':'row2'\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"emp.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"emp.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"emp.photoPath\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 60px;\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"emp.salary\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"emp.age\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"emplist.html\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"updateEmp.html\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、添加员工\"><a href=\"#2、添加员工\" class=\"headerlink\" title=\"2、添加员工\"></a>2、添加员工</h4><blockquote>\n<p>dao层</p>\n</blockquote>\n<p>添加添加员工的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加员工</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>对应的mapper文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Emp\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">    insert into t_emp values(#&#123;id&#125;,#&#123;name&#125;,#&#123;photoPath&#125;,#&#123;salary&#125;,#&#123;age&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入用户名！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getSalary()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入薪资！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getAge()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入年龄！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    empDao.add(emp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller层</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置上传文件的地址</span></span><br><span class=\"line\"><span class=\"attr\">upload:</span></span><br><span class=\"line\">  <span class=\"attr\">dir:</span></span><br><span class=\"line\">    <span class=\"string\">D:\\IDEA_workspace\\emps\\src\\main\\resources\\static\\photos</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注入上传用户头像的地址 </span></span><br><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;upload.dir&#125;\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String realPath;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"addEmp\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">addEmp</span><span class=\"params\">(Emp emp, MultipartFile photo)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(\"员工信息：\"+emp);</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(\"头像：\"+photo);</span></span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 头像保存</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、修改文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(photo)) &#123;</span><br><span class=\"line\">            String newFileName = UUID.randomUUID().toString() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                    FilenameUtils.getExtension(photo.getOriginalFilename());</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(newFileName);</span></span><br><span class=\"line\">            <span class=\"comment\">// 2、图像上传</span></span><br><span class=\"line\">            photo.transferTo(<span class=\"keyword\">new</span> File(realPath, newFileName));</span><br><span class=\"line\">            <span class=\"comment\">// 3、设置头像访问地址</span></span><br><span class=\"line\">            emp.setPhotoPath(newFileName);</span><br><span class=\"line\">            <span class=\"comment\">// 添加员工到数据库中</span></span><br><span class=\"line\">            empService.add(emp);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"添加成功！\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请上传头像\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示：\"</span> + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<p>绑定表单属性，对文件添加引用<br><img src=\"/2020/08/11/project-01/7.png\" alt></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">   <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">         date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">         user:&#123;&#125;, <span class=\"comment\">// 存放用户登录信息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">         emp:&#123;    <span class=\"comment\">// 存放员工信息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            name:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            age:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            salary:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            empPhoto:<span class=\"string\">\"\"</span></span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      created()&#123;</span><br><span class=\"line\"><span class=\"javascript\">         <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() + <span class=\"string\">\"/\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getDate();</span></span><br><span class=\"line\"><span class=\"actionscript\">         <span class=\"keyword\">var</span> userString = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">         <span class=\"keyword\">if</span>(userString!=<span class=\"literal\">null</span>)&#123;<span class=\"comment\">// 已登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 将json字符串转换为json对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.user = <span class=\"built_in\">JSON</span>.parse(userString);</span></span><br><span class=\"line\"><span class=\"actionscript\">         &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">// 未登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请登录！点击确定跳转登录页面\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            location.href=<span class=\"string\">\"/empAdmin/login.html\"</span>;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\"><span class=\"actionscript\">         <span class=\"comment\">// 处理安全退出</span></span></span><br><span class=\"line\">         logout()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">            localStorage.removeItem(<span class=\"string\">\"user\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            location.href=<span class=\"string\">\"/empAdmin/login.html\"</span>;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         addEmp()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// console.log(this.emp);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// console.log(this.$refs.empPhoto.files[0]);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 文件上传必须是post请求  entype必须为multipart/from-data</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 构造表单</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> fromData = <span class=\"keyword\">new</span> FormData();</span></span><br><span class=\"line\"><span class=\"actionscript\">            fromData.append(<span class=\"string\">\"name\"</span>,<span class=\"keyword\">this</span>.emp.name);</span></span><br><span class=\"line\"><span class=\"actionscript\">            fromData.append(<span class=\"string\">\"age\"</span>,<span class=\"keyword\">this</span>.emp.age);</span></span><br><span class=\"line\"><span class=\"actionscript\">            fromData.append(<span class=\"string\">\"salary\"</span>,<span class=\"keyword\">this</span>.emp.salary);</span></span><br><span class=\"line\"><span class=\"actionscript\">            fromData.append(<span class=\"string\">\"photo\"</span>,<span class=\"keyword\">this</span>.$refs.empPhoto.files[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\">            axios(&#123;</span><br><span class=\"line\"><span class=\"actionscript\">               method:<span class=\"string\">\"post\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">               url:<span class=\"string\">\"http://localhost:8080/empAdmin/emp/addEmp\"</span>,</span></span><br><span class=\"line\">               data:fromData,</span><br><span class=\"line\"><span class=\"actionscript\">               headers:&#123;<span class=\"string\">'content-type'</span>:<span class=\"string\">'multipart/form-data'</span>&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">               <span class=\"comment\">// console.log(res.data);</span></span></span><br><span class=\"line\">               if(res.data.status)&#123;</span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.confirm(res.data.msg+<span class=\"string\">\"点击跳转员工列表页面\"</span>))&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                     location.href=<span class=\"string\">\"/empAdmin/emplist.html\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">                  &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\">                     location.reload();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"><span class=\"actionscript\">               &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\">                  alert(res.data.msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改显示用户头像的标签路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'/empAdmin/photos/'+emp.photoPath\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 60px;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、删除员工\"><a href=\"#3、删除员工\" class=\"headerlink\" title=\"3、删除员工\"></a>3、删除员工</h4><blockquote>\n<p>dao层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除员工</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据id查询员工</span></span><br><span class=\"line\"><span class=\"function\">Emp <span class=\"title\">queryEmpById</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> &gt;</span></span><br><span class=\"line\">    delete from t_emp where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryEmpById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">    select id,name,photo_path,salary,age from t_emp</span><br><span class=\"line\">    where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除员工</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据id查询员工</span></span><br><span class=\"line\"><span class=\"function\">Emp <span class=\"title\">queryEmpById</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    empDao.delete(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">queryEmpById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> empDao.queryEmpById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"delete\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 删除员工头像</span></span><br><span class=\"line\">        Emp emp = empService.queryEmpById(id);</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(emp.getPhotoPath());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">            file.delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        empService.delete(id);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"删除成功\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"删除失败\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除员工</span></span><br><span class=\"line\">deleteEmp(id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.confirm(<span class=\"string\">\"确认删除吗？\"</span>)) &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">\"http://localhost:8080/empAdmin/emp/delete?id=\"</span> + id)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                    alert(res.data.msg);</span><br><span class=\"line\">                    location.reload();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    alert(res.data.msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数传递：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteEmp(emp.id)\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、修改员工\"><a href=\"#4、修改员工\" class=\"headerlink\" title=\"4、修改员工\"></a>4、修改员工</h4><blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改员工</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">    update t_emp set</span><br><span class=\"line\">    name=#&#123;name&#125;,photo_path=#&#123;photoPath&#125;,salary=#&#123;salary&#125;,age=#&#123;age&#125;</span><br><span class=\"line\">    where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改员工</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入用户名！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getSalary()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入薪资！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(emp.getAge()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入年龄！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    empDao.update(emp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">update</span><span class=\"params\">(Emp emp, MultipartFile photo)</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 头像保存</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、修改文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(photo)) &#123;</span><br><span class=\"line\">            String newFileName = UUID.randomUUID().toString() + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">                    FilenameUtils.getExtension(photo.getOriginalFilename());</span><br><span class=\"line\">            <span class=\"comment\">// 2、图像上传</span></span><br><span class=\"line\">            photo.transferTo(<span class=\"keyword\">new</span> File(realPath, newFileName));</span><br><span class=\"line\">            <span class=\"comment\">// 3、设置头像访问地址</span></span><br><span class=\"line\">            emp.setPhotoPath(newFileName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        empService.update(emp);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"修改成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<p>从员工列表中选中员工的id传递给修改页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"updateEmp(emp.id)\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改员工</span></span><br><span class=\"line\">updateEmp(id)&#123;</span><br><span class=\"line\">    location.href=<span class=\"string\">\"/empAdmin/updateEmp.html?id=\"</span>+id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在修改页面创建前(created()方法中)发起获取当前员工信息的请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取员工id</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = location.href.lastIndexOf(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = location.href.substring(start+<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(id);</span></span><br><span class=\"line\"><span class=\"comment\">// 查询当前员工显示在页面上</span></span><br><span class=\"line\">axios.get(<span class=\"string\">\"http://localhost:8080/empAdmin/emp/getEmp?id=\"</span>+id)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emp = res.data;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用v-model将返回的json数据绑定表单中的属性值</p>\n<p>旧照片的显示和新照片上传<br><img src=\"/2020/08/11/project-01/8.png\" alt></p>\n<p>绑定更新事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"updateEmp\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"更 新\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新员工信息</span></span><br><span class=\"line\">updateEmp() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"id\"</span>,<span class=\"keyword\">this</span>.emp.id);</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"name\"</span>,<span class=\"keyword\">this</span>.emp.name);</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"photoPath\"</span>,<span class=\"keyword\">this</span>.emp.photoPath)</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"photo\"</span>,<span class=\"keyword\">this</span>.$refs.empPhoto.files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"salary\"</span>,<span class=\"keyword\">this</span>.emp.salary);</span><br><span class=\"line\">    formData.append(<span class=\"string\">\"age\"</span>,<span class=\"keyword\">this</span>.emp.age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(formData);</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">        url:<span class=\"string\">\"http://localhost:8080/empAdmin/emp/update\"</span>,</span><br><span class=\"line\">        data: formData,</span><br><span class=\"line\">        headers:&#123;<span class=\"string\">'content-type'</span>:<span class=\"string\">'multipart/form-data'</span>&#125;</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.data.status)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.confirm(res.data.msg))&#123;</span><br><span class=\"line\">                location.href=<span class=\"string\">\"/empAdmin/emplist.html\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(res.data.msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、整合Redis缓存\"><a href=\"#三、整合Redis缓存\" class=\"headerlink\" title=\"三、整合Redis缓存\"></a>三、整合Redis缓存</h3><p>1、导入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、配置Redis访问ip和端口</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/emp?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>3、创建RedisCache类实现mybatis中的Cache接口，对操纵mybatis缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.cache;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用redis操纵mybatis缓存</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisCache</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对应mapper文件中的namespace</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedisCache</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 封装获取redisTemplate的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title\">getRedisTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        RedisTemplate redisTemplate =(RedisTemplate) ApplicationContextUtils.getBean(<span class=\"string\">\"redisTemplate\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"当前缓存的id：\"</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 放入redis缓存</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putObject</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"放入缓存的key-value\"</span>+key+<span class=\"string\">\"-\"</span>+value);</span><br><span class=\"line\">        <span class=\"comment\">// 获取redisTemplate</span></span><br><span class=\"line\">        getRedisTemplate().opsForHash().put(id,key.toString(),value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从redis缓存中获取</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取缓存的key-value\"</span>+key+<span class=\"string\">\"-\"</span>+getRedisTemplate().opsForHash().get(id,key.toString()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRedisTemplate().opsForHash().get(id,key.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定缓存信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">removeObject</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除缓存信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"清除缓存\"</span>);</span><br><span class=\"line\">        getRedisTemplate().delete(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存大小</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRedisTemplate().opsForValue().size(id).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建工具类applicationContextUtils实现ApplicationContextAware获取工厂实例，并从中获取需要的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextUtils</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前工厂</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取工厂中的实现类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>存储在缓存中的实体类必须实现Serializable接口<br><img src=\"/2020/08/11/project-01/9.png\" alt></p>\n<p>5、在mapper文件中设置自定义的Redis缓存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用自定义的Redis缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.zyz.cache.RedisCache\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/08/11/project-01/10.png\" alt></p>\n<p><img src=\"/2020/08/11/project-01/11.png\" alt></p>\n<h1 id=\"主要界面\"><a href=\"#主要界面\" class=\"headerlink\" title=\"主要界面\"></a>主要界面</h1><p><img src=\"/2020/08/11/project-01/13.png\" style=\"zoom:80%;\"><img src=\"/2020/08/11/project-01/14.png\" alt></p>\n<img src=\"/2020/08/11/project-01/12.png\" style=\"zoom:80%;\">\n\n<img src=\"/2020/08/11/project-01/16.png\" style=\"zoom:80%;\">\n\n<img src=\"/2020/08/11/project-01/15.png\" style=\"zoom:80%;\">\n\n<h1 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h1><p>做了什么？</p>\n<ul>\n<li>实现了管理员的注册和登录</li>\n<li>员工的增删改查功能</li>\n</ul>\n<p>学到了什么？</p>\n<ul>\n<li>使用了Redis作为Mybatis的缓存，以前只是对Mybatis的缓存机制停留在了解阶段，这次使用上了之前学习的Redis数据库</li>\n<li>使用了vue对页面进行渲染，axios发起异步请求，熟悉了前后端分离系统的数据交互模式</li>\n<li>使用base64格式在浏览器端显示图片，需要在base64格式的图片前面加上<code>data:image/png;base64,</code>前缀</li>\n<li>学习到了使用ObjectUtils，StringUtils对一些属性进行非空判断</li>\n<li>使用 Exception+ResponseBody，讲异常返回给前端，给用户友好的提示</li>\n<li>使用localStorage保存用户登录信息</li>\n<li>在vue中构造表单，填充数据和文件，后端使用MultipartFile类接收前端的文件，并上传值到指定目录</li>\n</ul>\n<p>遇到的问题，怎么解决的？</p>\n<ul>\n<li>上传用户照片的问题，在指定的上传目录发现了文件的存在，可是却在浏览器中显示不出来，通过查看数据库中员工表的信息，发现其他属性都存在，只有照片为空，通过在controller的添加方法打上断点，调试发现图片并没有保存到员工对象中，通过添加相应的set方法，最后解决了问题。</li>\n<li>在项目中我使用了date来显示当前的日期，而对前后端的交互中要频繁使用到data变量，在一次测试过程中就一不小心写错了，检查了很长时间才发现，真的差之一毫，谬之千里啊！</li>\n</ul>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><h2 id=\"添加日志输出功能\"><a href=\"#添加日志输出功能\" class=\"headerlink\" title=\"添加日志输出功能\"></a>添加日志输出功能</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(UserController<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>在方法中打印日志：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">LOGGER.info(<span class=\"string\">\"用户登录，参数：&#123;&#125;\"</span>, JSON.toJSON(user));</span><br></pre></td></tr></table></figure>\n<p>使用自定义注解并实现日志切面的方式打印日志：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">// 运行时获取注解值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LogAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(LogAspect<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.zyz.controller..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"logPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAround</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class=\"line\">        Method method = methodSignature.getMethod();</span><br><span class=\"line\">        Log log = method.getAnnotation(Log<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != log)&#123;</span><br><span class=\"line\">            LOGGER.info(log.value());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义缓存注解并实现缓存切面\"><a href=\"#自定义缓存注解并实现缓存切面\" class=\"headerlink\" title=\"自定义缓存注解并实现缓存切面\"></a>自定义缓存注解并实现缓存切面</h2><p>支持单独设置缓存的过期时间<br>1、自定义RedisTemplate，指定序列化方式，防止出现乱码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory); <span class=\"comment\">// Json序列化</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class=\"line\">        <span class=\"comment\">// String序列化</span></span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、自定义缓存注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)<span class=\"comment\">// 运行时获取注解值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Cache &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">key</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有效时间 默认30分钟 单位 s</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">expire</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 30*60 </span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、实现缓存切面CacheAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(value = <span class=\"string\">\"@annotation(com.zyz.aop.cache.Cache)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cachePointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(value = <span class=\"string\">\"cachePointcut() &amp;&amp; @annotation(cache)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">cacheAround</span><span class=\"params\">(ProceedingJoinPoint point, Cache cache)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据参数生成key</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String key = parseKey(cache.key());</span><br><span class=\"line\">        Object value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从redis中获取缓存</span></span><br><span class=\"line\">            value = redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != value) &#123;</span><br><span class=\"line\">            MethodSignature methodSignature = (MethodSignature) point.getSignature();</span><br><span class=\"line\">            Method method = methodSignature.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待返回结果</span></span><br><span class=\"line\">            Object proceed = point.proceed();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (proceed != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//设置缓存</span></span><br><span class=\"line\">                    redisTemplate.opsForValue().set(key, proceed, cache.expire(), TimeUnit.SECONDS);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            throwable.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * redis的键值生成策略</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  key前缀</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">parseKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用uuid拼接保证key唯一</span></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(key + <span class=\"string\">\":\"</span>+ UuidUtils.getUuid());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UuidUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">getUuid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UUID.randomUUID().toString().replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、使用自定义注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cache</span>(key=<span class=\"string\">\"user:login\"</span>,expire = <span class=\"number\">15</span>*<span class=\"number\">60</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的key-value：</p>\n<p><img src=\"/2020/08/11/project-01/17.png\" alt></p>\n","categories":["Java项目"],"tags":["SpringBoot","Vue"]},{"title":"旅游信息管理系统","url":"/2020/08/17/project-02/","content":"<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>分析各个模块和确定技术选型<a id=\"more\"></a></p>\n<ul>\n<li>用户模块<ul>\n<li>登录和注册</li>\n</ul>\n</li>\n<li>省份模块<ul>\n<li>增删改查</li>\n<li>使用redis作为mybatis的缓存</li>\n</ul>\n</li>\n<li>景点模块<ul>\n<li>增删改查</li>\n<li>使用redis作为mybatis的缓存</li>\n</ul>\n</li>\n<li>技术选型<ul>\n<li>前端：vue+axios</li>\n<li>后端：springboot + mybatis + mysql + redis</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"库表设计\"><a href=\"#库表设计\" class=\"headerlink\" title=\"库表设计\"></a>库表设计</h1><p>1、系统中有哪些表</p>\n<p>用户表t_user、省份表t_province、景点表t_place</p>\n<p>2、表与表之间的关系</p>\n<p>用户表是独立的；省份表与景点表是1:N的关系</p>\n<p>3、表中的字段</p>\n<p>t_user：id、username、password、email</p>\n<p>t_province：id、name、tags、placecounts</p>\n<p>t_place：id、name、picpath、hotticket、dimticket、details、provinceid</p>\n<p>库：travels</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">\tusername <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\temail <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_province(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\ttags <span class=\"built_in\">varchar</span>(<span class=\"number\">80</span>),</span><br><span class=\"line\">\tplacecounts <span class=\"built_in\">int</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_place(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) primary <span class=\"keyword\">key</span> auto_increment,</span><br><span class=\"line\">\t<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">\tpicpath mediumtext,</span><br><span class=\"line\">\thotticket <span class=\"keyword\">double</span>(<span class=\"number\">7</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">\tdimticket <span class=\"keyword\">double</span>(<span class=\"number\">7</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">\tdetails <span class=\"built_in\">varchar</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">\tprovinceid <span class=\"built_in\">int</span>(<span class=\"number\">6</span>) <span class=\"keyword\">references</span> t_province(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编码环节\"><a href=\"#编码环节\" class=\"headerlink\" title=\"编码环节\"></a>编码环节</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>1、创建springboot项目<br><img src=\"/2020/08/17/project-02/1.png\" alt></p>\n<p>2、导入druid数据据源和文件上传依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.23<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、编写配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定工程访问路径</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/travelsAdmin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/travels?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">2824199842</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.zyz.bean</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:com/zyz/mapper/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">com:</span></span><br><span class=\"line\">      <span class=\"attr\">zyz:</span></span><br><span class=\"line\">        <span class=\"attr\">dao:</span> <span class=\"string\">debug</span></span><br><span class=\"line\">        <span class=\"attr\">service:</span> <span class=\"string\">info</span></span><br><span class=\"line\">        <span class=\"attr\">controller:</span> <span class=\"string\">info</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始编码\"><a href=\"#开始编码\" class=\"headerlink\" title=\"开始编码\"></a>开始编码</h2><h3 id=\"用户模块\"><a href=\"#用户模块\" class=\"headerlink\" title=\"用户模块\"></a>用户模块</h3><h4 id=\"实现注册和登录功能\"><a href=\"#实现注册和登录功能\" class=\"headerlink\" title=\"实现注册和登录功能\"></a>实现注册和登录功能</h4><blockquote>\n<p>bean </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">queryUserByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.UserDao\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"User\"</span>  <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        insert into t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryUserByName\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"User\"</span>&gt;</span></span><br><span class=\"line\">        select id,username,password,email from t_user where username=#&#123;username&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">queryUserByName</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">login</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getUsername())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入用户名！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入密码！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getEmail())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入邮箱！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断用户名是否存在</span></span><br><span class=\"line\">        User realUser = userDao.queryUserByName(user.getUsername());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (realUser != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"该用户名已存在！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        userDao.add(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryUserByName</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDao.queryUserByName(username);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getUsername())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入用户名！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入密码！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        User realuser = userDao.queryUserByName(user.getUsername());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (realuser == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"用户名不存在或错误！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(user.getPassword().equals(realuser.getPassword()))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"密码错误！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> realuser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">login</span><span class=\"params\">(@RequestBody User user,String code,HttpServletRequest request)</span></span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(code)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入验证码！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 获取验证码</span></span><br><span class=\"line\">            String realcode = (String) request.getServletContext().getAttribute(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(realcode.equalsIgnoreCase(code))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"验证码错误！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            User realUser = userService.login(user);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"user\"</span>,realUser);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：登录成功！\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"register\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">register</span><span class=\"params\">(@RequestBody User user, String code, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断验证码是否为空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(code)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入验证码！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 获取验证码</span></span><br><span class=\"line\">            String realcode = (String) request.getServletContext().getAttribute(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(realcode.equalsIgnoreCase(code))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"验证码错误！\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            userService.register(user);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：注册成功！\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示：\"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示验证码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"getImageCode\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getImageCode</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用工具类生成验证码并输出</span></span><br><span class=\"line\">        ByteArrayOutputStream os = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        String code = VerifyCodeUtils.generateVerifyCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">        VerifyCodeUtils.outputImage(<span class=\"number\">100</span>, <span class=\"number\">60</span>, os, code);</span><br><span class=\"line\">        <span class=\"comment\">// 保存至applicationContext域中</span></span><br><span class=\"line\">        request.getServletContext().setAttribute(<span class=\"string\">\"code\"</span>, code);</span><br><span class=\"line\">        <span class=\"comment\">// 将图片转换为base64格式，返回给前端</span></span><br><span class=\"line\">        String s = Base64Utils.encodeToString(os.toByteArray());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"data:image/png;base64,\"</span> + s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n<p>使用v-model将表单中的数据与vue中data绑定</p>\n</blockquote>\n<blockquote>\n<p>登录</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"js/axios.min.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"js/</span>vue.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    var app = new Vue(&#123;</span></span><br><span class=\"line\">        el: \"#wrap\",</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            date: <span class=\"string\">\"\"</span>, </span><br><span class=\"line\">            url: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            user:&#123;&#125;,</span><br><span class=\"line\">            code:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            getCode()&#123;</span><br><span class=\"line\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/user/getImageCode?time=\"</span> + <span class=\"built_in\">Math</span>.random())</span><br><span class=\"line\">                    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.url = res.data;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            getCodeImage()&#123; <span class=\"comment\">// 验证码点击事件</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.getCode();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            login()&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.code);</span><br><span class=\"line\">                axios.post(<span class=\"string\">\"http://localhost:8080/travelsAdmin/user/login?code=\"</span>+<span class=\"keyword\">this</span>.code,<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//console.log();</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(res.data.status)&#123;</span><br><span class=\"line\">                        alert(res.data.msg+<span class=\"string\">\"点击确定跳转管理页面\"</span>);</span><br><span class=\"line\">                        localStorage.setItem(<span class=\"string\">\"user\"</span>,<span class=\"built_in\">JSON</span>.stringify(res.data.user));</span><br><span class=\"line\">                        location.href=<span class=\"string\">\"province/provincelist.html\"</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        alert(res.data.msg+<span class=\"string\">\"点击确定重新登录\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created()&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示验证码</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getCode();</span><br><span class=\"line\">            <span class=\"comment\">// 显示当前日期</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.date=realDate.getFullYear()+<span class=\"string\">\"/\"</span>+(realDate.getMonth()+<span class=\"number\">1</span>)+<span class=\"string\">\"/\"</span>+realDate.getDate();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注册</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">\"#wrap\"</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            date: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            url: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            user:&#123;&#125;,</span><br><span class=\"line\">            code:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            getCode()&#123;</span><br><span class=\"line\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/user/getImageCode?time=\"</span> + <span class=\"built_in\">Math</span>.random())</span><br><span class=\"line\">                    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.url = res.data;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            getCodeImage()&#123; <span class=\"comment\">// 验证码点击事件</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.getCode();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            register()&#123; <span class=\"comment\">// 注册</span></span><br><span class=\"line\">                <span class=\"comment\">// console.log(this.user);</span></span><br><span class=\"line\">                <span class=\"comment\">// console.log(this.code);</span></span><br><span class=\"line\">                <span class=\"comment\">// 发起异步请求</span></span><br><span class=\"line\">                axios.post(<span class=\"string\">\"http://localhost:8080/travelsAdmin/user/register?code=\"</span>+<span class=\"keyword\">this</span>.code,<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 查看返回的数据</span></span><br><span class=\"line\">                    <span class=\"comment\">// console.log(res.data);</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(res.data.status)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.confirm(res.data.msg+<span class=\"string\">\"点击确定跳转登录页面\"</span>))&#123;</span><br><span class=\"line\">                            location.href=<span class=\"string\">\"login.html\"</span></span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            location.reload();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        alert(res.data.msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created()&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示验证码</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getCode();</span><br><span class=\"line\">            <span class=\"comment\">// 显示当前日期</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.date=realDate.getFullYear()+<span class=\"string\">\"/\"</span>+(realDate.getMonth()+<span class=\"number\">1</span>)+<span class=\"string\">\"/\"</span>+realDate.getDate();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在管理页面显示当前用户名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">created()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        location.href=<span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.user = <span class=\"built_in\">JSON</span>.parse(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用户退出：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"logout\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: right\"</span>&gt;</span>安全退出<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    logout()&#123;</span><br><span class=\"line\">        localStorage.removeItem(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        location.href=<span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"省份模块\"><a href=\"#省份模块\" class=\"headerlink\" title=\"省份模块\"></a>省份模块</h3><h4 id=\"展示所有省份\"><a href=\"#展示所有省份\" class=\"headerlink\" title=\"展示所有省份\"></a>展示所有省份</h4><blockquote>\n<p>bean</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Province</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tags;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer placecounts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>dao</p>\n</blockquote>\n<p>抽取BaseDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt; 类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;K&gt; 条件参数的类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseDao</span>&lt;<span class=\"title\">T</span>,<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(K k)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">queryByName</span><span class=\"params\">(K k)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">queryById</span><span class=\"params\">(K k)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">listByPage</span><span class=\"params\">(Integer start,Integer rows)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">findTotal</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ProvinceDao继承BaseDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProvinceDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span>&lt;<span class=\"title\">Province</span>,<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span><br><span class=\"line\">&lt;mapper namespace=<span class=\"string\">\"com.zyz.dao.ProvinceDao\"</span>&gt;</span><br><span class=\"line\">    &lt;!--  分页查询  --&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"listByPage\"</span> resultType=<span class=\"string\">\"Province\"</span>&gt;</span><br><span class=\"line\">        select id,name,tags,placecounts from t_province</span><br><span class=\"line\">        order by placecounts desc</span><br><span class=\"line\">        limit #&#123;start&#125;,#&#123;rows&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 查询总记录数 --&gt;</span><br><span class=\"line\">    &lt;select id=<span class=\"string\">\"findTotal\"</span> resultType=<span class=\"string\">\"Integer\"</span>&gt;</span><br><span class=\"line\">        <span class=\"function\">select <span class=\"title\">count</span><span class=\"params\">(*)</span> from t_province</span></span><br><span class=\"line\"><span class=\"function\">    &lt;/select&gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProvinceService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page  当前页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rows  每一页显示的记录数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Province&gt; <span class=\"title\">listByPage</span><span class=\"params\">(Integer page, Integer rows)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询总记录数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">findTotal</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Province province)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Province province)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">Province <span class=\"title\">queryById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Province <span class=\"title\">queryByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProvinceServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ProvinceService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProvinceDao provinceDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Province&gt; <span class=\"title\">listByPage</span><span class=\"params\">(Integer page, Integer rows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = (page-<span class=\"number\">1</span>)*rows;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> provinceDao.listByPage(start,rows);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">findTotal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> provinceDao.findTotal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Province province)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Province province)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Province <span class=\"title\">queryByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"province\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProvinceController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProvinceService provinceService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有省份</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rows</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"listByPage\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">listByPage</span><span class=\"params\">(Integer page, Integer rows)</span> </span>&#123;</span><br><span class=\"line\">        page = page == <span class=\"keyword\">null</span> ? <span class=\"number\">1</span> : page;</span><br><span class=\"line\">        rows = rows == <span class=\"keyword\">null</span> ? <span class=\"number\">4</span> : rows;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 分页处理</span></span><br><span class=\"line\">        List&lt;Province&gt; provinces = provinceService.listByPage(page, rows);</span><br><span class=\"line\">        <span class=\"comment\">// 计算总页数</span></span><br><span class=\"line\">        Integer total = provinceService.findTotal();</span><br><span class=\"line\">        Integer totalPage = total % rows == <span class=\"number\">0</span> ? total / rows : (total / rows) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        map.put(<span class=\"string\">\"provinces\"</span>, provinces);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"total\"</span>, total);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"totalPage\"</span>, totalPage);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"page\"</span>, page);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">\"#wrap\"</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            date: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            url: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            user: &#123;&#125;,</span><br><span class=\"line\">            provinces: [],</span><br><span class=\"line\">            page: <span class=\"number\">1</span>,</span><br><span class=\"line\">            rows: <span class=\"number\">0</span>,</span><br><span class=\"line\">            totalPage: <span class=\"number\">0</span>,</span><br><span class=\"line\">            total: <span class=\"number\">0</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否登录</span></span><br><span class=\"line\">            isLogin()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> user = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    location.href=<span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.user = <span class=\"built_in\">JSON</span>.parse(user);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 显示当前日期</span></span><br><span class=\"line\">            showDate()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.date=realDate.getFullYear()+<span class=\"string\">\"/\"</span>+(realDate.getMonth()+<span class=\"number\">1</span>)+<span class=\"string\">\"/\"</span>+realDate.getDate();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 退出</span></span><br><span class=\"line\">            logout()&#123;</span><br><span class=\"line\">                localStorage.removeItem(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">                location.href=<span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 查询所有省份</span></span><br><span class=\"line\">            listAll(page)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.page = page;</span><br><span class=\"line\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/listByPage?page=\"</span>+<span class=\"keyword\">this</span>.page)</span><br><span class=\"line\">                .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.provinces = res.data.provinces;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.page = res.data.page;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.total = res.data.total;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.totalPage = res.data.totalPage;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created()&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否登录</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isLogin();</span><br><span class=\"line\">            <span class=\"comment\">// 显示当前日期</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.showDate();</span><br><span class=\"line\">            <span class=\"comment\">// 查询所有省份</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.listAll(<span class=\"keyword\">this</span>.page);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历当前查询到的信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"province in provinces\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"province.id\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"province.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"province.name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"province.tags\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"province.placecounts\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>分页控件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pages\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"page!=1\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"listAll(page-1)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"page==1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"num in totalPage\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>  <span class=\"attr\">v-if</span>=<span class=\"string\">\"num!=page\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"listAll(num)\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>  <span class=\"attr\">v-if</span>=<span class=\"string\">\"num==page\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"num\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"page!=totalPage\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"listAll(page+1)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span>下一页<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"page==totalPage\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page\"</span>&gt;</span>下一页<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加省份\"><a href=\"#添加省份\" class=\"headerlink\" title=\"添加省份\"></a>添加省份</h4><blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  添加省份  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Province\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">    insert into t_province values(#&#123;id&#125;,#&#123;name&#125;,#&#123;tags&#125;,#&#123;placecounts&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  根据名称查省份  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryByName\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Province\"</span>&gt;</span></span><br><span class=\"line\">    select id,name,tags,placecounts from t_province where name=#&#123;name&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Province province)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入省份！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getTags()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入标签！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getPlacecounts()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入景点数量！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Province realProvince = provinceDao.queryByName(province.getName());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ObjectUtils.isEmpty(realProvince))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"该省份已存在！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    provinceDao.add(province);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加省份</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> province</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"add\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">add</span><span class=\"params\">(@RequestBody Province province)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        provinceService.add(province);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：添加成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<p>省份管理页：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toAdd\"</span> &gt;</span>添加省份<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳转添加页面</span></span><br><span class=\"line\">toAdd()&#123;</span><br><span class=\"line\">    location.href=<span class=\"string\">\"addprovince.html\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加页：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加省份方法</span></span><br><span class=\"line\">add() &#123;</span><br><span class=\"line\">    axios.post(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/add\"</span>, <span class=\"keyword\">this</span>.province)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.confirm(res.data.msg + <span class=\"string\">\"点击确定跳转管理页面\"</span>)) &#123;</span><br><span class=\"line\">                    location.href = <span class=\"string\">\"provincelist.html\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    location.reload();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                alert(res.data.msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除省份\"><a href=\"#删除省份\" class=\"headerlink\" title=\"删除省份\"></a>删除省份</h4><blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  删除省份  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span>&gt;</span></span><br><span class=\"line\">    delete from t_province where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>serivce</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    provinceDao.delete(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除省份</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"delete\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        provinceService.delete(id);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：删除成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：删除失败\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>前端</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deletePro(province.id)\"</span>&gt;</span>删除省份<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除省份</span></span><br><span class=\"line\">deletePro(id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.confirm(<span class=\"string\">\"确定删除吗？\"</span>)) &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/delete?id=\"</span>+id)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                    alert(res.data.msg);</span><br><span class=\"line\">                    location.reload();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    alert(res.data.msg);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改省份\"><a href=\"#修改省份\" class=\"headerlink\" title=\"修改省份\"></a>修改省份</h4><blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  根据id查询省份  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Province\"</span>&gt;</span></span><br><span class=\"line\">    select id,name,tags,placecounts from t_province where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  修改省份  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Province\"</span>&gt;</span></span><br><span class=\"line\">    update t_province set name=#&#123;name&#125;,tags=#&#123;tags&#125;,placecounts=#&#123;placecounts&#125;</span><br><span class=\"line\">    where id=#&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Province province)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入省份！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getTags()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入标签！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(province.getPlacecounts()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入景点数量！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    provinceDao.update(province);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Province <span class=\"title\">queryById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provinceDao.queryById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改省份</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> province</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">update</span><span class=\"params\">(@RequestBody Province province)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        provinceService.update(province);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：修改成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取省份</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"getProvince\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Province <span class=\"title\">getProvince</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    Province province = provinceService.queryById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> province;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<p>管理页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toUpdate(province.id)\"</span>&gt;</span>修改省份<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳转修改页面</span></span><br><span class=\"line\">toUpdate(id) &#123;</span><br><span class=\"line\">    location.href = <span class=\"string\">\"updateprovince.html?id=\"</span> + id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"update\"</span>&gt;</span>修 改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"symbol\">&amp;emsp;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">            province: &#123;&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期方法</span></span></span><br><span class=\"line\">            showDate() &#123;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">this</span>.date = realDate.getFullYear() + <span class=\"string\">\"/\"</span> + (realDate.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + realDate.getDate();</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 根据id查询当前省份</span></span></span><br><span class=\"line\">            getProvince()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 获取id</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> start = location.href.lastIndexOf(<span class=\"string\">\"=\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> id = location.href.substring(start+<span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/getProvince?id=\"</span>+id)</span></span><br><span class=\"line\"><span class=\"javascript\">                    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        <span class=\"comment\">// console.log(res.data);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                        <span class=\"keyword\">this</span>.province = res.data;</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 修改省份方法</span></span></span><br><span class=\"line\">            update() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                axios.post(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/update\"</span>, <span class=\"keyword\">this</span>.province)</span></span><br><span class=\"line\"><span class=\"javascript\">                    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\">                        if (res.data.status) &#123;</span><br><span class=\"line\">                            alert(res.data.msg);</span><br><span class=\"line\"><span class=\"actionscript\">                            location.href = <span class=\"string\">\"provincelist.html\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\">                            alert(res.data.msg);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.showDate();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 查询当前省份的信息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.getProvince();</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"景点模块\"><a href=\"#景点模块\" class=\"headerlink\" title=\"景点模块\"></a>景点模块</h3><h4 id=\"根据省份展示该省份的所有景点\"><a href=\"#根据省份展示该省份的所有景点\" class=\"headerlink\" title=\"根据省份展示该省份的所有景点\"></a>根据省份展示该省份的所有景点</h4><blockquote>\n<p>创建实体类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Place</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String picpath;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double hotticket;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double dimticket;<span class=\"comment\">// 淡季门票</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String details;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String provinceid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>dao层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlaceDao</span>  <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span>&lt;<span class=\"title\">Place</span>,<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据省份id进行分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rows</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provinceId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Place&gt; <span class=\"title\">listByProvinceId</span><span class=\"params\">(Integer start,Integer rows,String provinceId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据省份查询景点总数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provinceId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">findTotalByProvinceId</span><span class=\"params\">(String provinceId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zyz.dao.PlaceDao\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 分页查询当前省份的所有景点信息并排序  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listByProvinceId\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Place\"</span>&gt;</span></span><br><span class=\"line\">        select id,name,picpath,hotticket,dimticket,details,provinceid</span><br><span class=\"line\">        from t_place where provinceid = #&#123;provinceId&#125;</span><br><span class=\"line\">        order by hotticket</span><br><span class=\"line\">        limit #&#123;start&#125;,#&#123;rows&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 查询当前省份的景点的个数   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findTotalByProvinceId\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Integer\"</span>&gt;</span></span><br><span class=\"line\">        select count(*) from t_place where provinceid=#&#123;provinceId&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>serivce层</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlaceService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据省份id进行分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rows</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provinceId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Place&gt; <span class=\"title\">listByProvinceId</span><span class=\"params\">(Integer page, Integer rows, String provinceId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据省份查询景点总数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provinceId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">findTotalByProvinceId</span><span class=\"params\">(String provinceId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaceServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PlaceService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlaceDao placeDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProvinceDao provinceDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Place&gt; <span class=\"title\">listByProvinceId</span><span class=\"params\">(Integer page, Integer rows, String provinceId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = (page-<span class=\"number\">1</span>)*rows;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> placeDao.listByProvinceId(start,rows,provinceId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">findTotalByProvinceId</span><span class=\"params\">(String provinceId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> placeDao.findTotalByProvinceId(provinceId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"place\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaceController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlaceService placeService;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示所有景点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rows</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provinceId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"listAll\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">listAll</span><span class=\"params\">(Integer page, Integer rows, String provinceId)</span> </span>&#123;</span><br><span class=\"line\">        page = page == <span class=\"keyword\">null</span> ? <span class=\"number\">1</span> : page;</span><br><span class=\"line\">        rows = rows == <span class=\"keyword\">null</span> ? <span class=\"number\">3</span> : rows;</span><br><span class=\"line\">        <span class=\"comment\">// 总记录数</span></span><br><span class=\"line\">        Integer total = placeService.findTotalByProvinceId(provinceId);</span><br><span class=\"line\">        <span class=\"comment\">// 总页数</span></span><br><span class=\"line\">        Integer totalPage = total % rows == <span class=\"number\">0</span> ? total / rows : (total / rows) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 景点信息</span></span><br><span class=\"line\">        List&lt;Place&gt; places = placeService.listByProvinceId(page, rows, provinceId);</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"total\"</span>, total);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"totalPage\"</span>, totalPage);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"places\"</span>, places);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"page\"</span>, page);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增加景点\"><a href=\"#增加景点\" class=\"headerlink\" title=\"增加景点\"></a>增加景点</h4><blockquote>\n<p>dao层</p>\n<p>继承了BaseDao中的增删改方法，以及添加所需要的判断景点是否已经存在 的queryByName()方法，修改所需要的回显当前景点信息的queryById()方法，因此只需要编写对应的mapper文件就行</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加景点--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"Place\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">    insert into t_place</span><br><span class=\"line\">    values(#&#123;id&#125;,#&#123;name&#125;,#&#123;picpath&#125;,#&#123;hotticket&#125;,#&#123;dimticket&#125;,#&#123;details&#125;,#&#123;provinceid&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  根据名称查询景点  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryByName\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Place\"</span>&gt;</span></span><br><span class=\"line\">    select id,name,picpath,hotticket,dimticket,details,provinceid</span><br><span class=\"line\">    from t_place where name = #&#123;name&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service层，添加add()方法并实现</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Place place)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Place place)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入景点名！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getHotticket()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入旺季门票价格！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getDimticket()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入淡季门票价格！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getProvinceid()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请选择省份！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Place place1= placeDao.queryByName(place.getName());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ObjectUtils.isEmpty(place1))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"该景点已存在！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新此景点省份的景点数量</span></span><br><span class=\"line\">    Province province = provinceDao.queryById(place.getProvinceid());</span><br><span class=\"line\">    province.setPlacecounts(province.getPlacecounts()+<span class=\"number\">1</span>);</span><br><span class=\"line\">    provinceDao.update(province);</span><br><span class=\"line\">    placeDao.add(place);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller层 编写处理添加请求的方法</p>\n</blockquote>\n<p>配置文件上传路径：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件上传路径</span></span><br><span class=\"line\"><span class=\"attr\">upload:</span></span><br><span class=\"line\">  <span class=\"attr\">dir:</span> <span class=\"string\">D:\\img</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注入文件上传路径</span></span><br><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;upload.dir&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String uploadPath;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 添加景点</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> place</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"add\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">add</span><span class=\"params\">(Place place, MultipartFile file)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(file)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 修改文件名</span></span><br><span class=\"line\">            String filename = UUID.randomUUID().toString()+<span class=\"string\">\".\"</span></span><br><span class=\"line\">                + FilenameUtils.getExtension(file.getOriginalFilename());</span><br><span class=\"line\">            <span class=\"comment\">// 将文件转换为base64格式存储到数据库中</span></span><br><span class=\"line\">            place.setPicpath(Base64Utils.encodeToString(file.getBytes()));</span><br><span class=\"line\">            placeService.add(place);</span><br><span class=\"line\">            <span class=\"comment\">// 文件上传</span></span><br><span class=\"line\">            file.transferTo(<span class=\"keyword\">new</span> File(uploadPath,filename));</span><br><span class=\"line\">            map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：添加成功！\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请上传图片！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"提示\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改前端页面</p>\n</blockquote>\n<p>携带省份id跳转到添加页面，便于返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">toAdd()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = location.href.indexOf(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> provinceid = location.href.substring(start+<span class=\"number\">1</span>);</span><br><span class=\"line\">    location.href = <span class=\"string\">\"addviewspot.html?provinceid=\"</span>+provinceid;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">            provinces: [],</span><br><span class=\"line\">            place: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                name: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                picpath: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                hotticket: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                dimticket: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                details: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                provinceid: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                myfile: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 判断是否登录</span></span></span><br><span class=\"line\">            isLogin() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> user = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    alert(<span class=\"string\">\"请登录！\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                    location.href = <span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span>;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\">            showDate() &#123;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">this</span>.date = realDate.getFullYear() + <span class=\"string\">\"/\"</span> + (realDate.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + realDate.getDate();</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 查询省份</span></span></span><br><span class=\"line\">            listAllProvince() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/listByPage?rows=35\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        <span class=\"comment\">//console.log(res.data.provinces);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                        <span class=\"keyword\">this</span>.provinces = res.data.provinces;</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 添加景点</span></span></span><br><span class=\"line\">            add() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 构造表单</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"name\"</span>, <span class=\"keyword\">this</span>.place.name);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"hotticket\"</span>, <span class=\"keyword\">this</span>.place.hotticket);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"dimticket\"</span>, <span class=\"keyword\">this</span>.place.dimticket);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"provinceid\"</span>, <span class=\"keyword\">this</span>.place.provinceid);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"details\"</span>, <span class=\"keyword\">this</span>.place.details);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"file\"</span>, <span class=\"keyword\">this</span>.$refs.myfile.files[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(formData);</span></span><br><span class=\"line\">                axios(&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    method: <span class=\"string\">\"post\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    url: <span class=\"string\">\"http://localhost:8080/travelsAdmin/place/add\"</span>,</span></span><br><span class=\"line\">                    data: formData,</span><br><span class=\"line\"><span class=\"actionscript\">                    headers: &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span>&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span><br><span class=\"line\">                    if (res.data.status) &#123;</span><br><span class=\"line\"><span class=\"javascript\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.confirm(res.data.msg + <span class=\"string\">\"点击确定跳转景点管理页面\"</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                            location.href = <span class=\"string\">\"viewspotlist.html?provinceid=\"</span> + <span class=\"keyword\">this</span>.place.provinceid;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\">                            location.reload();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">                    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                        alert(res.data.msg + <span class=\"string\">\"点击确定重新添加\"</span>)</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            back() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> start = location.href.indexOf(<span class=\"string\">\"=\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> provinceid = location.href.substring(start + <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                location.href = <span class=\"string\">\"viewspotlist.html?provinceid=\"</span> + provinceid;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 判断是否登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.isLogin();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.showDate();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 查询所有省份</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.listAllProvince();</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除景点\"><a href=\"#删除景点\" class=\"headerlink\" title=\"删除景点\"></a>删除景点</h4><blockquote>\n<p>dao</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 删除景点   --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span>&gt;</span></span><br><span class=\"line\">    delete from t_place where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  根据id查询景点信息  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"Place\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"String\"</span>&gt;</span></span><br><span class=\"line\">    select id,name,picpath,hotticket,dimticket,details,provinceid</span><br><span class=\"line\">    from t_place</span><br><span class=\"line\">    where id =#&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>service</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">void <span class=\"keyword\">delete</span>(<span class=\"keyword\">String</span> <span class=\"keyword\">id</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 该景点的省份景点数-1</span></span><br><span class=\"line\">    <span class=\"comment\">// 先查询该景点的所有信息</span></span><br><span class=\"line\">    Place place = placeDao.queryById(id);</span><br><span class=\"line\">    <span class=\"comment\">// 查询该景点所在省份的信息</span></span><br><span class=\"line\">    Province province = provinceDao.queryById(place.getProvinceid());</span><br><span class=\"line\">    <span class=\"comment\">// 更新该省份的景点数</span></span><br><span class=\"line\">    province.setPlacecounts(province.getPlacecounts()-<span class=\"number\">1</span>);</span><br><span class=\"line\">    provinceDao.update(province);</span><br><span class=\"line\">    <span class=\"comment\">// 删除景点</span></span><br><span class=\"line\">    placeDao.delete(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除景点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"delete\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">delete</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        placeService.delete(id);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：删除成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">deletePlace(id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.confirm(<span class=\"string\">\"确定删除此景点吗？\"</span>)) &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/place/delete?id=\"</span> + id)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res.data.status) &#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">\"删除成功！\"</span>);</span><br><span class=\"line\">                    location.reload();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改景点信息\"><a href=\"#修改景点信息\" class=\"headerlink\" title=\"修改景点信息\"></a>修改景点信息</h4><blockquote>\n<p>service </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Place <span class=\"title\">queryById</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Place place)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Place <span class=\"title\">queryById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> placeDao.queryById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Place place)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getName()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入景点名！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getHotticket()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入旺季门票价格！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StringUtils.isEmpty(place.getDimticket()))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"请输入淡季门票价格！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    placeDao.update(place);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>controller</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询景点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"queryById\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Place <span class=\"title\">queryById</span><span class=\"params\">(String id )</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> placeService.queryById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改景点信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> place</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> photo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title\">update</span><span class=\"params\">(Place place,MultipartFile photo)</span></span>&#123;</span><br><span class=\"line\">    HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ObjectUtils.isEmpty(photo))&#123;</span><br><span class=\"line\">            String filename = UUID.randomUUID().toString()+<span class=\"string\">\".\"</span></span><br><span class=\"line\">                    +FilenameUtils.getExtension(photo.getOriginalFilename());</span><br><span class=\"line\">            <span class=\"comment\">// 更新picpath</span></span><br><span class=\"line\">            place.setPicpath(Base64Utils.encodeToString(photo.getBytes()));</span><br><span class=\"line\">            <span class=\"comment\">// 上传到指定路径</span></span><br><span class=\"line\">            photo.transferTo(<span class=\"keyword\">new</span> File(uploadPath,filename));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存至数据库</span></span><br><span class=\"line\">        placeService.update(place);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：修改成功！\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"status\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"提示：\"</span>+ e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>前端</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">\"#wrap\"</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            date: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            id: <span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">            place: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                name:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                picpath:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                hotticket:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                dimticket:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                details:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                provinceid:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                myfile:<span class=\"string\">\"\"</span></span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            provinces: [],</span><br><span class=\"line\"><span class=\"actionscript\">            src:<span class=\"string\">\"\"</span>,</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 判断是否登录</span></span></span><br><span class=\"line\">            isLogin() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> user = localStorage.getItem(<span class=\"string\">\"user\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    alert(<span class=\"string\">\"请登录！\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                    location.href = <span class=\"string\">\"http://localhost:8080/travelsAdmin/login.html\"</span>;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\">            showDate() &#123;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> realDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">this</span>.date = realDate.getFullYear() + <span class=\"string\">\"/\"</span> + (realDate.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + realDate.getDate();</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            showView()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"comment\">// 获取id</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> start = location.href.indexOf(<span class=\"string\">\"=\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> id = location.href.substring(start+<span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/place/queryById?id=\"</span>+id)</span></span><br><span class=\"line\"><span class=\"javascript\">                .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// console.log(res.data);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.place = res.data;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"comment\">// 显示图片</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.src = <span class=\"string\">\"data:image/png;base64,\"</span>+<span class=\"keyword\">this</span>.place.picpath;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.id = id;</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            queryProvinces()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                axios.get(<span class=\"string\">\"http://localhost:8080/travelsAdmin/province/listByPage?rows=35\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">                .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">this</span>.provinces = res.data.provinces;</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            back()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                location.href=<span class=\"string\">\"viewspotlist.html?provinceid=\"</span>+<span class=\"keyword\">this</span>.place.provinceid;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            updatePlace()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"id\"</span>,<span class=\"keyword\">this</span>.place.id);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"name\"</span>,<span class=\"keyword\">this</span>.place.name);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"picpath\"</span>,<span class=\"keyword\">this</span>.place.picpath);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"photo\"</span>,<span class=\"keyword\">this</span>.$refs.myfile.files[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"hotticket\"</span>,<span class=\"keyword\">this</span>.place.hotticket);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"dimticket\"</span>,<span class=\"keyword\">this</span>.place.dimticket);</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"provinceid\"</span>,<span class=\"keyword\">this</span>.place.provinceid)</span></span><br><span class=\"line\"><span class=\"actionscript\">                formData.append(<span class=\"string\">\"details\"</span>,<span class=\"keyword\">this</span>.place.details)</span></span><br><span class=\"line\">                axios(&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                    method: <span class=\"string\">\"post\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">                    url: <span class=\"string\">\"http://localhost:8080/travelsAdmin/place/update\"</span>,</span></span><br><span class=\"line\">                    data: formData,</span><br><span class=\"line\"><span class=\"actionscript\">                    headers:&#123;<span class=\"string\">'content-type'</span>:<span class=\"string\">'multipart/formdata'</span>&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span><br><span class=\"line\">                    if(res.data.status)&#123;</span><br><span class=\"line\"><span class=\"actionscript\">                        alert(res.data.msg+<span class=\"string\">\"点击确定跳转景点管理页面\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                        location.href = <span class=\"string\">\"viewspotlist.html?provinceid=\"</span>+<span class=\"keyword\">this</span>.place.provinceid;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\">                        alert(res.data.msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 判断是否登录</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.isLogin();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前日期</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.showDate();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 显示当前待修改景点的信息</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.queryProvinces();</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">this</span>.showView();</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>图片上传与显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgfileChange</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> img_show = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"img-show\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> imgfile = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"imgfile\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> freader = <span class=\"keyword\">new</span> FileReader();</span></span><br><span class=\"line\">        freader.readAsDataURL(imgfile.files[0]);</span><br><span class=\"line\"><span class=\"actionscript\">        freader.onload = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>&#123;</span></span><br><span class=\"line\">            img_show.src = e.target.result;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-text\"</span>&gt;</span>印象图片：<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center;padding-left: 36%\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"src\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img-show\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgfile\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"imgfileChange()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">ref</span>=<span class=\"string\">\"myfile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>省份选择框：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-text\"</span>&gt;</span>所属省份：<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ofprovince\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"place.provinceid\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 25px;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span>&gt;</span>请选择省份<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"pro in provinces\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"pro.name\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"pro.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Redis作为Mybatis的缓存\"><a href=\"#使用Redis作为Mybatis的缓存\" class=\"headerlink\" title=\"使用Redis作为Mybatis的缓存\"></a>使用Redis作为Mybatis的缓存</h3><p>1、配置Redis地址和端口</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>2、实现mybatis中的Cache接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.cache;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisCache</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedisCache</span><span class=\"params\">( String id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取RedisTemplate</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title\">getRedisTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        RedisTemplate template =(RedisTemplate) ApplicationContextUtils.getBean(<span class=\"string\">\"redisTemplate\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将数据存入Redis</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putObject</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        getRedisTemplate().opsForHash().put(id,key.toString(),value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从Redis中获取数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObject</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRedisTemplate().opsForHash().get(id,key.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定缓存信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">removeObject</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRedisTemplate().opsForHash().delete(id,key.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除缓存</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getRedisTemplate().delete(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取数据大小</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getRedisTemplate().opsForValue().size(id).intValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>工具类ApplicationContextUtils获取工厂实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyz.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextUtils</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前工厂</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取工厂中的实现类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在mapper文件中添加自定义的Redis缓存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.zyz.cache.RedisCache\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、存储在Redis中的实体类必须实现Serializable接口<br><img src=\"/2020/08/17/project-02/2.png\" alt></p>\n<h1 id=\"主要界面\"><a href=\"#主要界面\" class=\"headerlink\" title=\"主要界面\"></a>主要界面</h1><blockquote>\n<p>用户模块</p>\n</blockquote>\n<p><img src=\"/2020/08/17/project-02/3.png\" alt></p>\n<p><img src=\"/2020/08/17/project-02/4.png\" alt></p>\n<blockquote>\n<p>省份模块</p>\n</blockquote>\n<p><img src=\"/2020/08/17/project-02/5.png\" alt></p>\n<p><img src=\"/2020/08/17/project-02/6.png\" alt></p>\n<p><img src=\"/2020/08/17/project-02/7.png\" alt></p>\n<blockquote>\n<p>景点模块</p>\n</blockquote>\n<p><img src=\"/2020/08/17/project-02/8.png\" alt></p>\n<p><img src=\"/2020/08/17/project-02/9.png\" alt></p>\n<p><img src=\"/2020/08/17/project-02/10.png\" alt></p>\n<h1 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h1><p>做了什么？</p>\n<ul>\n<li>管理员的注册和登录</li>\n<li>省份信息的增删改查</li>\n<li>景点信息的增删改查</li>\n</ul>\n<p>学到了什么？</p>\n<ul>\n<li>在前后端分离中分页查询功能的实现</li>\n<li>使用mysql中的meduimtext数据类型存储图片，图片需要先进行base64编码然后存进数据库</li>\n<li>vue中选择框的数据双向绑定</li>\n</ul>\n<p>遇到的问题？怎么解决的？</p>\n<ul>\n<li>在完成添加景点功能时，在浏览器端调试总是出现undefined的错误，仔细与之前的添加功能相比，此添加功能涉及到了文件的上传，需要构造表单，然后在表单中添加数据  <img src=\"/2020/08/17/project-02/11.png\" style=\"zoom:80%;\">\n\n\n</li>\n</ul>\n<pre><code>&lt;img src=&quot;project-02/12.png&quot; style=&quot;zoom:80%;&quot; /&gt;</code></pre><ul>\n<li><p>在修改景点信息时，提交一直显示图片未上传，仔细读出现不难发现，如果在修改景点信息时沿用添加景点时的那种方式，<img src=\"/2020/08/17/project-02/13.png\" alt><br>  所以一直显示图片未上传，只要修改一下判断逻辑就可以了，在判断没有修改图片时直接更新，修改图片后进行重命名，文件上传然后更新<br>  <img src=\"/2020/08/17/project-02/14.png\" alt>  </p>\n</li>\n<li><p>景点省份为空<br>  <img src=\"/2020/08/17/project-02/15.png\" alt></p>\n</li>\n</ul>\n","categories":["Java项目"],"tags":["SpringBoot","Vue"]},{"title":"书城项目","url":"/2020/04/08/javaweb-02/","content":"<h2 id=\"一、创建项目所需要的包\"><a href=\"#一、创建项目所需要的包\" class=\"headerlink\" title=\"一、创建项目所需要的包\"></a>一、创建项目所需要的包</h2><p>各个层所对应的包名：<a id=\"more\"></a><br>web层：<br>com.bookmall.web/servlet/controller<br>service层：<br>com.bookmall.service&nbsp;&nbsp;&nbsp;Service接口包<br>com.bookmall.service.impl&nbsp;&nbsp;&nbsp;Service接口实现类<br>dao层：<br>com.bookmall.dao&nbsp;&nbsp;&nbsp;Dao接口包<br>com.bookmall.dao.impl&nbsp;&nbsp;&nbsp;Dao接口实现类<br>实体bean对象：<br>com.bookmall.pojo/entity/domain/bean&nbsp;&nbsp;&nbsp;JavaBean类<br>测试包：<br>com.bookmall.test/junit<br>工具包：<br>com.bookmall.utils<br><img src=\"/2020/04/08/javaweb-02/1.png\" alt></p>\n<h2 id=\"二、创建需要的数据库和表\"><a href=\"#二、创建需要的数据库和表\" class=\"headerlink\" title=\"二、创建需要的数据库和表\"></a>二、创建需要的数据库和表</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> bookmall;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USE</span> bookmall;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> userinfo(</span><br><span class=\"line\">\t <span class=\"string\">`id`</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span> auto_increment,</span><br><span class=\"line\">\t <span class=\"string\">`username`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t <span class=\"string\">`password`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`email`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">40</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span>  <span class=\"keyword\">INTO</span> userinfo(<span class=\"string\">`username`</span>,<span class=\"string\">`password`</span>,<span class=\"string\">`email`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">'admin'</span>,<span class=\"string\">'123456'</span>,<span class=\"string\">'admin@qq.com'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> userinfo;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、编写数据库表对应的-JavaBean-对象\"><a href=\"#三、编写数据库表对应的-JavaBean-对象\" class=\"headerlink\" title=\"三、编写数据库表对应的 JavaBean 对象\"></a>三、编写数据库表对应的 JavaBean 对象</h2><p>在com.bookmall.bean包下创建User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id, String username, String password, String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", password='\"</span> + password + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", email='\"</span> + email + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、编写工具类JdbcUtils并测试\"><a href=\"#四、编写工具类JdbcUtils并测试\" class=\"headerlink\" title=\"四、编写工具类JdbcUtils并测试\"></a>四、编写工具类JdbcUtils并测试</h2><p>1.首先导入所需要的jar包：<br><img src=\"/2020/04/08/javaweb-02/2.png\" alt></p>\n<p>2.在src目录下创建jdbc.properties 配置文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">2824199842</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/bookmall?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>3.在com.bookmall.utils下创建 JdbcUtils 类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DruidDataSource dataSource;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            <span class=\"comment\">// 创建输入流 读取jdbc.properties属性配置文件</span></span><br><span class=\"line\">            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");</span><br><span class=\"line\">            <span class=\"comment\">// 从流中加载数据</span></span><br><span class=\"line\">            properties.load(inputStream);</span><br><span class=\"line\">            <span class=\"comment\">// 创建数据库连接池</span></span><br><span class=\"line\">            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取数据库连接池中的连接</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回连接  否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = dataSource.getConnection();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭连接，放回数据库连接池</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> conn</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                conn.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.在com.bookmall.test包下创建JdbcUtilsTest类，测试是否连接成功：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtilsTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJdbcUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        System.out.println(conn);</span><br><span class=\"line\">        JdbcUtils.close(conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、编写BaseDao\"><a href=\"#五、编写BaseDao\" class=\"headerlink\" title=\"五、编写BaseDao\"></a>五、编写BaseDao</h2><p>1.导入DBUtils 的jar包：<br><img src=\"/2020/04/08/javaweb-02/4.png\" alt></p>\n<p>2.在com.bookmall.dao.impl包下创建BaseDao抽象类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用dbutils操作数据库</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> QueryRunner queryRunner = <span class=\"keyword\">new</span> QueryRunner();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 执行增删改方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sql 要执行的sql语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args 要填充的占位符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回受影响的行数，否则执行失败，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(String sql,Object ... args)</span></span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryRunner.update(conn,sql,args);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 执行返回一条结果的查询语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 返回的对象类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sql 要执行的sql语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args 要填充的占位符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 返回的类型的泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回一个指定类型的对象，否则执行失败，返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">queryForOne</span><span class=\"params\">(Class&lt;T&gt; type,String sql,Object ... args)</span></span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        <span class=\"comment\">// BeanHandler是ResultSetHandler接口的一个实现类，用于封装表中的一条记录</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryRunner.query(conn,sql,<span class=\"keyword\">new</span> BeanHandler&lt;T&gt;(type),args);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 执行返回多条结果的查询语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 返回的对象类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sql 要执行的sql语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args 要填充的占位符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 返回的类型的泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回一个指定类型的对象的列表，否则执行失败，返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">queryForList</span><span class=\"params\">(Class&lt;T&gt; type, String sql, Object ... args)</span></span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryRunner.query(conn,sql,<span class=\"keyword\">new</span> BeanListHandler&lt;T&gt;(type),args);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            JdbcUtils.close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 执行返回特殊值（一行一列）的查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sql 要执行的sql语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args 要填充的占位符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回一个值，否则执行失败，返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">queryForSingleValue</span><span class=\"params\">(String sql, Object ... args)</span></span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        <span class=\"comment\">// ScalarHandler将单个值封装</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryRunner.query(conn,sql,<span class=\"keyword\">new</span> ScalarHandler(),args);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            JdbcUtils.close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、编写UserDao接口并测试\"><a href=\"#六、编写UserDao接口并测试\" class=\"headerlink\" title=\"六、编写UserDao接口并测试\"></a>六、编写UserDao接口并测试</h2><p>1.在com.bookmall.dao包下编写UserDao 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据用户名查询用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username 用户名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回User对象，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryUserByUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user User对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功，返回受影响的行数，否则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *根据用户名和密码查询用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> password</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行成功返回User对象，否则返回null说明用户名或密码错误</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryUserByUsernameAndPassword</span><span class=\"params\">(String username,String password)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在com.bookmall.dao包下编写UserDao接口实现类UserDaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.book.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryUserByUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `id`,`username`,`password`,`email` from userinfo where username = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForOne(User<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">sql</span>, <span class=\"title\">username</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into userinfo(`username`,`password`,`email`)value(?,?,?)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql, user.getUsername(), user.getPassword(), user.getEmail());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryUserByUsernameAndPassword</span><span class=\"params\">(String username, String password)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `id`,`username`,`password`,`email` from userInfo where username = ? and password = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForOne(User<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">sql</span>, <span class=\"title\">username</span>, <span class=\"title\">password</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在com.bookmall.test包下创建UserDaoImplTest测试类(UserDaoImpl类下按ctrl+shift+t快速创建测试类)，测试UserDaoImpl类中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImplTest</span> </span>&#123;</span><br><span class=\"line\">    UserDao userDao = <span class=\"keyword\">new</span> UserDaoImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryUserByUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userDao.queryUserByUsername(<span class=\"string\">\"admin\"</span>)!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"用户名可用\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"用户名已存在\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(userDao.saveUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,<span class=\"string\">\"大司马\"</span>,<span class=\"string\">\"123456\"</span>,<span class=\"string\">\"dsm@qq.com\"</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryUserByUsernameAndPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userDao.queryUserByUsernameAndPassword(<span class=\"string\">\"admin\"</span>,<span class=\"string\">\"123456\"</span>) == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"用户名或密码错误，登录失败！\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"登录成功！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、编写UserService并测试\"><a href=\"#七、编写UserService并测试\" class=\"headerlink\" title=\"七、编写UserService并测试\"></a>七、编写UserService并测试</h2><p>1.在com.bookmall.service包下创建UserService接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户注册</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registUser</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> user</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查用户名是否可用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> username</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回true，表示用户已存在，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">existUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在com.bookmall.service.impl创建UserService接口实现类UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao = <span class=\"keyword\">new</span> UserDaoImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        userDao.saveUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDao.queryUserByUsernameAndPassword(user.getUsername(),user.getPassword());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">existUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userDao.queryUserByUsername(username)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 为null表示不存在，表示可以使用</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在com.bookmall.test包下创建测试类UserServiceImplTest，测试UserServiceImpl中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImplTest</span> </span>&#123;</span><br><span class=\"line\">    UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userService.registUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,<span class=\"string\">\"张伟\"</span>,<span class=\"string\">\"123456\"</span>,<span class=\"string\">\"zw@126.com\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(userService.login(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,<span class=\"string\">\"zyz\"</span>,<span class=\"string\">\"123456\"</span>,<span class=\"keyword\">null</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">existUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(userService.existUsername(<span class=\"string\">\"zyz\"</span>));<span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、编写Web层\"><a href=\"#八、编写Web层\" class=\"headerlink\" title=\"八、编写Web层\"></a>八、编写Web层</h2><h3 id=\"1-实现注册功能\"><a href=\"#1-实现注册功能\" class=\"headerlink\" title=\"1.实现注册功能\"></a>1.实现注册功能</h3><p>在com.bookmall.web中创建RegistServlet类<br>在web.xml文件中配置文件路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>RegistServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.bookmall.web.RegistServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>RegistServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/registServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        String email = req.getParameter(<span class=\"string\">\"email\"</span>);</span><br><span class=\"line\">        String code = req.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.检查验证码是否正确====先写死为qwer</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"qwer\"</span>.equalsIgnoreCase(code))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 验证码正确</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.检查用户名是否可用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(userService.existUsername(username))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// true 用户名已存在</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"用户名[\"</span>+username+<span class=\"string\">\"]已存在！\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.html\"</span>).forward(req,resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// false 用户名不存在  可以注册</span></span><br><span class=\"line\">                userService.registUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,username,password,email));</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到注册成功页面</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist_success.html\"</span>).forward(req,resp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">// 验证码错误</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"验证码[\"</span>+code+<span class=\"string\">\"]错误！\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.html\"</span>).forward(req,resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现登录功能\"><a href=\"#2-实现登录功能\" class=\"headerlink\" title=\"2.实现登录功能\"></a>2.实现登录功能</h3><p>在com.bookmall.web中创建LogintServlet类<br>在web.xml文件中配置文件路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.bookmall.web.LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/loginServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        User loginUser = userService.login(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,username, password, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(loginUser==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"登录失败！\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login.html\"</span>).forward(req,resp);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录成功！\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到登录成功页面</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login_success.html\"</span>).forward(req,resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、优化代码\"><a href=\"#九、优化代码\" class=\"headerlink\" title=\"九、优化代码\"></a>九、优化代码</h2><h3 id=\"1-将多个页面中重复的代码抽取出来：\"><a href=\"#1-将多个页面中重复的代码抽取出来：\" class=\"headerlink\" title=\"1.将多个页面中重复的代码抽取出来：\"></a>1.将多个页面中重复的代码抽取出来：</h3><p><strong>写入单独的jsp文件中</strong><br><img src=\"/2020/04/08/javaweb-02/5.png\" alt></p>\n<p>footer.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bottom\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         尚硅谷书城.Copyright <span class=\"symbol\">&amp;copy;</span>2015</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>header.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">String</span> <span class=\"attr\">basePath</span> = <span class=\"string\">request.getContextPath()+</span>\"/\";%&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- base标签永远固定相对路径跳转  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%=basePath%&gt;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"static/css/style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"static/script/jquery-3.4.1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>login_success_menu.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>欢迎<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"um_span\"</span>&gt;</span>张总<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>光临尚硅谷书城<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/order/order.jsp\"</span>&gt;</span>我的订单<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.jsp\"</span>&gt;</span>注销<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.jsp\"</span>&gt;</span>返回<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>manage_menu.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"book_manager\"</span>&gt;</span>图书管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"order_manager\"</span>&gt;</span>订单管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.jsp\"</span>&gt;</span>返回商城<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>采用静态包含的方式替换重复的代码：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%--</span> 静态包含 页脚内容<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/footer.jsp\"</span>%&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span> 静态包含 <span class=\"attr\">base</span>标签、<span class=\"attr\">css</span>样式、<span class=\"attr\">jquery</span>文件<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/head.jsp\"</span>%&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%--</span> 静态包含 成功之后的菜单<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/login_sucess_menu.jsp\"</span>%</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%--</span> 静态包含 管理菜单<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/manage_menu.jsp\"</span>%&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-登录、注册错误提示以及表单回显\"><a href=\"#2-登录、注册错误提示以及表单回显\" class=\"headerlink\" title=\"2.登录、注册错误提示以及表单回显\"></a>2.登录、注册错误提示以及表单回显</h3><p>LoginServlet.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        User loginUser = userService.login(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>, username, password, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loginUser == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(\"登录失败！\");</span></span><br><span class=\"line\">            <span class=\"comment\">// 将要回显的错误信息保存到request域中</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"用户名或密码错误！\"</span>);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"username\"</span>,username);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"登录成功！\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到登录成功页面</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login_success.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>login.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"msg_cont\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errorMsg\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">request.getAttribute</span>(\"<span class=\"attr\">msg</span>\")==<span class=\"string\">null?</span>\"请输入用户名和密码\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">msg</span>\")</span></span><br><span class=\"line\"><span class=\"tag\">      %&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itxt\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">username</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">username</span>\")%&gt;</span>\"/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>RegistServlet.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        String email = req.getParameter(<span class=\"string\">\"email\"</span>);</span><br><span class=\"line\">        String code = req.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.检查验证码是否正确====先写死为qwer</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"qwer\"</span>.equalsIgnoreCase(code))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 验证码正确</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.检查用户名是否可用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(userService.existUsername(username))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// true 用户名已存在</span></span><br><span class=\"line\">                <span class=\"comment\">// System.out.println(\"用户名[\"+username+\"]已存在！\");</span></span><br><span class=\"line\">                <span class=\"comment\">// 把回显信息保存到request域中</span></span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"用户名已存在！\"</span>);</span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"username\"</span>,username);</span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"email\"</span>,email);</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// false 用户名不存在  可以注册</span></span><br><span class=\"line\">                userService.registUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>,username,password,email));</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到注册成功页面</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist_success.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">// 验证码错误</span></span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(\"验证码[\"+code+\"]错误！\");</span></span><br><span class=\"line\">            <span class=\"comment\">// 把错误信息和回显信息保存到request域中</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"验证码错误！\"</span>);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"username\"</span>,username);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"email\"</span>,email);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>regist.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errorMsg\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=request.getAttribute(\"msg\")==null?\"\":request.getAttribute(\"msg\")%</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itxt\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">username</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">username</span>\")%&gt;</span>\"/&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itxt\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入邮箱地址\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">email</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">email</span>\")%&gt;</span>\"/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-将LoginServlet和RegistServlet合并为UserServlet\"><a href=\"#3-将LoginServlet和RegistServlet合并为UserServlet\" class=\"headerlink\" title=\"3.将LoginServlet和RegistServlet合并为UserServlet\"></a>3.将LoginServlet和RegistServlet合并为UserServlet</h3><p><img src=\"/2020/04/08/javaweb-02/6.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求类型</span></span><br><span class=\"line\">        String action = req.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"login\"</span>.equals(action)) &#123;</span><br><span class=\"line\">            login(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"regist\"</span>.equals(action)) &#123;</span><br><span class=\"line\">            regist(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理登录的功能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        User loginUser = userService.login(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>, username, password, <span class=\"keyword\">null</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loginUser == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(\"登录失败！\");</span></span><br><span class=\"line\">            <span class=\"comment\">// 将要回显的错误信息保存到request域中</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"用户名或密码错误！\"</span>);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"username\"</span>, username);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(\"登录成功！\");</span></span><br><span class=\"line\">            <span class=\"comment\">// 跳转到登录成功页面</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/login_success.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理注册的功能</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">regist</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        String email = req.getParameter(<span class=\"string\">\"email\"</span>);</span><br><span class=\"line\">        String code = req.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.检查验证码是否正确====先写死为qwer</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"qwer\"</span>.equalsIgnoreCase(code)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 验证码正确</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.检查用户名是否可用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (userService.existUsername(username)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// true 用户名已存在</span></span><br><span class=\"line\">                <span class=\"comment\">// System.out.println(\"用户名[\"+username+\"]已存在！\");</span></span><br><span class=\"line\">                <span class=\"comment\">// 把回显信息保存到request域中</span></span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"用户名已存在！\"</span>);</span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"username\"</span>, username);</span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">\"email\"</span>, email);</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// false 用户名不存在  可以注册</span></span><br><span class=\"line\">                userService.registUser(<span class=\"keyword\">new</span> User(<span class=\"keyword\">null</span>, username, password, email));</span><br><span class=\"line\">                <span class=\"comment\">// 跳转到注册成功页面</span></span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist_success.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 验证码错误</span></span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(\"验证码[\"+code+\"]错误！\");</span></span><br><span class=\"line\">            <span class=\"comment\">// 把错误信息和回显信息保存到request域中</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"验证码错误！\"</span>);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"username\"</span>, username);</span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">\"email\"</span>, email);</span><br><span class=\"line\">            <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">\"/pages/user/regist.jsp\"</span>).forward(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>login.jsp<br><img src=\"/2020/04/08/javaweb-02/7.png\" alt></p>\n<p>regist.jsp<br><img src=\"/2020/04/08/javaweb-02/8.png\" alt></p>\n<h3 id=\"4-使用反射优化大量else-if-代码\"><a href=\"#4-使用反射优化大量else-if-代码\" class=\"headerlink\" title=\"4.使用反射优化大量else if 代码\"></a>4.使用反射优化大量else if 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射根据action属性值调用相应的方法</span></span><br><span class=\"line\">    String action = req.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Method method = UserServlet<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getDeclaredMethod</span>(<span class=\"title\">action</span>, <span class=\"title\">HttpServletRequest</span>.<span class=\"title\">class</span>, <span class=\"title\">HttpServletResponse</span>.<span class=\"title\">class</span>)</span>;</span><br><span class=\"line\">        method.invoke(<span class=\"keyword\">this</span>,req, resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-抽取BaseServlet\"><a href=\"#5-抽取BaseServlet\" class=\"headerlink\" title=\"5.抽取BaseServlet\"></a>5.抽取BaseServlet</h3><p><img src=\"/2020/04/08/javaweb-02/10.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求类型</span></span><br><span class=\"line\">        String action = req.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(action);</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 通过反射根据action属性值调用相应的方法</span></span><br><span class=\"line\">            Method method = <span class=\"keyword\">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">HttpServletResponse</span>.<span class=\"title\">class</span>)</span>;</span><br><span class=\"line\">            method.invoke(<span class=\"keyword\">this</span>, req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ......</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">regist</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// ......</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-数据的封装和抽取-BeanUtils的使用\"><a href=\"#6-数据的封装和抽取-BeanUtils的使用\" class=\"headerlink\" title=\"6.数据的封装和抽取 BeanUtils的使用\"></a>6.数据的封装和抽取 BeanUtils的使用</h3><p>BeanUtils工具类，可以一次性的把所有请求的参数注入导JavaBean中<br>1、导入需要的jar 包：<br>commons-beanutils-1.8.0.jar<br>commons-logging-1.1.1jar<br>2、使用BeanUtils类方法实现注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">copyParamToBean</span><span class=\"params\">(Map map, T bean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将所有请求的参数封装到bean中</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            BeanUtils.populate(bean,map);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserServlet.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将请求参数一次性封装到user对象中</span></span><br><span class=\"line\">User user = WebUtils.copyParamToBean(req.getParameterMap(),<span class=\"keyword\">new</span> User());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-使用EL表达式修改表单回显\"><a href=\"#7-使用EL表达式修改表单回显\" class=\"headerlink\" title=\"7.使用EL表达式修改表单回显\"></a>7.使用EL表达式修改表单回显</h3><p>login.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span></span></span><br><span class=\"line\">    &lt;%= request.getAttribute(\"msg\")==null?\"请输入用户名和密码\":request.getAttribute(\"msg\")%&gt;</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">$&#123;empty requestScope.msg ? \"请输入用户名和密码\":requestScope.msg&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">username</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">username</span>\")%&gt;</span>\"</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">value=\"$&#123;requestScope.username&#125;\"</span><br></pre></td></tr></table></figure>\n\n<p>regist.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span></span></span><br><span class=\"line\">    &lt;%=request.getAttribute(\"msg\")==null?\"\":request.getAttribute(\"msg\")%&gt;</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">$&#123;requestScope.msg&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">username</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">username</span>\")%&gt;</span>\"</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">$&#123;requestScope.username&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%=request.getAttribute(\"</span><span class=\"attr\">email</span>\")==<span class=\"string\">null?</span>\"\"<span class=\"attr\">:request.getAttribute</span>(\"<span class=\"attr\">email</span>\")%&gt;</span>\"</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">$&#123;requestScope.email&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、图书模块\"><a href=\"#十、图书模块\" class=\"headerlink\" title=\"十、图书模块\"></a>十、图书模块</h2><h3 id=\"1-创建图书模块的数据库表\"><a href=\"#1-创建图书模块的数据库表\" class=\"headerlink\" title=\"1.创建图书模块的数据库表\"></a>1.创建图书模块的数据库表</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">USE</span> bookmall;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> book(</span><br><span class=\"line\">\t<span class=\"string\">`id`</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span> auto_increment,</span><br><span class=\"line\">\t<span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`price`</span> <span class=\"built_in\">DECIMAL</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`author`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`sales`</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`stock`</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"string\">`img_path`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\"># drop table book;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 插入初始化测试数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> book(<span class=\"string\">`id`</span> , <span class=\"string\">`name`</span> , <span class=\"string\">`author`</span> , <span class=\"string\">`price`</span> , <span class=\"string\">`sales`</span> , <span class=\"string\">`stock`</span> , <span class=\"string\">`img_path`</span>) </span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"literal\">null</span> , <span class=\"string\">'java从入门到放弃'</span> , <span class=\"string\">'国哥'</span> , <span class=\"number\">80</span> , <span class=\"number\">9999</span> , <span class=\"number\">9</span> , <span class=\"string\">'static/img/default.jpg'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> book(<span class=\"string\">`id`</span> , <span class=\"string\">`name`</span> , <span class=\"string\">`author`</span> , <span class=\"string\">`price`</span> , <span class=\"string\">`sales`</span> , <span class=\"string\">`stock`</span> , <span class=\"string\">`img_path`</span>) </span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"literal\">null</span> , <span class=\"string\">'数据结构与算法'</span> , <span class=\"string\">'严敏君'</span> , <span class=\"number\">78.5</span> , <span class=\"number\">6</span> , <span class=\"number\">13</span> , <span class=\"string\">'static/img/default.jpg'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> book(<span class=\"string\">`id`</span> , <span class=\"string\">`name`</span> , <span class=\"string\">`author`</span> , <span class=\"string\">`price`</span> , <span class=\"string\">`sales`</span> , <span class=\"string\">`stock`</span> , <span class=\"string\">`img_path`</span>) </span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"literal\">null</span> , <span class=\"string\">'编程珠玑'</span> , <span class=\"string\">'Tom'</span> , <span class=\"number\">68</span>, <span class=\"number\">99999</span> , <span class=\"number\">52</span> , <span class=\"string\">'static/img/default.jpg'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> book(<span class=\"string\">`id`</span> , <span class=\"string\">`name`</span> , <span class=\"string\">`author`</span> , <span class=\"string\">`price`</span> , <span class=\"string\">`sales`</span> , <span class=\"string\">`stock`</span> , <span class=\"string\">`img_path`</span>) </span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"literal\">null</span> , <span class=\"string\">'从你的全世界路过'</span> , <span class=\"string\">'张嘉加'</span> , <span class=\"number\">16</span>, <span class=\"number\">1000</span> , <span class=\"number\">50</span> , <span class=\"string\">'static/img/cover.jpg'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> book(<span class=\"string\">`id`</span> , <span class=\"string\">`name`</span> , <span class=\"string\">`author`</span> , <span class=\"string\">`price`</span> , <span class=\"string\">`sales`</span> , <span class=\"string\">`stock`</span> , <span class=\"string\">`img_path`</span>) </span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"literal\">null</span> , <span class=\"string\">'C语言程序设计'</span> , <span class=\"string\">'谭浩强'</span> , <span class=\"number\">28</span> , <span class=\"number\">52</span> , <span class=\"number\">74</span> , <span class=\"string\">'static/img/default.jpg'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-编写图书模块的JavaBean对象\"><a href=\"#2-编写图书模块的JavaBean对象\" class=\"headerlink\" title=\"2.编写图书模块的JavaBean对象\"></a>2.编写图书模块的JavaBean对象</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal price;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sales;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer stock;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String imgPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(Integer id, String name, String author, BigDecimal price, Integer sales, Integer stock, String imgPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.author = author;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sales = sales;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stock = stock;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imgPath != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"string\">\"\"</span>.equals(imgPath)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.imgPath = imgPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAuthor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAuthor</span><span class=\"params\">(String author)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.author = author;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(BigDecimal price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getSales</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sales;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSales</span><span class=\"params\">(Integer sales)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sales = sales;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getStock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStock</span><span class=\"params\">(Integer stock)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stock = stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getImgPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imgPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setImgPath</span><span class=\"params\">(String imgPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imgPath != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"string\">\"\"</span>.equals(imgPath)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.imgPath = imgPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Book&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", author='\"</span> + author + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", price=\"</span> + price +</span><br><span class=\"line\">                <span class=\"string\">\", sales=\"</span> + sales +</span><br><span class=\"line\">                <span class=\"string\">\", stock=\"</span> + stock +</span><br><span class=\"line\">                <span class=\"string\">\", imgPath='\"</span> + imgPath + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-编写图书模块的DAO并测试\"><a href=\"#3-编写图书模块的DAO并测试\" class=\"headerlink\" title=\"3.编写图书模块的DAO并测试\"></a>3.编写图书模块的DAO并测试</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into book(`name`,`author`,`price`,`sales`,`stock`,`img_path`) values(?,?,?,?,?,?)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql, book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteBook</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"delete from book where id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql,id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"update book set `name`=?,`author`=?,`price`=?,`sales`=?,`stock`=?,`img_path`= ? where id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql,book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath(),book.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">queryBookById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `id`,`name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book where id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForOne(Book<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>,<span class=\"title\">id</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `id`,`name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForList(Book<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookDaoImplTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao = <span class=\"keyword\">new</span> BookDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookDao.addBook(<span class=\"keyword\">new</span> Book(<span class=\"keyword\">null</span>,<span class=\"string\">\"算法与数据结构(java版)\"</span>,<span class=\"string\">\"张三三\"</span>,<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">58.80</span>),<span class=\"number\">20</span>,<span class=\"number\">100</span>,<span class=\"string\">\"static/img/default.jpg\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookDao.deleteBook(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookDao.updateBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">21</span>,<span class=\"string\">\"算法与数据结构(C++版)\"</span>,<span class=\"string\">\"张三三\"</span>,<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">58.80</span>),<span class=\"number\">20</span>,<span class=\"number\">100</span>,<span class=\"string\">\"static/img/default.jpg\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryBookById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(bookDao.queryBookById(<span class=\"number\">21</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Book book:bookDao.queryBooks())&#123;</span><br><span class=\"line\">            System.out.println(book);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-编写图书模块的Service并测试\"><a href=\"#4-编写图书模块的Service并测试\" class=\"headerlink\" title=\"4.编写图书模块的Service并测试\"></a>4.编写图书模块的Service并测试</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao = <span class=\"keyword\">new</span> BookDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        bookDao.addBook(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteBook</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        bookDao.deleteBook(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateBook</span><span class=\"params\">(Book book)</span> </span>&#123;</span><br><span class=\"line\">        bookDao.updateBook(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">queryBookById</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookDao.queryBookById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookDao.queryBooks();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImplTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService = <span class=\"keyword\">new</span> BookServiceImpl();</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookService.addBook(<span class=\"keyword\">new</span> Book(<span class=\"keyword\">null</span>,<span class=\"string\">\"肉蛋葱鸡\"</span>,<span class=\"string\">\"马老师\"</span>,<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">66.66</span>),<span class=\"number\">666</span>,<span class=\"number\">66</span>,<span class=\"string\">\"static/img/cover.jpg\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookService.deleteBook(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        bookService.updateBook(<span class=\"keyword\">new</span> Book(<span class=\"number\">7</span>,<span class=\"string\">\"红皮烤鸭\"</span>,<span class=\"string\">\"马老师\"</span>,<span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">99.8</span>),<span class=\"number\">100</span>,<span class=\"number\">2</span>,<span class=\"string\">\"static/img/cover.jpg\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryBookById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(bookService.queryBookById(<span class=\"number\">7</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">queryBooks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Book book :bookService.queryBooks())&#123;</span><br><span class=\"line\">            System.out.println(book);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-编写图书模块的Web层，和页面联调测试\"><a href=\"#5-编写图书模块的Web层，和页面联调测试\" class=\"headerlink\" title=\"5.编写图书模块的Web层，和页面联调测试\"></a>5.编写图书模块的Web层，和页面联调测试</h3><h4 id=\"1、实现展示全部图书\"><a href=\"#1、实现展示全部图书\" class=\"headerlink\" title=\"1、实现展示全部图书\"></a>1、实现展示全部图书</h4><p><img src=\"/2020/04/08/javaweb-02/11.png\" alt></p>\n<p><strong>在BookServlet.java中添加list()方法用于展示全部图书信息：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> BookService bookService = <span class=\"keyword\">new</span> BookServiceImpl();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.通过BookService查询全部图书</span></span><br><span class=\"line\">    List&lt;Book&gt; books = bookService.queryBooks();</span><br><span class=\"line\">    <span class=\"comment\">// 2.将全部的图书信息保存到request域中</span></span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">\"books\"</span>,books);</span><br><span class=\"line\">    <span class=\"comment\">// 3.请求转发</span></span><br><span class=\"line\">    req.getRequestDispatcher(<span class=\"string\">\"/pages/manager/book_manager.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改图书管理页面的跳转地址：</strong><br><img src=\"/2020/04/08/javaweb-02/12.png\" alt></p>\n<p><strong>利用JSTL标签库遍历图书信息在jsp页面中输出：</strong><br>1、导入JSTL标签库的jar包<br>taglibs-standard-impl-1.2.1.jar<br>taglibs-standard-spec-1.2.1.jar<br>2、在book_manager.jsp中编写遍历图书信息的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.books&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"book\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.author&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.sales&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;book.stock&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"book_edit\"</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、实现添加图书\"><a href=\"#2、实现添加图书\" class=\"headerlink\" title=\"2、实现添加图书\"></a>2、实现添加图书</h4><p><img src=\"/2020/04/08/javaweb-02/17.png\" alt></p>\n<p><strong>在BookServlet中添加add()方法用于添加图书：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  1、获取请求的参数==封装成为Book对象</span></span><br><span class=\"line\">        Book book = WebUtils.copyParamToBean(req.getParameterMap(), <span class=\"keyword\">new</span> Book());</span><br><span class=\"line\">        <span class=\"comment\">//  2、调用BookService.addBook()保存图书</span></span><br><span class=\"line\">        bookService.addBook(book);</span><br><span class=\"line\">        <span class=\"comment\">// 3、跳到图书列表页面 /manager/bookServlet?action=list</span></span><br><span class=\"line\">        <span class=\"comment\">// 请求转发会造成表单的多次提交</span></span><br><span class=\"line\">        <span class=\"comment\">// req.getRequestDispatcher(\"/manager/bookServlet?action=list\").forward(req, resp);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 请求重定向</span></span><br><span class=\"line\">        resp.sendRedirect(req.getContextPath()+ <span class=\"string\">\"/manager/bookServlet?action=list\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改book_edit.jsp：</strong><br><img src=\"/2020/04/08/javaweb-02/13.png\" alt></p>\n<p><img src=\"/2020/04/08/javaweb-02/14.png\" alt></p>\n<h4 id=\"3、实现删除图书\"><a href=\"#3、实现删除图书\" class=\"headerlink\" title=\"3、实现删除图书\"></a>3、实现删除图书</h4><p><img src=\"/2020/04/08/javaweb-02/18.png\" alt></p>\n<p><strong>在BookServlet中添加delete()方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 1、获取图书id</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 2、调用BookService.deleteById() 删除图书</span></span><br><span class=\"line\">       bookService.deleteBook(id);</span><br><span class=\"line\">       <span class=\"comment\">// 3、重定向 /manager/bookServlet?action=list</span></span><br><span class=\"line\">       resp.sendRedirect(req.getScheme()+<span class=\"string\">\"://\"</span>+ req.getServerName()+<span class=\"string\">\":\"</span>+</span><br><span class=\"line\">               req.getServerPort()+req.getContextPath()+ <span class=\"string\">\"/manager/bookServlet?action=list\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改book_manager.jsp：</strong><br><img src=\"/2020/04/08/javaweb-02/15.png\" alt></p>\n<p><strong>添加确认删除提示：</strong><br>给a标签添加class属性用于对标签选择<br><img src=\"/2020/04/08/javaweb-02/16.png\" alt>给a标签绑定单击事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;%-- 给删除按钮绑定单击事件 用于删除操作的确认\t--%&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 在事件的function函数中，有一个this对象，表示当前正在响应事件的dom对象</span></span><br><span class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"a.deleteClass\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 确认返回true  取消返回false</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> confirm(<span class=\"string\">\"你确定删除《\"</span> + $(<span class=\"keyword\">this</span>).parent().parent().find(<span class=\"string\">\"td:first\"</span>).text() +<span class=\"string\">\"》吗？\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// return false; 阻止元素的默认行为  不提交</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、实现修改图书\"><a href=\"#4、实现修改图书\" class=\"headerlink\" title=\"4、实现修改图书\"></a>4、实现修改图书</h4><p><img src=\"/2020/04/08/javaweb-02/19.png\" alt></p>\n<p><strong>在bookServlet中添加getBook()用于获取要修改图书的信息：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">getBook</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 1.获取id</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 2.调用BookService.queryBookById() 获取图书信息</span></span><br><span class=\"line\">       Book book = bookService.queryBookById(id);</span><br><span class=\"line\">       <span class=\"comment\">// 3.将图书信息保存至request域中</span></span><br><span class=\"line\">       req.setAttribute(<span class=\"string\">\"book\"</span>,book);</span><br><span class=\"line\">       <span class=\"comment\">// 4.请求转发到 /pages/manager/book_edit.jsp</span></span><br><span class=\"line\">       req.getRequestDispatcher(<span class=\"string\">\"/pages/manager/book_edit.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改book_edit.jsp让数据回显：</strong><br><img src=\"/2020/04/08/javaweb-02/20.png\" alt></p>\n<p><strong>在BookServlet中添加update()方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取从book_edit.jsp提交的表单数据  将数据封装到book对象中</span></span><br><span class=\"line\">    Book book = WebUtils.copyParamToBean(req.getParameterMap(),<span class=\"keyword\">new</span> Book());</span><br><span class=\"line\">    <span class=\"comment\">// 2.调用BookService.update()更新图书</span></span><br><span class=\"line\">    bookService.updateBook(book);</span><br><span class=\"line\">    <span class=\"comment\">// 3.重定向 manager/bookServlet?action=list 刷新图书列表</span></span><br><span class=\"line\">    resp.sendRedirect(req.getContextPath()+ <span class=\"string\">\"/manager/bookServlet?action=list\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在book_edit.jsp中添加隐藏域用于回传修改图书所需要的id值：</strong><br><img src=\"/2020/04/08/javaweb-02/21.png\" alt></p>\n<p><strong>图书信息并没有发生修改的原因：</strong><br>book_edit.jsp页面中既要进行添加add操作，又要进行修改update操作，最终进行何种操作是根据一个隐藏域决定的，因此需要动态修改隐藏域：在请求发起时附带上要执行操作的值，并注入隐藏域中。<br>传入update参数：<img src=\"/2020/04/08/javaweb-02/22.png\" style=\"zoom:100%;\"><br>传入add参数：<img src=\"/2020/04/08/javaweb-02/23.png\" alt><br>注入隐藏域：<img src=\"/2020/04/08/javaweb-02/24.png\" alt></p>\n<h4 id=\"5、实现图书的分页\"><a href=\"#5、实现图书的分页\" class=\"headerlink\" title=\"5、实现图书的分页\"></a>5、实现图书的分页</h4><p><img src=\"/2020/04/08/javaweb-02/25.png\" alt><br><strong>创建Page对象：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Page为分页的模型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt; 是具体的模块的 JavaBean 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer PAGE_SIZE = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前页码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageNo;</span><br><span class=\"line\">    <span class=\"comment\">// 总页码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageTotal;</span><br><span class=\"line\">    <span class=\"comment\">// 总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageTotalCount;</span><br><span class=\"line\">    <span class=\"comment\">// 每页显示的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageSize = PAGE_SIZE;</span><br><span class=\"line\">    <span class=\"comment\">// 当前页的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Page</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Page</span><span class=\"params\">(Integer pageNo, Integer pageTotal, Integer pageTotalCount, Integer pageSize, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageNo = pageNo;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageTotal = pageTotal;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageTotalCount = pageTotalCount;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">getPageSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PAGE_SIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageSize</span><span class=\"params\">(Integer pageSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPageNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageNo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageNo</span><span class=\"params\">(Integer pageNo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对页码进行检查</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pageNo&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            pageNo = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageNo&gt;pageTotal)&#123;</span><br><span class=\"line\">            pageNo = pageTotal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageNo = pageNo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPageTotal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageTotal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageTotal</span><span class=\"params\">(Integer pageTotal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageTotal = pageTotal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPageTotalCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageTotalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageTotalCount</span><span class=\"params\">(Integer pageTotalCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageTotalCount = pageTotalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Page&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"pageNo=\"</span> + pageNo +</span><br><span class=\"line\">                <span class=\"string\">\", pageTotal=\"</span> + pageTotal +</span><br><span class=\"line\">                <span class=\"string\">\", pageTotalCount=\"</span> + pageTotalCount +</span><br><span class=\"line\">                <span class=\"string\">\", pageSize=\"</span> + pageSize +</span><br><span class=\"line\">                <span class=\"string\">\", items=\"</span> + items +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookServlet中添page()用于处理分页：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">page</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取js页面传来的请求参数 pageNo 和 pageSize</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageNo\"</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageSize\"</span>), Page.PAGE_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2.调用BookService.page(pageNo,pageSize) 得到Page对象</span></span><br><span class=\"line\">        Page&lt;Book&gt; page = bookService.page(pageNo, pageSize);</span><br><span class=\"line\">        <span class=\"comment\">// 3.将Page对象保存到Request域中</span></span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">\"page\"</span>,page);</span><br><span class=\"line\">        <span class=\"comment\">// 4.请求转发到 /pages/manager/book_manager.jsp</span></span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">\"/pages/manager/book_manager.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookService中添加page(pageNo,pageSize) 获取page对象：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询分页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageNo</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageSize</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回一个Page对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Book&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> pageNo, <span class=\"keyword\">int</span> pageSize)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookServiceImpl中实现page(pageNo,pageSize)：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Book&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> pageNo, <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">       Page&lt;Book&gt; bookPage = <span class=\"keyword\">new</span> Page&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//设置每页显示的数量</span></span><br><span class=\"line\">       bookPage.setPageSize(pageSize);</span><br><span class=\"line\">       <span class=\"comment\">// 设置总记录数</span></span><br><span class=\"line\">       Integer pageTotalCount = bookDao.queryForPageTotalCount();</span><br><span class=\"line\">       bookPage.setPageTotalCount(pageTotalCount);</span><br><span class=\"line\">       <span class=\"comment\">// 设置总页码</span></span><br><span class=\"line\">       Integer pageTotal = pageTotalCount/pageSize;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (pageTotalCount % pageSize&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           pageTotal++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       bookPage.setPageTotal(pageTotal);</span><br><span class=\"line\">       <span class=\"comment\">// 设置当前页码</span></span><br><span class=\"line\">       bookPage.setPageNo(pageNo);</span><br><span class=\"line\">       <span class=\"comment\">// 设置当页数据</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> begin = (bookPage.getPageNo()-<span class=\"number\">1</span>)*pageSize;</span><br><span class=\"line\">       bookPage.setItems(bookDao.queryForItems(begin,pageSize));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> bookPage;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookDao中添加queryForPageTotal()和queryForItems()方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询图书的总记录数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">queryForPageTotalCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询当前页面的图书记录</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> begin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageSize</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryForItems</span><span class=\"params\">(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> pageSize)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookDaoImpl中实现queryForPageTotal()和queryForItems()方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">queryForPageTotalCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select count(*) from book\"</span>;</span><br><span class=\"line\">    Number count = (Number) queryForSingleValue(sql);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  count.intValue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryForItems</span><span class=\"params\">(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\" select `id`, `name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book limit ?,?\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryForList(Book<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>,<span class=\"title\">begin</span>,<span class=\"title\">pageSize</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改manage_menu.jsp页面显示分页后的内容：</strong><br><img src=\"/2020/04/08/javaweb-02/26.png\" alt></p>\n<p><strong>修改book_manage.jsp页面，让下方显示页面跳转的功能按键：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">       <span class=\"comment\">// 在事件的function函数中，有一个this对象，表示当前正在响应事件的dom对象</span></span><br><span class=\"line\">       $(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">           &lt;%-- 给删除按钮绑定单击事件 用于删除操作的确认\t--%&gt;</span><br><span class=\"line\">           $(<span class=\"string\">\"a.deleteClass\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"comment\">// 确认返回true  取消返回false</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> confirm(<span class=\"string\">\"你确定删除《\"</span> + $(<span class=\"keyword\">this</span>).parent().parent().find(<span class=\"string\">\"td:first\"</span>).text() + <span class=\"string\">\"》吗？\"</span>);</span><br><span class=\"line\">               <span class=\"comment\">// return false; 阻止元素的默认行为  不提交</span></span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">           $(<span class=\"string\">\"#searchPageBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> pageNo = $(<span class=\"string\">\"#pn_input\"</span>).val();</span><br><span class=\"line\">               location.href = <span class=\"string\">\"$&#123;pageScope.basePath&#125;manager/bookServlet?action=page&amp;pageNo=\"</span> + pageNo;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改hesd.jsp 将basePath保存至pageContext域中：供指定页面跳转时使用<br><img src=\"/2020/04/08/javaweb-02/27.png\" alt></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 大于首页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;1&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=1\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的开始<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">        &lt;%-- 情况1：如果总页码&lt;=5,页码的范围是1~总页码 --%&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&lt;=5&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    【$&#123;i&#125;】</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--情况2：总页码</span>&gt;</span>5 --%&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&gt;5&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为前面<span class=\"attr\">3</span>个：页码范围是：<span class=\"attr\">1</span>~<span class=\"attr\">5--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;=3&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为后面<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~末页<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-4&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为中间<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~当前页码+<span class=\"attr\">2--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-2&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo+2&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的结束<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  小于末页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;\"</span>&gt;</span>末页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">    共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录</span><br><span class=\"line\">    到第<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;param.pageNo&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pn_input\"</span>/&gt;</span>页</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchPageBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"确定\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>修改增删改操作的重定向地址并传入pageNo参数：</strong><br><img src=\"/2020/04/08/javaweb-02/28.png\" alt></p>\n<p><strong>在book_manager.jsp传入页码pageNo：</strong><br><img src=\"/2020/04/08/javaweb-02/29.png\" alt></p>\n<p><strong>在book_edit.jsp中添加隐藏域用于传递pageNo给BookServlet：</strong><br><img src=\"/2020/04/08/javaweb-02/30.png\" alt></p>\n<p><strong>前台图书的分页展示：</strong>|<br><img src=\"/2020/04/08/javaweb-02/31.png\" alt></p>\n<p>web目录下的index.jsp只负责转发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%--只负责请求转发--%</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">\"/client/clientBookServlet?action=page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建ClientBookServlet用于处理前台的分页请求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientBookServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService = <span class=\"keyword\">new</span> BookServiceImpl();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理图书分页</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">page</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"经过了前台的ClientBookServlet\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取js页面传来的请求参数 pageNo 和 pageSize</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageNo\"</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageSize\"</span>), Page.PAGE_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2.调用BookService.page(pageNo,pageSize) 得到Page对象</span></span><br><span class=\"line\">        Page&lt;Book&gt; page = bookService.page(pageNo, pageSize);</span><br><span class=\"line\">        <span class=\"comment\">// 3.将Page对象保存到Request域中</span></span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">\"page\"</span>,page);</span><br><span class=\"line\">        <span class=\"comment\">// 4.请求转发到 /pages/client/index.jsp</span></span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">\"/pages/client/index.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在web目录的/page/client/路径下创建index.jsp用于显示前台图书信息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>书城首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 静态包含 <span class=\"attr\">base</span>标签、<span class=\"attr\">css</span>样式、<span class=\"attr\">jquery</span>文件   <span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/head.jsp\"</span> %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">\"#searchPageBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> pageNo = $(<span class=\"string\">\"#pn_input\"</span>).val();</span></span><br><span class=\"line\"><span class=\"actionscript\">                location.href = <span class=\"string\">\"$&#123;pageScope.basePath&#125;client/clientBookServlet?action=page&amp;pageNo=\"</span>+pageNo;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wel_word\"</span>&gt;</span>网上书城<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/user/login.jsp\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> |</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/user/regist.jsp\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/cart/cart.jsp\"</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/manager/manager.jsp\"</span>&gt;</span>后台管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"book\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_cond\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">                价格：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"min\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"min\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span> 元 -</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"max\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"max\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span> 元</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"查询\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>您的购物车中有3件商品<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                您刚刚将<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>时间简史<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>加入到了购物车中</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.page.items&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"book\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"b_list\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img_div\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;book.imgPath&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_info\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_name\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp1\"</span>&gt;</span>书名:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp2\"</span>&gt;</span>$&#123;book.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_author\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp1\"</span>&gt;</span>作者:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp2\"</span>&gt;</span>$&#123;book.author&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_price\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp1\"</span>&gt;</span>价格:￥<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp2\"</span>&gt;</span>$&#123;book.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_sales\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp1\"</span>&gt;</span>销量:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp2\"</span>&gt;</span>$&#123;book.sales&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_amount\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp1\"</span>&gt;</span>库存:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp2\"</span>&gt;</span>$&#123;book.stock&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_add\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>加入购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_nav\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--</span> 大于首页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;1&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=1\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的开始<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">            &lt;%-- 情况1：如果总页码&lt;=5,页码的范围是1~总页码 --%&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&lt;=5&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                        【$&#123;i&#125;】</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%--情况2：总页码</span>&gt;</span>5 --%&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&gt;5&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为前面<span class=\"attr\">3</span>个：页码范围是：<span class=\"attr\">1</span>~<span class=\"attr\">5--</span>%&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;=3&#125;\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                【$&#123;i&#125;】</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为后面<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~末页<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-4&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                【$&#123;i&#125;】</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为中间<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~当前页码+<span class=\"attr\">2--</span>%&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-2&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo+2&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                【$&#123;i&#125;】</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的结束<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--</span>  小于末页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"client/clientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;\"</span>&gt;</span>末页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">        共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录</span><br><span class=\"line\">        到第<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;param.pageNo&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pn_input\"</span>/&gt;</span>页</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchPageBtn\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"确定\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/footer.jsp\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>抽取分页：</strong><br>在Page对象中添加url属性以及相应的get 和set方法：<br><img src=\"/2020/04/08/javaweb-02/32.png\" alt><br>分别在BookServlet和ClientBookServlet中设置url属性值：<br><img src=\"/2020/04/08/javaweb-02/33.png\" alt></p>\n<p><img src=\"/2020/04/08/javaweb-02/34.png\" alt></p>\n<p>分别将index.jsp和book_manager.jsp中出现的相应的地址值替换为<code>${requestScope.page.url}</code></p>\n<p>在/pages/common/下创建page_nav.jsp用于提取分页代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span> 大于首页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;1&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=1\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的开始<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">        &lt;%-- 情况1：如果总页码&lt;=5,页码的范围是1~总页码 --%&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&lt;=5&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    【$&#123;i&#125;】</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--情况2：总页码</span>&gt;</span>5 --%&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&gt;5&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为前面<span class=\"attr\">3</span>个：页码范围是：<span class=\"attr\">1</span>~<span class=\"attr\">5--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;=3&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为后面<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~末页<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&gt;=requestScope.page.pageTotal-2&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-4&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageTotal&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">%--</span> 当前页码为中间<span class=\"attr\">3</span>个：页码范围是：当前页码<span class=\"attr\">-2</span>~当前页码+<span class=\"attr\">2--</span>%&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo-2&#125;\"</span> <span class=\"attr\">end</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo+2&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo==i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            【$&#123;i&#125;】</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo!=i&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;i&#125;\"</span>&gt;</span>$&#123;i&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  页码输出的结束<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%--</span>  小于末页才显示<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;requestScope.page.url&#125;&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;\"</span>&gt;</span>末页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">    共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录</span><br><span class=\"line\">    到第<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;param.pageNo&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pn\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pn_input\"</span>/&gt;</span>页</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchPageBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"确定\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在index.jsp和book_mansger.jsp中的分页代码替换成静态包含代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/page_nav.jsp\"</span>%&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6、实现价格区间的搜索功能：\"><a href=\"#6、实现价格区间的搜索功能：\" class=\"headerlink\" title=\"6、实现价格区间的搜索功能：\"></a>6、实现价格区间的搜索功能：</h4><p><img src=\"/2020/04/08/javaweb-02/35.png\" alt></p>\n<p><strong>在ClientBookClient中添加pageByPrice()方法用于处理搜索请求：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">pageByPrice</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取请求参数 pageNo,pageSize,min,max</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageNo = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageNo\"</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"pageSize\"</span>),Page.PAGE_SIZE);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"min\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"max\"</span>),Integer.MAX_VALUE);</span><br><span class=\"line\">    <span class=\"comment\">// 2.调用bookService.pageByPrice(pageNo,pageSize,min,max) 返回page对象</span></span><br><span class=\"line\">    Page&lt;Book&gt; page = bookService.pageByPrice(pageNo,pageSize,min,max);</span><br><span class=\"line\">    <span class=\"comment\">//设置请求地址 分页时需要传递价格区间</span></span><br><span class=\"line\">    StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"client/clientBookServlet?action=pageByPrice\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对价格区间进行检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.getParameter(<span class=\"string\">\"min\"</span>)!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        stringBuilder.append(<span class=\"string\">\"&amp;min=\"</span>).append(req.getParameter(<span class=\"string\">\"min\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.getParameter(<span class=\"string\">\"max\"</span>)!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        stringBuilder.append(<span class=\"string\">\"&amp;max=\"</span>).append(req.getParameter(<span class=\"string\">\"max\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    page.setUrl(stringBuilder.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.将Page对象保存到Request域中</span></span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">\"page\"</span>,page);</span><br><span class=\"line\">    <span class=\"comment\">// 4.请求转发到</span></span><br><span class=\"line\">    req.getRequestDispatcher(<span class=\"string\">\"/pages/client/index.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookService中添加pageByPrice(pageNo,pageSize,min,max)方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据价格区间获取page对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageSize</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Page&lt;Book&gt; <span class=\"title\">pageByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> pageNo, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookServiceImpl中实现pageByPrice(pageNo,pageSize,min,max)方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Book&gt; <span class=\"title\">pageByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> pageNo, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span> </span>&#123;</span><br><span class=\"line\">    Page&lt;Book&gt; bookPage = <span class=\"keyword\">new</span> Page&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置每页显示的数量</span></span><br><span class=\"line\">    bookPage.setPageSize(pageSize);</span><br><span class=\"line\">    <span class=\"comment\">// 设置总记录数</span></span><br><span class=\"line\">    Integer pageTotalCount = bookDao.queryForPageTotalCountByPrice(min,max);</span><br><span class=\"line\">    bookPage.setPageTotalCount(pageTotalCount);</span><br><span class=\"line\">    <span class=\"comment\">// 设置总页码</span></span><br><span class=\"line\">    Integer pageTotal = pageTotalCount/pageSize;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageTotalCount % pageSize&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        pageTotal++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bookPage.setPageTotal(pageTotal);</span><br><span class=\"line\">    <span class=\"comment\">// 设置当前页码</span></span><br><span class=\"line\">    bookPage.setPageNo(pageNo);</span><br><span class=\"line\">    <span class=\"comment\">// 设置当页数据</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = (bookPage.getPageNo()-<span class=\"number\">1</span>)*pageSize;</span><br><span class=\"line\">    bookPage.setItems(bookDao.queryForItemsByPrice(begin,pageSize,min,max));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bookPage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookDao中添加queryForPageTotalCountByPrice(int min, int max)和queryForItemsByPrice(int begin, int pageSize, int min, int max)方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据价格区间查询总记录数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">queryForPageTotalCountByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据价格区间查询所有记录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> begin</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageSize</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> min</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> max</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">queryForItemsByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在BookDaoImpl中实现这两种方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">queryForPageTotalCountByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select count(*) from book where price between ? and ?\"</span>;</span><br><span class=\"line\">    Number count = (Number) queryForSingleValue(sql,min,max);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  count.intValue();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">queryForItemsByPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">int</span> min, <span class=\"keyword\">int</span> max)</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\" select `id`, `name`,`author`,`price`,`sales`,`stock`,`img_path` imgPath from book\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\" where price between ? and ? order by price limit ?,?\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryForList(Book<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>,<span class=\"title\">min</span>,<span class=\"title\">max</span>,<span class=\"title\">begin</span>,<span class=\"title\">pageSize</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改index.jsp向服务器提交搜索请求：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"book_cond\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"client/clientBookServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"pageByPrice\"</span>/&gt;</span></span><br><span class=\"line\">            价格：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"min\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"min\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;param.min&#125;\"</span>&gt;</span> 元 -</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"max\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"max\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;param.max&#125;\"</span>&gt;</span> 元</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"查询\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十一、保存用户登录之后的信息\"><a href=\"#十一、保存用户登录之后的信息\" class=\"headerlink\" title=\"十一、保存用户登录之后的信息\"></a>十一、保存用户登录之后的信息</h2><p>在UserServlet添加保存用户登录信息到Session域中的代码：<br><img src=\"/2020/04/08/javaweb-02/36.png\" alt></p>\n<p>在login_success_menu.jsp中 显示用户姓名：<br><img src=\"/2020/04/08/javaweb-02/37.png\" alt></p>\n<p>修改index.jsp的菜单显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">%--</span>  如果用户还没有登录，显示登录和注册菜单 <span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty sessionScope.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/user/login.jsp\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>/</span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/user/regist.jsp\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">%--</span>  如果用户已经登录，则显示登录成功之后用户的信息 <span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty sessionScope.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>欢迎<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"um_span\"</span>&gt;</span>$&#123;sessionScope.user.username&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>光临书城<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/order/order.jsp\"</span>&gt;</span>我的订单<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/cart/cart.jsp\"</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/manager/manager.jsp\"</span>&gt;</span>后台管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.jsp\"</span>&gt;</span>注销<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"symbol\">&amp;nbsp;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=\"red\">注意：</font></strong><br>固定相对路径跳转使用的地址必须是相对路径，否则在进行跳转时Tomcat会创建一个新的Session，造成Session会话信息丢失！<br><img src=\"/2020/04/08/javaweb-02/38.png\" alt></p>\n<h2 id=\"十二、注销登录\"><a href=\"#十二、注销登录\" class=\"headerlink\" title=\"十二、注销登录\"></a>十二、注销登录</h2><p>在userServlet中添加logout()方法用于处理注销请求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">logout</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.销毁 Session</span></span><br><span class=\"line\">    req.getSession().invalidate();</span><br><span class=\"line\">    <span class=\"comment\">// 2.重定向到首页</span></span><br><span class=\"line\">    resp.sendRedirect(req.getContextPath());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改jsp页面的跳转地址：<br><img src=\"/2020/04/08/javaweb-02/39.png\" alt></p>\n<h2 id=\"十三、使用验证码解决表单的重复提交\"><a href=\"#十三、使用验证码解决表单的重复提交\" class=\"headerlink\" title=\"十三、使用验证码解决表单的重复提交\"></a>十三、使用验证码解决表单的重复提交</h2><p>表单重复提交有三种常见的情况：<br>一：提交完表单。服务器使用请求转来进行页面跳转。这个时候，用户按下功能键F5，就会发起最后一次的请求。造成表单重复提交问题。解决方法：使用重定向来进行跳转。<br>二：用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败，<br>就会着急，然后多点了几次提交操作，也会造成表单重复提交。<br>三：用户正常提交服务器。服务器也没有延迟，但是提交完成后，用户回退浏览器。重新提交。也会造成表单重复<br>提交。<br><img src=\"/2020/04/08/javaweb-02/40.png\" alt></p>\n<p>1.导入谷歌验证码的jar包：kaptcha-2.3.2.jar<br>2.在web.xml中配置用于访问生成验证码的Servlet程序的地址</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>KaptchaServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>KaptchaServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/kaptcha.jpg<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.在表单中使用img标签显示验证码图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"itxt\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 150px;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"code\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"code\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"code_img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"kaptcha.jpg\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: right; height: 40px; width:120px\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: right;font-size: 80%\"</span>&gt;</span>看不清？点击图片刷新<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.在服务端中获取生成的验证码并于与客户端发送过来的验证码比较<br><img src=\"/2020/04/08/javaweb-02/41.png\" alt></p>\n<p>5.给验证码图片绑定单击事件用于刷新验证码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给验证码图片绑定单击事件</span></span><br><span class=\"line\">$(<span class=\"string\">\"#code_img\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 添加一个随机数避免请求地址相同，因为浏览器缓存造成不刷新</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.src = <span class=\"string\">\"$&#123;basePath&#125;kaptcha.jpg?n=\"</span>+ <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十四、购物车模块\"><a href=\"#十四、购物车模块\" class=\"headerlink\" title=\"十四、购物车模块\"></a>十四、购物车模块</h2><p><img src=\"/2020/04/08/javaweb-02/42.png\" alt></p>\n<h3 id=\"1、创建购物车对象\"><a href=\"#1、创建购物车对象\" class=\"headerlink\" title=\"1、创建购物车对象\"></a>1、创建购物车对象</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cart</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// private Integer totalCount;// 商品总数</span></span><br><span class=\"line\">    <span class=\"comment\">// private BigDecimal totalPrice;// 总商品金额</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, CartItem&gt; items = <span class=\"keyword\">new</span> LinkedHashMap&lt;Integer, CartItem&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getTotalCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Integer totalCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : items.entrySet()) &#123;</span><br><span class=\"line\">            totalCount += entry.getValue().getCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getTotalPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BigDecimal totalPrice = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : items.entrySet()) &#123;</span><br><span class=\"line\">            totalPrice = totalPrice.add(entry.getValue().getTotalPrice());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, CartItem&gt; <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(Map&lt;Integer, CartItem&gt; items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Cart&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"totalCount=\"</span> + getTotalCount() +</span><br><span class=\"line\">                <span class=\"string\">\", totalPrice=\"</span> + getTotalPrice() +</span><br><span class=\"line\">                <span class=\"string\">\", items=\"</span> + items +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加商品项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">(CartItem cartItem)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断商品是否已经添加</span></span><br><span class=\"line\">        CartItem item = items.get(cartItem.getId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            items.put(cartItem.getId(), cartItem);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            item.setCount(item.getCount() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            item.setTotalPrice(item.getPrice().multiply(<span class=\"keyword\">new</span> BigDecimal(item.getCount())));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除商品项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteItem</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        items.remove(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清空购物车</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        items.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改商品数量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateCount</span><span class=\"params\">(Integer id, Integer count)</span> </span>&#123;</span><br><span class=\"line\">        CartItem item = items.get(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            item.setCount(count);</span><br><span class=\"line\">            item.setTotalPrice(item.getPrice().multiply(<span class=\"keyword\">new</span> BigDecimal(item.getCount())));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建购物车商品项\"><a href=\"#2、创建购物车商品项\" class=\"headerlink\" title=\"2、创建购物车商品项\"></a>2、创建购物车商品项</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer count; <span class=\"comment\">// 数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal price; <span class=\"comment\">// 单价</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal totalPrice;<span class=\"comment\">// 商品总价</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CartItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CartItem</span><span class=\"params\">(Integer id, String name, Integer count, BigDecimal price, BigDecimal totalPrice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCount</span><span class=\"params\">(Integer count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(BigDecimal price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getTotalPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalPrice</span><span class=\"params\">(BigDecimal totalPrice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"CartItem&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", count=\"</span> + count +</span><br><span class=\"line\">                <span class=\"string\">\", price=\"</span> + price +</span><br><span class=\"line\">                <span class=\"string\">\", totalPrice=\"</span> + totalPrice +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、CartServlet用于处理商品的添加、删除、清空和修改数量\"><a href=\"#3、CartServlet用于处理商品的添加、删除、清空和修改数量\" class=\"headerlink\" title=\"3、CartServlet用于处理商品的添加、删除、清空和修改数量\"></a>3、CartServlet用于处理商品的添加、删除、清空和修改数量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService = <span class=\"keyword\">new</span> BookServiceImpl();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(\"加入购物车\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取请求参数  商品编号</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用bookService.queryBookById(id) 得到图书信息</span></span><br><span class=\"line\">        Book book = bookService.queryBookById(id);</span><br><span class=\"line\">        <span class=\"comment\">// 将图书信息转换位CartItem商品项</span></span><br><span class=\"line\">        CartItem cartItem = <span class=\"keyword\">new</span> CartItem(book.getId(),book.getName(),<span class=\"number\">1</span>,book.getPrice(),book.getPrice());</span><br><span class=\"line\">        <span class=\"comment\">// 调用cart.add(CartItem)添加至购物车</span></span><br><span class=\"line\">        Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cart == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            cart = <span class=\"keyword\">new</span> Cart();</span><br><span class=\"line\">            req.getSession().setAttribute(<span class=\"string\">\"cart\"</span>,cart);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cart.addItem(cartItem);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(cart);</span></span><br><span class=\"line\">        <span class=\"comment\">// 重定向到原来商品所在的页面</span></span><br><span class=\"line\">        resp.sendRedirect(req.getHeader(<span class=\"string\">\"Referer\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteItem</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求参数 id</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用cart.deleteItem(id)</span></span><br><span class=\"line\">        Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cart != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            cart.deleteItem(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       resp.sendRedirect(req.getHeader(<span class=\"string\">\"Referer\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取购物车对象</span></span><br><span class=\"line\">        Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用cart.clear()</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cart!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            cart.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resp.sendRedirect(req.getHeader(<span class=\"string\">\"Referer\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">updateCount</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求的参数  商品编号  商品数量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"count\"</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取Cart对象</span></span><br><span class=\"line\">        Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cart!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 调用updateCount方法</span></span><br><span class=\"line\">            cart.updateCount(id,count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resp.sendRedirect(req.getHeader(<span class=\"string\">\"Referer\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、购物车页面的展示\"><a href=\"#4、购物车页面的展示\" class=\"headerlink\" title=\"4、购物车页面的展示\"></a>4、购物车页面的展示</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 给删除商品绑定单击事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\"a.deleteItem\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> confirm(<span class=\"string\">\"确定从购物车中删除《\"</span>+$(<span class=\"keyword\">this</span>).parent().parent().find(<span class=\"string\">\"td:first\"</span>).text()+<span class=\"string\">\"》吗？\"</span>)</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 给清空购物车绑定单击事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\"#clearCart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">           <span class=\"keyword\">return</span>  confirm(<span class=\"string\">\"确定清空购物车？\"</span>);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 给修改商品数量绑定失去焦点事件  --- onchange事件判断内容是否改变</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\".updateCount\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> id = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"bookId\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> count = <span class=\"keyword\">this</span>.value;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">if</span>(confirm(<span class=\"string\">\"确定修改商品的数量为 \"</span>+count+<span class=\"string\">\" 吗？\"</span>)&amp;&amp;count&gt;<span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                location.href=<span class=\"string\">\"$&#123;PageScope.basePath&#125;cartServlet?action=updateCount&amp;count=\"</span>+count+<span class=\"string\">\"&amp;id=\"</span>+id;</span></span><br><span class=\"line\"><span class=\"actionscript\">            &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.defaultValue;<span class=\"comment\">// 恢复到原来的数据</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wel_word\"</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%--</span>   静态包含，登录成功之后的菜单    <span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%@include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/pages/common/login_sucess_menu.jsp\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>数量<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>金额<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty sessionScope.cart.items&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">\"5\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.jsp\"</span>&gt;</span>当前购物车为空！点击浏览商品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty sessionScope.cart.items&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">%--</span> 购物车非空才输出<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;sessionScope.cart.items&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"entry\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;entry.value.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"updateCount\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                <span class=\"attr\">style</span>=<span class=\"string\">\"width: 80px;text-align: center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                <span class=\"attr\">bookId</span>=<span class=\"string\">\"$&#123;entry.value.id&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;entry.value.count&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;entry.value.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;entry.value.totalPrice&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"deleteItem\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"cartServlet?action=deleteItem&amp;id=$&#123;entry.value.id&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty sessionScope.cart.items&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart_info\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart_span\"</span>&gt;</span>购物车中共有<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"b_count\"</span>&gt;</span>$&#123;sessionScope.cart.totalCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>件商品<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart_span\"</span>&gt;</span>总金额<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"b_price\"</span>&gt;</span>$&#123;sessionScope.cart.totalPrice&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>元<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart_span\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clearCart\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"cartServlet?action=clear\"</span>&gt;</span>清空购物车<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cart_span\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/cart/checkout\"</span>&gt;</span>去结账<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、修改首页\"><a href=\"#5、修改首页\" class=\"headerlink\" title=\"5、修改首页\"></a>5、修改首页</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加到购物车</span></span><br><span class=\"line\">$(<span class=\"string\">\"button.addToCart\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在事件响应的function函数中  this表示正在响应的dom对象  $(this)表示经过jquery封装后的dom对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@type <span class=\"type\">&#123;jQuery&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断用户是否登录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($&#123;sessionScope.user == <span class=\"literal\">null</span>&#125;)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"您还没有登录，请先登录或注册！\"</span>)</span><br><span class=\"line\">        location.href =<span class=\"string\">\"$&#123;pageScope.basePath&#125;pages/user/login.jsp\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bookid =$(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"bookid\"</span>);<span class=\"comment\">// 获取选中元素的属性值</span></span><br><span class=\"line\">        location.href=<span class=\"string\">\"$&#123;pageScope.basePath&#125;cartServlet?action=addItem&amp;id=\"</span>+bookid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"book_add\"</span>&gt;</span><br><span class=\"line\">    &lt;button bookid=\"$&#123;book.id&#125;\" class=\"addToCart\"&gt;加入购物车&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、首页购物车数据回显\"><a href=\"#6、首页购物车数据回显\" class=\"headerlink\" title=\"6、首页购物车数据回显\"></a>6、首页购物车数据回显</h3><p>在addItem()中将添加的图书信息保存到session域中：<br><img src=\"/2020/04/08/javaweb-02/43.png\" alt></p>\n<p>在首页显示需要的信息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>您的购物车中有<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: blue\"</span>&gt;</span>$&#123;sessionScope.cart.totalCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>件商品<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">%--</span>  购物车为空<span class=\"attr\">--</span>%&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty sessionScope.cart.items&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>当前购物车为空~<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty sessionScope.cart.items&#125;\"</span>&gt;</span></span><br><span class=\"line\">           您刚刚将<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>$&#123;sessionScope.itemName&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>加入到了购物车中</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十五、订单模块\"><a href=\"#十五、订单模块\" class=\"headerlink\" title=\"十五、订单模块\"></a>十五、订单模块</h2><p><img src=\"/2020/04/08/javaweb-02/44.png\" alt></p>\n<h3 id=\"1、创建Order-与OrderItem对象\"><a href=\"#1、创建Order-与OrderItem对象\" class=\"headerlink\" title=\"1、创建Order 与OrderItem对象\"></a>1、创建Order 与OrderItem对象</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderId;<span class=\"comment\">// 订单号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;<span class=\"comment\">// 下单时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal price;<span class=\"comment\">// 订单价格</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status = <span class=\"number\">0</span>;<span class=\"comment\">// 0 未发货  1 已发货 2 已签收</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer userId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(String orderId, Date createTime, BigDecimal price, Integer status, Integer userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderId = orderId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createTime = createTime;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrderId</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderId = orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getCreateTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCreateTime</span><span class=\"params\">(Date createTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createTime = createTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(BigDecimal price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatus</span><span class=\"params\">(Integer status)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getUserId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserId</span><span class=\"params\">(Integer userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Order&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"orderId=\"</span> + orderId +</span><br><span class=\"line\">                <span class=\"string\">\", createTime=\"</span> + createTime +</span><br><span class=\"line\">                <span class=\"string\">\", price=\"</span> + price +</span><br><span class=\"line\">                <span class=\"string\">\", status=\"</span> + status +</span><br><span class=\"line\">                <span class=\"string\">\", userId=\"</span> + userId +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;<span class=\"comment\">// 商品编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;<span class=\"comment\">// 商品名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer count;<span class=\"comment\">// 商品数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal price;<span class=\"comment\">// 商品总价格</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal totalPrice;<span class=\"comment\">// 商品总价格</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderId;<span class=\"comment\">// 订单号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderItem</span><span class=\"params\">(Integer id, String name, Integer count, BigDecimal price, BigDecimal totalPrice, String orderId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderId = orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCount</span><span class=\"params\">(Integer count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getTotalPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalPrice</span><span class=\"params\">(BigDecimal totalPrice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrderId</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orderId = orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BigDecimal <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(BigDecimal price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"OrderItem&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", count=\"</span> + count +</span><br><span class=\"line\">                <span class=\"string\">\", price=\"</span> + price +</span><br><span class=\"line\">                <span class=\"string\">\", totalPrice=\"</span> + totalPrice +</span><br><span class=\"line\">                <span class=\"string\">\", orderId=\"</span> + orderId +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建OrderDao接口并实现接口中的方法\"><a href=\"#2、创建OrderDao接口并实现接口中的方法\" class=\"headerlink\" title=\"2、创建OrderDao接口并实现接口中的方法\"></a>2、创建OrderDao接口并实现接口中的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> order</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveOrder</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询全部订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">queryOrders</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改订单状态</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orderId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Status</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">changeOrderStatus</span><span class=\"params\">(String orderId,Integer status)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据用户编号查看订单信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> UserId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">queryOrderByUserId</span><span class=\"params\">(Integer userId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into bookorder(`order_id`,`create_time`,`price`,`status`,`user_id`)values(?,?,?,?,?)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql,order.getOrderId(),order.getCreateTime(),order.getPrice(),order.getStatus(),order.getUserId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">queryOrders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `order_id` orderId ,`create_time` createTime,`price` ,`status`,`user_id` userId from bookorder\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForList(Order<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">changeOrderStatus</span><span class=\"params\">(String orderId, Integer status)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"update bookorder set status = ? where order_id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql,status,orderId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">queryOrderByUserId</span><span class=\"params\">(Integer userId)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `order_id` orderId ,`create_time` createTime,`price` ,`status`,`user_id` userId from bookorder where user_id=?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForList(Order<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>,<span class=\"title\">userId</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、创建-OrderItemDao接口并实现其方法\"><a href=\"#3、创建-OrderItemDao接口并实现其方法\" class=\"headerlink\" title=\"3、创建 OrderItemDao接口并实现其方法\"></a>3、创建 OrderItemDao接口并实现其方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderItemDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存订单项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveOrderItem</span><span class=\"params\">(OrderItem item)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更具订单号查询订单详情</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orderId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderItem <span class=\"title\">queryOrderItemsByOrderId</span><span class=\"params\">(String orderId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItemDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderItemDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">saveOrderItem</span><span class=\"params\">(OrderItem item)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"insert into bookorder_item(`name`,`count`,`price`,`totalprice`,`order_id`)values(?,?,?,?,?)\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> update(sql,item.getName(),item.getCount(),item.getPrice(),item.getTotalPrice(),item.getOrderId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderItem <span class=\"title\">queryOrderItemsByOrderId</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"select `name`,`count`,`price`,`totalprice` totalPrice,`order_id` orderId from bookorder_item where order_id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryForOne(OrderItem<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">sql</span>,<span class=\"title\">orderId</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、创建OrderService并实现其中的方法\"><a href=\"#4、创建OrderService并实现其中的方法\" class=\"headerlink\" title=\"4、创建OrderService并实现其中的方法\"></a>4、创建OrderService并实现其中的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cart</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 订单号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createOrder</span><span class=\"params\">(Cart cart,Integer userId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询全部订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">showAllOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发货</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orderId</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendOrder</span><span class=\"params\">(String orderId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看订单详情</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orderId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderItem <span class=\"title\">showOrderDetailById</span><span class=\"params\">(String orderId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户查看订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">showMyOrder</span><span class=\"params\">(Integer userId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 签收订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orderId</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receiverOrder</span><span class=\"params\">(String orderId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderDao orderDao = <span class=\"keyword\">new</span> OrderDaoImpl();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderItemDao orderItemDao = <span class=\"keyword\">new</span> OrderItemDaoImpl();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao = <span class=\"keyword\">new</span> BookDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createOrder</span><span class=\"params\">(Cart cart, Integer userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 订单号唯一</span></span><br><span class=\"line\">        String orderId = System.currentTimeMillis() + <span class=\"string\">\"\"</span> + userId;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个订单对象</span></span><br><span class=\"line\">        Order order = <span class=\"keyword\">new</span> Order(orderId, <span class=\"keyword\">new</span> Date(), cart.getTotalPrice(), <span class=\"number\">0</span>, userId);</span><br><span class=\"line\">        <span class=\"comment\">// 保存 订单到数据库</span></span><br><span class=\"line\">        orderDao.saveOrder(order);</span><br><span class=\"line\">        <span class=\"comment\">// 保存订单项</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建订单项</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历购物车中的每一个商品项转换为订单商品项</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, CartItem&gt; entry : cart.getItems().entrySet()) &#123;</span><br><span class=\"line\">            CartItem cartItem = entry.getValue();</span><br><span class=\"line\">            OrderItem orderItem = <span class=\"keyword\">new</span> OrderItem(<span class=\"keyword\">null</span>, cartItem.getName(), cartItem.getCount(), cartItem.getPrice(), cartItem.getTotalPrice(), orderId);</span><br><span class=\"line\">            orderItemDao.saveOrderItem(orderItem);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 修改图书库存和销量</span></span><br><span class=\"line\">            <span class=\"comment\">// 获取book对象</span></span><br><span class=\"line\">            Book book = bookDao.queryBookById(cartItem.getId());</span><br><span class=\"line\">            book.setSales(book.getSales() + cartItem.getCount());</span><br><span class=\"line\">            book.setStock(book.getStock() - cartItem.getCount());</span><br><span class=\"line\">            bookDao.updateBook(book);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 清空购物车</span></span><br><span class=\"line\">        cart.clear();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">showAllOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderDao.queryOrders();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendOrder</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        orderDao.changeOrderStatus(orderId,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderItem <span class=\"title\">showOrderDetailById</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderItemDao.queryOrderItemsByOrderId(orderId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">showMyOrder</span><span class=\"params\">(Integer userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderDao.queryOrderByUserId(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receiverOrder</span><span class=\"params\">(String orderId)</span> </span>&#123;</span><br><span class=\"line\">        orderDao.changeOrderStatus(orderId,<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、创建OrderServlet并添加相应的功能\"><a href=\"#5、创建OrderServlet并添加相应的功能\" class=\"headerlink\" title=\"5、创建OrderServlet并添加相应的功能\"></a>5、创建OrderServlet并添加相应的功能</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService = <span class=\"keyword\">new</span> OrderServiceImpl();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">createOrder</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取Cart对象</span></span><br><span class=\"line\">        Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取userId</span></span><br><span class=\"line\">        User user = (User) req.getSession().getAttribute(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        Integer userId = user.getId();</span><br><span class=\"line\">        <span class=\"comment\">// 调用orderService</span></span><br><span class=\"line\">        String orderId = orderService.createOrder(cart, userId);</span><br><span class=\"line\">        req.getSession().setAttribute(<span class=\"string\">\"orderId\"</span>,orderId);</span><br><span class=\"line\">        <span class=\"comment\">// 重定向结算成功页面</span></span><br><span class=\"line\">        resp.sendRedirect(req.getContextPath()+<span class=\"string\">\"/pages/cart/checkout.jsp\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询我的订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">showMyOrders</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取userId</span></span><br><span class=\"line\">        User user = (User) req.getSession().getAttribute(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        Integer userId = user.getId();</span><br><span class=\"line\">        <span class=\"comment\">// 得到order对象</span></span><br><span class=\"line\">        List&lt;Order&gt; orders= orderService.showMyOrder(userId);</span><br><span class=\"line\">        <span class=\"comment\">// 保存至request中</span></span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">\"orders\"</span>,orders);</span><br><span class=\"line\">        <span class=\"comment\">// 请求转发到我的订单页面</span></span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">\"/pages/order/order.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看商品详情</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">showOrderDetail</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取orderId</span></span><br><span class=\"line\">        String orderId = req.getParameter(<span class=\"string\">\"orderId\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(orderId);</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建OrderItem对象</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用oderService.showOrderDetailById()</span></span><br><span class=\"line\">        OrderItem orderItem = orderService.showOrderDetailById(orderId);</span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">\"orderItem\"</span>,orderItem);</span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">\"/pages/order/order_detail.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示所有订单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">showAllOrders</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        List&lt;Order&gt; allOrders =  orderService.showAllOrder();</span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">\"allOrders\"</span>,allOrders);</span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">\"/pages/manager/order_manager.jsp\"</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发货</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">sendOrder</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取orderId</span></span><br><span class=\"line\">        String orderId = req.getParameter(<span class=\"string\">\"orderId\"</span>);</span><br><span class=\"line\">        orderService.sendOrder(orderId);</span><br><span class=\"line\">        resp.sendRedirect(req.getContextPath()+<span class=\"string\">\"/orderServlet?action=showAllOrders\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 确认收货</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">receiverOrder</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取orderId</span></span><br><span class=\"line\">        String orderId = req.getParameter(<span class=\"string\">\"orderId\"</span>);</span><br><span class=\"line\">        orderService.receiverOrder(orderId);</span><br><span class=\"line\">        resp.sendRedirect(req.getContextPath()+<span class=\"string\">\"/orderServlet?action=showMyOrders\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、调整jsp页面\"><a href=\"#5、调整jsp页面\" class=\"headerlink\" title=\"5、调整jsp页面\"></a>5、调整jsp页面</h3><p>1.修改购物车页面中去结算的跳转地址<img src=\"/2020/04/08/javaweb-02/45.png\" alt></p>\n<p>2.在order.jsp中显示当前用户的订单信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>日期<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>金额<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>详情<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>确认收货<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty requestScope.orders&#125;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.orders&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"order\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;order.createTime&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;order.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==0&#125;\"</span>&gt;</span>未发货<span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==1&#125;\"</span>&gt;</span>已发货<span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span>已签收<span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"orderServlet?action=showOrderDetail&amp;orderId=$&#123;order.orderId&#125;\"</span>&gt;</span>查看详情<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==0&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>还没有发货哦~<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==1&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"orderServlet?action=receiverOrder&amp;orderId=$&#123;order.orderId&#125;\"</span>&gt;</span>确认收货<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>已经签收了~<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty requestScope.orders&#125;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">\"4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"pages/cart/cart.jsp\"</span>&gt;</span>您暂时没有订单，快去购物车下单吧~<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.在order_detail.jsp中显示订单的详细信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>商品名称<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>数量<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>总价<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>订单号<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;requestScope.orderItem.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;requestScope.orderItem.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;requestScope.orderItem.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;requestScope.orderItem.totalPrice&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;requestScope.orderItem.orderId&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>5.修改首页的后台管理中订单管理的跳转地址<br><img src=\"/2020/04/08/javaweb-02/46.png\" alt></p>\n<p>6.在订单管理中显示所有的订单信息</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>日期<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>金额<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>详情<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>发货<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;not empty requestScope.allOrders&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:forEach</span> <span class=\"attr\">items</span>=<span class=\"string\">\"$&#123;requestScope.allOrders&#125;\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"order\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;order.createTime&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;order.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"orderServlet?action=showOrderDetail&amp;orderId=$&#123;order.orderId&#125;\"</span>&gt;</span>查看详情<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==0&#125;\"</span>&gt;</span>未发货<span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==1&#125;\"</span>&gt;</span>已发货<span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span>已签收<span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==0&#125;\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"orderServlet?action=sendOrder&amp;orderId=$&#123;order.orderId&#125;\"</span>&gt;</span>发货<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;order.status==1&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>已经发货了~<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:when</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">c:otherwise</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span>&gt;</span>已经签收了~<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">c:otherwise</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">c:choose</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty requestScope.allOrders&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">\"5\"</span>&gt;</span>暂时没有订单<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十六、使用Filter实现权限检查\"><a href=\"#十六、使用Filter实现权限检查\" class=\"headerlink\" title=\"十六、使用Filter实现权限检查\"></a>十六、使用Filter实现权限检查</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ManagerFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class=\"line\">        User user = (User) httpServletRequest.getSession().getAttribute(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user.getStatus()!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            httpServletRequest.getRequestDispatcher(<span class=\"string\">\"/pages/user/login.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            chain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>ManagerFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.bookmall.filter.ManagerFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>ManagerFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/pages/manager/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/manager/bookServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十七、使用Filter和TheadLocal组合管理事务\"><a href=\"#十七、使用Filter和TheadLocal组合管理事务\" class=\"headerlink\" title=\"十七、使用Filter和TheadLocal组合管理事务\"></a>十七、使用Filter和TheadLocal组合管理事务</h2><p><img src=\"/2020/04/08/javaweb-02/49.png\" alt></p>\n<p><strong>修改JdbcUtils：</strong><br>创建一个ThreadLocal对象，用于将获取的连接与当前线程关联：<br><img src=\"/2020/04/08/javaweb-02/47.png\" alt><br>修改getConnection()：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Connection conn = conns.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (conn == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = dataSource.getConnection();<span class=\"comment\">// 从数据库连接池中获取连接</span></span><br><span class=\"line\">            conns.set(conn);<span class=\"comment\">// 将连接保存到ThreadLocal对象中，供后面的jdbc操作使用，保证执行事务时是同一个连接</span></span><br><span class=\"line\">            conn.setAutoCommit(<span class=\"keyword\">false</span>);<span class=\"comment\">// 设置为不自动提交事务</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加提交并关闭连接的方法以及回滚并关闭连接的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提交事务并关闭连接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">commitAndClose</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Connection conn = conns.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn.commit();<span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                conn.close();<span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移除线程</span></span><br><span class=\"line\">    conns.remove(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回滚事务并关闭连接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rollbackAndClose</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Connection conn = conns.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(conn !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                conn.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改BaseDao,BaseServlet：</strong><br>1、将所有方法中的关闭连接操作删除，用于保证所用操作都使用同一个连接；<br>2、在每个方法中都添加抛出异常的语句，提供给执行相应操作的Servlet程序捕获，用于回滚。<br> <strong>使用Filter过滤器为所用的Service方法添加try-catch:</strong><br><img src=\"/2020/04/08/javaweb-02/48.png\" alt></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bookmall.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            chain.doFilter(request,response);</span><br><span class=\"line\">            <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">            JdbcUtils.commitAndClose();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 回滚事务</span></span><br><span class=\"line\">            JdbcUtils.rollbackAndClose();</span><br><span class=\"line\">            <span class=\"comment\">// 将异常抛给服务器</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>TransactionFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.bookmall.filter.TransactionFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>TransactionFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  当前工程下的所有请求 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>将所有异常同一交给Tomcat，让Tomcat展示友好的错误信息页面：</strong><br>配置web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置服务器出错后，自动跳转的页面--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error-page</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--   错误类型--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error-code</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">error-code</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  要跳转去的页面路径--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">location</span>&gt;</span>/pages/error/error404.jsp<span class=\"tag\">&lt;/<span class=\"name\">location</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">error-page</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error-page</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error-code</span>&gt;</span>500<span class=\"tag\">&lt;/<span class=\"name\">error-code</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">location</span>&gt;</span>/pages/error/error500.jsp<span class=\"tag\">&lt;/<span class=\"name\">location</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十八、使用Ajax判断用户名是否可用\"><a href=\"#十八、使用Ajax判断用户名是否可用\" class=\"headerlink\" title=\"十八、使用Ajax判断用户名是否可用\"></a>十八、使用Ajax判断用户名是否可用</h2><p><img src=\"/2020/04/08/javaweb-02/50.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给用户名输入框绑定失去焦点事件</span></span><br><span class=\"line\">$(<span class=\"string\">\"#username\"</span>).blur(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    $.getJSON(</span><br><span class=\"line\">        <span class=\"string\">\"$&#123;pageScope.basePath&#125;userServlet\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"action=ajaxExistUsername&amp;username=\"</span> + username,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.existUsername) &#123;</span><br><span class=\"line\">                $(<span class=\"string\">\"span.errorMsg\"</span>).css(&#123;<span class=\"attr\">color</span>:<span class=\"string\">\"#dd0000\"</span>&#125;);</span><br><span class=\"line\">                $(<span class=\"string\">\"span.errorMsg\"</span>).text(<span class=\"string\">\"用户名已存在！\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $(<span class=\"string\">\"span.errorMsg\"</span>).css(&#123;<span class=\"attr\">color</span>:<span class=\"string\">\"#00dd00\"</span>&#125;);</span><br><span class=\"line\">                $(<span class=\"string\">\"span.errorMsg\"</span>).text(<span class=\"string\">\"用户名可用~\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在UserServlet中添加ajaxExisUsername()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证用户名是否已经注册</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">ajaxExistUsername</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取请求参数</span></span><br><span class=\"line\">    String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用userService</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> existUsername = userService.existUsername(username);</span><br><span class=\"line\">    <span class=\"comment\">// 把返回的结果封装成Map对象</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; resultMap = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">    resultMap.put(<span class=\"string\">\"existUsername\"</span>,existUsername);</span><br><span class=\"line\">    <span class=\"comment\">// 将Map对象转换为json字符串</span></span><br><span class=\"line\">    Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    String json = gson.toJson(resultMap);</span><br><span class=\"line\">    resp.getWriter().write(json);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十九、使用Ajax修改把商品添加到购物车\"><a href=\"#十九、使用Ajax修改把商品添加到购物车\" class=\"headerlink\" title=\"十九、使用Ajax修改把商品添加到购物车\"></a>十九、使用Ajax修改把商品添加到购物车</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用Ajax添加图书到购物车</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> req</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> resp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">ajaxAddItem</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(\"加入购物车\");</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取请求参数  商品编号</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = WebUtils.parseInt(req.getParameter(<span class=\"string\">\"id\"</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用bookService.queryBookById(id) 得到图书信息</span></span><br><span class=\"line\">    Book book = bookService.queryBookById(id);</span><br><span class=\"line\">    <span class=\"comment\">// 将图书信息转换为CartItem商品项</span></span><br><span class=\"line\">    CartItem cartItem = <span class=\"keyword\">new</span> CartItem(book.getId(),book.getName(),<span class=\"number\">1</span>,book.getPrice(),book.getPrice());</span><br><span class=\"line\">    <span class=\"comment\">// 调用cart.add(CartItem)添加至购物车</span></span><br><span class=\"line\">    Cart cart = (Cart) req.getSession().getAttribute(<span class=\"string\">\"cart\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cart == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cart = <span class=\"keyword\">new</span> Cart();</span><br><span class=\"line\">        req.getSession().setAttribute(<span class=\"string\">\"cart\"</span>,cart);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cart.addItem(cartItem);</span><br><span class=\"line\">    <span class=\"comment\">// 将添加的商品添加到session域中</span></span><br><span class=\"line\">    req.getSession().setAttribute(<span class=\"string\">\"itemName\"</span>,cartItem.getName());</span><br><span class=\"line\">    <span class=\"comment\">// 将需要在页面刷新的信息封装到Map中</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; resultMap = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 购物车中总的商品数量</span></span><br><span class=\"line\">    resultMap.put(<span class=\"string\">\"totalCount\"</span>,cart.getTotalCount());</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个添加到购物车的商品名称</span></span><br><span class=\"line\">    resultMap.put(<span class=\"string\">\"lastName\"</span>,cartItem.getName());</span><br><span class=\"line\">    <span class=\"comment\">// 将Map转换为json字符串</span></span><br><span class=\"line\">    Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    String json = gson.toJson(resultMap);</span><br><span class=\"line\">    <span class=\"comment\">// 回传给客户端</span></span><br><span class=\"line\">    resp.getWriter().write(json);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bookid = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"bookid\"</span>);<span class=\"comment\">// 获取选中元素的属性值</span></span><br><span class=\"line\"><span class=\"comment\">// location.href=\"$&#123;pageScope.basePath&#125;cartServlet?action=addItem&amp;id=\"+bookid;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用ajax发送请求</span></span><br><span class=\"line\">$.getJSON(</span><br><span class=\"line\">    <span class=\"string\">\"$&#123;pageScope.basePath&#125;cartServlet\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"action=ajaxAddItem&amp;id=\"</span> + bookid,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\"#cartTotalCount\"</span>).text(data.totalCount);</span><br><span class=\"line\">        $(<span class=\"string\">\"#cartlastName\"</span>).text(data.lastName);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>您的购物车中有<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cartTotalCount\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>$&#123;sessionScope.cart.totalCount&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>件商品<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    您刚刚将<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cartlastName\"</span><span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>$&#123;sessionScope.itemName&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>加入到了购物车中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java项目"],"tags":["JavaWeb"]}]